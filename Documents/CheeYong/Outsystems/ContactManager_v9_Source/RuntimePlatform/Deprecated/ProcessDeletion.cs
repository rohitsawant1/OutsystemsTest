/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;

// ReSharper disable once CheckNamespace
namespace OutSystems.HubEdition.RuntimePlatform.RuntimePublic {
    /// <summary>
    /// CLass to perform the deletion of processes.
    /// </summary>
    [Obsolete("Use OutSystems.RuntimePublic.ProcessDeletion class to access process deletion API.")]
    public class ProcessDeletion {
        public class ProcessDeletionException : Exception {
            protected ProcessDeletionException(string msg) : base(msg) { }
        }

        public class ProcessNotFoundException: ProcessDeletionException {
            public ProcessNotFoundException() : base(new OutSystems.RuntimePublic.Processes.ProcessDeletion.ProcessNotFoundException().Message) {}
        }

        public class ProcessNotTopLevelException: ProcessDeletionException {
            public ProcessNotTopLevelException() : base(new OutSystems.RuntimePublic.Processes.ProcessDeletion.ProcessNotTopLevelException().Message) {}
        }

        public class InvalidProcessStatusException: ProcessDeletionException {
            public InvalidProcessStatusException()
                : base(new OutSystems.RuntimePublic.Processes.ProcessDeletion.InvalidProcessStatusException().Message) {}
        }

        public class InvalidBulkSizeLimitException: ProcessDeletionException {
            public InvalidBulkSizeLimitException()
                : base(new OutSystems.RuntimePublic.Processes.ProcessDeletion.InvalidBulkSizeLimitException().Message) {}
        }

        private readonly OutSystems.RuntimePublic.Processes.ProcessDeletion processDeletion;

        public ProcessDeletion(int processId) {
            processDeletion = new OutSystems.RuntimePublic.Processes.ProcessDeletion(processId);
        }

        public ProcessDeletion(DateTime olderThan): this(olderThan, null, null) {}

        public ProcessDeletion(DateTime olderThan, int? bulkSizeLimit): this(olderThan, bulkSizeLimit, null)  {}

        public ProcessDeletion(DateTime olderThan, int? bulkSizeLimit, int? processDefinitionId) {
            try {
                processDeletion = new OutSystems.RuntimePublic.Processes.ProcessDeletion(olderThan, bulkSizeLimit, processDefinitionId);
            } catch (OutSystems.RuntimePublic.Processes.ProcessDeletion.InvalidBulkSizeLimitException) {
                throw new InvalidBulkSizeLimitException();
            }
        }

        /// <summary>
        /// Deletes all the logged information of the instances of Processes that fit the criteria specified in the constructor.
        /// The information that is deleted is all the logging of: process instances, activities instances, input parameters values, output parameters values, processes instances executed within other process instances, etc.
        /// </summary>
        /// <returns>True if the operation deleted all the processes that fit the criteria.</returns>
        public bool DeleteProcesses() {
            try {
                return processDeletion.DeleteProcesses();
            } catch (OutSystems.RuntimePublic.Processes.ProcessDeletion.ProcessNotFoundException) {
                throw new ProcessNotFoundException();
            } catch (OutSystems.RuntimePublic.Processes.ProcessDeletion.ProcessNotTopLevelException) {
                throw new ProcessNotTopLevelException();
            } catch (OutSystems.RuntimePublic.Processes.ProcessDeletion.InvalidProcessStatusException) {
                throw new InvalidProcessStatusException();
            }
        }

        /// <summary>
        /// Determines whether there are processes to delete.
        /// </summary>
        /// <returns><c>true</c> if there are processes to delete, <c>false</c> otherwise.</returns>
        public bool HasProcessesToDelete() {
            return processDeletion.HasProcessesToDelete();
        }
    }
}
