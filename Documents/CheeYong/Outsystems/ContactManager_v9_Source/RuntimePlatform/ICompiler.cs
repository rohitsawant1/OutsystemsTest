/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition {

    [Obsolete]
    public enum ApplicationServerKind { IIS, Unknown }

    public enum ApplicationServerStack { Unknown, Net }

    public enum DeployPhase {
        Espace_Publish,

        Solution_ImpactAnalysis,
        Solution_UpdateMetamodel,
        Solution_CompileOmlWithEmptyProxies,
        Solution_CompileOmlProxies,
        Solution_UpdateSchema_Phase1,
        Solution_UpdateSchema_Phase2,
    };

    [DoNotObfuscateType]
    public interface ICompiler {

        HEMessage SubscribeNode(bool activate, string strHostName, string ip_Addr, byte[] hash, bool is32Bit, string machineSerial);
        HEMessage SubscribeNode(bool activate, string strHostName, byte[] hash, bool is32Bit, string machineSerial);
        HEMessage UnSubscribeNode(string strHostName);
        HEMessageArrayList GetCompilerResult(ICompilerContext context, string componentName, int componentId, bool isExtension, string testAreaName, int timeout, out bool finished);
        HEMessageArrayList ImpactAnalysis(ICompilerContext context, byte[] ssOML, string espaceName, int espaceVersionId, string username);
        HEMessageArrayList ImpactAnalysisAsync(ICompilerContext context, byte[] ssOML, string eSpaceName, int eSpaceVersionId, string uniqueId, string username);

        HEMessageArrayList UpdateEspaceMetamodel(ICompilerContext ctx, Guid operationId, string eSpaceName, int eSpaceVersionId, bool skipConsistencyMessages, bool forceNewTables, string uniqueId,
            string username);

        HEMessageArrayList CompileOmlWithEmptyProxies(ICompilerContext ctx, Guid operationId, string eSpaceName, int eSpaceVersionId, ICompilerReference[] producers, bool withoutImpactAnalysis,
            string uniqueId, string username, bool forceFirstLoad, bool allowSkipCompilation);

        HEMessageArrayList CompileOmlProxies(ICompilerContext ctx, Guid operationId, string eSpaceName, int eSpaceVersionId, ICompilerReference[] producers, string uniqueId, string username);

        HEMessageArrayList CompileOmlImpactAnalysisOnlyWithScripts(ICompilerContext ctx, Guid operationId, string eSpaceName, int eSpaceVersionId, ICompilerReference[] producers, string uniqueId,
            string username);

        HEMessageArrayList PullEspaceProducers(ICompilerContext context, Guid operationId, string eSpaceName, int eSpaceVersionId, ICompilerReference[] producers, string uniqueId, string username);

        HEMessageArrayList CompileOmlAsync(ICompilerContext context, Guid operationId, byte[] oml, bool debugMode, ObjectKey applicationKey, string eSpaceName, int eSpaceVersionId, string userName,
            bool forceDontReuseTables, string uniqueId);

        HEMessageArrayList CompileOmlAsync(ICompilerContext context, Guid operationId, byte[] oml, bool debugMode, ObjectKey applicationKey, string eSpaceName, int eSpaceVersionId, string userName,
            bool forceDontReuseTables, string uniqueId, Dictionary<string, string> settingsOverride);

        HEMessageArrayList CompileOml(ICompilerContext context, Guid operationId, bool debugMode, ObjectKey applicationKey, string eSpaceName, int eSpaceVersionId, string username, string uniqueId);

        HEMessageArrayList CompileOml(ICompilerContext context, Guid operationId, byte[] oml, bool debugMode, ObjectKey applicationKey, string eSpaceName, int eSpaceVersionId, string username,
            bool forceNewTables, string uniqueId);

        HEMessageArrayList CompileOml(ICompilerContext context, Guid operationId, byte[] oml, bool debugMode, ObjectKey applicationKey, string eSpaceName, int eSpaceVersionId, string username,
            bool forceNewTables, string uniqueId, Dictionary<string, string> settingsOverride);

        HEMessageArrayList CompileOmlPartial(ICompilerContext context, Guid operationId, byte[] oml, bool debugMode, ObjectKey applicationKey, string eSpaceName, int eSpaceVersionId, string username,
            string uniqueId);

        bool CanUseExistingPartialOml(ICompilerContext context, string espaceName, string testAreaName, string uniqueId);

        ICompilerPrepareDeployResponse PrepareDeployEspace(ICompilerContext context, Guid operationId, string eSpaceName, ObjectKey eSpaceKey, int versionId, string userName, bool partial,
            ICompilerReference[] deployPack, string uniqueId, ICompilerApplication application = null);

        bool DeployFinalizeDeployEspaceSolution(ICompilerContext context, Guid operationId, string espaceName, string previousEspaceName, ObjectKey espaceKey, string username, string uniqueId,
            string deploymentId, ICompilerApplication application, int eSpaceVersionId, int userId, ObjectKey userProviderKey, bool inDebugMode, int catalogId);
        
        HEMessageArrayList PrepareEspaceCompilationWorkspace(ICompilerContext context, string eSpaceName, int versionId, string uniqueId);

        HEMessageArrayList DeleteEspaceCompilationWorkspace(ICompilerContext context, string eSpaceName, string uniqueId);

        HEMessageArrayList DeployEspaceUpdateDB(ICompilerContext context, Guid operationId, string eSpaceName, int eSpaceVersionId, string uniqueId, string username, DeployPhase phase);

        HEMessageArrayList SolutionUpdateDBSecondStage(ICompilerContext context, Guid operationId, ICompilerReference[] modules, IDictionary<int, string> deploymentDetails,
            string uniqueId, string username, bool continueOnError, IEnumerable<ICompilerApplication> applications);

        void DeployPrepareDeployEspace(ICompilerContext context, Guid operationId, string espaceName, ObjectKey eSpaceKey, int espaceVersionId, string username,
            string uniqueId, bool isPartial, out string deploymentId, ICompilerApplication application = null);

        HEMessageArrayList DeployEspaceIntoPTA(ICompilerContext context, Guid operationId, string espaceName, ObjectKey eSpaceKey, string username, string uniqueId);

        ICompilerBoolOutput DeployEspaceHasUpdateDBScripts(ICompilerContext context, string eSpaceName, DeployPhase phase, string uniqueId);

        IEnumerable<ICompilerReferenceElement> GetBrokenReferences(ICompilerContext context, ObjectKey producerKey, string producerKind, byte[] ssProducerSignature, byte[] ssReferencedProducerSignature, IEnumerable<ICompilerReferenceElement> referenceElementsToCheck);

        /// <summary>
        /// Reference compatibility algorithm that compares two producer signatures.
        /// Doesn't have information about usage, so it shoud only be used for backward compatibility scenarios (i.e. LifeTime).
        /// </summary>
        IEnumerable<ICompilerReferenceElement> CheckReferenceStatusWithSignatures(ICompilerContext context, ObjectKey producerKey, string producerKind, Version producerLastUpgradeVersion, byte[] producerSignature, byte[] referencedProducerSignature, IEnumerable<ICompilerReferenceElement> referenceElementsToCheck);

        IEnumerable<ICompilerIncompatibleModule> CheckReferenceStatus(ICompilerContext context, byte[] consumerEspace, IEnumerable<ICompilerProducerSignature> compilerProducerSignatures);

        HEMessageArrayList CheckConsumerReferences(ICompilerContext context, Guid operationId, int producerVersionId, string producerKey, string producerKind);
        
        HEMessageArrayList CheckConsumerReferencesAndUpdateRuntime(ICompilerContext context, Guid operationId, int producerVersionId, string producerKey, string producerKind);
        HEMessageArrayList DeployAbort(ICompilerContext context, string eSpaceName, string userName, string operationId, string uniqueId, string deploymentId);
        ICompilerIntOutput CreateTenant(ICompilerContext context, string eSpaceName, string tenantName, string username);
        ICompilerIntOutput CreateTenant(ICompilerContext context, Guid operationId, string eSpaceName, string tenantName, string username);
        HEMessageArrayList UpdateTenantViews(ICompilerContext context, int espaceId, int tenantId);
        
        [Obsolete("Deprecated on 11.0.0.0 used for backward compatibility during upgrades")]
        HEMessageArrayList TenantInvalidateCache(ICompilerContext context, int tenantId);

        [Obsolete("Deprecated on 7.0.0.0 used for backward compatibility during upgrades")]
        HEMessageArrayList EspaceInvalidateCache(ICompilerContext context, int espaceId);

        [Obsolete("Deprecated on 11.0.0.0 used for backward compatibility during upgrades")]
        HEMessageArrayList EspaceInvalidateCache(ICompilerContext context, int espaceId, int tenantId);

        void BPMEventTableCleanUp(ICompilerContext context, string tableName, int eSpaceId);
        void BPMCleanUpActivitiesOlderThan(ICompilerContext context, DateTime limitDate);
        ICompilerBoolOutput DeleteEventFromEventTable(ICompilerContext context, string tableName, int processId, int eSpaceId);
        ICompilerRecordsMetadataList GetRecordsMetadata(ICompilerContext context, string ssentityGUID, string ssespaceGUID);
        ICompilerEntityDataResult GetEntityData(ICompilerContext context, string ssEntityGUID, string ssEspaceGUID, out string ssErrorText);

        [Obsolete("Deprecated on 11.0.0.0 used for backward compatibility during upgrades")]
        HEMessageArrayList InvalidatePhysNbrCache(ICompilerContext context, string physicalNbr);
        ICompilerByteArrayOutput GetDBUpgradeScript(ICompilerContext context, string espaceName, string userName, string uniqueId);
        ICompilerBoolOutput CheckMatchingTables(ICompilerContext context, Guid operationId, string eSpaceName, int eSpaceVersion, string uniqueId, string username);
        HEMessageArrayList CheckMatchingTablesAsync(ICompilerContext context, Guid operationId, string eSpaceName, int eSpaceVersion, string uniqueId, string username);
        HEMessageArrayList VerifyOmlInServiceStudioAsync(ICompilerContext context, string espaceName, int espaceVersionId, byte[] eSpaceOML, int userId, bool refreshReferences);
        HEMessageArrayList VerifyXifInIntegrationStudioAsync(ICompilerContext context, string extensionName, int extensionVersionId, byte[] extensionXIF, int developerId);
        ICompilerEspaceFilesOutput GetEspaceFiles(ICompilerContext context, string espaceName, DateTime timeStamp, string testAreaName, string uniqueId, bool fromCompilerService);
        HEMessageArrayList PushProducer(ICompilerContext context, Guid operationId, string producerName, string consumerName, string testAreaName, string uniqueId);
        HEMessageArrayList CleanCodeCompileOml(ICompilerContext ctx, Guid operationId, string eSpaceName, int eSpaceVersionId, ICompilerReference[] producers, string uniqueId, string username);
        HEMessageArrayList CleanCodePackOml(ICompilerContext context, Guid operationId, string eSpaceName, string uniqueId, string username);
        ICompilerByteArrayOutput CleanCodeGetOmlPack(ICompilerContext context, Guid operationId, string eSpaceName, string uniqueId);
        UploadExtensionOutput UploadExtension(ICompilerContext context, byte[] xif, bool smashRunningVersion, int developerId, string commitMessage);
        PublishExtensionOutput PublishExtension(ICompilerContext context, int extensionVersionId, int developerId, bool switchPublishedVersion, bool fromSolutionPublish);
        PublishExtensionOutput PublishExtension_SwitchPublishedVersion(ICompilerContext context, int extensionVersionId, int developerId, bool fromSolutionPublish);
        GenerateExtensionStubsOutput GenerateExtensionStubs(ICompilerContext context, byte[] xif);
        ExtensibilityDependenciesOutput GetExtensibilityDependencies(ICompilerContext context);
        void RefreshPathRules(ICompilerContext context);
        HEMessageArrayList RefreshISAPIState(ICompilerContext context, string command);

        bool SyncSandboxes();

        ICompilerTestQueryOutput TestQuery(ICompilerContext ctx, Guid operationId, byte[] oml, int espaceId, string espaceName, int tenantId, string queryCompoundKey, int maxRecords);

        ICompilerTestActionOutput TestAction(ICompilerContext context, string eSpaceName, string ptaName, string action, string[] parameters);
        ICompilerCatalogTestOutput DBCatalogTestConnection(ICompilerContext context, string CatalogName, string RuntimeUser, string CatalogAdminUser, string CatalogAdminPassword, string Tablespace);
        string DBCatalogGetRuntimeLogin(ICompilerContext context);
        string CatalogCleanup(ICompilerContext context, string CatalogName, string RuntimeUser, string tableName, int lastIndex, string CatalogAdminUser, string CatalogAdminPassword);
        ICompilerVersionOutput GetIntegrationStudioVersion(ICompilerContext context);
        ICompilerVersionOutput GetServiceStudioVersion(ICompilerContext context);
        Version GetControllerBinariesVersion(ICompilerContext context);
        CompilerPoolFilesOutput GetFilesFromPool(ICompilerContext context, PoolFile[] files);
        void SetEspacePendingVersion(ICompilerContext context, string eSpaceKey, int pendingVersionId, string pendingName);
        void ChangeEspaceName(ICompilerContext context, string eSpaceKey, string newName);
        int CreateNewESpace(ICompilerContext context, string name, bool isMultiTenant, string eSpaceKey, string runtimeKind);
        void UpdateUserProvider(ICompilerContext context, int eSpaceId, bool isUserProvider, string userProviderKey, string userProviderName);
        DeleteModuleOutput DeleteModule(ICompilerContext context, Guid operationId, int moduleId, bool isEspace);
        string ProbeSecretKey(string cipheredNumber);

        IEnumerable<IntegrationPluginInfo> GetAvailableIntegrations(ICompilerContext context);

        void DropInactiveEntitiesForeignKeys(ICompilerContext context, int espaceId);
        void DropEntityTable(ICompilerContext context, int entityId);
        void DropAttributeColumn(ICompilerContext context, int attributeId);

        ICompilerByteArrayOutput GetApplicationResourcesZip(ICompilerContext context, string applicationKey, string eSpaceKey);
        ICompilerByteArrayOutput GetApplicationInfoZip(ICompilerContext context, string applicationKey, string eSpaceKey);

        ICompilerByteArrayOutput GetEspaceResource(ICompilerContext context, int EspaceVersionId, string resourceName);

        byte[] GetModuleSignature(byte[] moduleBinary);

        HEMessageArrayList PublishOmlAsync(ICompilerContext context, Guid operationId, byte[] oml, int eSpaceId, int eSpaceVersionId, int eSpaceVersionNumber, int catalogId, string eSpaceKey,
            string eSpaceName, string applicationKey, string applicationName, string applicationNativeHash, bool applicationNativeHashChanged, string userProviderKey, bool abortOnNewBrokenReferences,
            List<string> lastCheckedBrokenReferences, string fromUsername, int fromUserId, int lastServerVersionId, bool is1CPFromSS, bool forceReuseTables, bool nativeBuildsEnabled, 
            Dictionary<string, string> compilerSettingsOverride, string auditMessage);

        ICompilerQueuedNativeBuildResult QueueNativeBuild(ICompilerContext context, Guid operationId, long appMobileConfigId, int mobilePlatformId, int requesterUserId, string nativeHash,
            int? solutionPublishPlanId, bool nativeBuildsEnabled, List<int> unavailableMobilePlatformsIds);

        ICompilerQueuedNativeBuildsResult UpdateMobileAppConfigs(ICompilerContext context, Guid operationId, string applicationKey, string nativeHash, bool nativeHashChanged, int? solutionPublishPlanId,
            int requesterUserId, bool launchNativeBuildsIfNecessary, bool nativeBuildsEnabled, List<int> unavailableMobilePlatformsIds);

        HEMessageArrayList RedeployEspace(ICompilerContext context, Guid operationId, int eSpaceId, int eSpaceVersionId, int eSpaceVersionNumber, string eSpaceKey, string eSpaceName, ObjectKey applicationKey, 
            string applicationName, string fromUsername);

        bool DeploymentTechnology_PluginHasCapability(ICompilerContext context, Guid deploymentTechnologyKey, string capability);

        bool DeploymentTechnology_PluginConfigurationIsValid(ICompilerContext context, ICompilerDeploymentZone zone, out HEMessageArrayList messages);

        ICompilerDeploymentZoneList DeploymentZone_GetAll(ICompilerContext context, string nameOrDescriptionSubstring);

        ICompilerDeploymentZone DeploymentZone_Get(ICompilerContext context, Guid deploymentConfigurationKey);

        CreateOrUpdateDeploymentZoneOutput DeploymentZone_CreateOrUpdate(ICompilerContext context, Guid operationId, ICompilerDeploymentZone zone);

        ICompilerBoolOutput DeploymentZone_Delete(ICompilerContext context, Guid deploymentZoneKey);

        ICompilerModuleList DeploymentZone_GetModules(ICompilerContext context, Guid deploymentZoneKey);

        ICompilerDeploymentZoneList DeploymentZone_GetAllForServer(ICompilerContext context, int serverId);

        ICompilerBoolOutput Application_SetDeploymentZone(ICompilerContext context, ObjectKey applicationKey, Guid deploymentZoneKey);

        ICompilerBoolOutput Module_SetDeploymentZone(ICompilerContext context, ObjectKey moduleKey, Guid deploymentZoneKey);

        bool Module_IsCapabilityAvailable(ICompilerContext context, ObjectKey moduleKey, string capability, out bool currentZoneSupports, out string currentZoneName);
        bool Application_IsCapabilityAvailable(ICompilerContext context, ObjectKey applicationKey, string capability, out bool currentZoneSupports, out string currentZoneName);

        ICompilerDeploymentZoneList Application_GetDeploymentZone(ICompilerContext context, ObjectKey applicationKey);

        ICompilerDeploymentZone Module_GetDeploymentZone(ICompilerContext context, ObjectKey moduleKey);

        ICompilerDeploymentTechnologyList DeploymentTechnology_GetAll(ICompilerContext context);

        ICompilerDeploymentTechnology DeploymentTechnology_Get(ICompilerContext context, Guid deploymentTechnologyKey);

        ICompilerBoolOutput DeploymentZone_SetAsDefault(ICompilerContext context, Guid deploymentZoneKey);

        ICompilerDeploymentZone DeploymentZone_GetDefault(ICompilerContext context);

        int StartApplyConfigurationsForModules(ICompilerContext context, IEnumerable<ObjectKey> moduleKeys, bool forbidConsumersPropagation, int userId);

        int StartApplyConfigurationsForApplication(ICompilerContext context, ObjectKey applicationKey, bool forbidConsumersPropagation, int userId);

        int StartApplyConfigurationsForEnvironment(ICompilerContext context, int userId);
        bool ApplyConfigurationsForEnvironment(ICompilerContext context, int userId, out HEMessageArrayList msgs);
        bool GetDebugModeValue(ICompilerContext context);
        void SetDebugModeValue(ICompilerContext context, bool value);
        bool IsServerCapabilityAvailable(ICompilerContext context, string capabilityName, out string reason);

        void MarkApplicationAsChanged(ICompilerContext context, int espaceVersionId, int previousEspaceVersionId, string applicationKey);

        void UpdateReferencesMetaModel(ICompilerContext context, int espaceId, string espaceKey, string userProviderKey);

        bool ActivationRefreshLicensedFeatures(ICompilerContext context, bool skipComplexityCheck, out HEMessageArrayList messages);

        bool RefreshISAPIFilters(ICompilerContext context);

        void DeleteModuleLinksToFrontend(ICompilerContext context, string frontendName);

        HEMessageArrayList SCInstall_DeployModule(ICompilerContext context, Guid operationId, int userId, byte[] oml, int moduleId, int moduleVersionid, int moduleVersionNumber, ObjectKey userProviderKey, int? catalogId, ICompilerApplication application);

        HEMessageArrayList ReloadEspace(ICompilerContext context, string eSpaceKey, string eSpaceName);

        bool IsFeatureEnabled(string featureName);

        IUserSecurityGrants GetUserSecurityGrants(ICompilerContext context, int userId);

        void AddEventWatcher(ICompilerContext context, string espaceKey, string eventType, string relativeUrl, string uniqueId);

        void RemoveEventWatcher(ICompilerContext context, string espaceKey, string eventType);

        void RaiseEventEspacePublish(ICompilerContext context, Guid operationId, ObjectKey espaceKey, string espaceName, int espaceVersionId, int previousEspaceVersionId);

        bool ValidateEventMessage(ICompilerContext context, string url, string authorizationHeader, string dateHeader, string listenerUniqueId, out HEMessage message);

        void CompareEspaceToServerVersion(ICompilerContext context,
            bool isCatalogIdNeeded, bool isConflictCheckNeeded, bool areFragmentsNeeded,
            int userId, ObjectKey espaceKey, int lastSolvedConflictVersion,
            string versionGeneralHash, byte[] espaceVersionHistory,
            out int dbCatalogId,
            out int versionComparisonResultId, out int lastServerVersion, out string uploadUsername, out DateTime uploadDate,
            out string fragments);

        List<EntityDbProvider> GetEntitiesDBProviderKeys(ICompilerContext context, ObjectKey eSpaceKey);

        IEnumerable<ICompilerDBCatalog> GetDBCatalogsForDeveloper(ICompilerContext context, int userId, string nameFilter);

        void GetNeededNativeBuilds(ICompilerContext context,
            Guid operationId,
            int userId,
            ObjectKey applicationKey,
            bool launchNativeBuildsIfNecessary,
            int solutionPublishPlanId,
            MobilePlatformDetails[] targetPlatforms,
            out int[] queuedNativeBuilds,
            out string[] appsToGenerateButServiceDown,
            out string[]  appsToGenerateButServiceOff,
            out string nativeHash);

        void InvalidateEspaceCompilerCache(ICompilerContext compilerContext, ObjectKey objectKey);

        IEnumerable<string> GetPossibleServiceCenterAddresses(ICompilerContext context);

        void UpdateEspaceCache(ICompilerContext context, string espaceKey);
        void UpdateEspaceOldProducers(ICompilerContext context, int espaceId);
        void UpdateEspaceOutdatedReferences(ICompilerContext context, int espaceId);
        bool RemoveEspace(ICompilerContext context, Guid operationId, int moduleId, int userId, out HEMessage msg);
        int CheckUserPermissionsForEspace(ICompilerContext context, int userId, int? espaceId, bool isRunningBootstrap);
        int CheckUserPermissionsForExtension(ICompilerContext context, int userId, int? extensionId, bool isRunningBootstrap);
        int CheckUserPermissionsForApplication(ICompilerContext context, int userId, string applicationKey, bool isRunningBootstrap);
        void AssociateEspaceDependencies(ICompilerContext context, int userId, int espaceId, byte[] oml, out HEMessageArrayList messages);
    }

    [Serializable]
    public class EntityDbProvider {
        public string EntityKey;
        public string DatabaseProviderKey;
    }


    [Serializable]
    public class PoolFile {
        public byte[] CompressedContents;
        public string Name;
        public Guid Version;
        public string RelativePath;

        public override string ToString() {
            return $"{RelativePath} ({Version}){(CompressedContents == null ? "" : " [" + CompressedContents.Length + " bytes]")}";
        }
    }

    //ICompler output class to receive versions informationof IS and SS 
    [Serializable]
    public class ICompilerVersionOutput {
        public string version;
        public string lastUpgradeVersion;
        public string error;
    }

    [Serializable]
    public class ICompilerCatalogTestOutput {
        public string errorMessage;
        public string tableName;
        public int lastIndex;
    }

    // ICompiler output class to receive HEMessageArrayList and byte[]
    [Serializable]
    public class ICompilerTestActionOutput {
        public string Return;
        public string OutResult;
        public string OutException;
    }

    [Serializable]
    public class ICompilerTestQueryOutput {
        public string ResultCode;
        public string QueryResult;
        public string ErrorText;
        public string ExecutedSQL;
        public string AdvancedSQL;
    }

    // ICompiler output class to receive HEMessageArrayList and byte[]
    [Serializable]
    public class ICompilerBoolOutput {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public bool BoolValue;
    }

    // ICompiler output class to receive HEMessageArrayList and byte[]
    [Serializable]
    public class ICompilerByteArrayOutput {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public byte[] ByteArrayValue;
    }

    // ICompiler output class to receive HEMessageArrayList and int
    [Serializable]
    public class ICompilerIntOutput {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public int IntValue;
    }

    [Serializable]
    public class ICompilerGuidOutput {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public Guid GuidValue;
    }

    // ICompiler output class to receive espace files output
    [Serializable]
    public class ICompilerEspaceFilesOutput {
        public byte[] ZipContents;
        public DateTime ZipTimestamp;
        public PoolFile[] SharedFiles;
        public Dictionary<string, string> ModuleConfigurations;
    }

    [Serializable]
    public class ICompilerDeployResponse {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public bool FailedAllServers;
    }

    [Serializable]
    public class ICompilerPrepareDeployResponse {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public string DeploymentId;
    }

    [Serializable]
    public class ICompilerDeployStartApplicationResponse {
        public HEMessageArrayList HEMessage = new HEMessageArrayList();
        public bool FailedAllServers;
    }

    [Serializable]
    public class ICompilerActivationResponse {
        public string Answer;
        public HEMessage Message;
        public string HMAC;
    }

    [Serializable]
    public class ICompilerReference {
        public string Name;
        public ObjectKey Key;
        // "eSpace" or "Extension"
        public string Kind;
        public int VersionId;
        public int ComponentId;
    }

    [Serializable]
    public class ICompilerReferenceElement {
        public ObjectKey OriginalKey;
        // Database value from ReferenceElementKind enum
        public string Kind;

        public override string ToString() {
            return "{0} ({1})".F(OriginalKey.ToString(), Kind);
        }
    }

    [Serializable]
    public class ICompilerIncompatibleModule {
        public string ModuleName;
        public ObjectKey ModuleKey;
        public string ModuleKind;
        public List<ICompilerIncompatibleElement> IncompatibleElements;
        public bool ModuleIsMissing;
    }

    [Serializable]
    public class ICompilerIncompatibleElement {
        public string ElementName;
        public ObjectKey ElementKey;

        // Database value from ReferenceElementKind enum
        public string ElementKind;
        public ElementStatus Status;

        public override string ToString() {
            return "{0} {1} {2} ({3})".F(Status.ToString(), ElementKind, ElementName, ElementKey.ToString());
        }
    }

    public enum ElementStatus {
        Compatible,
        Incompatible,
        Missing,
    }


    [Serializable]
    public class ICompilerProducerSignature {
        public ObjectKey ProducerKey;
        public string ProducerKind;
        public string ProducerName;
        public byte[] ProducerSignature;
    }

    [Serializable]
    public class ICompilerResult {
        public string Key;
        public string Name;
        public int VersionId;
        public string HubServerVersion;
        public string LastUpgradeVersion;
        public long CompilerTimestamp;
        public string ThirdPartyLibsTimestamps;
    }

    [Serializable]
    public class ICompilerContext {
        public bool SandboxMode;
        public string SandboxKey;

        public ICompilerContext() {
        }

        public ICompilerContext(bool sandboxMode, string sandboxKey) {
            SandboxMode = sandboxMode;
            SandboxKey = sandboxKey;
        }
    }

    [Serializable]
    public class UploadExtensionOutput {
        public bool Result { get; set; }
        public ObjectKey ExtensionKey { get; set; }
        public int ExtensionId { get; set; }
        public int ExtensionVersionId { get; set; }
        public HEMessage Message { get; set; }
    }

    [Serializable]
    public class PublishExtensionOutput {
        public bool Result { get; set; }
        public string ExtensionName { get; set; }
        public HEMessageArrayList Messages { get; set; }
    }

    [Serializable]
    public class GenerateExtensionStubsOutput {
        public byte[] SourceCodeZip { get; set; }
        public HEMessageArrayList Messages { get; set; }
    }

    [Serializable]
    public class ExtensibilityDependenciesOutput {
        public byte[] DependenciesZip { get; set; }
        public HEMessageArrayList Messages { get; set; }
    }

    [Serializable]
    public class CompilerPoolFilesOutput {
        public HEMessageArrayList HEMessages = new HEMessageArrayList();
        public PoolFile[] Files;
    }
    
    [Serializable]
    public class DeleteModuleOutput {
        public string OriginalName { get; set; }
        public string OriginalKey { get; set; }

        public HEMessageArrayList ErrorMessages { get; set; }
    }

    [Serializable]
    public class IntegrationPluginInfo {
        public string Name { get; set; }
        public string Key { get; set; }
        public bool IsExpose { get; set; }
    }

    [Serializable]
    public class ICompilerQueuedNativeBuildsResult {
        public HEMessageArrayList HEMessages = new HEMessageArrayList();
        public QueuedNativeBuildResult[] Results;
    }

    [Serializable]
    public class ICompilerQueuedNativeBuildResult {
        public HEMessageArrayList HEMessages = new HEMessageArrayList();
        public QueuedNativeBuildResult Result;
    }

    [Serializable]
    public class QueuedNativeBuildResult {
        public int MobilePlatformId { get; set; }
        public bool Success { get; set; }
    }

    #region DeploymentZones

    [Serializable]
    public class ICompilerDeploymentTechnologyConfiguration {
        public Guid DeploymentTechnologyKey { get; set; }
        public Dictionary<string, string> Configuration {get; set;}
    }

    [Serializable]
    public class ICompilerDeploymentZone {
        public Guid? Key { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Address { get; set; }
        public bool EnableHttps { get; set; }
        public bool UseAllAvailableServers { get; set; }
        public int[] ServerIdsToUse { get; set; }
        
        public ICompilerDeploymentTechnologyConfiguration TechnologyConfiguration { get; set; }

        public HEMessageArrayList HEMessages { get; set; } = new HEMessageArrayList();

    }

    [Serializable]
    public class ICompilerConfigurationDetailsList {
        public IEnumerable<ICompilerConfigurationDetails> ConfigurationDetails { get; set; }
    }

    [Serializable]
    public class ICompilerConfigurationDetails {
        public string Name { get; set; }
        public string Type { get; set; }
        public string Label { get; set; }
        public string Value { get; set; }
        public bool Mandatory { get; set; }
        public string Example { get; set; }
        public string AutoCompleteExpression { get; set; }
    }

    [Serializable]
    public class ICompilerDeploymentTechnology {
        public Guid Key { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public byte[] Logo { get; set; }
        public ICompilerConfigurationDetailsList ConfigurationDetails { get; set; }
        public HEMessageArrayList Messages { get; set; } = new HEMessageArrayList();
    }

    [Serializable]
    public class ICompilerModule {
        public ObjectKey Key { get; set; }
        public string Name { get; set; }
    }

    [Serializable]
    public class ICompilerDeploymentZoneList {
        public List<ICompilerDeploymentZone> Zones { get; set; }
        public HEMessageArrayList Messages { get; set; } = new HEMessageArrayList();
    }

    [Serializable]
    public class ICompilerModuleList {
        public List<ICompilerModule> Modules { get; set; } = new List<ICompilerModule>();
        public HEMessageArrayList Messages { get; set; } = new HEMessageArrayList();
    }

    [Serializable]
    public class ICompilerDeploymentTechnologyList {
        public List<ICompilerDeploymentTechnology> Technologies { get; set; }
        public HEMessageArrayList Messages { get; set; } = new HEMessageArrayList();
    }

    #endregion DeploymentZones

    [Serializable]
    public class ICompilerRecordsMetadata {
        public int Id { get; set; }
        public string Key { get; set; }
        public string Name { get; set; }
        public string DataId { get; set; }
        public string EntityKey { get; set; }
        public int EntityEspaceId { get; set; }
        public bool IsActive { get; set; }
    }

    [Serializable]
    public class ICompilerRecordsMetadataList {
        public List<ICompilerRecordsMetadata> Records { get; set; }
    }

    [Serializable]
    public class ICompilerEntityAttribute {
        public string Name { get; set; }
        public string Key { get; set; }
    }

    [Serializable]
    public class ICompilerEntityRecordValues {
        public List<string> Values = new List<string>();
    }

    [Serializable]
    public class ICompilerEntityDataResult {
        public List<ICompilerEntityAttribute> AttributesMetadata = new List<ICompilerEntityAttribute>();
        public List<ICompilerEntityRecordValues> AttributesValues = new List<ICompilerEntityRecordValues>();
    }

    [Serializable]
    public class ICompilerApplication {
        public ObjectKey Key { get; set; }
        public string Name { get; set; }
        public IDictionary<ObjectKey, string> ModuleDetails { get; set; }
    }    

    [Serializable]
    public class CreateOrUpdateDeploymentZoneOutput {
        public HEMessageArrayList Messages = new HEMessageArrayList();
        public bool Success;
        public Guid GuidValue;
    }

    [Serializable]
    public class ICompilerDBCatalog {
        public int Id { get; set; }
        public string LogicalName { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string OwnerUsername { get; set; }
        public string OwnerPassword { get; set; }
        public string DataTablespace { get; set; }
        public string IndexTablespace { get; set; }
        public bool UseIntegratedAuth { get; set; }
    }
}
