/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Xml;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Web {

    public interface IRtWidget {
        string Id { get; set; }
        object Page { get; set; }
        object Control { get; set; }

        // Must call IRtWidgetHelper.ToXml(this, parent, baseElem, fieldName, detailLevel)
        void ToXml(Object parent, XmlElement baseElem, String fieldName, int detailLevel);

        // Must call IRtWidgetHelper.EvaluateFields(this, variable, parent, baseName, fields)
        void EvaluateFields(VarValue variable, Object parent, String baseName, String fields);
        void InnerToXml(XmlElement widgetElem, int detailLevel);
        void InnerEvaluateField(VarValue variable, string field);
    }


    public static class IRtWidgetHelper {

        public static void ToXml(IRtWidget rtWidget, Object parent, XmlElement baseElem, String fieldName, int detailLevel) {
            if (detailLevel > 0) {
                XmlElement widgetElem = VarValue.AppendChild(baseElem, "Widget");
                if (rtWidget.Id != null) {
                    VarValue.AppendAttribute(widgetElem, "Id", rtWidget.Id, TypeKind.Text);
                }
                rtWidget.InnerToXml(widgetElem, detailLevel);
                if (rtWidget.Control != null) {
                    VarValue.InvokeToXml(rtWidget.Control, parent, widgetElem, fieldName, detailLevel);
                }
            } else {
                VarValue.AppendDeferredEvaluationElement(baseElem);
            }
        }

        public static void EvaluateFields(IRtWidget rtWidget, VarValue variable, Object parent, String baseName, String fields) {
            String head = VarValue.GetHead(fields);
            String tail = VarValue.GetTail(fields);
            variable.Found = false;
            if (rtWidget.Id != null) {
                if (head == "id")
                    variable.Value = rtWidget.Id;
            }
            rtWidget.InnerEvaluateField(variable, head);
            if (!variable.Found && rtWidget.Control != null)
                variable.InvokeEvaluateFields(rtWidget.Control, baseName, fields);
            if (variable.Found && tail != null)
                variable.EvaluateFields(rtWidget, head, tail);
        }

    }

}
