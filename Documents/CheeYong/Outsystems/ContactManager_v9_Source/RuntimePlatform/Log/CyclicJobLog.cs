/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.Logging.LogDefinition;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Log {

    [Serializable]
    public class CyclicJobLog {
        private CyclicJobLogDefinition log;

        public DateTime Instant {
            get {
                return log.Instant;
            } set {
                log.Instant = value;
            }
        }

        public int Duration {
            get {
                return log.Duration;
            }
            set {
                log.Duration = value;
            }
        }
        public ObjectKey CyclicJobKey {
            get {
                return log.CyclicJobKey;
            }
            set {
                log.CyclicJobKey = value;
            }
        }
        public int EspaceId {
            get {
                return log.EspaceId;
            }
            set {
                log.EspaceId = value;
            }
        }
        public int TenantId {
            get {
                return log.TenantId;
            }
            set {
                log.TenantId = value;
            }
        }
        public string ExecutedBy {
            get {
                return log.ExecutedBy;
            }
            set {
                log.ExecutedBy = value;
            }
        }
        public string ErrorId {
            get {
                return log.ErrorId;
            }
            set {
                log.ErrorId = value;
            }
        }
        public DateTime ShouldHaveRunAt {
            get {
                return log.ShouldHaveRunAt;
            }
            set {
                log.ShouldHaveRunAt = value;
            }
        }
        public DateTime NextRun {
            get {
                return log.NextRun;
            }
            set {
                log.NextRun = value;
            }
        }
        public string RequestKey {
            get {
                return log.RequestKey;
            }
            set {
                log.RequestKey = value;
            }
        }

        public string EspaceName {
            get {
                return log.EspaceName;
            }
            set {
                log.EspaceName = value;
            }
        }

        public string ApplicationName {
            get {
                return log.ApplicationName;
            }
            set {
                log.ApplicationName = value;
            }
        }

        public ObjectKey ApplicationKey {
            get {
                return log.ApplicationKey;
            }
            set {
                log.ApplicationKey = value;
            }
        }

        public string CyclicJobName {
            get {
                return log.CyclicJobName;
            }
            set {
                log.CyclicJobName = value;
            }
        }

        public const int MAX_EXECUTED_BY_SIZE = CyclicJobLogDefinition.MAX_EXECUTED_BY_SIZE;
        public const int MAX_ERROR_ID_SIZE = CyclicJobLogDefinition.MAX_ERROR_ID_SIZE;

        public CyclicJobLog() {
            log = new CyclicJobLogDefinition();
        }

        public CyclicJobLog(DateTime instant, int duration, ObjectKey cyclicJobKey, int espaceId, int tenantId, string executedBy, 
                            string errorId, DateTime shouldHaveRunAt, DateTime nextRun, string eSpaceName, string applicationName,
                            ObjectKey applicationKey, string cyclicJobName) {
            string requestKey = string.Empty;
            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                requestKey = reqTracer.RequestKey;
            }

            log = new CyclicJobLogDefinition(instant, duration, cyclicJobKey, espaceId, tenantId, executedBy,
                errorId, shouldHaveRunAt, nextRun, requestKey, eSpaceName, applicationName, applicationKey, cyclicJobName);
        }

        public CyclicJobLog(CyclicJobLog obj) {
            log = new CyclicJobLogDefinition( obj.Instant, obj.Duration, obj.CyclicJobKey, obj.EspaceId, obj.TenantId, obj.ExecutedBy, 
                obj.ErrorId, obj.ShouldHaveRunAt, obj.NextRun, obj.RequestKey, obj.EspaceName, obj.ApplicationName, obj.ApplicationKey, obj.CyclicJobName);
        }

        public object Clone() {
            return new CyclicJobLog(this);
        }

        public void Write(DateTime instant, int duration, ObjectKey cyclicJobKey, int espaceId, int tenantId,
                            string executedBy, string errorId, DateTime shouldHaveRunAt, DateTime nextRun, string eSpaceName, string applicationName,
                            ObjectKey applicationKey, string cyclicJobName) {
            string requestKey = RequestKey;
            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                requestKey = reqTracer.RequestKey;
            }

            log.Write(instant, duration, cyclicJobKey, espaceId, tenantId, executedBy, errorId, shouldHaveRunAt, nextRun, requestKey, 
                eSpaceName, applicationName, applicationKey, cyclicJobName);
        }

        public static void StaticWrite(DateTime instant, int duration, ObjectKey cyclicJobKey, int espaceId, int tenantId,
                                        string executedBy, string errorId, DateTime shouldHaveRunAt, DateTime nextRun,
                                        string eSpaceName, string applicationName, ObjectKey applicationKey, string cyclicJobName) {
            CyclicJobLog log = new CyclicJobLog();
            log.Write(instant, duration, cyclicJobKey, espaceId, tenantId, executedBy, errorId, shouldHaveRunAt, nextRun,
                eSpaceName, applicationName, applicationKey, cyclicJobName);
        }

    }
}
