/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.Logging.LogDefinition;

namespace OutSystems.HubEdition.RuntimePlatform.Log {

    [Serializable]
    public class RequestEvent {
        private RequestEventDefinition log;

        public const int KEY_MAXSIZE = 36;
        public const int NAME_MAXSIZE = 50;
        public const int DETAILS_MAXSIZE = 2000;

        public DateTime Instant {
            get {
                return log.Instant;
            }
        }

        public string ModuleKey {
            get {
                return log.ModuleKey;
            }
        }

        public string ModuleName {
            get {
                return log.ModuleName;
            }
        }

        public string ApplicationKey {
            get {
                return log.ApplicationKey;
            }
        }

        public string ApplicationName {
            get {
                return log.ApplicationName;
            }
        }

        public string RequestKey {
            get {
                return log.RequestKey;
            }
        }

        public string RequestEventName {
            get {
                return log.RequestEventName;
            }
        }

        public string EventDetails {
            get {
                return log.EventDetails;
            }
        }

        public bool Contains(string name, string value) {
            return log.Contains(name, value);
        }

        public bool ExistsInEventDetails(string name) {
            return log.ExistsInEventDetails(name);
        }

        public RequestEvent() {
            log = new RequestEventDefinition();
        }

        public RequestEvent(DateTime Instant, string RequestKey, string RequestEventName, string ModuleKey, string ModuleName, string ApplicationKey, string ApplicationName, string EventDetails) {
            log = new RequestEventDefinition(Instant, RequestKey, RequestEventName, ModuleKey, ModuleName, ApplicationKey, ApplicationName, EventDetails);
        }

        public RequestEvent(RequestEvent obj) :
            this(obj.Instant, obj.RequestKey, obj.RequestEventName, obj.ModuleKey, obj.ModuleName, obj.ApplicationKey, obj.ApplicationName, obj.EventDetails) {
        }

        public object Clone() {
            return new RequestEvent(this);
        }

        public static void StaticWrite(DateTime Instant, string RequestKey, string RequestEventName, string ModuleKey, string ModuleName, string ApplicationKey, string ApplicationName, string EventDetails) {
            RequestEventDefinition.StaticWrite(Instant, RequestKey, RequestEventName, ModuleKey, ModuleName, ApplicationKey, ApplicationName, EventDetails);
        }

        public void Write() {
            log.Write();
        }
    }
}
