/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.Logging.LogDefinition;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Log {

    [Serializable]
    public class ScreenLog {
        private ScreenLogDefinition log;

        public DateTime Instant {
            get {
                return log.Instant;
            }
            set {
                log.Instant = value;
            }
        }
        public int Duration {
            get {
                return log.Duration;
            }
            set {
                log.Duration = value;
            }
        }

        public string Screen {
            get {
                return log.Screen;
            }
            set {
                log.Screen = value;
            }
        }

        public string SessionId {
            get {
                return log.SessionId;
            }
            set {
                log.SessionId = value;
            }
        }

        public int EspaceId {
            get {
                return log.EspaceId;
            }
            set {
                log.EspaceId = value;
            }
        }

        public int TenantId {
            get {
                return log.TenantId;
            }
            set {
                log.TenantId = value;
            }
        }

        public int UserId {
            get {
                return log.UserId;
            }
            set {
                log.UserId = value;
            }
        }

        public string Msisdn {
            get {
                return log.Msisdn;
            }
            set {
                log.Msisdn = value;
            }
        }

        public string ScreenType {
            get {
                return log.ScreenType;
            }
            set {
                log.ScreenType = value;
            }
        }

        public string AccessMode {
            get {
                return log.AccessMode;
            }
            set {
                log.AccessMode = value;
            }
        }

        public string ExecutedBy {
            get {
                return log.ExecutedBy;
            }
            set {
                log.ExecutedBy = value;
            }
        }

        public int SessionBytes {
            get {
                return log.SessionBytes;
            }
            set {
                log.SessionBytes = value;
            }
        }

        public int SessionRequests {
            get {
                return log.SessionRequests;
            }
            set {
                log.SessionRequests = value;
            }
        }

        public int ViewstateBytes {
            get {
                return log.ViewstateBytes;
            }
            set {
                log.ViewstateBytes = value;
            }
        }

        public string RequestKey {
            get {
                return log.RequestKey;
            }
            set {
                log.RequestKey = value;
            }
        }

        public string ActionName {
            get {
                return log.ActionName;
            }
            set {
                log.ActionName = value;
            }
        }

        public string ClientIP {
            get {
                return log.ClientIP;
            }
            set {
                log.ClientIP = value;
            }
        }

        public string EspaceName {
            get {
                return log.EspaceName;
            }
            set {
                log.EspaceName = value;
            }
        }

        public string ApplicationName {
            get {
                return log.ApplicationName;
            }
            set {
                log.ApplicationName = value;
            }
        }

        public ObjectKey ApplicationKey {
            get {
                return log.ApplicationKey;
            }
            set {
                log.ApplicationKey = value;
            }
        }

        public string Username {
            get {
                return log.Username;
            }
            set {
                log.Username = value;
            }
        }

        public const int MAX_SESSION_ID_SIZE = ScreenLogDefinition.MAX_SESSION_ID_SIZE;
        public const int MAX_SCREEN_SIZE = ScreenLogDefinition.MAX_SCREEN_SIZE;
        public const int MAX_MSISDN_SIZE = ScreenLogDefinition.MAX_MSISDN_SIZE;
        public const int MAX_SCREEN_TYPE_SIZE = ScreenLogDefinition.MAX_SCREEN_TYPE_SIZE;
        public const int MAX_ACCESS_MODE_SIZE = ScreenLogDefinition.MAX_ACCESS_MODE_SIZE;
        public const int MAX_EXECUTED_BY_SIZE = ScreenLogDefinition.MAX_EXECUTED_BY_SIZE;
        public const int MAX_ACTION_NAME = ScreenLogDefinition.MAX_ACTION_NAME;
        public const int MAX_CLIENT_IP_SIZE = ScreenLogDefinition.MAX_CLIENT_IP_SIZE;

        public ScreenLog() {
            log = new ScreenLogDefinition();
        }

        public ScreenLog(ScreenLog obj) {
            log = new ScreenLogDefinition();

            Instant = obj.Instant;
            Duration = obj.Duration;
            Screen = obj.Screen;
            SessionId = obj.SessionId;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            UserId = obj.UserId;
            Msisdn = obj.Msisdn;
            ScreenType = obj.ScreenType;
            AccessMode = obj.AccessMode;
            ExecutedBy = obj.ExecutedBy;
            SessionBytes = obj.SessionBytes;
            ViewstateBytes = obj.ViewstateBytes;
            SessionRequests = obj.SessionRequests;
            RequestKey = obj.RequestKey;
            ActionName = obj.ActionName;
            ClientIP = obj.ClientIP;
            EspaceName = obj.EspaceName;
            ApplicationName = obj.ApplicationName;
            ApplicationKey = obj.ApplicationKey;
            Username = obj.Username;
        }

        public ScreenLog(IAppInfo appInfo, ISessionInfo sessionInfo, DateTime instant, int duration, string screen, 
            string msisdn, string screenType, string accessMode, string executedBy, int sessionBytes, int viewstateBytes, int sessionRequests) {
            log = new ScreenLogDefinition();

            Instant = instant;
            Duration = duration;
            Screen = screen;
            SessionId = sessionInfo.SessionID;
            EspaceId = appInfo.eSpaceId;
            TenantId = appInfo.TenantId;
            UserId = sessionInfo.UserId;
            Msisdn = msisdn;
            ScreenType = screenType;
            AccessMode = ScreenLogDefinition.NotNullAccessMode(accessMode);
            ExecutedBy = executedBy;
            SessionBytes = sessionBytes;
            ViewstateBytes = viewstateBytes;
            SessionRequests = sessionRequests;

            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                RequestKey = reqTracer.RequestKey;
                ActionName = reqTracer.EntryActionName;
            }

            ClientIP = RuntimePlatformUtils.GetRequestSourceForLogging()?.Left(MAX_CLIENT_IP_SIZE);
            EspaceName = appInfo.eSpaceName;
            ApplicationName = appInfo.ApplicationName;
            ApplicationKey = appInfo.ApplicationUIDAsKey;
            Username = sessionInfo.UserName;
        }

        public object Clone() {
            return new ScreenLog(this);
        }

        public static void StaticWrite(IAppInfo appInfo, ISessionInfo sessionInfo, DateTime instant, int duration, string screen,
            string msisdn, string screenType, string accessMode, string executedBy, int viewstateBytes, int sessionBytes, int sessionRequests) {

            ScreenLog log = new ScreenLog();
            log.Write(appInfo, sessionInfo, instant, duration, screen, msisdn, screenType, accessMode, executedBy, viewstateBytes, sessionBytes, sessionRequests);
        }

        public void WriteInformation(IAppInfo appInfo, ISessionInfo sessionInfo, DateTime instant, int duration, string screen, string msisdn, string screenType, string accessMode, string executedBy, int viewstateBytes, int sessionBytes, int sessionRequests) {
            Write(appInfo, sessionInfo, instant, duration, screen, msisdn, screenType, accessMode, executedBy, viewstateBytes, sessionBytes, sessionRequests);
        }

        private void Write(IAppInfo appInfo, ISessionInfo sessionInfo, DateTime instant, int duration, string screen, string msisdn,
            string screenType, string accessMode, string executedBy, int viewstateBytes, int sessionBytes, int sessionRequests) {
            Instant = instant;
            Duration = duration;
            Screen = screen;
            SessionId = sessionInfo.SessionID;
            EspaceId = appInfo.eSpaceId;
            TenantId = appInfo.TenantId;
            UserId = sessionInfo.UserId;
            Msisdn = msisdn;
            ScreenType = screenType;
            AccessMode = ScreenLogDefinition.NotNullAccessMode(accessMode);
            ExecutedBy = executedBy;
            ViewstateBytes = viewstateBytes;
            SessionBytes = sessionBytes;
            SessionRequests = sessionRequests;

            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                RequestKey = reqTracer.RequestKey;
                ActionName = reqTracer.EntryActionName;
            }

            ClientIP = RuntimePlatformUtils.GetRequestSourceForLogging()?.Left(MAX_CLIENT_IP_SIZE);
            EspaceName = appInfo.eSpaceName;
            ApplicationName = appInfo.ApplicationName;
            ApplicationKey = appInfo.ApplicationUIDAsKey;
            Username = sessionInfo.UserName;

            log.Write();
        }
    }
}
