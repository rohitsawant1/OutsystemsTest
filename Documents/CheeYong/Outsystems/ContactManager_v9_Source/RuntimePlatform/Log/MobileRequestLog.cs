/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.Logging.LogDefinition;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Log {

    [Serializable]
    public class MobileRequestLog {
        private MobileRequestLogDefinition log;

        public string Id {
            get {
                return log.Id;
            } set {
                log.Id = value;
            }
        }

        public DateTime Instant {
            get {
                return log.Instant;
            }
            set {
                log.Instant = value;
            }
        }

        public int EspaceId {
            get {
                return log.EspaceId;
            }
            set {
                log.EspaceId = value;
            }
        }

        public int TenantId {
            get {
                return log.TenantId;
            }
            set {
                log.TenantId = value;
            }
        }

        public string Screen {
            get {
                return log.Screen;
            }
            set {
                log.Screen = value;
            }
        }

        public string Endpoint {
            get {
                return log.Endpoint;
            }
            set {
                log.Endpoint = value;
            }
        }

        public string Source {
            get {
                return log.Source;
            }
            set {
                log.Source = value;
            }
        }

        public int Duration {
            get {
                return log.Duration;
            }
            set {
                log.Duration = value;
            }
        }

        public string ExecutedBy {
            get {
                return log.ExecutedBy;
            }
            set {
                log.ExecutedBy = value;
            }
        }

        public string ErrorId {
            get {
                return log.ErrorId;
            }
            set {
                log.ErrorId = value;
            }
        }

        public string RequestKey {
            get {
                return log.RequestKey;
            }
            set {
                log.RequestKey = value;
            }
        }

        public string LoginId {
            get {
                return log.LoginId;
            }
            set {
                log.LoginId = value;
            }
        }

        public int UserId {
            get {
                return log.UserId;
            }
            set {
                log.UserId = value;
            }
        }

        public string EspaceName {
            get {
                return log.EspaceName;
            }
            set {
                log.EspaceName = value;
            }
        }

        public string ApplicationName {
            get {
                return log.ApplicationName;
            }
            set {
                log.ApplicationName = value;
            }
        }

        public ObjectKey ApplicationKey {
            get {
                return log.ApplicationKey;
            }
            set {
                log.ApplicationKey = value;
            }
        }

        public string Username {
            get {
                return log.Username;
            }
            set {
                log.Username = Username;
            }
        }

        public const int MAX_ID_SIZE = MobileRequestLogDefinition.MAX_ID_SIZE;
        public const int MAX_SCREEN_SIZE = MobileRequestLogDefinition.MAX_SCREEN_SIZE;
        public const int MAX_ENDPOINT_SIZE = MobileRequestLogDefinition.MAX_ENDPOINT_SIZE;
        public const int MAX_SOURCE_SIZE = MobileRequestLogDefinition.MAX_SOURCE_SIZE;
        public const int MAX_ERROR_ID_SIZE = MobileRequestLogDefinition.MAX_ERROR_ID_SIZE;
        public const int MAX_LOGINID_SIZE = MobileRequestLogDefinition.MAX_LOGINID_SIZE;

        public MobileRequestLog() {
            log = new MobileRequestLogDefinition();
        }

        public MobileRequestLog(string id, DateTime instant, int espaceId, int tenantId, string screen, string endpoint,
            string source, int duration, string executedBy, string errorId, string loginId, int userId,
            string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {

            string requestKey = string.Empty;
            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                requestKey = reqTracer.RequestKey;
            }

            log = new MobileRequestLogDefinition(id, instant, espaceId, tenantId, screen, endpoint, source, duration, executedBy, errorId,
                requestKey, loginId, userId, eSpaceName, applicationName, applicationKey, username);
        }

        public MobileRequestLog(MobileRequestLog obj) {
            log = new MobileRequestLogDefinition(obj.Instant, obj.EspaceId, obj.TenantId, obj.Screen, 
                obj.Endpoint, obj.Source, obj.Duration, obj.ExecutedBy, obj.ErrorId, obj.RequestKey, obj.LoginId, obj.UserId,
                obj.EspaceName, obj.ApplicationName, obj.ApplicationKey, obj.Username);
        }

        public object Clone() {
            return new MobileRequestLog(this);
        }

        public void Write(IAppInfo appInfo, string id, DateTime instant, string screen, string endpoint, string source, int duration,
            string executedBy, string errorId, string loginId, int userId, string username) {

            string requestKey = RequestKey;
            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                requestKey = reqTracer.RequestKey;
            }

            log.Write(id, instant, appInfo.eSpaceId, appInfo.TenantId, screen, endpoint, source, duration, executedBy, errorId, loginId, userId, requestKey,
                appInfo.eSpaceName, appInfo.ApplicationName, appInfo.ApplicationUIDAsKey, username);
        }

        public static string StaticWrite(IAppInfo appInfo, DateTime instant, string screen, string endpoint, string source,
            int duration, string executedBy, string errorId, string loginId, int userId, string username) {
            MobileRequestLog log = new MobileRequestLog();
            log.Write(appInfo, log.Id, instant, screen, endpoint, source, duration, executedBy, errorId, loginId, userId, username);
            return log.Id;
        }
    }
}
