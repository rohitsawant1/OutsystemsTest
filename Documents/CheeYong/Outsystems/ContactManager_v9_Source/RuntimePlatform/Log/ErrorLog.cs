/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.Logging.LogDefinition;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using static OutSystems.Logging.LogDefinition.ErrorLogDefinition;

namespace OutSystems.HubEdition.RuntimePlatform.Log {

    [Serializable]
    public class ErrorLog {
        private readonly ErrorLogDefinition log = new ErrorLogDefinition();

        public string Id {
            get {
                return log.Id;
            }
            set {
                log.Id = value;
            }
        }

        public DateTime Instant {
            get {
                return log.Instant;
            }
            set {
                log.Instant = value;
            }
        }

        public string SessionId {
            get {
                return log.SessionId;
            }
            set {
                log.SessionId = value;
            }
        }

        public int EspaceId {
            get {
                return log.EspaceId;
            }
            set {
                log.EspaceId = value;
            }
        }

        public int TenantId {
            get {
                return log.TenantId;
            }
            set {
                log.TenantId = value;
            }
        }

        public int UserId {
            get {
                return log.UserId;
            }
            set {
                log.UserId = value;
            }
        }

        public string Message {
            get {
                return log.Message;
            }
            set {
                log.Message = value;
            }
        }

        public string Stack {
            get {
                return log.Stack;
            }
            set {
                log.Stack = value;
            }
        }

        public string ModuleName {
            get {
                return log.ModuleName;
            }
            set {
                log.ModuleName = value;
            }
        }

        public string Server {
            get {
                return log.Server;
            }
            set {
                log.Server = value;
            }
        }

        public string EnvironmentInformation {
            get {
                return log.EnvironmentInformation;
            }
            set {
                log.EnvironmentInformation = value;
            }
        }

        public string RequestKey {
            get {
                return log.RequestKey;
            }
            set {
                log.RequestKey = value;
            }
        }

        public string EntrypointName {
            get {
                return log.EntrypointName;
            }
            set {
                log.EntrypointName = value;
            }
        }

        public string ActionName {
            get {
                return log.ActionName;
            }
            set {
                log.ActionName = value;
            }
        }
        public string ErrorId {
            get {
                if (Id == null || Id == "") {
                    return "";
                } else {
                    return Id;
                }
            }
        }

        public string EspaceName {
            get {
                return log.EspaceName;
            }
            set {
                log.EspaceName = value;
            }
        }

        public string ApplicationName {
            get {
                return log.ApplicationName;
            }
            set {
                log.ApplicationName = value;
            }
        }

        public ObjectKey ApplicationKey {
            get {
                return log.ApplicationKey;
            }
            set {
                log.ApplicationKey = value;
            }
        }

        public string Username {
            get {
                return log.Username;
            }
            set {
                log.Username = value;
            }
        }

        public const int MAX_ENVIRONMENT_INFORMATION_SIZE = ErrorLogDefinition.MAX_ENVIRONMENT_INFORMATION_SIZE;
        public const int MAX_ID_SIZE = ErrorLogDefinition.MAX_ID_SIZE;
        public const int MAX_SESSION_ID_SIZE = ErrorLogDefinition.MAX_SESSION_ID_SIZE;
        public const int MAX_MESSAGE_SIZE = ErrorLogDefinition.MAX_MESSAGE_SIZE;
        public const int MAX_MODULE_NAME_SIZE = ErrorLogDefinition.MAX_MODULE_NAME_SIZE;
        public const int MAX_SERVER_SIZE = ErrorLogDefinition.MAX_SESSION_ID_SIZE;
        public const int MAX_ACTION_NAME = ErrorLogDefinition.MAX_ACTION_NAME;
        public const int THRESHOLD_STACK_SIZE_FLUSH = ErrorLogDefinition.THRESHOLD_STACK_SIZE_FLUSH;

        public const int MAX_STACK_SIZE = ErrorLogDefinition.MAX_STACK_LARGE_STORAGE_SIZE;
        public const int MAX_STACK_SMALL_STORAGE_SIZE = ErrorLogDefinition.MAX_STACK_SMALL_STORAGE_SIZE;
        public const int MAX_STACK_LARGE_STORAGE_SIZE = ErrorLogDefinition.MAX_STACK_LARGE_STORAGE_SIZE;

        public ErrorLog() { }

        public ErrorLog(string id, DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
                        string stack, string moduleName, string server,
                        string eSpaceName = null, string applicationName = null, ObjectKey applicationKey = null, string username = null) : this() {
            Id = id;
            Instant = instant;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Message = message;
            Stack = stack;
            ModuleName = moduleName;
            Server = server;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;
        }

        public ErrorLog(ErrorLog obj) : this() {
            Instant = obj.Instant;
            SessionId = obj.SessionId;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            UserId = obj.UserId;
            Message = obj.Message;
            Stack = obj.Stack;
            ModuleName = obj.ModuleName;
            Server = obj.Server;
            RequestKey = obj.RequestKey;
            ActionName = obj.ActionName;
            EntrypointName = obj.EntrypointName;
            EspaceName = obj.EspaceName;
            ApplicationName = obj.ApplicationName;
            ApplicationKey = obj.ApplicationKey;
            Username = obj.Username;
        }

        public object Clone() {
            return new ErrorLog(this);
        }

        public void Write(string id, DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message, string stack,
            string environmentInformation, string moduleName, string requestKey, string entrypointName, string actionName, bool forceSynchronous) {
            Id = id;
            log.Write(instant, sessionId, espaceId, tenantId, userId, message, stack, environmentInformation, moduleName, requestKey, entrypointName, actionName,
                string.Empty, string.Empty, ObjectKey.Dummy, string.Empty);
        }

        public static string StaticWrite(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
                string stack, string moduleName) {
            string environmentInformation = string.Empty;
            return StaticWrite(instant, sessionId, espaceId, tenantId, userId, message, stack, environmentInformation, moduleName);
        }

        public static string StaticWrite(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
                string stack, string environmentInformation, string moduleName) {
            string eSpaceName = null;
            string applicationName = null;
            ObjectKey applicationKey = null;
            string username = null;

            try {
                var appInfo = AppInfo.GetAppInfo();
                var sessionInfo = appInfo?.OsContext?.Session;

                // ensure the AppInfo matches the eSpaceID passed as parameter
                if (appInfo?.eSpaceId == espaceId) {
                    eSpaceName = appInfo?.eSpaceName;
                    applicationName = appInfo?.ApplicationName;
                    applicationKey = appInfo?.ApplicationUIDAsKey;
                }

                // ensure that the current user matches the userId defined in the log
                if (userId == sessionInfo?.UserId) {
                    username = username ?? sessionInfo?.UserName;
                }
            } catch { }

            return StaticWrite(instant, sessionId, espaceId, tenantId, userId, message, stack, environmentInformation, moduleName, eSpaceName, applicationName, applicationKey, username);
        }


        public static string StaticWrite(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
                string stack, string moduleName,
                string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {
            string environmentInformation = string.Empty;

            return StaticWrite(instant, sessionId, espaceId, tenantId, userId, message, stack, environmentInformation, moduleName, eSpaceName, applicationName, applicationKey, username);
        }

        public static string StaticWrite(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
                string stack, string environmentInformation, string moduleName,
                string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {
            string requestKey, actionName, entryPointName;
            requestKey = actionName = entryPointName = String.Empty;

            RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
            if (reqTracer != null) {
                requestKey = reqTracer.RequestKey;
                actionName = reqTracer.EntryActionName;
                entryPointName = reqTracer.EntryEndpointName;
            }

            return ErrorLogDefinition.StaticWrite(instant, sessionId, espaceId, tenantId, userId, message, stack, environmentInformation, moduleName, requestKey, entryPointName, actionName,
                eSpaceName, applicationName, applicationKey, username);
        }

        private static string StaticWriteWithId(string id, DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message, string stack,
                                    string environmentInformation, string moduleName, string requestKey, string entrypointName, string actionName) {
            ErrorLog log = new ErrorLog();
            log.Write(id, instant, sessionId, espaceId, tenantId, userId, message, stack, environmentInformation, moduleName, requestKey, entrypointName, actionName, false);
            return log.ErrorId;
        }

        public static string LogApplicationError(Exception excep, AppInfo info, HeContext context, string moduleName) {
            var message = excep.Message;
            if (excep is OSException) {
                message = ((OSException)excep).MessageForLogging();
            }
            return LogApplicationError(DateTime.Now, message, excep, info, context, moduleName, null, -1, -1);
        }

        public static string LogApplicationError(Exception excep, HeContext context, string moduleName) {
            var message = excep.Message;
            if (excep is OSException) {
                message = ((OSException)excep).MessageForLogging();
            }
            return LogApplicationError(DateTime.Now, message, excep, AppInfo.GetAppInfo(), context, moduleName, null, -1, -1);
        }

        public static string LogApplicationError(Exception excep, string stacktrace, HeContext context, string moduleName) {
            var message = excep.Message;
            if (excep is OSException) {
                message = ((OSException)excep).MessageForLogging();
            }
            return LogApplicationError(DateTime.Now, message, excep, AppInfo.GetAppInfo(), context, moduleName, null, -1, -1);
        }

        public static string LogApplicationError(int espaceId, int tenantId, string message, Exception excep, HeContext context, string moduleName,
            string eSpaceName = null, string applicationName = null, ObjectKey applicationKey = null) {

            return LogApplicationError(DateTime.Now, message, excep, AppInfo.GetAppInfo(), context, moduleName, null, espaceId, tenantId,
                eSpaceName, applicationName, applicationKey);
        }

        public static string LogApplicationError(string message, string stackTrace, HeContext context, string moduleName) {
            return LogApplicationError(DateTime.Now, message, null, AppInfo.GetAppInfo(), context, moduleName, stackTrace, -1, -1);
        }


        public static string LogApplicationError(string message, Exception excep, HeContext context, string moduleName) {
            return LogApplicationError(DateTime.Now, message, excep, AppInfo.GetAppInfo(), context, moduleName, null, -1, -1);
        }

        public static string LogApplicationError(int espaceId, int tenantId, string message, string stackTrace, HeContext context, string moduleName,
            string eSpaceName = null, string applicationName = null, ObjectKey applicationKey = null) {

            return LogApplicationError(DateTime.Now, message, null, AppInfo.GetAppInfo(), context, moduleName, stackTrace, espaceId, tenantId,
                eSpaceName, applicationName, applicationKey);
        }


        public static string LogApplicationError(DateTime instant, Exception excep, HeContext context, string moduleName) {
            var message = excep.Message;
            if (excep is OSException) {
                message = ((OSException)excep).MessageForLogging();
            }
            return LogApplicationError(instant, message, excep, AppInfo.GetAppInfo(), context, moduleName, null, -1, -1);
        }

        /* Recursive call counter (#534214)*/
        [ThreadStatic]
        private static int visitsApplicationErrorLog = 0;

        private static string LogApplicationError(DateTime instant, string message, Exception excep, AppInfo info, HeContext context, string moduleName,
                string stackTrace, int overrideEspaceId, int overrideTenantId,
                string overrideEspaceName = null, string overrideApplicationName = null, ObjectKey overrideApplicationKey = null) {

            visitsApplicationErrorLog = visitsApplicationErrorLog + 1;
            try {
                AppInfoForStack infoForStack = new AppInfoForStack();
                ContextInfoForStack contextForStack = new ContextInfoForStack();
                
                /* Prevent recursive loop attempt (#534214).
                 * 1st attempt tries to get info for logging (visitsApplicationErrorLog=1)
                 * 2nd attempt tries to log the new exception without getting info for logging (visitsApplicationErrorLog=2)
                 * 3rd attempt don't log the new exception to avoid recursive loops (visitsApplicationErrorLog>=3 */

                if (visitsApplicationErrorLog >= 3) {
                    return "";
                }
                /* Captain's Log #666 15:19 19/06/2017
                 * By now, we've concluded we can't properly refactor this without removing some information from our error logs.
                 * As of now, espace version id will no longer be logged on the second passing and we'll always try to fetch the
                 * context info(session id, user id and request tracer info) on the first and second passing, instead of only getting
                 * it at the first passing. To make this work, we must have sure that it never blows up. */
                if (visitsApplicationErrorLog < 2) {
                    infoForStack = FillAppInfoStruct(info, overrideEspaceId, overrideTenantId,
                        overrideEspaceName, overrideApplicationName, overrideApplicationKey);
                }

                contextForStack = FillContextInfoStruct(context);

                return ErrorLogDefinition.LogApplicationError(instant, message, excep, moduleName, stackTrace, infoForStack, contextForStack);

            } finally {
                visitsApplicationErrorLog = visitsApplicationErrorLog - 1;
            }
        }

        private static ContextInfoForStack FillContextInfoStruct(HeContext context) {
            ContextInfoForStack contextForStack = new ContextInfoForStack();

            if (context != null) {
                try { contextForStack.sessionId = context.Session.SessionID; } catch { }
                try { contextForStack.userId = context.Session.UserId; } catch { }
                try { contextForStack.username = context.Session.UserName; } catch { }
                try {
                    if (context.RequestTracer != null) {
                        RequestTracer requestTracer = context.RequestTracer;
                        contextForStack.requestKey = requestTracer.RequestKey;
                        contextForStack.actionName = requestTracer.EntryActionName;
                        contextForStack.entryPointName = requestTracer.EntryEndpointName;
                        requestTracer.RegisterError();
                    }
                } catch { }
                try { contextForStack.requestUrl = context.Context.Request.Url.ToString(); } catch { }
                try { contextForStack.requestMethod = context.Context.Request.HttpMethod; } catch { }
                try {
                    contextForStack.requestQuery = context.Context.Request.QueryString != null ? context.Context.Request.QueryString.ToString() : "";
                } catch { }
                try { contextForStack.currentLocale = context.CurrentLocale; } catch { }
                try { contextForStack.clientIp = RuntimePlatformUtils.GetClientIpForLogging(); } catch { }
                try { contextForStack.deviceUuid = RuntimePlatformUtils.GetDeviceUuidForLogging(); } catch { }
                try { contextForStack.CurrentExecutionFileName = context.CurrentExecutionFileName; } catch { }
            }

            return contextForStack;
        }

        private static AppInfoForStack FillAppInfoStruct(AppInfo info, int overrideEspaceId, int overrideTenantId,
            string overrideEspaceName = null, string overrideApplicationName = null, ObjectKey overrideApplicationKey = null) {
            AppInfoForStack infoForStack = new AppInfoForStack();

            if (info != null) {
                try { infoForStack.espaceId = info.eSpaceId; } catch { }
                try { infoForStack.tenantId = info.Tenant.Id; } catch { }
                try { infoForStack.espaceVersionId = info.eSpaceVersionId; } catch { }
                try { infoForStack.eSpaceName = info.eSpaceName; } catch { }
                try { infoForStack.applicationName = info.ApplicationName; } catch { }
                try { infoForStack.applicationKey = info.ApplicationUIDAsKey; } catch { }
                try { infoForStack.username = info.OsContext.Session.UserName; } catch { }
            }

            infoForStack.espaceId = overrideEspaceId != -1 ? overrideEspaceId : infoForStack.espaceId;
            infoForStack.tenantId = overrideTenantId != -1 ? overrideTenantId : infoForStack.tenantId;
            infoForStack.eSpaceName = overrideEspaceName != null ? overrideEspaceName : infoForStack.eSpaceName;
            infoForStack.applicationName = overrideApplicationName != null ? overrideApplicationName : infoForStack.applicationName;
            infoForStack.applicationKey = overrideApplicationKey != null ? overrideApplicationKey : infoForStack.applicationKey;

            return infoForStack;
        }

        public static string GetStackEnvironmentInfo(AppInfo info, HeContext context) {
            AppInfoForStack infoForStack = FillAppInfoStruct(info, -1, -1);
            ContextInfoForStack contextForStack = FillContextInfoStruct(context);

            return ErrorLogDefinition.GetStackEnvironmentInfo(infoForStack, contextForStack);
        }

        public static string GenerateFullStack(Exception excep, out int countExceptions) {
            return ErrorLogDefinition.GenerateFullStack(excep, out countExceptions);
        }
    }
}
