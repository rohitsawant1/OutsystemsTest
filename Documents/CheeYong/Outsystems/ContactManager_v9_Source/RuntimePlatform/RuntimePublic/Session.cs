/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Linq;
using System.Configuration;
using System.Web;
using System.Web.Configuration;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.HubEdition.RuntimePlatform.SessionState;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime.Authentication;

namespace OutSystems.RuntimePublic {

    /// <summary>
    /// API used to access information about the current session
    /// </summary>
    public static class Session {

        /// <summary>
        /// 	Based on the session cookie from the current HTTP request, this method will look
		///		in the session database for the UserId of the user currently logged in the user
		///		provider of the application that calls this method.
		///		Will return 0 if:
		///			There is no session cookie on the HTTP request.
		///			There is no user logged in with the same session cookie.
		///			There is a user logged in, but only in a different user provider.
        /// </summary>
		/// <returns>The UserId of the user currently logged in.</returns>

        public static int GetUserFromSessionCookie() {
            string sessionId=GetCurrentSession();
            if (!sessionId.IsNullOrEmpty()) {
                return SqlSessionStateStore.GetUserId(sessionId);
            }
            return 0;
        }

        private static string GetCurrentSession() {
            var cookie = HttpContext.Current.Request.Cookies.Get(CookieActions.GetSessionCookieName());
            if (cookie != null)
                return cookie.Value;
            return "";
        }

        /// <summary>
        ///     Gets User information of the authenticated user for a Mobile Application
        ///     This method is designed for interoperability scenarios where you need to embed a Responsive screen in your mobile application
        /// </summary>
        /// <param name="userId">Returns the user identifier, or NullIdentifier() (userId = 0) if user is not logged in</param>
        /// <param name="isPersistent">True if the login is persistent</param>
        public static void GetMobileAppLoginInfo(out int userId, out bool isPersistent) {

            var appInfo = AppInfo.GetAppInfo();

            var loginEndpoint = new MobileLoginInfoEndpoint(appInfo, appInfo.GetMobileLoginConfigurations());
            var loginInfo = loginEndpoint.ReadLoginInfoFromRequest();
            loginInfo.Validate();
            loginInfo.Refresh();

            userId = loginInfo.UserId;
            isPersistent = loginInfo.IsPersistent;
            
        }

        /// <summary>
        ///     Gets the token that uniquely identifies the authenticated session for a Mobile Application
        ///     This method can be used in when managing server side session stores where you need to uniquely identify a user authenticated session
        /// </summary>
        /// <param name="loginId">Returns the session identifier or NullTextIdentifier() if no user is logged in</param>
        public static void GetMobileAppLoginId(out string loginId) {
            var loginInfo = AppInfo.GetAppInfo().OsContext.Session.NewRuntimeLoginInfo;
            loginId = loginInfo.UserId == 0 ? null : loginInfo.LoginId;
        }
    }

}
 