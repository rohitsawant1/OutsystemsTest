/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using OutSystems.RuntimeCommon;

namespace OutSystems.RuntimePublic.Db {
    /// <summary>
    /// Represents a command to execute queries.
    /// </summary>
    public sealed class Command : IDisposable {

        private readonly OutSystems.Internal.Db.Command command;

        /// <summary>
        /// Initializes a new instance of the <see cref="Command"/> class.
        /// </summary>
        /// <param name="command">The command.</param>
        internal Command(OutSystems.Internal.Db.Command command) {
            if (command == null) {
                throw new ArgumentNullException("command");
            }
            this.command = command;
        }

        /// <summary>
        /// Returns the native command object used by the stack in which the application
        /// is running.
        /// </summary>
        /// <returns>The native command object.</returns>
        public IDbCommand GetDriverCommand() {
            return command.DriverCommand;
        }

        /// <summary>
        /// Gets or sets the SQL statements to execute.
        /// </summary>
        /// <value>
        /// The command's text.
        /// </value>
        public string CommandText {
            get { return command.CommandText; }
            set { command.CommandText = value; }
        }

        /// <summary>
        /// Gets or sets the command execution timeout.
        /// </summary>
        /// <value>
        /// The command timeout.
        /// </value>
        public int CommandTimeout {
            get { return command.CommandTimeout; }
            set { command.CommandTimeout = value; }
        }

        /// <summary>
        /// Executes the command and returns the number of rows affected.
        /// </summary>
        /// <returns>The number of rows affected.</returns>
        public int ExecuteNonQuery() {
            return command.ExecuteNonQuery();
        }

        /// <summary>
        /// Executes the query, and returns the first column of the first row in the resultset
        /// returned by the query. Extra columns or rows are ignored.
        /// </summary>
        /// <returns>An object with the command resultset.</returns>
        public object ExecuteScalar() {
            return command.ExecuteScalar();
        }

        /// <summary>
        /// Executes the command text returning the resulting <see cref="IDataReader"/>.
        /// </summary>
        /// <returns>A reader with the command resultset.</returns>
        public IDataReader ExecuteReader() {
            return command.ExecuteReader();
        }

        /// <summary>
        /// Returns the database connection associated to this command.
        /// </summary>
        /// <returns>A <see cref="Connection"/> associated with this command.</returns>
        public Connection GetConnection() {
            try {
                return new Connection(command.GetConnection());
            } catch (ArgumentNullException) {
                throw new InvalidOperationException("A new connection cannot be created from this command.");
            }
        }

        /// <summary>
        /// Adds a parameter to the command. 
        /// The parameter value is modified to a compatible database value.
        /// </summary>
        /// <param name="name">The parameter name.</param>
        /// <returns>The parameter associated with this command.</returns>
        public DataParameter CreateParameter(string name) {
            try {
                return new DataParameter(command.CreateParameter(name));
            } catch (ArgumentNullException) {
                throw new InvalidOperationException("A new parameter cannot be created for this command.");
            }
        }

        /// <summary>
        /// Adds a parameter to the command with a given type and value.
        /// The parameter value is modified to a compatible database value.
        /// </summary>
        /// <param name="name">The parameter name.</param>
        /// <param name="type">The parameter type.</param>
        /// <param name="value">The parameter value.</param>
        /// <returns>The parameter associated with this command.</returns>
        public DataParameter CreateParameter(string name, DbType type, object value) {
            try {
                return new DataParameter(command.CreateParameter(name, type, value));
            } catch (ArgumentNullException) {
                throw new InvalidOperationException("A new parameter cannot be created for this command.");
            }
        }

        /// <summary>
        /// Gets the parameter with the specified name.
        /// </summary>
        /// <param name="columnName">Name of the parameter.</param>
        /// <returns>A parameter associated with this command.</returns>
        public DataParameter GetParameter(string columnName) {
            try {
                return new DataParameter(command.GetParameter(columnName));
            } catch (ArgumentNullException) {
                throw new InvalidOperationException("A new parameter cannot be created for this command.");
            }
        }

        #region IDisposable Members

        /// <summary>
        /// Frees the resources used by this object.
        /// </summary>
        public void Dispose() {
            command.Dispose();
        }

        #endregion
    }
}
