/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OutSystems.RuntimeCommon;

namespace OutSystems.RuntimePublic.Db {
    /// <summary>
    /// Creates <see cref="DatabaseProvider"/> instances to access a database.
    /// </summary>
    public sealed class DatabaseAccess {

        /// <summary>
        /// Returns a database provider to access the system database.
        /// Use it to query the platform metamodel.
        /// </summary>
        /// <returns>A <see cref="DatabaseProvider"/> to access the system database.</returns>
        public static DatabaseProvider ForSystemDatabase() {
            return new DatabaseProvider(OutSystems.Internal.Db.DatabaseAccess.ForSystemDatabase);
        }

        /// <summary>
        /// Returns a database provider to access the database of the currently running application.
        /// Use it to access data managed by the currently running application, or other applications
        /// sharing the same database.
        /// </summary>
        /// <returns>A <see cref="DatabaseProvider"/> to access the currently running application database.</returns>
        public static DatabaseProvider ForRunningApplication() {
            return new DatabaseProvider(OutSystems.Internal.Db.DatabaseAccess.ForCurrentDatabase);
        }

        /// <summary>
        /// Returns a database provider for a given database catalog or schema.
        /// Use it to access data managed by applications that are configured to use this database.
        /// </summary>
        /// <param name="databaseName">The database name.</param>
        /// <returns>A <see cref="DatabaseProvider"/> to access the specified database.</returns>
        public static DatabaseProvider ForDatabase(string databaseName) {
            return new DatabaseProvider(OutSystems.Internal.Db.DatabaseAccess.ForDatabase(databaseName));
        }

        /// <summary>
        /// Returns a database provider for a specific external database connection.
        /// Use it to access data managed by external systems.
        /// </summary>
        /// <param name="connectionName">The external database connection name.</param>
        /// <returns>A <see cref="DatabaseProvider"/> to access the external database connection.</returns>
        public static DatabaseProvider ForExternalDatabase(string connectionName) {
            return new DatabaseProvider(OutSystems.Internal.Db.DatabaseAccess.ForDBConnection(connectionName));
        }
    }
}
