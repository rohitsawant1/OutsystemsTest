/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.ObjectKeys;
using System.Linq;

namespace OutSystems.HubEdition.RuntimePlatform.Processes {
    public interface IActivityVariable {
        IActivityVariable NewInstance();
        IActivityVariable NewInstance(object newValue);
        ActivityVariable<T> NewInstance<T>();
        ActivityVariable<T> NewInstance<T>(object newValue);

        int DefinitionId { get; }
        string Name { get; }
        bool WasSet { get; }
        string DataType { get; }
        string SSType { get; }
        bool IsMandatory { get; }

        GlobalObjectKey GlobalKey { get; }
        ObjectKey EspaceKey { get; }
        ObjectKey Key { get; }

        object ValueObj { get; set; }
    }

    public class ActivityVariable<TOutput> : IActivityVariable {
        private readonly int definitionId;
        public int DefinitionId { get { return definitionId; } }

        private readonly string name;
        public string Name { get { return name; } }

        private bool wasSet = false;
        public bool WasSet { get { return wasSet;  } }

        //This is the datatype to be stored in the database, should be the right type to TOutput
        //RealType
        private readonly string dataType;
        public string DataType { get { return dataType; } }

        //FullType
        private readonly string ssType;
        public string SSType { get { return ssType; } }

        private readonly bool isMandatory;
        public bool IsMandatory { get { return isMandatory; } }

        private readonly GlobalObjectKey globalKey;
        public GlobalObjectKey GlobalKey { get { return globalKey; } }
        public ObjectKey EspaceKey { get { return GlobalKey.OwnerKey; } }
        public ObjectKey Key { get { return GlobalKey.Key; } }

        private TOutput value;

        // Copy using current value
        public IActivityVariable NewInstance() {
            return NewInstance<TOutput>();
        }

        // Copy using current value
        public ActivityVariable<T> NewInstance<T>() {
            return NewInstance<T>(Value);
        }

        // Copy using new value
        public IActivityVariable NewInstance(object newValue) {
            return NewInstance<TOutput>(newValue);
        }
        public ActivityVariable<T> NewInstance<T>(object newValue) {
            return new ActivityVariable<T>(newValue, DefinitionId, Name, DataType, SSType, IsMandatory, GlobalKey);
        }

        public ActivityVariable(object value, Func<ObjectKey, ObjectKey, int> getDefinitionId, string name, string dataType, string ssType, GlobalObjectKey globalKey)
            : this(value, getDefinitionId, name, dataType, ssType, false, globalKey) {
        }

        public ActivityVariable(object value, Func<ObjectKey, ObjectKey, int> getDefinitionId, string name, string dataType, string ssType, bool isMandatory, GlobalObjectKey globalKey)
            : this(value, getDefinitionId(globalKey.OwnerKey, globalKey.Key), name, dataType, ssType, isMandatory, globalKey) {
        }

        public ActivityVariable(object value) {
            this.value = (TOutput)Convert.ChangeType(value, typeof(TOutput));
        }

        public ActivityVariable(object value, int definitionId, string name, string dataType, string ssType, bool isMandatory, GlobalObjectKey globalKey)  {
            this.value = (TOutput)Convert.ChangeType(value, typeof(TOutput));
            this.globalKey = globalKey;
            this.definitionId = definitionId;
            this.name = name;
            this.dataType = dataType;
            this.ssType = ssType;
            this.isMandatory = isMandatory;
        }


        public TOutput Value {
            get { return value; }
            set { wasSet = true; this.value = value; }
        }

        public object ValueObj {
            get { return Value; }
            set {
                if (value is TOutput) {
                    Value = (TOutput)value;
                } else {
                    Value = (TOutput)Convert.ChangeType(value, typeof(TOutput));
        }
	}
        }
	}

}