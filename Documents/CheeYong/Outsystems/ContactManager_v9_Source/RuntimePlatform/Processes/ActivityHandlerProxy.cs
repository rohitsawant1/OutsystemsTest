/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/


namespace OutSystems.HubEdition.RuntimePlatform.Processes {
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Web.Services.Protocols;
    using OutSystems.HubEdition.RuntimePlatform.Internal;
    using OutSystems.RuntimeCommon;
    using OutSystems.RuntimeCommon.Settings;

    /// <remarks/>
    [System.Diagnostics.DebuggerStepThrough()]
	[System.ComponentModel.DesignerCategory("code")]
	[System.Web.Services.WebServiceBinding(Name = "ActivityHandlerSoap", Namespace = "http://tempuri.org/")]
	public class ActivityHandler : SoapHttpClientProtocol {
        public const string WebServiceFilename = "_ActivityHandler.asmx";

        // default value in seconds
		public static int DefaultTimerTimeout = 20 * 60;
        private ISettingsProvider settingsProvider;
        private int tenantId;
        private int userId;
        private string producerKey;
        private string consumerKey;

        /// <param name="url">The url for the module where the activity is defined</param>
        /// <param name="tenantId">The tenantId to use in context of the activity</param>
        /// <param name="userId">The userId to use in context of the activity</param>
        /// <param name="consumerKey">The key of the module requesting the execution of the activity</param>
        /// <param name="producerKey">The key of the module where the activity is defined</param>
        public ActivityHandler(string url, int tenantId, int userId, string consumerKey, string producerKey)
            : this (RuntimeSettingsProvider.Instance, url, tenantId, userId, consumerKey, producerKey) {
        }

        /// <param name="settingsProvider">The settings provider for the execution context</param>
        /// <param name="url">The url for the module where the activity is defined</param>
        /// <param name="tenantId">The tenantId to use in context of the activity</param>
        /// <param name="userId">The userId to use in context of the activity</param>
        /// <param name="consumerKey">The key of the module requesting the execution of the activity</param>
        /// <param name="producerKey">The key of the module where the activity is defined</param>
        public ActivityHandler(ISettingsProvider settingsProvider, string url, int tenantId, int userId, string consumerKey, string producerKey) {
            this.settingsProvider = settingsProvider;
            this.Url = url + ActivityHandler.WebServiceFilename;
            this.tenantId = tenantId;
            this.userId = userId;
            this.consumerKey = consumerKey;
            this.producerKey = producerKey;
		}

        protected override WebRequest GetWebRequest(Uri uri) {
            WebRequest request = base.GetWebRequest(uri);
            request.Headers.Add("Authorization", SecurityTokenManager.GenerateAuthorizationHeader(settingsProvider, consumerKey, producerKey, userId, tenantId));
            return request;
        }

        // Execute Activity Action
        public bool ExecuteActivityAction(string ssKey, int activityId, int processId, int tenantId, ActivityStatus forInitialStatus) {
            return ExecuteActivityActionv2(ssKey, activityId, processId, tenantId, forInitialStatus, BuiltInFunction.NullDate());
        }

        public System.IAsyncResult BeginExecuteActivityAction(string ssKey, int activityId, int processId, int tenantId, ActivityStatus forInitialStatus, System.AsyncCallback callback, object asyncState) {
            return BeginExecuteActivityActionv2(ssKey, activityId, processId, tenantId, forInitialStatus, BuiltInFunction.NullDate(), callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteActivityAction(System.IAsyncResult asyncResult) {
            return EndExecuteActivityActionv2(asyncResult);
        }

        //Execute Activity Action v2
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteActivityActionv2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteActivityActionv2(string ssKey, int activityId, int processId, int tenantId, ActivityStatus forInitialStatus, DateTime previousNextRun) {
            object[] results = this.Invoke("ExecuteActivityActionv2", new object[] { ssKey, activityId, processId, tenantId, forInitialStatus, previousNextRun });
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteActivityActionv2(string ssKey, int activityId, int processId, int tenantId, ActivityStatus forInitialStatus, DateTime previousNextRun, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteActivityActionv2", new object[] { ssKey, activityId, processId, tenantId, forInitialStatus, previousNextRun }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteActivityActionv2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return (bool)(results[0]);
        }

        // Execute Activity Event
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteOnEvent", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteOnEvent(string ssKey, int activityId, int processId, int tenantId, string dataId, bool advanceProcess) {
            object[] results = this.Invoke("ExecuteOnEvent", new object[] { ssKey, activityId, processId, tenantId, dataId, advanceProcess});
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteOnEvent(string ssKey, int activityId, int processId, int tenantId, string dataId, bool advanceProcess, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteOnEvent", new object[] { ssKey, activityId, processId, tenantId, dataId, advanceProcess }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteOnEvent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return (bool)(results[0]);
        }

        // Execute Process Def Event
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteProcessDefEvent", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteProcessDefEvent(string ssKey, int tenantId, string dataId) {
            object[] results = this.Invoke("ExecuteProcessDefEvent", new object[] {
                        ssKey, tenantId, dataId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteProcessDefEvent(string ssKey, int tenantId, string dataId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteProcessDefEvent", new object[] { ssKey, tenantId, dataId }, callback, asyncState);
        }

        /// <remarks/>
        public int EndExecuteProcessDefEvent(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        // Set Activity Event Filters
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteSetEventFilters", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteSetEventFilters(string ssKey, int activityId, int processId, int tenantId) {
            object[] results = this.Invoke("ExecuteSetEventFilters", new object[] { ssKey, activityId, processId, tenantId});
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteSetEventFilters(string ssKey, int activityId, int processId, int tenantId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteSetEventFilters", new object[] { ssKey, activityId, processId, tenantId }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteSetEventFilters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return (bool)(results[0]);
        }

        // Remove Activity Event Filters
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteRemoveEventFilters", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteRemoveEventFilters(string ssKey, int activityId, int processId, int tenantId) {
            object[] results = this.Invoke("ExecuteRemoveEventFilters", new object[] { ssKey, activityId, processId, tenantId});
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteRemoveEventFilters(string ssKey, int activityId, int processId, int tenantId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteRemoveEventFilters", new object[] { ssKey, activityId, processId, tenantId }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteRemoveEventFilters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return (bool)(results[0]);
        }

        // On Open Activity
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteOnOpen", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteOnOpen(string ssKey, int activityId, int processId, int tenantId, int userId, string locale, string sessionId, bool requestIsSecure, string hostname, bool onlyGetUrl, out string failureMessage, out string handlingUrl) {
            object[] results = this.Invoke("ExecuteOnOpen", new object[] { ssKey, activityId, processId, tenantId, userId, locale, sessionId, requestIsSecure, hostname, onlyGetUrl});

            failureMessage = (string)(results[1]);
            handlingUrl = (string)(results[2]);
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteOnOpen(string ssKey, int activityId, int processId, int tenantId, int userId, string locale, string sessionId, bool requestIsSecure, string hostname, bool onlyGetUrl, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteOnOpen", new object[] { ssKey, activityId, processId, tenantId, userId, locale, sessionId, requestIsSecure, hostname, onlyGetUrl }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteOnOpen(System.IAsyncResult asyncResult, out string failureMessage, out string handlingUrl) {
            object[] results = this.EndInvoke(asyncResult);

            failureMessage = (string)(results[1]);
            handlingUrl = (string)(results[2]);
            return (bool)(results[0]);
        }

        // Activity Reset
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteActivityReset", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteActivityReset(string ssKey, int activityId, int processId, bool resetActivityUser, int tenantId, int userId, string locale, out string failureMessage) {
            object[] results = this.Invoke("ExecuteActivityReset", new object[] { ssKey, activityId, processId, resetActivityUser, tenantId, userId, locale });

            failureMessage = (string)(results[1]);
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteActivityReset(string ssKey, int activityId, int processId, int tenantId, int userId, string locale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteActivityReset", new object[] { ssKey, activityId, processId, tenantId, userId, locale }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteActivityReset(System.IAsyncResult asyncResult, out string failureMessage) {
            object[] results = this.EndInvoke(asyncResult);

            failureMessage = (string)(results[1]);
            return (bool)(results[0]);
        }

        // On Close Activity
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteOnClose", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteOnClose(string ssKey, int activityId, int processId, int tenantId, int userId, string locale, bool advanceProcess, bool skip, bool skipAll, List<Pair<string, object>> inputs, out string failureMessage, out List<Pair<int, ActivityKind>> nextActIds) {
            object[] results = this.Invoke("ExecuteOnClose", new object[] { ssKey, activityId, processId, tenantId, userId, locale, advanceProcess, skip, skipAll, inputs });

            failureMessage = (string)(results[1]);
            nextActIds = (List<Pair<int, ActivityKind>>)(results[2]);
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteOnClose(string ssKey, int activityId, int processId, int tenantId, int userId, string locale, bool advanceProcess, bool skip, bool skipAll, Dictionary<string, object> inputs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteOnClose", new object[] { ssKey, activityId, processId, tenantId, userId, locale, advanceProcess, skip, skipAll, inputs }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteOnClose(System.IAsyncResult asyncResult, out string failureMessage, out List<Pair<int, ActivityKind>> nextActIds) {
            object[] results = this.EndInvoke(asyncResult);

            failureMessage = (string)(results[1]);
            nextActIds = (List<Pair<int, ActivityKind>>)(results[2]);
            return (bool)(results[0]);
        }

        // On Schedule Activity
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteActivitySchedule", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteActivitySchedule(string ssKey, int activityId, int processId, DateTime startDate, int tenantId, int userId, string locale, out string failureMessage) {
            object[] results = this.Invoke("ExecuteActivitySchedule", new object[] { ssKey, activityId, processId, startDate, tenantId, userId, locale });

            failureMessage = (string)(results[1]);
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteActivitySchedule(string ssKey, int activityId, int processId, DateTime startDate, int tenantId, int userId, string locale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteActivitySchedule", new object[] { ssKey, activityId, processId, startDate, tenantId, userId, locale }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteActivitySchedule(System.IAsyncResult asyncResult, out string failureMessage) {
            object[] results = this.EndInvoke(asyncResult);

            failureMessage = (string)(results[1]);
            return (bool)(results[0]);
        }

        // Launch Process
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteProcessLaunch", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecuteProcessLaunch(string ssKey, int tenantId, int userId, int parentActivityId, int parentProcessId, List<Pair<string, object>> inputs, out List<Pair<int, ActivityKind>> nextActIds, out string failureMessage) {
            object[] results = this.Invoke("ExecuteProcessLaunch", new object[] { ssKey, tenantId, userId, parentActivityId, parentProcessId, inputs });

            nextActIds = (List<Pair<int, ActivityKind>>)(results[1]);
            failureMessage = (string)(results[2]);
            return (int)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteProcessTerminate(string ssKey, int tenantId, int userId, int parentActivityId, int parentProcessId, List<Pair<string, object>> inputs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteProcessTerminate", new object[] { ssKey, tenantId, userId, parentActivityId, parentProcessId, inputs }, callback, asyncState);
        }

        /// <remarks/>
        public int EndExecuteProcessTerminate(System.IAsyncResult asyncResult, out int nextHumanActivityId, out string failureMessage) {
            object[] results = this.EndInvoke(asyncResult);

            nextHumanActivityId = (int)(results[1]);
            failureMessage = (string)(results[2]);
            return (int)(results[0]);
        }

        // On Terminate Process
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteProcessTerminate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteProcessTerminate(string ssKey, int processId, int tenantId, int userId, out string failureMessage) {
            object[] results = this.Invoke("ExecuteProcessTerminate", new object[] { ssKey, processId, tenantId, userId });

            failureMessage = (string)(results[1]);
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteProcessTerminate(string ssKey, int processId, int tenantId, int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteProcessTerminate", new object[] { ssKey, processId, tenantId, userId }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteProcessTerminate(System.IAsyncResult asyncResult, out string failureMessage) {
            object[] results = this.EndInvoke(asyncResult);
            
            failureMessage = (string)(results[1]);
            return (bool)(results[0]);
        }

        // On Suspend Process
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteSetProcessSuspension", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteSetProcessSuspension(string ssKey, int processId, bool suspend, int tenantId, int userId, out string failureMessage) {
            object[] results = this.Invoke("ExecuteSetProcessSuspension", new object[] { ssKey, processId, suspend, tenantId, userId });

            failureMessage = (string)(results[1]);
            return (bool)(results[0]);
        }

        /// <remarks/>
        public System.IAsyncResult BeginExecuteSetProcessSuspension(string ssKey, int processId, bool suspend, int tenantId, int userId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteSetProcessSuspension", new object[] { ssKey, processId, suspend, tenantId, userId }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndExecuteSetProcessSuspension(System.IAsyncResult asyncResult, out string failureMessage) {
            object[] results = this.EndInvoke(asyncResult);

            failureMessage = (string)(results[1]);
            return (bool)(results[0]);
        }
    }
}
