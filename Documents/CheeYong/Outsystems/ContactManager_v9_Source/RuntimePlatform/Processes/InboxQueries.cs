/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.RuntimePlatform.Db;
using System;
using System.Collections.Generic;
using System.Data;
using System.Runtime.CompilerServices;
using OutSystems.Internal.Db;

namespace OutSystems.HubEdition.RuntimePlatform.Processes {
    public static class InboxQueries {

        #region Return structures
        public struct PaginationInfo {
            public int Total, Unseen;
        }

        public struct Activity {
            public int Id;
            public string Label, LabelLang, Details;
            public DateTime DueDate;
            public bool IsOpened, IsSeen;

            public Activity(IDataReader reader) {
                Id = reader.SafeGet<int>("ID");
                Label = reader.SafeGet<string>("LABEL", String.Empty);
                LabelLang = reader.SafeGet<string>("LABEL_LANG", String.Empty);
                Details = reader.SafeGet<string>("INBOX_DETAIL", String.Empty);
                DueDate = reader.SafeGet<DateTime>("DUE_DATE", BuiltInFunction.NullDate());
                IsOpened = reader.SafeGet<bool>("OPENED");
                IsSeen = reader.SafeGet<bool>("SEEN");
            }
        } 
        #endregion
        
        public static void InvalidateCachedTableNames() {
            DBRuntimePlatform.InvalidateCachedTableNamesForTaskbox();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static bool CheckUserPermissionForActivity(Transaction tran, int activityId, int userId, int tenantId) {
            return DBRuntimePlatform.Instance.CheckUserPermissionForActivity(tran, activityId, userId, tenantId);
        }
        
        public static PaginationInfo? GetActivityCount(Transaction trans, int userId, string locale, string additionalWhereClauses) {
            using (IDataReader reader = DBRuntimePlatform.Instance.GetActivityCount(trans, userId, AppInfo.GetAppInfo().Tenant.Id, locale, additionalWhereClauses)) {
                if (reader.Read()) {
                    return new PaginationInfo { Total = reader.SafeGet<int>("TOTAL"), Unseen = reader.SafeGet<int>("UNSEEN") };
                } else {
                    return null;
                }
            }
        }
        
        public static PaginationInfo? GetActivityCount(Transaction trans, int userId, string additionalWhereClauses) {
            return GetActivityCount(trans, userId, null, additionalWhereClauses);
        }

        public static PaginationInfo? GetActivityCount(Transaction trans, int userId) {
            return GetActivityCount(trans, userId, null);
        }

        public static IEnumerable<Activity> GetActivities(Transaction trans, int userId, int startIndex, string locale, 
                string additionalWhereClauses, int maxActivitiesReturned) {

            IList<Activity> result = new List<Activity>();
            IDataReader reader = DBRuntimePlatform.Instance.GetActivities(trans, userId, AppInfo.GetAppInfo().Tenant.Id, startIndex, locale, additionalWhereClauses, maxActivitiesReturned);
            using (reader) {
                while (reader.Read()) {
                    result.Add(new Activity(reader));
                }
            }

            return result;
        }
        
        public static Activity? GetNewOpenActivity(Transaction trans, int userId, int processId, string locale) {
            IDataReader reader = DBRuntimePlatform.Instance.GetNewOpenActivity(trans, userId, AppInfo.GetAppInfo().Tenant.Id, processId, locale);
            using (reader) {                
                if (reader.Read()) {
                    return new Activity(reader);
                } else {
                    return null;
                }
            }
        }
    }
}
