/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OutSystems.Extensibility;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform
{
    public class RequestTracer
    {

        private RequestEventDetails CommonRequestEventDetails;
        public RequestEventDetails MainRequestEventDetails;
        private Dictionary<string, ESpaceExternalCallTracer> externalCalls = new Dictionary<string, ESpaceExternalCallTracer>();
        private Dictionary<string, ESpaceInternalCallTracer> internalCalls = new Dictionary<string, ESpaceInternalCallTracer>();
        public IEnumerable<ESpaceExternalCallTracer> ESpaceExternalCalls { get { return externalCalls.Values; } }
        public IEnumerable<ESpaceInternalCallTracer> ESpaceInternalCalls { get { return internalCalls.Values; } }

        private string runningEndpointKey = "";
        private string runningEndpointName = "";
        private string runningActionKey = "";
        private string runningActionName = "";

        public const string DEFAULT_ACTION_KEY_SUFFIX = ".#(PageRender)";
        public const string DEFAULT_ACTION_NAME = "(PageRender)";

        public string ApplicationKey;
        public string ApplicationName;
        public string ModuleKey;
        public string ModuleName;
        public RequestTracerEventType MainEventType = RequestTracerEventType.Undefined;
        public string TenantKey { get { return (string)this.CommonRequestEventDetails[RequestEventDetails.TENANT_KEY]; } }
        public string TenantName { get { return (string)this.CommonRequestEventDetails[RequestEventDetails.TENANT_NAME]; } }
        public string EnvironmentKey { get { return (string)this.CommonRequestEventDetails[RequestEventDetails.ENVIRONMENT_KEY]; } }
        public string EnvironmentName { get { return (string)this.CommonRequestEventDetails[RequestEventDetails.ENVIRONMENT_NAME]; } }
        public string FrontEndName { get { return (string)this.CommonRequestEventDetails[RequestEventDetails.FRONTEND_NAME]; } }
        public string EntryActionKey { get; private set; }
        public string EntryActionName { get; private set; }
        public string EntryEndpointKey { get; private set; }
        public string EntryEndpointName { get; private set; }
        public string RequestKey { get; private set; }
        public string ExposedIntegrationType { get; private set; }
        public int SessionAcquisitionTime { get; private set; }
        public int SessionSize { get; private set; }
        public int ViewStateSize { get; private set; }
        public int UserId { get; private set; }
        public string ClientIP
        {
            get
            {
                AppInfo info = AppInfo.GetAppInfo();
                return (info == null) ? "" : RuntimePlatformUtils.GetRequestRealIP(info.OsContext.Context.Request);
            }
        }


        public int TotalServerRequestDuration { get; private set; }
        public int TotalQueriesTime
        {
            get
            {
                return AggregateExternalCallsByType(RequestTracerEventType.QueryExecuted, RequestEventDetails.DURATION);
            }
        }



        public int TotalQueriesCalls
        {
            get
            {
                return AggregateExternalCallsByType(RequestTracerEventType.QueryExecuted, ESpaceExternalCallDetails.NUMBER_OF_EXECUTIONS);
            }
        }
        public int TotalExtensionsTime
        {
            get
            {
                return AggregateExternalCallsByType(RequestTracerEventType.ExtensionExecuted, RequestEventDetails.DURATION);
            }
        }
        public int TotalExtensionsCalls
        {
            get
            {
                return AggregateExternalCallsByType(RequestTracerEventType.ExtensionExecuted, ESpaceExternalCallDetails.NUMBER_OF_EXECUTIONS);
            }
        }
        public int TotalConsumedIntegrationsTime
        {
            get
            {
                return AggregateExternalCallsByType(RequestTracerEventType.ConsumedIntegrationExecuted, RequestEventDetails.DURATION);
            }
        }
        public int TotalConsumedIntegrationsCalls
        {
            get
            {
                return AggregateExternalCallsByType(RequestTracerEventType.ConsumedIntegrationExecuted, ESpaceExternalCallDetails.NUMBER_OF_EXECUTIONS);
            }
        }
        public int TotalConsumedServiceActionsTime {
            get {
                return AggregateExternalCallsByType(RequestTracerEventType.ServiceActionExecuted, RequestEventDetails.DURATION);
            }
        }
        public int TotalConsumedServiceActionsCalls {
            get {
                return AggregateExternalCallsByType(RequestTracerEventType.ServiceActionExecuted, ESpaceExternalCallDetails.NUMBER_OF_EXECUTIONS);
            }
        }

        public DateTime RequestStartInstant { get; private set; }
        public DateTime RequestEndInstant { get; private set; }
        private int errorCount = 0;
        private bool hasDefaultActionBeenOverriden = false;

        private RequestEventsGenerator requestEventsGenerator;

        public RequestTracer(
            string applicationKey,
            string applicationName,
            string eSpaceKey,
            string eSpaceName,
            string tenantKey,
            string tenantName,
            string environmentKey,
            string environmentName,
            string frontEndName,
            bool forceEnableMonitoring)
        {
            this.RequestKey = Guid.NewGuid().ToString();
            this.ModuleKey = eSpaceKey;
            this.ModuleName = eSpaceName;
            this.ApplicationKey = applicationKey;
            this.ApplicationName = applicationName;

            this.CommonRequestEventDetails = new RequestEventDetails();
            this.CommonRequestEventDetails.Add(RequestEventDetails.TENANT_KEY, tenantKey);
            this.CommonRequestEventDetails.Add(RequestEventDetails.TENANT_NAME, tenantName);
            this.CommonRequestEventDetails.Add(RequestEventDetails.ENVIRONMENT_KEY, environmentKey);
            this.CommonRequestEventDetails.Add(RequestEventDetails.ENVIRONMENT_NAME, environmentName);
            this.CommonRequestEventDetails.Add(RequestEventDetails.FRONTEND_NAME, frontEndName == null ? "" : frontEndName);

            // check below for WHY this exists.
            requestEventsGenerator = new RequestEventsGenerator(this);
            if (forceEnableMonitoring) requestEventsGenerator.GetPerformanceMonitorStatusFrom(() => true);
        }

        public RequestTracer(
            string applicationKey,
            string applicationName,
            string eSpaceKey,
            string eSpaceName,
            string tenantKey,
            string tenantName,
            string environmentKey,
            string environmentName,
            string frontEndName)
            : this(
                applicationKey,
                applicationName,
                eSpaceKey,
                eSpaceName,
                tenantKey,
                tenantName,
                environmentKey,
                environmentName,
                frontEndName,
                false)
        {
        }

        public void RegisterAction(string key, string name, bool isDefault)
        {
            try
            {
                runningActionKey = key;
                runningActionName = name;

                if (!hasDefaultActionBeenOverriden && key != null && name != null)
                {
                    EntryActionKey = key;
                    EntryActionName = name;

                    if (!isDefault) hasDefaultActionBeenOverriden = true;
                }

                
            }
            catch (Exception e)
            {
                HandleRequestTracerException(e);
            }
        }

        public void RegisterAction(string key, string name)
        {
            RegisterAction(key, name, /* isDefault */ false);
        }

        public void RegisterEndpoint(string key, string name)
        {
            try
            {
                runningEndpointKey = key;
                runningEndpointName = name;

                if (EntryEndpointKey == null || EntryEndpointName == null)
                {
                    EntryEndpointKey = key;
                    EntryEndpointName = name;

                    RegisterAction(key + DEFAULT_ACTION_KEY_SUFFIX, DEFAULT_ACTION_NAME, /* isDefault */ true);
                }
            }
            catch (Exception e)
            {
                HandleRequestTracerException(e);
            }
        }

        public void RegisterExposedIntegrationType(string type)
        {
            ExposedIntegrationType = type;
        }

        public void RegisterBeginRequest(DateTime startTime)
        {
            RequestStartInstant = startTime;
        }

        public void RegisterSessionAcquisitionTime()
        {
            this.SessionAcquisitionTime = Convert.ToInt32(DateTime.Now.Subtract(RequestStartInstant).TotalMilliseconds);
        }

        public void RegisterSessionSize()
        {
            this.SessionSize = RuntimePlatformUtils.GetRetrievedSessionSize();
        }

        public void RegisterViewStateSize()
        {
            this.ViewStateSize = RuntimePlatformUtils.GetViewstateSize();
        }

        public void RegisterUserId(int userId) {
            this.UserId = userId;
        }

        public void RegisterError()
        {
            errorCount++;
        }

        public void RegisterEndRequest()
        {
            RegisterEndRequest(DateTime.Now);
        }

        public void RegisterEndRequest(DateTime endRequestInstant)
        {
            try
            {
                RequestEndInstant = endRequestInstant;

                if (MainEventType == RequestTracerEventType.Undefined)
                {
                    //no main event type declared means we do not want to create the event
                    return;
                }

                MainRequestEventDetails = new RequestEventDetails(CommonRequestEventDetails);

                MainRequestEventDetails[RequestEventDetails.END_POINT_NAME] = EntryEndpointName;
                MainRequestEventDetails[RequestEventDetails.END_POINT_KEY] = EntryEndpointKey;
                MainRequestEventDetails[RequestEventDetails.ACTION_NAME] = EntryActionName;
                MainRequestEventDetails[RequestEventDetails.ACTION_KEY] = EntryActionKey;

                TotalServerRequestDuration = Convert.ToInt32((RequestEndInstant - RequestStartInstant).TotalMilliseconds);
                MainRequestEventDetails[RequestEventDetails.DURATION] = TotalServerRequestDuration;

                MainRequestEventDetails[RequestEventDetails.TOTAL_QUERIES_TIME] = TotalQueriesTime;
                MainRequestEventDetails[RequestEventDetails.TOTAL_QUERIES_CALLS] = TotalQueriesCalls;
                MainRequestEventDetails[RequestEventDetails.TOTAL_EXTENSIONS_TIME] = TotalExtensionsTime;
                MainRequestEventDetails[RequestEventDetails.TOTAL_EXTENSIONS_CALLS] = TotalExtensionsCalls;
                MainRequestEventDetails[RequestEventDetails.TOTAL_CONSUMED_INTEGRATIONS_TIME] = TotalConsumedIntegrationsTime;
                MainRequestEventDetails[RequestEventDetails.TOTAL_CONSUMED_INTEGRATIONS_CALLS] = TotalConsumedIntegrationsCalls;
                MainRequestEventDetails[RequestEventDetails.TOTAL_CONSUMED_SERVICE_ACTION_TIME] = TotalConsumedServiceActionsTime;
                MainRequestEventDetails[RequestEventDetails.TOTAL_CONSUMED_SERVICE_ACTION_CALLS] = TotalConsumedServiceActionsCalls;

                MainRequestEventDetails.Add(RequestEventDetails.CLIENT_IP, ClientIP);

                if (errorCount > 0)
                {
                    MainRequestEventDetails.Add(RequestEventDetails.ERROR_COUNT, errorCount);
                }

                if (MainEventType == RequestTracerEventType.WebScreenServerExecuted)
                {
                    MainRequestEventDetails.Add(RequestEventDetails.SESSION_ACQUISITION_TIME, SessionAcquisitionTime);
                    MainRequestEventDetails.Add(RequestEventDetails.SESSION_SIZE, SessionSize);
                    MainRequestEventDetails.Add(RequestEventDetails.VIEWSTATE_SIZE, ViewStateSize);
                    if (UserId != 0) { // UserId 0 is an anonymous user
                        MainRequestEventDetails.Add(RequestEventDetails.USERID, UserId);
                    }
                }
                if (ExposedIntegrationType != null && ExposedIntegrationType != "")
                {
                    MainRequestEventDetails.Add(RequestEventDetails.INTEGRATION_TYPE, ExposedIntegrationType);
                }

            }
            catch (Exception e)
            {
                HandleRequestTracerException(e);
            }
        }

        
        private int AggregateExternalCallsByType(RequestTracerEventType eventType, string aggregateType)
        {
            IEnumerable<ESpaceExternalCallTracer> externalExecutionTracer = externalCalls.Values.
                Where((tracer) => tracer.EventType == eventType);
            return externalExecutionTracer.Aggregate(0, (acc, tracer) => acc + Convert.ToInt32(tracer.Details[aggregateType]));
        }

        public void RegisterQueryExecuted(string queryKey, string queryName, string ownerESpaceKey, string ownerESpaceName, int executionDuration, DateTime startTime) {
            RegisterExternalCall(RequestTracerEventType.QueryExecuted, queryKey, queryName, ownerESpaceKey, ownerESpaceName, executionDuration, startTime);
        }

        public void RegisterExtensionExecuted(string extensionKey, string extensionName, string ownerESpaceKey, string ownerESpaceName, int executionDuration, DateTime startTime)
        {
            RegisterExternalCall(RequestTracerEventType.ExtensionExecuted, extensionKey, extensionName, ownerESpaceKey, ownerESpaceName, executionDuration, startTime);
        }

        public void RegisterConsumedIntegrationExecuted(string actionName, string actionKey, string ownerESpaceKey, string ownerESpaceName, string type, int duration, DateTime instant, string endpoint)
        {
            try
            {
                RegisterExternalCall(RequestTracerEventType.ConsumedIntegrationExecuted, actionKey, actionName, ownerESpaceKey, ownerESpaceName, duration, instant);

                ESpaceExternalCallTracer tracer = externalCalls[GetExecutionKey(actionKey, ownerESpaceKey)];
                tracer.Details[RequestEventDetails.INTEGRATION_TYPE] = type;
                if (!endpoint.IsEmpty())
                {
                    tracer.Details[RequestEventDetails.INTEGRATION_ENDPOINT] = endpoint;
                }

            }
            catch (Exception e)
            {
                HandleRequestTracerException(e);
            }
        }

        public void RegisterServiceActionExecuted(string serviceActionKey, string serviceActionName, string ownerESpaceKey, string ownerESpaceName, int executionDuration, DateTime startTime, string producerEspaceKey, bool executedWithError) {
            RegisterExternalCall(RequestTracerEventType.ServiceActionExecuted, serviceActionKey, serviceActionName, ownerESpaceKey, ownerESpaceName, executionDuration, startTime, producerEspaceKey, executedWithError);
        }

        private void RegisterExternalCall(RequestTracerEventType eventType, string objectKey, string objectName, string ownerESpaceKey, string ownerEspaceName, int executionDuration, DateTime startTime, string producerEspaceKey = "", bool executedWithError = false) {
            try {
                if (objectName == "" || objectKey == "" || executionDuration < 0) return;

                if (!externalCalls.ContainsKey(GetExecutionKey(objectKey, ownerESpaceKey))) {
                    AddNewExternalCallTracer(eventType, objectKey, objectName, ownerESpaceKey, ownerEspaceName, startTime, producerEspaceKey);
                }

                externalCalls[GetExecutionKey(objectKey, ownerESpaceKey)].Details.AddExecution(executionDuration, executedWithError);
            }
            catch (Exception e) {
                HandleRequestTracerException(e);
            }
        }

        public void RegisterInternalCall(string objectKey, string objectName, string eSpaceKey, string eSpaceName) {
            RegisterInternalCall(objectKey, objectName, eSpaceKey, eSpaceName, RequestTracerEventType.ActionExecuted);
        }

        public void RegisterInternalCall( string objectKey, string objectName, string eSpaceKey, string eSpaceName, RequestTracerEventType eventType) {
            if (!requestEventsGenerator.IsInternalCallExecutedEnabled()) {
                return;
            }

            DateTime startTime = System.DateTime.Now;
            try {
                if (objectName == "" || objectKey == "" || eSpaceKey == "" || eSpaceName == "") return;

                if (!internalCalls.ContainsKey(GetExecutionKey(objectKey, eSpaceKey))) {
                    AddNewInternalCallTracer(eventType, objectKey, objectName, eSpaceKey, eSpaceName, startTime);
                }

                internalCalls[GetExecutionKey(objectKey, eSpaceKey)].Details.AddExecution();
            } catch (Exception e) {
                HandleRequestTracerException(e);
            }
        }

        private ESpaceExternalCallTracer AddNewExternalCallTracer(RequestTracerEventType eventType, string objectKey, string objectName, string ownerESpaceKey, string ownerEspaceName, DateTime instant, string producerEspaceKey) {

            ESpaceExternalCallTracer result = new ESpaceExternalCallTracer {
                    StartInstant = instant,
                    EventType = eventType,
                    Details = new ESpaceExternalCallDetails(objectKey, objectName, ownerESpaceKey, ownerEspaceName, producerEspaceKey, CommonRequestEventDetails)
                };

            result.Details[RequestEventDetails.END_POINT_NAME] = runningEndpointName;
            result.Details[RequestEventDetails.END_POINT_KEY] = runningEndpointKey;
            result.Details[RequestEventDetails.ACTION_NAME] = runningActionName;
            result.Details[RequestEventDetails.ACTION_KEY] = runningActionKey;

            externalCalls.Add(
                GetExecutionKey(objectKey, ownerESpaceKey),
                result
            );

            return result;
        }

        private ESpaceInternalCallTracer AddNewInternalCallTracer(RequestTracerEventType eventType, string objectKey, string objectName, string ownerESpaceKey, string ownerEspaceName, DateTime instant) {
            ESpaceInternalCallTracer result = new ESpaceInternalCallTracer {
                StartInstant = instant,
                EventType = eventType,
                Details = new ESpaceInternalCallDetails(objectKey, objectName, ownerESpaceKey, ownerEspaceName, CommonRequestEventDetails)
            };

            result.Details[RequestEventDetails.END_POINT_NAME] = runningEndpointName;
            result.Details[RequestEventDetails.END_POINT_KEY] = runningEndpointKey;
            result.Details[RequestEventDetails.ACTION_NAME] = runningActionName;
            result.Details[RequestEventDetails.ACTION_KEY] = runningActionKey;

            internalCalls.Add(
                GetExecutionKey(objectKey, ownerESpaceKey),
                result
            );

            return result;
        }

        private string GetExecutionKey(string objectKey, string objectESpaceKey)
        {
            return objectKey + objectESpaceKey + runningEndpointKey;
        }

        private void HandleRequestTracerException(Exception e)
        {
            OSTrace.Error("", e);
        }

        public void EmitEvents()
        {
            try
            {
                foreach (RequestEvent req in requestEventsGenerator.RequestEvents)
                {
                    req.Write();
                }
                requestEventsGenerator.ClearRequestEvents();
            }
            catch (Exception e)
            {
                HandleRequestTracerException(e);
            }
        }

        // We're just keeping the following methods so we don't break compatibility.
        public IEnumerable<RequestEvent> RequestEvents { get { return requestEventsGenerator.RequestEvents; } }
        public void CreateEvents()
        {
            requestEventsGenerator.CreateEvents();
        }
        public void CreateEvent(RequestEvent requestEvent)
        {
            requestEventsGenerator.CreateEvent(requestEvent);
        }
        public void GetPerformanceMonitorStatusFrom(Func<bool> isPerformanceMonitorEnabled)
        {
            requestEventsGenerator.GetPerformanceMonitorStatusFrom(isPerformanceMonitorEnabled);
        }
        public void SetEventCreationThreshold(Func<RequestTracerEventType, int> getThreshold)
        {
            requestEventsGenerator.EventCreationThreshold = getThreshold;
        }
        public void EnableExposedIntegrationEvents()
        {
            requestEventsGenerator.IsExposedIntegrationExecutedEnabled = () => true;
        }

        public void EnableInternalCallExecutionEvents() {
            requestEventsGenerator.IsInternalCallExecutedEnabled = () => true;
        }

        public void EnableServiceActionExecutionEvents() {
            requestEventsGenerator.IsServiceActionExecutedEnabled = () => true;
        }


    }
}
