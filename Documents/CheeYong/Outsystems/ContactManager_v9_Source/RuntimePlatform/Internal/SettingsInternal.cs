/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Security.AccessControl;
using Microsoft.Win32;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

// ReSharper disable once CheckNamespace
namespace OutSystems.Internal.RuntimePlatform {
    public class SettingsInternal {

        private const string osRegistryKey = "Software\\OutSystems";
        private const string settingSubKey = osRegistryKey + "\\Platform Server";
        private const string machineNameSetting = "MachineName";
        private const string serialSetting = "SerialNumber";

        private static string currentSerial;
                
        private static string GetSerialFromOssysServer() {

            using (var tran = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
                const string sql = "SELECT host_serial FROM ossys_Server where upper(name)=@hostname";
                using (var cmd = tran.CreateCommand(sql)) {
                    cmd.CreateParameter("@hostname", DbType.String, Settings.MachineName.ToUpper());
                    return cmd.ExecuteScalar().ToString();
                }
            }
        }
                
        private static RegistryKey SettingsRegistryKey {
            get { return Registry.LocalMachine.CreateSubKey(settingSubKey); }
        }

        [DoNotObfuscate]
        internal static int BestAlgorithmIndexForSettingsEncryption {
            [DoNotObfuscate] 
            get {
                return SecureConfidentialInformationEncryption.Algorithms.BestAlgorithmIndex;
            }
        }
        
        public static string MachineSerial {
            get {
                if (string.IsNullOrEmpty(currentSerial)) {

                    string exceptionMessage = string.Empty;

                    // get the serial number from the registry. Note that this is used only for
                    // accessing the ossys_parameter table, and not for license validation purposes,
                    // so there are no tampering concerns
                    try {
                        using (RegistryKey subKey = SettingsRegistryKey) {
                            object serialValue = subKey.GetValue(serialSetting);
                            currentSerial = serialValue == null ? null : serialValue.ToString();
                        }
                    } catch (Exception e) {
                        exceptionMessage = "Could not get serial from registry." + Environment.NewLine + e;
                    }

                    //  if could not get the serial from the ossys_server
                    if (string.IsNullOrEmpty(currentSerial)) {
                        try {
                            currentSerial = GetSerialFromOssysServer();
                        } catch (Exception e) {
                            if (!string.IsNullOrEmpty(exceptionMessage)) {
                                exceptionMessage += Environment.NewLine;
                            }
                            exceptionMessage += "Could not get serial from database." + Environment.NewLine + e;
                        }
                    }

                    if (string.IsNullOrEmpty(currentSerial)) {
                        throw new InvalidOperationException("Could not get host information. Please make sure the ConfigurationTool has already run." +
                            Environment.NewLine + exceptionMessage);
                    }
                }

                return currentSerial;
            }
        }
     
    }
}
