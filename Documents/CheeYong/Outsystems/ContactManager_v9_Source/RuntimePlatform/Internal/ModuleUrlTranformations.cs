/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Linq;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;
using static OutSystems.HubEdition.RuntimePlatform.Internal.DeploymentZoneResolution;

namespace OutSystems.HubEdition.RuntimePlatform.Internal {

    [DoNotObfuscateType]
    public class ModuleUrlTranformations {
        internal static string GetModuleNameFromUri(Uri uri) {
            if (uri != null && uri.IsAbsoluteUri && uri.Segments.Length > 0) {
                return uri.LocalPath.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
            } else {
                return null;
            }
        }

        internal static ZoneSettings GetHostNameForModuleResource(Uri moduleResourceUrl) {
            var moduleName = GetModuleNameFromUri(moduleResourceUrl);
            
            if (moduleName != null) {
                return DeploymentZoneResolution.ByModuleName(moduleName);
            } else {
                return new ZoneSettings(false,null);
            }
        }

        internal static Uri ReplaceUrlHostByModuleZone(Uri moduleResourceUrl) {
            var zoneSettings = GetHostNameForModuleResource(moduleResourceUrl);

            if (zoneSettings.Address != null) {
                moduleResourceUrl = ReplaceHostAndScheme(moduleResourceUrl, zoneSettings.Address, zoneSettings.EnableHttps);
            }

            return moduleResourceUrl;
        }

        internal static Uri ReplaceHostAndScheme(Uri originalUrl, string newHostName, bool useHttps) {
            string newScheme = useHttps ? Uri.UriSchemeHttps : Uri.UriSchemeHttp;
            var builder = new UriBuilder(originalUrl) {
                Host = newHostName,
                Scheme = newScheme,
                Port = -1,
            };

            return builder.Uri;
        }

        private static Uri CreateUri(string uriString) {
            var baseUri = new Uri("http://" + RuntimePlatformSettings.Misc.InternalAddress.GetValue());
            return new Uri(baseUri, uriString);
        }

        public static Uri ReplaceLoopbackAddressByModuleZone(string moduleResourceUrl) {
            var uri = CreateUri(moduleResourceUrl);

            if (uri != null && NetworkInterfaceUtils.IsLoopbackAddress(uri.Host)) {
                return ReplaceUrlHostByModuleZone(uri);
            } else {
                return uri;
            }
        }
    }
}
