/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;
using OutSystems.RuntimeCommon.PubSub;
using OutSystems.RuntimeCommon.Settings;

namespace OutSystems.HubEdition.RuntimePlatform.Internal.Cache {
    public class FileBasedPubSubCache : PubSubCache {
        
        public FileBasedPubSubCache(ISettingsProvider settingsProvider, PubSubJobsExecutor executor = null, string cacheInstanceKey = null) : base(new FileBasedPubSub(GetCacheControlPath(settingsProvider), executor), cacheInstanceKey) { }

        protected override IEnumerable<string> TransformDependency(ICacheDependency dependency) {
            return dependency?
                .DependencyInvalidationKeys()
                .Select(TransformDependency);
        }

        protected override string TransformDependency(ICacheInvalidationKey key) {
            return key.GetKeyAsString() + RuntimePlatformUtils.CACHE_CONTROL_FILE_EXT;
        }
        public static string GetCacheControlPath(ISettingsProvider settingsProvider) {
            string path = settingsProvider.Get<string>(RuntimePlatformSettings.Cache.CacheControlPath);
            if (!path.IsEmpty() && !path.EndsWith(FileSystemUtils.PathSeparator)) {
                path = path + FileSystemUtils.PathSeparator;
            }
            return path ?? string.Empty;
        }
    }
}