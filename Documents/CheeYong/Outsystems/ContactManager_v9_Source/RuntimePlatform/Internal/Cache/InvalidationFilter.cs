/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OutSystems.RuntimeCommon.PubSub;

namespace OutSystems.HubEdition.RuntimePlatform.Internal.Cache {
    internal class InvalidationFilter {
        private ConcurrentDictionary<string, List<OnMessageCallback>> callbacks = new ConcurrentDictionary<string, List<OnMessageCallback>>();
        private object callbacksLocker = new object();
        public readonly string InstanceKey = Guid.NewGuid().ToString();

        public void RegisterForTopics(OnMessageCallback cb, List<string> topics) {
            lock (callbacksLocker) {
                foreach (var topic in topics) {
                    if (callbacks.ContainsKey(topic)) {
                        callbacks[topic].Add(cb);
                    } else {
                        callbacks[topic] = new List<OnMessageCallback>() { cb };
                    }
                }
            }
        }

        public void UnregisterForTopics(OnMessageCallback cb, List<string> topics) {
            lock (callbacksLocker) {
                foreach (var topic in topics) {
                    if (callbacks.ContainsKey(topic)) {
                        callbacks[topic].Remove(cb);
                    }
                }
            }
        }

        public void OnMessageReceived(object obj) {
            // Ignore messages when they came from itself
            if (obj is PubSubMessage message && !InstanceKey.Equals(message.Data)) {
                if (callbacks.TryGetValue(message.TopicName, out var cbs)) {
                    foreach (var cb in cbs.ToArray()) {
                        cb?.Invoke(message);
                    }
                }
            }
        }
    }
}
