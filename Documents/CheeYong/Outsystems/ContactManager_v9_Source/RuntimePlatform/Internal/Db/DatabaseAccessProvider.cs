/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;
using OutSystems.HubEdition.RuntimePlatform.Db;

namespace OutSystems.Internal.Db {

    public class DatabaseAccessProvider<TDatabaseServices> : IDatabaseAccessProvider<TDatabaseServices> where TDatabaseServices : IDatabaseServices {

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseAccessProvider&lt;TDatabaseServices&gt;"/> class.
        /// This constructor can be used to create a provider with a shared transaction manager, 
        /// while keeping its own database services.
        /// </summary>
        /// <param name="services">The database services associated with the provider</param>
        /// <param name="manager">The transaction manager used to obtain transactions.</param>        
        public DatabaseAccessProvider(TDatabaseServices services, ITransactionManager manager) {
            DatabaseServices = services;
            TransactionManager = manager;
        }

        /// <summary>
        /// Gets the transaction manager used by the provider.
        /// </summary>
        /// <value>The transaction manager.</value>
        public ITransactionManager TransactionManager { get; private set; }

        /// <summary>
        /// Gets the database services used by the provider.
        /// </summary>
        /// <value>The database services.</value>
        public TDatabaseServices DatabaseServices { get; private set; }

        IDatabaseServices IDatabaseAccessProvider.DatabaseServices { get { return DatabaseServices; } }

        /// <summary>
        /// Gets the main transaction from this provider that is automatically commited in the end of the request. 
        /// This should be used mostly for inserts and updates, but it can also be used for readers that are closed immediatelly.
        /// </summary>
        public virtual Transaction GetRequestTransaction() {
            // #781554 - Don't use the Request Transaction in sevices 
            if (System.Web.HttpContext.Current == null) {
                return GetCommitableTransaction();
            } else {
                return new ManagedTransaction(TransactionManager, TransactionManager.GetRequestTransaction(), DatabaseAccess.DatabaseBehaviours);
            }
        }

        /// <summary>
        /// Creates a new private transaction from this provider that can be explicitly commited and rolledback. 
        /// This should be used for inserts and updates that require an immediate commit or rollback.
        /// </summary>
        public virtual Transaction GetCommitableTransaction() {
            return new PrivateManagedTransaction(TransactionManager, TransactionManager.GetCommitableTransaction(), DatabaseAccess.DatabaseBehaviours);
        }

        /// <summary>
        /// Gets a transaction from this provider that is automatically closed in the end of the request. 
        /// This should be used mostly for long living readers or readers that are used at the same time as other readers.
        /// NOTE: this can be the main or a pooled transaction depending on the SGBD.
        /// </summary>
        public virtual Transaction GetReadOnlyTransaction() {
            // #781554 - Don't use the Request Transaction in sevices 
            if (System.Web.HttpContext.Current == null) {
                return GetCommitableTransaction();
            } else {
                return new ManagedTransaction(TransactionManager, TransactionManager.GetReadOnlyTransaction(), DatabaseAccess.DatabaseBehaviours);
            }
        }

        /// <summary>
        /// Creates a new unmanaged connection using this provider's configuration
        /// </summary>
        public DatabaseConnection GetConnection() {
            return new DatabaseConnection(DatabaseServices, DatabaseServices.TransactionService.CreateConnection(), DatabaseAccess.DatabaseBehaviours);
        }

        /// <summary>
        /// Executes a query using this provider's transaction manager and associates it to a given record list.
        /// This should be used for fetching results in batches to a record list (e.g. simple and advanced queries).
        /// </summary>
        /// <param name="cmd">The command to execute</param>
        /// <param name="rl">Record list to associate with the data reader</param>
        /// <param name="description">Brief description of the query, for audit</param>
        public void ExecuteQuery<T>(Command cmd, GenericRecordList<T> rl, string description) where T : ITypedRecord<T> {
            ExecuteQuery(cmd, rl, description, false, false);
        }

        public void ExecuteQuery<T>(Command cmd, GenericRecordList<T> rl, string description, bool transformParameters, bool skipLog) where T : ITypedRecord<T> {
            var startTime = DateTime.Now;
            var reader = cmd.ExecuteReader(description, true, transformParameters, true);
            rl.Reader = reader;
            // Making sure all readers associated with RecordLists are also associated 
            // with their transaction (so they are disposed during FreeupResources).
            TransactionManager.AssociateReader(cmd.DriverCommand.Transaction, reader);
            if (!skipLog) {
                cmd.LogSlowQuery(startTime, description, true);
            }
        }

        /// <summary>
        /// Commits all transactions managed by this provider
        /// </summary>
        public void CommitAllTransactions() {
            TransactionManager.CommitAllTransactions();
        }

        /// <summary>
        /// Rollsback all transactions managed by this provider
        /// </summary>
        public void RollbackAllTransactions() {
            TransactionManager.RollbackAllTransactions();
        }

        /// <summary>
        /// Releases all transactions (pooled and main) from this provider, commiting or rollingback
        /// depending on the value of "commit".
        /// </summary>
        /// <param name="commit">True to commit the transactions, false to rollback.</param>
        public void FreeupResources(bool commit) {
            TransactionManager.FreeupResources(commit);
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose() {
            TransactionManager.Dispose();
        }

        /// <summary>
        /// Determines whether the specified <see cref="object" />, is equal to this instance.
        /// This method will compare the database configurations of each object.
        /// </summary>
        /// <param name="obj">The <see cref="object" /> to compare with this instance.</param>
        /// <returns>
        ///   <c>true</c> if the specified <see cref="object" /> is equal to this instance; otherwise, <c>false</c>.
        /// </returns>
        public override bool Equals(object obj) {
            return (obj is IDatabaseAccessProvider<TDatabaseServices> other) &&
                other.DatabaseServices.DatabaseConfiguration.Equals(DatabaseServices.DatabaseConfiguration);
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. </returns>
        public override int GetHashCode() {
            return DatabaseServices.DatabaseConfiguration.GetHashCode();
        }
    }
}
