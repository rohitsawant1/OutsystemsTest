/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Settings;
using DAL = OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using DALPlatform = OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;

// ReSharper disable once CheckNamespace
namespace OutSystems.Internal.Db {
    public class DatabaseSettingsSerialization {

        public delegate string settingsProviderDelegate(ISetting<string> settingKey);

        /// <summary>
        /// Class that represents an exception that occurs during deserialization of a configuration.
        /// </summary>
        public class ConfigurationUnWrapException : Exception {
            public ConfigurationUnWrapException(Exception e) : base(e.Message, e) { }
        }

        public enum Source {
            Application,
            Services
        }

        public enum DataSpace {
            Platform,
            Business,
            Logging
        }

        public enum User {
            Admin,
            Runtime,
            Session,
        }
    }


    public static class DatabaseConfigurations {

        public const string ProviderKeyName = "ProviderKey";
        public const string SettingPrefix = "OutSystems.DB";

        public static bool IsSettingKey(string key) {
            return key.StartsWith(SettingPrefix);
        }

        internal static void Fill(object conf, Dictionary<string, object> @params) {
            var meta = new MetaDatabaseConfiguration(conf);
            foreach (var p in @params) {
                var setter = meta.GetParameter(p.Key);
                if (setter != null) {
                    object value = p.Value;
                    string strValue = (value == null)? null: value.ToString();
                    setter.Set(setter.Encrypt ? SecureConfidentialInformationEncryption.TryDecryptString(strValue) : strValue);
                }
            }
        }

        internal static string GetParameter(object conf, string name) {
            var meta = new MetaDatabaseConfiguration(conf);
            var param = meta.GetParameter(name);
            return (param == null)? "": param.Get();
        }

        internal static void SetParameters(object conf, Dictionary<string, object> @params) {
            Fill(conf, @params);
        }
        
    }

    sealed public class IntegrationDeserializer {

        private readonly DAL.IntegrationDeserializer dalDeserializer;
        private readonly Func<DatabaseProviderKey, IIntegrationDatabaseConfiguration> createConf;

        internal IntegrationDeserializer(Func<DatabaseProviderKey, IIntegrationDatabaseConfiguration> createConf, DAL.IntegrationDeserializer dalDeserializer) {
            this.createConf = createConf;
            this.dalDeserializer = dalDeserializer;
        }

        public IIntegrationDatabaseConfiguration Deserialize(string serialized, Func<string, string> valueDecrypter) {
            try {
                TextReader reader = new StringReader(serialized);
                string providerKeyLine = reader.ReadLine();

                if (providerKeyLine == null) {
                    throw new InvalidOperationException("Missing provider key in configuration");
                }

                var providerKey = DatabaseProviderKey.Deserialize(providerKeyLine.Replace(DatabaseConfigurations.ProviderKeyName + "=", ""));
                var config = createConf(providerKey);
                string encryptedConfig = reader.ReadLine();
                
                if (!String.IsNullOrEmpty(encryptedConfig)) {
                    dalDeserializer.Deserialize(valueDecrypter(encryptedConfig), config);
                }

                return config;
            } catch (Exception e) {
                throw new DatabaseSettingsSerialization.ConfigurationUnWrapException(e);
            }
        }

        public IIntegrationDatabaseConfiguration Deserialize(string serialized) {
            return Deserialize(serialized, SecureConfidentialInformationEncryption.TryDecryptString);
        }
    }

    sealed public class Deserializer<TConfiguration> where TConfiguration : class {
        private const string ProviderKeyAttribute = "ProviderKey";

        private readonly Func<DatabaseProviderKey, TConfiguration> createConf;
        private readonly DAL.Deserializer<TConfiguration> dalDeserializer;

        public string Tag { get { return dalDeserializer.Tag; } }

        internal Deserializer(Func<DatabaseProviderKey, TConfiguration> createConf, DAL.Deserializer<TConfiguration> dalDeserializer) {
            this.createConf = createConf;
            this.dalDeserializer = dalDeserializer;
        }

        public TConfiguration DeserializeFromDocument(XElement xml, bool shouldThrowException) {
            var section = xml.Element(Tag);
            
            if (section == null) {
                if(shouldThrowException) {
                    throw new ConfigurationSerializationException("Missing Session Database Configuration Section " + Tag);
                } else {
                    return default(TConfiguration);
                }
            }

            return Deserialize(section);
        }

        public TConfiguration Deserialize(XElement xml) {
            try {
                var key = xml.Attribute(ProviderKeyAttribute);
                if (key == null) {
                    throw new ConfigurationSerializationException("No attribute " + ProviderKeyAttribute + " section " + xml.Name.LocalName);
                }

                var conf = createConf(DatabaseProviderKey.Deserialize(key.Value));
                dalDeserializer.Deserialize(xml, conf);
                return conf;
            } catch (Exception e) {
                throw new ConfigurationSerializationException(e);
            }
        }

    }

    public static class Deserializers {

        public static Deserializer<IPlatformDatabaseConfiguration> ForPlatform(Func<DatabaseProviderKey, IPlatformDatabaseConfiguration> createConf, 
                Func<string, string> valueDecrypter) {

            var dd = DALPlatform.Deserializers.ForPlatform;
            dd.ValueDecrypter = valueDecrypter;
            return new Deserializer<IPlatformDatabaseConfiguration>(createConf, dd);
        }

        public static Deserializer<ISettableTwoUserDatabaseConfiguration> ForLogging(Func<DatabaseProviderKey, ISettableTwoUserDatabaseConfiguration> createConf,
                Func<string, string> valueDecrypter)
        {

            var dd = DALPlatform.Deserializers.ForLogging;
            dd.ValueDecrypter = valueDecrypter;
            return new Deserializer<ISettableTwoUserDatabaseConfiguration>(createConf, dd);
        }

        public static Deserializer<ISessionDatabaseConfiguration> ForSession(Func<DatabaseProviderKey, ISessionDatabaseConfiguration> createConf,
                Func<string, string> valueDecrypter) {

            var dd = DALPlatform.Deserializers.ForSession;
            dd.ValueDecrypter = valueDecrypter;
            return new Deserializer<ISessionDatabaseConfiguration>(createConf, dd);
        }

        public static IntegrationDeserializer ForIntegration(Func<DatabaseProviderKey, IIntegrationDatabaseConfiguration> createConf) {
            return new IntegrationDeserializer(createConf, DAL.Deserializers.ForIntegration);
        }

        public static Deserializer<ISettableTwoUserDatabaseConfiguration> ForRuntime(Func<DatabaseProviderKey, ISettableTwoUserDatabaseConfiguration> createConf,
            Func<string, string> valueDecrypter) {
                var dd = DALPlatform.Deserializers.ForRuntime;
                dd.ValueDecrypter = valueDecrypter;
                return new Deserializer<ISettableTwoUserDatabaseConfiguration>(createConf, dd);
        }
    }

    public sealed class IntegrationSerializer {

        private readonly DAL.IntegrationSerializer dalSerializer;

        internal IntegrationSerializer(DAL.IntegrationSerializer dalSerializer) {
            this.dalSerializer = dalSerializer;
        }

        public string Serialize(IIntegrationDatabaseConfiguration conf, Func<string, string> valueEncrypter) {
            var sb = new StringBuilder();
            sb.AppendLine(DatabaseConfigurations.ProviderKeyName + "=" + conf.DatabaseProvider.Key.Serialize());
            sb.AppendLine(valueEncrypter(dalSerializer.Serialize(conf)));
            return sb.ToString();
        }

        public string Serialize(IIntegrationDatabaseConfiguration conf) {
            return Serialize(conf, SecureConfidentialInformationEncryption.EncryptMaintainingCompatibility);
        }
    }

    public sealed class Serializer<TConfiguration> {
        private const string ProviderKeyAttribute = "ProviderKey";

        private readonly DAL.Serializer<TConfiguration> dalSerializer;
        private readonly Func<TConfiguration, DatabaseProviderKey> keyExtractor;

        internal Serializer(Func<TConfiguration, DatabaseProviderKey> keyExtractor, DAL.Serializer<TConfiguration> dalSerializer) {
            this.keyExtractor = keyExtractor;
            this.dalSerializer = dalSerializer;
        }

        private static void AddKey(DatabaseProviderKey key, XElement xmlConf) {
            xmlConf.Add(new XAttribute(ProviderKeyAttribute, key.Serialize()));
        }

        public XElement Serialize(TConfiguration conf) {
            var xml = dalSerializer.Serialize(conf);
            AddKey(keyExtractor(conf), xml);
            return xml;
        }

    }

    public static class Serializers {

        public static Serializer<IPlatformDatabaseConfiguration> ForPlatform(Func<string, string> valueEncrypter) {
            var dalSerializer = DALPlatform.Serializers.ForPlatform;
            dalSerializer.ValueEncrypter = valueEncrypter;
            return new Serializer<IPlatformDatabaseConfiguration>(c => c.DatabaseProvider.Key, dalSerializer);
        }

        public static Serializer<ISettableTwoUserDatabaseConfiguration> ForLogging(Func<string, string> valueEncrypter)
        {
            var dalSerializer = DALPlatform.Serializers.ForLogging;
            dalSerializer.ValueEncrypter = valueEncrypter;
            return new Serializer<ISettableTwoUserDatabaseConfiguration>(c => c.DatabaseProvider.Key, dalSerializer);
        }

        public static Serializer<ISettableTwoUserDatabaseConfiguration> ForRuntime(Func<string, string> valueEncrypter) {
            var dalSerializer = DALPlatform.Serializers.ForRuntime;
            dalSerializer.ValueEncrypter = valueEncrypter;
            return new Serializer<ISettableTwoUserDatabaseConfiguration>(c => c.DatabaseProvider.Key, dalSerializer);
        }

        public static Serializer<ISessionDatabaseConfiguration> ForSession(Func<string, string> valueEncrypter) {
            var dalSerializer = DALPlatform.Serializers.ForSession;
            dalSerializer.ValueEncrypter = valueEncrypter;

            return new Serializer<ISessionDatabaseConfiguration>(c => c.PlatformDatabaseProvider.Key, dalSerializer);
        }

        public static IntegrationSerializer ForIntegration {
            get {
                return new IntegrationSerializer(DAL.Serializers.ForIntegration);
            }
        }
    }

    public static class RuntimeDatabaseConfigurations {

        public static void Fill(IRuntimeDatabaseConfiguration conf, string prefix, ISettingsProvider settingsProvider) {
            var meta = new MetaDatabaseConfiguration(conf);
            var @params = meta.AllParameters;

            foreach (var setter in @params) {
                if (setter != null && setter.Persist) {
                    var setting = new Setting<string>(prefix + setter.Name, null, setter.Encrypt);
                    string value = settingsProvider.Get(setting);

                    if (value != null) {
                        setter.Set(value);
                    }
                }
            }
        }

        public static IRuntimeDatabaseConfiguration For(
            DatabasePluginProvider<IPlatformDatabaseProvider> provider,
            DatabaseSettingsSerialization.Source source,
            DatabaseSettingsSerialization.User user,
            DatabaseSettingsSerialization.DataSpace dataSpace,
            ISettingsProvider settingsProvider)
        {
            var providerKeySetting = new Setting<string>(BuildSettingName(source, user, dataSpace, DatabaseConfigurations.ProviderKeyName), string.Empty);
            var providerKeyString = settingsProvider.Get(providerKeySetting);
            if (string.IsNullOrEmpty(providerKeyString)) {
                return null;
            }

            var providerKey = DatabaseProviderKey.Deserialize(providerKeyString);
            var conf = provider.GetImplementation(providerKey).CreateEmptyRuntimeDatabaseConfiguration();

            RuntimeDatabaseConfigurations.Fill(conf, BuildSettingName(source, user, dataSpace, ""), settingsProvider);

            return conf;
        }

        public static void SetParameter(this IRuntimeDatabaseConfiguration conf, string name, string value) {
            DatabaseConfigurations.Fill(conf, new Dictionary<string, object> { { name, value } });
        }

        public static string GetParameter(this IRuntimeDatabaseConfiguration conf, string name) {
            return DatabaseConfigurations.GetParameter(conf, name);
        }

        public static void SetParameters(this IRuntimeDatabaseConfiguration conf, Dictionary<string, object> @params) {
            DatabaseConfigurations.Fill(conf, @params);
        }
        
        public static void SetFor(IRuntimeDatabaseConfiguration conf,
            DatabaseSettingsSerialization.Source source, 
            DatabaseSettingsSerialization.User user,
            DatabaseSettingsSerialization.DataSpace dataSpace,
            Action<ISetting<string>, string> setter) {

            setter(new Setting<string>(BuildSettingName(source, user, dataSpace, DatabaseConfigurations.ProviderKeyName), null), conf.DatabaseProvider.Key.Serialize());

            var wrapper = new MetaDatabaseConfiguration(conf);
            foreach (var param in wrapper.PersistableParameters) {
                setter(new Setting<string>(BuildSettingName(source, user, dataSpace, param.Name), null, param.Encrypt), param.Get());
            }
        }

        private static string BuildSettingName(DatabaseSettingsSerialization.Source source, DatabaseSettingsSerialization.User user, DatabaseSettingsSerialization.DataSpace dataSpace, string settingName) {

            string dataSpaceStr = null;
            switch (dataSpace) {
                case DatabaseSettingsSerialization.DataSpace.Business:
                    dataSpaceStr = "Business";
                    break;
                case DatabaseSettingsSerialization.DataSpace.Logging:
                    dataSpaceStr = "Logging";
                    break;
                default:
                    dataSpaceStr = "Platform";
                    break;
            }

            return DatabaseConfigurations.SettingPrefix + "." + dataSpaceStr + "." + source + "." + user + "." + settingName;
        }

    }

    public static class IntegrationDatabaseConfigurations {

        public static void Fill(IIntegrationDatabaseConfiguration conf, string prefix, ISettingsProvider settingsProvider) {
            var meta = new MetaDatabaseConfiguration(conf);
            var @params = meta.AllParameters;

            foreach (var setter in @params) {
                if (setter != null && setter.Persist) {
                    var setting = new Setting<string>(prefix + setter.Name, null, setter.Encrypt);
                    string value = settingsProvider.Get(setting);

                    if (value != null) {
                        setter.Set(value);
                    }
                }
            }
        }

        public static void SetParameter(this IIntegrationDatabaseConfiguration conf, string name, string value) {
            DatabaseConfigurations.Fill(conf, new Dictionary<string, object> { { name, value } });
        }

        public static string GetParameter(this IIntegrationDatabaseConfiguration conf, string name) {
            return DatabaseConfigurations.GetParameter(conf, name);
        }

        public static void SetParameters(this IIntegrationDatabaseConfiguration conf, Dictionary<string, object> @params) {
            DatabaseConfigurations.Fill(conf, @params);
        }

    }

}
