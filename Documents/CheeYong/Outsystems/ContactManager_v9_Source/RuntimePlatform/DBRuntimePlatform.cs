/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Runtime.CompilerServices;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DMLService;
using OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders;
using OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime.Authentication;
using OutSystems.Internal.Db;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;
using static OutSystems.HubEdition.RuntimePlatform.Internal.DeploymentZoneResolution;

namespace OutSystems.HubEdition.RuntimePlatform {

    [DoNotObfuscateType]
    public partial class DBRuntimePlatform : BaseQueryProvider<DBRuntimePlatform, DBRuntimePlatform.Qualifier>, IDBMobileLogin {

        public class Qualifier : IQueryProviderQualifier {
            public IDatabaseProvider DatabaseProvider {
                get { return DatabaseAccess.ForRuntimeDatabase.DatabaseServices.DatabaseConfiguration.DatabaseProvider; }
            }

            public Type[] ProviderSpecificTypes {
                get { return new[] { typeof(DBRuntimePlatformSqlServer), typeof(DBRuntimePlatformOracle), typeof(DBRuntimePlatformMySQL) }; }
            }
        }

        // NOTE: this works as an alias and is not required, but it makes access to the singleton much easier in Java
        public new static DBRuntimePlatform Instance {
            get { return BaseQueryProvider<DBRuntimePlatform, Qualifier>.Instance; }
        }

        #region Database related

        //Query MUST end with a Insert and not ";" terminated to use this method
        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Utility method already tested by other methods")]
        public virtual int ExecuteNonQueryGetIdentity(Command cmd, string idColumnName) {
            throw new NotImplementedException(GetNotImplementedMessage());
        }

        //Query MUST end with a Insert and not ";" terminated to use this method
        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Utility method already tested by other methods")]
        public virtual long ExecuteNonQueryGetLongIdentity(Command cmd, string idColumnName) {
            throw new NotImplementedException(GetNotImplementedMessage());
        }

        protected virtual string GetNoCountSQL(string sql, bool setOn) {
            return sql;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetDbDatetime(Transaction tran, bool skipLog) {
            Command cmd = tran.CreateCommand("SELECT GETDATE() FROM DUAL");
            return (DateTime)cmd.ExecuteScalar(skipLog);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetDbDatetime(Transaction tran) {
            return GetDbDatetime(tran, false);
        }

        #endregion

        #region Users and Roles

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal void DeletePersistentLoginForUser(Transaction tran, int userId, string operationName) {
            Command cmd = tran.CreateCommand("DELETE FROM OSSYS_PERSISTENT_LOGIN WHERE USER_ID = @USER_ID");
            cmd.CreateParameter("@USER_ID", DbType.Int32, userId);
            cmd.ExecuteNonQuery(String.Format("{0} operation (invalidate persistency info for user)", operationName), true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool MobileLoginIsValidAt(Transaction tran, string loginId, long currentDate) {

            using (var cmd = tran.CreateCommand("SELECT 1 FROM OSSYS_LOGIN WHERE EXPIRATION_DATE > @CURRENT_DATE AND LOGIN_ID = @LOGIN_ID")) {
                cmd.CreateParameter("@CURRENT_DATE", DbType.Int64, currentDate);
                cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);

                using (var reader = cmd.ExecuteReader()) {
                    if (!reader.Read()) {
                        return false;
                    }
                    return true;
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void MobileLoginExtendExpirationDateUntil(Transaction trans, string loginId, long untilUnixTimestamp) {

            using (var cmd = trans.CreateCommand("UPDATE OSSYS_LOGIN SET EXPIRATION_DATE = @UNTIL WHERE LOGIN_ID = @LOGIN_ID")) {
                cmd.CreateParameter("@UNTIL", DbType.Int64, untilUnixTimestamp);
                cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);
                cmd.ExecuteNonQuery();
                trans.Commit();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader MobileLoginGet(Transaction trans, string loginId) {
            var cmd = trans.CreateCommand("SELECT USER_ID, TENANT_ID, EXPIRATION_DATE, IS_PERSISTENT FROM OSSYS_LOGIN WHERE LOGIN_ID = @LOGIN_ID");
            cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "1", "1", TestSyntaxValues.AUTO, TestSyntaxValues.AUTO })]
        public void MobileLoginInsert(Transaction trans, string loginId, int userId, int tenantId, long expirationDate, bool isPersistent) {
            using (var cmd = trans.CreateCommand("INSERT INTO OSSYS_LOGIN (LOGIN_ID, USER_ID, TENANT_ID, EXPIRATION_DATE, IS_PERSISTENT) VALUES (@LOGIN_ID, @USER_ID, @TENANT_ID, @UNTIL, @IS_PERSISTENT)")) {
                cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);
                cmd.CreateParameter("@USER_ID", DbType.Int32, userId);
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
                cmd.CreateParameter("@UNTIL", DbType.Int64, expirationDate);
                cmd.CreateParameter("@IS_PERSISTENT", DbType.Boolean, isPersistent);
                cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void MobileLoginDeleteByLoginId(Transaction trans, string loginId) {
            using (var cmd = trans.CreateCommand("DELETE FROM OSSYS_LOGIN WHERE LOGIN_ID = @LOGIN_ID")) {
                cmd.CreateParameter("@LOGIN_ID", DbType.String, loginId);
                cmd.ExecuteNonQuery("Logout operation", true);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void MobileLoginDeleteByUser(Transaction trans, int userId) {
            using (var cmd = trans.CreateCommand("DELETE FROM OSSYS_LOGIN WHERE USER_ID = @USER_ID")) {
                cmd.CreateParameter("@USER_ID", DbType.Int32, userId);
                cmd.ExecuteNonQuery("Logout operation", true);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal void DeletePersistentLoginEntry(Transaction tran, int persistentLoginId, string operationName) {
            Command sqlCmd = tran.CreateCommand("DELETE FROM OSSYS_PERSISTENT_LOGIN WHERE ID = @ID");
            sqlCmd.CreateParameter("@ID", DbType.Int32, persistentLoginId);
            sqlCmd.ExecuteNonQuery(String.Format("{0} operation (invalidate persistency info)", operationName), true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "0", TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "TestSyntax" },
                          Values2 = new[] { TestSyntaxValues.AUTO, "1", TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "TestSyntax" })]
        internal void AddOrUpdatePersistentLoginEntry(Transaction tran, int persistentLoginId, int tenantId, int userId, string secret, DateTime expirationDateTime, string terminalType, string operationName) {

            Command sqlCmd;

            if (persistentLoginId == 0) {
                sqlCmd = tran.CreateCommand(
                    "INSERT INTO OSSYS_PERSISTENT_LOGIN " +
                        "(TENANT_ID, SECRET, EXPIRES, USER_ID, TERMINAL_TYPE) VALUES (@TENANT_ID, @SECRET, @EXPIRES, @USER_ID, @TERMINAL_TYPE)");

            } else { // Optimization to reuse the id when updating the secret and prevent updates from changing the tenant id, user id or terminal type
                sqlCmd = tran.CreateCommand(
                    "UPDATE OSSYS_PERSISTENT_LOGIN " +
                        "SET SECRET = @SECRET, EXPIRES = @EXPIRES " +
                        "WHERE ID=@ID AND TENANT_ID = @TENANT_ID AND USER_ID = @USER_ID AND TERMINAL_TYPE = @TERMINAL_TYPE");
                sqlCmd.CreateParameter("@ID", DbType.Int32, persistentLoginId);
            }

            sqlCmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
            sqlCmd.CreateParameter("@SECRET", DbType.String, secret);
            sqlCmd.CreateParameter("@USER_ID", userId);
            sqlCmd.CreateParameter("@EXPIRES", DbType.DateTime, expirationDateTime);
            sqlCmd.CreateParameter("@TERMINAL_TYPE", DbType.String, terminalType);

            sqlCmd.ExecuteNonQuery(String.Format("{0} operation (insert persistency info)", operationName), true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal void GetPersistentLoginInfo(Transaction tran, int espaceId, string persistentLoginValue, string terminalType, out int userId, out int tenantId, out int existingPersistentLoginId, out DateTime expires, string operationName) {
            userId = 0;
            tenantId = 0;
            existingPersistentLoginId = 0;
            expires = default(DateTime);


            // TODO jmr This method should probably not join with OSSYS_ESPACE_TENANT to increase the performance, the "valid tenant" check could be done later in the GetUserInfoForLogin
            // To do this change it's necessary more research in the performance impact of it in environments with a high number of tenants and persistent login entries
            Command sqlCmd = tran.CreateCommand(
                "SELECT P.ID, P.EXPIRES, USER_ID, T.TENANT_ID FROM OSSYS_PERSISTENT_LOGIN P " +
                "JOIN OSSYS_ESPACE_TENANT T ON T.TENANT_ID=P.TENANT_ID " +
                "WHERE T.ESPACE_ID = @ESPACE_ID AND EXPIRES > GETDATE() AND TERMINAL_TYPE = @TERMINAL_TYPE AND SECRET = @SECRET");

            sqlCmd.CreateParameter("@ESPACE_ID", DbType.Int32, espaceId);
            sqlCmd.CreateParameter("@TERMINAL_TYPE", DbType.String, terminalType);
            sqlCmd.CreateParameter("@SECRET", DbType.String, persistentLoginValue);

            using (IDataReader reader = sqlCmd.ExecuteReader(String.Format("{0} operation (load user id)", operationName), true)) {
                if (reader.Read()) {
                    userId = reader.SafeGet<int>("USER_ID");
                    tenantId = reader.SafeGet<int>("TENANT_ID");
                    existingPersistentLoginId = reader.SafeGet<int>("ID");
                    expires = reader.SafeGet<DateTime>("EXPIRES");
                }
            }
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetNumUsersWithId(Transaction tran, int userId) {
            Command cmd = tran.CreateCommand("SELECT COUNT(*) FROM OSSYS_USER WHERE ID=@USERID");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            return cmd.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual IDataReader GetAllUserRoles(Transaction tran, int userId, int tenantId) {
            Command cmd = tran.CreateCommand(
                "SELECT P.ID, P.SS_KEY, E.SS_KEY " +
                "FROM OSSYS_ROLE P JOIN OSSYS_USER_ROLE UP ON P.ID = UP.ROLE_ID " +
                "JOIN OSSYS_ESPACE E ON P.ESPACE_ID = E.ID " +
                "WHERE UP.USER_ID = @USERID " +
                "AND UP.TENANT_ID=@TENANTID " +
                "UNION " +
                "SELECT R.ID, R.SS_KEY, E.SS_KEY " +
                "FROM OSSYS_ROLE R JOIN OSSYS_GROUP_ROLE GP ON R.ID = GP.ROLE_ID " +
                "JOIN OSSYS_GROUP_USER GU ON GP.GROUP_ID = GU.GROUP_ID " +
                "JOIN OSSYS_USER U ON GU.USER_ID = U.ID " +
                "JOIN OSSYS_ESPACE E ON R.ESPACE_ID = E.ID " +
                "WHERE GU.USER_ID = @USERID AND GU.TENANT_ID = @TENANTID");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool CheckRole(Transaction tran, int userId, int espaceId, ObjectKey roleSSKey, int tenantId) {
            Command cmd = tran.CreateCommand(string.Format(@"
                SELECT NULL 
                FROM OSSYS_USER_ROLE 
                    INNER JOIN OSSYS_USER ON OSSYS_USER_ROLE.USER_ID = OSSYS_USER.ID AND OSSYS_USER_ROLE.TENANT_ID = OSSYS_USER.TENANT_ID
                    INNER JOIN OSSYS_ROLE ON OSSYS_USER_ROLE.ROLE_ID = OSSYS_ROLE.ID
                WHERE USER_ID=@USERID AND OSSYS_USER.IS_ACTIVE=1 AND ESPACE_ID=@ESPACEID AND SS_KEY=@ROLESSKEY {0}
                UNION 
                SELECT NULL FROM OSSYS_GROUP_ROLE P 
                    INNER JOIN OSSYS_GROUP_USER U ON P.GROUP_ID=U.GROUP_ID AND P.TENANT_ID = U.TENANT_ID
                    INNER JOIN OSSYS_USER ON U.USER_ID = OSSYS_USER.ID AND U.TENANT_ID = OSSYS_USER.TENANT_ID
                    INNER JOIN OSSYS_ROLE ON P.ROLE_ID = OSSYS_ROLE.ID AND P.TENANT_ID = OSSYS_USER.TENANT_ID
                WHERE U.USER_ID=@USERID AND OSSYS_USER.IS_ACTIVE=1 AND ESPACE_ID=@ESPACEID AND SS_KEY=@ROLESSKEY {1}",
                tenantId == 0 ? string.Empty : " AND OSSYS_USER_ROLE.TENANT_ID = @TENANTID",
                tenantId == 0 ? string.Empty : " AND P.TENANT_ID = @TENANTID "));

            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@ROLESSKEY", DbType.String, roleSSKey);
            if (tenantId != 0) {
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            }
            using (var reader = cmd.ExecuteReader()) {
                return reader.Read();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "1" }, Values2 = new[] { TestSyntaxValues.AUTO, "1", "1", "0" })]
        public bool CheckRole(Transaction tran, int userId, int roleId, int tenantId) {
            string sql = String.Format(@"
                SELECT NULL 
                FROM OSSYS_USER_ROLE INNER JOIN OSSYS_USER ON OSSYS_USER_ROLE.USER_ID = OSSYS_USER.ID AND OSSYS_USER_ROLE.TENANT_ID = OSSYS_USER.TENANT_ID
                WHERE USER_ID=@USERID AND OSSYS_USER.IS_ACTIVE=1 AND ROLE_ID=@ROLEID {0}
                UNION 
                SELECT NULL FROM OSSYS_GROUP_ROLE P 
                    INNER JOIN OSSYS_GROUP_USER U ON P.GROUP_ID=U.GROUP_ID AND P.TENANT_ID=U.TENANT_ID
                    INNER JOIN OSSYS_USER ON U.USER_ID = OSSYS_USER.ID AND U.TENANT_ID = OSSYS_USER.TENANT_ID
                WHERE U.USER_ID=@USERID AND OSSYS_USER.IS_ACTIVE=1 AND P.ROLE_ID=@ROLEID {1}",
                tenantId == 0 ? string.Empty : " AND OSSYS_USER_ROLE.TENANT_ID = @TENANTID",
                tenantId == 0 ? string.Empty : " AND U.TENANT_ID = @TENANTID ");

            Command cmd = tran.CreateCommand(sql);
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@ROLEID", DbType.Int32, roleId);
            if (tenantId != 0) {
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            }
            using (var reader = cmd.ExecuteReader()) {
                return reader.Read();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetRoleId(Transaction tran, int espaceId, ObjectKey roleSSKey) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_ROLE WHERE ESPACE_ID=@ESPACEID AND SS_KEY=@ROLESSKEY");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@ROLESSKEY", DbType.String, roleSSKey);
            return cmd.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "1" })]
        public void CreateUserRole(Transaction tran, int userId, int tenantId, int roleId) {
            Command cmd = tran.CreateCommand("INSERT INTO OSSYS_USER_ROLE (USER_ID, TENANT_ID, ROLE_ID) VALUES (@USERID, @TENANTID, @ROLEID)");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ROLEID", DbType.Int32, roleId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "0" },
                          Values2 = new[] { TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "1" })]
        public void DeleteUserRole(Transaction tran, int userId, int espaceId, ObjectKey roleSSKey, int tenantId) {
            Command cmd = tran.CreateCommand(
                "DELETE FROM OSSYS_USER_ROLE " +
                "WHERE USER_ID=@USERID AND ROLE_ID=" +
                "(SELECT ID FROM OSSYS_ROLE WHERE ESPACE_ID=@ESPACEID " +
                "AND SS_KEY=@ROLESSKEY)" + (tenantId == 0 ? "" : " AND TENANT_ID = @TENANTID"));
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@ROLESSKEY", DbType.String, roleSSKey);
            if (tenantId != 0)
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int? GetRoleId(Transaction tran, string roleKey, string ownerEspaceKey) {
            Command cmd = tran.CreateCommand(
                "SELECT PA.ID FROM OSSYS_ROLE PA, OSSYS_ESPACE E " +
                "WHERE PA.SS_KEY = @ROLEKEY AND E.SS_KEY = @EKEY " +
                "AND PA.ESPACE_ID = E.ID AND E.IS_ACTIVE=1 AND PA.IS_ACTIVE=1");
            cmd.CreateParameter("@ROLEKEY", DbType.String, roleKey);
            cmd.CreateParameter("@EKEY", DbType.String, ownerEspaceKey);
            var result = cmd.ExecuteScalar();
            if (result != null) {
                return Convert.ToInt32(result);
            }
            return null;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetRoleKeyIdTable(Transaction tran) {
            Command cmd = tran.CreateCommand(
                "SELECT DISTINCT P.SS_KEY, E.ID, P.ID FROM OSSYS_ROLE P JOIN OSSYS_ESPACE E ON P.ESPACE_ID=E.ID AND P.IS_ACTIVE=1 AND E.IS_ACTIVE=1");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetUserId(Transaction tran, int tenantId, string username) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_USER WHERE TENANT_ID = @TENANTID AND UPPER(USERNAME)=@USERNAME");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@USERNAME", DbType.String, username.ToUpper());
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UnsetESpaceAsHome(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand("UPDATE OSSYS_APPLICATION SET ENTRY_ESPACE_ID = NULL WHERE ENTRY_ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool GetUserInfoForLogin(Transaction tran, int tenantId, int userId, bool fetchDbHash, out string username, out string hashInDb, string operationName) {
            username = string.Empty;
            hashInDb = string.Empty;

            Command sqlCmd = tran.CreateCommand(
              "SELECT USERNAME" + (fetchDbHash ? ", PASSWORD" : "") + " FROM OSSYS_USER " +
              "WHERE ID = @USER_ID AND TENANT_ID = @TENANT_ID AND IS_ACTIVE = 1");
            sqlCmd.CreateParameter("@USER_ID", DbType.Int32, userId);
            sqlCmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);

            using (var reader = sqlCmd.ExecuteReader(String.Format("{0} operation (get User)", operationName), true)) {
                if (reader.Read()) {
                    username = reader.SafeGet<string>("USERNAME", string.Empty);
                    if (fetchDbHash) {
                        hashInDb = reader.SafeGet<string>("PASSWORD");
                    }
                    return true;
                } else {
                    return false;
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int CountEspaceEndUsers(Transaction tran, ObjectKey userProviderKey) {
            Command cmd = tran.CreateCommand(
                "SELECT COUNT(OSSYS_USER.ID) " +
                "FROM OSSYS_TENANT " +
                "INNER JOIN OSSYS_ESPACE ON OSSYS_ESPACE.ID = OSSYS_TENANT.ESPACE_ID " +
                "INNER JOIN OSSYS_USER ON OSSYS_TENANT.ID = OSSYS_USER.TENANT_ID " +
                "WHERE OSSYS_ESPACE.SS_KEY = @ESPACEKEY " +
                "AND OSSYS_ESPACE.IS_ACTIVE = 1 AND OSSYS_TENANT.IS_ACTIVE = 1 AND OSSYS_USER.IS_ACTIVE = 1");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, userProviderKey);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual bool IsUserActive(Transaction tran, int userId) {
            Command cmd = tran.CreateCommand("SELECT OSSYS_USER.IS_ACTIVE FROM OSSYS_USER WHERE OSSYS_USER.ID = @USERID");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            object isActive = cmd.ExecuteScalar(/*skipLog*/true);
            if (isActive == null || isActive == DBNull.Value) {
                return false;
            } else {
                return Convert.ToBoolean(isActive);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool TryUpdateLastLoginAndPasswordIfNeeded(Transaction tran, int userId, int tenantId, bool upgradePassword, string newDbHash, string operationName) {
            // #1006905 - Try to get the lock to update the LastLogin, but if it is already locked
            // skip it since it is not that important and it could delay the request.
            if (SelectLastLoginForUpdateNoWait(tran, userId, tenantId)) {
                var cmd = tran.CreateCommand(
                    "UPDATE OSSYS_USER SET LAST_LOGIN = @LAST_LOGIN " +
                    (upgradePassword ? ", PASSWORD = @PASSWORD " : "") +
                    "WHERE TENANT_ID = @TENANT_ID AND ID = @USER_ID");
                cmd.CreateParameter("@LAST_LOGIN", DbType.DateTime, DateTime.Now);
                if (upgradePassword) {
                    cmd.CreateParameter("@PASSWORD", DbType.String, newDbHash);
                }
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
                cmd.CreateParameter("@USER_ID", DbType.Int32, userId);
                cmd.ExecuteNonQuery("{0} operation (update last login date)".F(operationName), /*isApplication*/true);
                return true;
            }
            OSTrace.Debug("Skipped update of the last login date for user {0} due to database lock.".F(userId));
            return false;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual bool SelectLastLoginForUpdateNoWait(Transaction tran, int userID, int tenantID) {
            throw new NotImplementedException(GetNotImplementedMessage());
        }

        public bool TryGetUserPoolInformationForAudit(Transaction trans, int userId, out string userPoolGUID, out string userPoolName) {
            userPoolGUID = null;
            userPoolName = null;

            Command cmd = trans.CreateCommand(
                @"SELECT OSSYS_USERPOOL.GUID USERPOOLGUID, OSSYS_USERPOOL.NAME USERPOOLNAME
                  FROM OSSYS_USER_USERPOOL
                  INNER JOIN OSSYS_USERPOOL ON OSSYS_USERPOOL.ID = OSSYS_USER_USERPOOL.USERPOOLID
                  WHERE OSSYS_USER_USERPOOL.USERID = @USERID");

            cmd.CreateParameter("@USERID", DbType.Int32, userId);

            using (IDataReader reader = cmd.ExecuteReader()) {
                if (reader.Read()) {
                    userPoolGUID = reader.SafeGet<string>("USERPOOLGUID");
                    userPoolName = reader.SafeGet<string>("USERPOOLNAME");
                    return true;
                }
            }

            return false;
        }
        #endregion

        #region Debugger
        [MethodImpl(MethodImplOptions.NoInlining)]
        public void ResetArea(Transaction tran, int areaId) {
            // clean Assembly, Area_Entry_Points and Assembly_Dependency
            Command cmd = tran.CreateCommand("DELETE FROM OSSYS_ASSEMBLY WHERE AREA_ID = @AREAID");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.ExecuteNonQuery();
            cmd = tran.CreateCommand("DELETE FROM OSSYS_AREA_ENTRY_POINT WHERE AREA_ID = @AREAID");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1" })]
        public int GetOrCreateArea(Transaction tran, int espaceId, int userId) {
            // check if there is already an entry
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_AREA WHERE ESPACE_ID = @ESPACEID AND USER_ID " + (userId == 0 ? "IS NULL" : "= @USERID"));
            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId != 0) {
                cmd.CreateParameter("@USERID", userId);
            }
            object areaId = cmd.ExecuteScalar();
            if (areaId != null) {
                return Convert.ToInt32(areaId);
            }

            // create new entry
            cmd = tran.CreateCommand("INSERT INTO OSSYS_AREA (ESPACE_ID, USER_ID) VALUES(@ESPACEID, @USERID)");

            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId != 0) {
                cmd.CreateParameter("@USERID", userId);
            } else {
                cmd.CreateParameter("@USERID", DBNull.Value);
            }

            return ExecuteNonQueryGetIdentity(cmd, "ID");
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetAreaId(Transaction tran, int espaceId, int userId) {
            Command cmd = tran.CreateCommand(
                "SELECT ID FROM OSSYS_AREA WHERE ESPACE_ID = @ESPACEID AND USER_ID " + (userId == 0 ? "IS NULL" : " = @USERID"));
            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId != 0) {
                cmd.CreateParameter("@USERID", userId);
            }
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1" })]
        public void CreateAssembly(Transaction tran, int areaId, int espaceId, string hash, string signature, bool inDebugMode, string debuggerVersion) {
            Command cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_ASSEMBLY (AREA_ID, ESPACE_ID, HASH, SIGNATURE, IN_DEBUG, DEBUGGER_VERSION) " +
                "VALUES(@AREAID, @ESPACEID, @HASH, @SIGNATURE, @INDEBUG, @DEBUGGERVERSION)");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.CreateParameter("@ESPACEID", espaceId);
            cmd.CreateParameter("@HASH", hash);
            cmd.CreateParameter("@SIGNATURE", signature);
            cmd.CreateParameter("@INDEBUG", DbType.Boolean, inDebugMode);
            cmd.CreateParameter("@DEBUGGERVERSION", debuggerVersion);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void SetCompiledButNotDeployedHash(Transaction tran, int areaId, int espaceId, string hash) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_ASSEMBLY SET COMPILEDBUTNOTDEPLOYEDHASH = @HASH " +
                "WHERE ESPACE_ID = @ESPACEID AND AREA_ID = @AREAID");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.CreateParameter("@ESPACEID", espaceId);
            cmd.CreateParameter("@HASH", hash);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetAssemblySignature(Transaction tran, int areaId, int espaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT SIGNATURE FROM OSSYS_ASSEMBLY WHERE AREA_ID = @AREAID AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.CreateParameter("@ESPACEID", espaceId);
            return Convert.ToString(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - assemblyId")]
        public void CreateAssemblyDependency(Transaction tran, int assemblyId, int espaceId, string signatureInUse) {
            Command cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_ASSEMBLY_DEPENDENCY (ASSEMBLY_ID, ESPACE_ID, SIGNATURE_IN_USE) " +
                "VALUES(@ASSEMBLYID, @ESPACEID, @SIGNATUREINUSE)");
            cmd.CreateParameter("@ASSEMBLYID", DbType.Int32, assemblyId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@SIGNATUREINUSE", signatureInUse);
            cmd.ExecuteNonQuery();
        }

        // gets all uses of producer espace in the given area
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetAssemblyUse(Transaction tran, int areaId, int producerEspaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT SIGNATURE_IN_USE, OSSYS_ESPACE.NAME FROM OSSYS_ASSEMBLY " +
                "INNER JOIN OSSYS_ASSEMBLY_DEPENDENCY ON  OSSYS_ASSEMBLY.ID = OSSYS_ASSEMBLY_DEPENDENCY.ASSEMBLY_ID " +
                "INNER JOIN OSSYS_ESPACE ON OSSYS_ASSEMBLY.ESPACE_ID = OSSYS_ESPACE.ID " +
                "WHERE OSSYS_ASSEMBLY.AREA_ID = @AREAID " +
                "AND OSSYS_ASSEMBLY_DEPENDENCY.ESPACE_ID = @PRODUCERESPACEID");
            cmd.CreateParameter("@AREAID", DbType.Int32, areaId);
            cmd.CreateParameter("@PRODUCERESPACEID", DbType.Int32, producerEspaceId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1" })]
        public void CreateEntryPoint(Transaction tran, int areaId, string name, bool isDefault) {
            Command cmd = tran.CreateCommand("INSERT INTO OSSYS_AREA_ENTRY_POINT (AREA_ID, NAME, IS_DEFAULT) VALUES (@AREAID, @NAME, @ISDEFAULT)");
            cmd.CreateParameter("@AREAID", areaId);
            cmd.CreateParameter("@NAME", name);
            cmd.CreateParameter("@ISDEFAULT", DbType.Boolean, isDefault);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetAssemblyId(Transaction tran, int areaId, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_ASSEMBLY WHERE AREA_ID = @AREAID AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@AREAID", DbType.Int32, areaId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1" })]
        public void CreateOrUpdateDebugSessionData(Transaction tran, int espaceId, int userId, byte[] data) {
            // check if there is already an entry
            string cmdText = "SELECT ID FROM OSSYS_DEBUG_SESSION_DATA WHERE ESPACE_ID=@ESPACEID AND " +
                             (userId > 0 ? "USER_ID=@USERID" : "USER_ID IS NULL");
            Command cmd = tran.CreateCommand(cmdText);
            cmd.CreateParameter("@ESPACEID", espaceId);
            if (userId > 0) {
                cmd.CreateParameter("@USERID", userId);
            }

            object sessionId = cmd.ExecuteScalar();
            cmdText = sessionId == null
                ? "INSERT INTO OSSYS_DEBUG_SESSION_DATA(ESPACE_ID, USER_ID, DATA) VALUES(@ESPACEID, @USERID, @DATA)"
                : "UPDATE OSSYS_DEBUG_SESSION_DATA SET DATA = @DATA WHERE ID = @ID";

            cmd = tran.CreateCommand(cmdText);

            cmd.CreateParameter("@DATA", DbType.Binary, data);
            if (sessionId == null) {
                cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
                if (userId > 0) {
                    cmd.CreateParameter("@USERID", DbType.Int32, userId);
                } else {
                    cmd.CreateParameter("@USERID", DbType.Int32, null);
                }
            } else {
                cmd.CreateParameter("@ID", DbType.Int32, Convert.ToInt32(sessionId));
            }

            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public byte[] GetDebugSessionData(Transaction tran, int espaceId, int userId) {
            // check if there is already an entry
            string cmdText = "SELECT DATA FROM OSSYS_DEBUG_SESSION_DATA WHERE ESPACE_ID=@ESPACEID AND " + (userId > 0 ? "USER_ID=@USERID" : "USER_ID IS NULL");

            Command cmd = tran.CreateCommand(cmdText);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            if (userId > 0) {
                cmd.CreateParameter("@USERID", DbType.Int32, userId);
            }

            var result = cmd.ExecuteScalar();
            if (Convert.IsDBNull(result)) {
                return null;
            } else {
                return (byte[])result;
            }
        }

        #endregion

        #region MDC
        public virtual void GetDbSpecificCatalogConfigurationParameters(Dictionary<string, object> parameters, IDataReader reader,
                string databaseName) {

            throw new NotImplementedException(GetNotImplementedMessage());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal Dictionary<string, object> GetCatalogDetailsByName(Transaction trans, string databaseName, DatabaseSettingsSerialization.User user) {

            var fields = "DATATABLESPACE, INDEXTABLESPACE";
            switch (user) {
                case DatabaseSettingsSerialization.User.Admin: fields += ", OWNERUSERNAME, OWNERPASSWORD "; break;
                case DatabaseSettingsSerialization.User.Runtime: fields += ", USERNAME, PASSWORD "; break;
                default: throw new InvalidOperationException(user + "is not valid. User Admin or Runtime");
            }
            var sql = "SELECT " + fields + "FROM OSSYS_DBCATALOG WHERE NAME = @CATALOGNAME";

            using (var cmd = trans.CreateCommand(sql)) {
                cmd.CreateParameter("@CATALOGNAME", DbType.String, databaseName);
                using (var reader = cmd.ExecuteReader()) {
                    if (!reader.Read()) {
                        return null;
                    }
                    var parameters = new Dictionary<string, object>();
                    GetDbSpecificCatalogConfigurationParameters(parameters, reader, databaseName);

                    if (user == DatabaseSettingsSerialization.User.Admin) {
                        parameters.Add("Username", DataReaderUtils.SafeGet<string>(reader["OWNERUSERNAME"], string.Empty).Trim());
                        parameters.Add("Password", SecureConfidentialInformationEncryption.TryDecryptString(DataReaderUtils.SafeGet<string>(reader["OWNERPASSWORD"], string.Empty).Trim()));
                    } else if (user == DatabaseSettingsSerialization.User.Runtime) {
                        parameters.Add("Username", DataReaderUtils.SafeGet<string>(reader["USERNAME"], string.Empty).Trim());
                        parameters.Add("Password", SecureConfidentialInformationEncryption.TryDecryptString(DataReaderUtils.SafeGet<string>(reader["PASSWORD"], string.Empty).Trim()));
                    }

                    if (parameters["Username"].ToString().IsEmpty()) {
                        parameters.Remove("Username");
                        parameters.Remove("Password");
                    }

                    return parameters;
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal Dictionary<string, object> GetCatalogDetailsByESpaceId(Transaction trans, int eSpaceId) {
            string sql = "SELECT OSSYS_DBCATALOG.NAME, OSSYS_DBCATALOG.USERNAME, OSSYS_DBCATALOG.PASSWORD, " +
                         "       OSSYS_DBCATALOG.OWNERUSERNAME, OSSYS_DBCATALOG.OWNERPASSWORD," +
                         "       OSSYS_DBCATALOG.DATATABLESPACE, OSSYS_DBCATALOG.INDEXTABLESPACE" +
                         " FROM OSSYS_ESPACE " +
                         "LEFT JOIN OSSYS_ESPACE_VERSION ON OSSYS_ESPACE_VERSION.ID = OSSYS_ESPACE.VERSION_ID " +
                         "INNER JOIN OSSYS_DBCATALOG ON OSSYS_DBCATALOG.ID =" +
                         " COALESCE(OSSYS_ESPACE_VERSION.DBCATALOG_ID, OSSYS_ESPACE.DBCATALOG_ID) " +
                         "WHERE OSSYS_ESPACE.ID = @ESPACEID AND OSSYS_DBCATALOG.NAME <> '" + Constants.MainDatabaseLogicalName + "'";
            using (var cmd = trans.CreateCommand(sql)) {
                cmd.CreateParameter("@ESPACEID", eSpaceId);
                using (var reader = cmd.ExecuteReader()) {
                    if (!reader.Read()) {
                        return null;
                    }
                    var parameters = new Dictionary<string, object>();
                    GetDbSpecificCatalogConfigurationParameters(parameters, reader, null);

                    parameters.Add("Username", DataReaderUtils.SafeGet<string>(reader["USERNAME"], string.Empty).Trim());
                    parameters.Add("Password", SecureConfidentialInformationEncryption.TryDecryptString(DataReaderUtils.SafeGet<string>(reader["PASSWORD"], string.Empty).Trim()));

                    // Overriding the value in the database considering the new unified transactional model
                    if (parameters["Username"].ToString().IsEmpty()) {
                        parameters.Remove("Username");
                        parameters.Remove("Password");
                    }

                    return parameters;
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetCatalogName(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                         "SELECT OSSYS_DBCATALOG.NAME " +
                         "FROM OSSYS_ESPACE " +
                         "LEFT JOIN OSSYS_ESPACE_VERSION ON OSSYS_ESPACE_VERSION.ID = OSSYS_ESPACE.VERSION_ID " +
                         "INNER JOIN OSSYS_DBCATALOG ON OSSYS_DBCATALOG.ID = " +
                         "COALESCE(OSSYS_ESPACE_VERSION.DBCATALOG_ID, OSSYS_ESPACE.DBCATALOG_ID) " +
                         "WHERE OSSYS_ESPACE.ID = @ESPACEID AND OSSYS_DBCATALOG.NAME <> '" + Constants.MainDatabaseLogicalName + "'");

            cmd.CreateParameter("@ESPACEID", eSpaceId);
            return DataReaderUtils.SafeGet<string>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool AttributeIsActive(Transaction trans, string attributeName, int eSpaceId, string physicalTableName) {
            var cmd = trans.CreateCommand("SELECT COUNT(OSSYS_ENTITY_ATTR.ID) "
                                          + "FROM OSSYS_ENTITY "
                                          + "INNER JOIN OSSYS_ESPACE ON OSSYS_ENTITY.ESPACE_ID = OSSYS_ESPACE.ID "
                                          + "INNER JOIN OSSYS_ENTITY_ATTR ON OSSYS_ENTITY_ATTR.ENTITY_ID = OSSYS_ENTITY.ID "
                                          + "WHERE OSSYS_ENTITY.IS_SYSTEM = 0 "
                                          + "AND OSSYS_ENTITY.IS_EXTERNAL = 0 "
                                          + "AND OSSYS_ENTITY.IS_ACTIVE = 1 "
                                          + "AND OSSYS_ENTITY_ATTR.IS_ACTIVE = 1 "
                                          + "AND OSSYS_ESPACE.ID = @ESPACE_ID "
                                          + "AND OSSYS_ENTITY_ATTR.NAME = @ATTRIBUTE_NAME "
                                          + "AND OSSYS_ENTITY.PHYSICAL_TABLE_NAME = @ENTITY_PHYSICAL_NAME");

            cmd.CreateParameter("@ESPACE_ID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@ATTRIBUTE_NAME", DbType.String, attributeName);
            cmd.CreateParameter("@ENTITY_PHYSICAL_NAME", DbType.String, physicalTableName);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar()) != 0;
        }
        #endregion

        #region eSpace and User Provider
        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetEspaceId(Transaction tran, string espaceName) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_ESPACE WHERE UPPER(NAME)=@ESPACENAME");
            cmd.CreateParameter("@ESPACENAME", DbType.String, espaceName.ToUpper());
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetEspaceName(Transaction tran, ObjectKey espaceKey) {
            Command cmd = tran.CreateCommand("SELECT NAME FROM OSSYS_ESPACE WHERE SS_KEY=@ESPACEKEY");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, espaceKey);
            object res = cmd.ExecuteScalar(/*skipLog*/true);
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetEspaceName(Transaction tran, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT NAME FROM OSSYS_ESPACE WHERE ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            object res = cmd.ExecuteScalar();
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void GetEspaceAppInfo(Transaction trans, int eSpaceId, out string eSpaceName, out string applicationName, out ObjectKey applicationKey) {
            Func<string, string> escapeIdentifier = trans.DatabaseServices.DMLService.Identifiers.EscapeIdentifier;
            eSpaceName = null;
            applicationName = null;
            applicationKey = null;

            using (Command cmd = trans.CreateCommand(
                @"SELECT espace.NAME ESPACE_NAME, app.NAME APP_NAME, app." + escapeIdentifier("KEY") + @" APP_KEY
                FROM ossys_Espace espace
                LEFT JOIN ossys_module module ON module.ESPACE_ID = espace.ID
                LEFT JOIN OSSYS_APP_DEFINITION_MODULE app_definition ON app_definition.MODULE_ID = module.ID
                LEFT JOIN ossys_application app ON app.ID = app_definition.APPLICATION_ID
                WHERE espace.ID = @ESPACE_ID")) {

                cmd.CreateParameter("@ESPACE_ID", DbType.Int32, eSpaceId);

                using (IDataReader reader = cmd.ExecuteReader()) {
                    if (reader.Read()) {
                        eSpaceName = reader.SafeGet<string>("ESPACE_NAME");
                        applicationName = reader.SafeGet<string>("APP_NAME");
                        applicationKey = ObjectKey.Parse(reader.SafeGet<string>("APP_KEY"));
                    }
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public virtual string GetEspaceUserProvider(Transaction tran, ObjectKey espaceKey) {
            Command cmd = tran.CreateCommand("SELECT USER_PROVIDER_KEY FROM OSSYS_ESPACE WHERE SS_KEY=@ESPACEKEY");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, espaceKey);
            object res = cmd.ExecuteScalar();
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspaceNames(Transaction tran) {
            Command cmd = tran.CreateCommand("SELECT NAME FROM OSSYS_ESPACE WHERE IS_ACTIVE=1");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetESpaceIdbyKey(Transaction tran, ObjectKey eSpaceKey) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_ESPACE WHERE UPPER(SS_KEY)=UPPER(@SS_KEY)");
            cmd.CreateParameter("@SS_KEY", DbType.String, eSpaceKey);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetUserProviderKey(Transaction tran, ObjectKey espaceKey) {
            Command cmd = tran.CreateCommand("SELECT USER_PROVIDER_KEY FROM OSSYS_ESPACE WHERE SS_KEY=@ESPACEKEY");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, espaceKey);
            object res = cmd.ExecuteScalar(/*skipLog*/true);
            if (res == null) {
                return null;
            }
            return Convert.ToString(res);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool IsUserProvider(Transaction tran, ObjectKey espaceKey) {
            using (var cmd = tran.CreateCommand("SELECT IS_USER_PROVIDER FROM OSSYS_ESPACE WHERE SS_KEY = @ESPACE_KEY")) {
                cmd.CreateParameter("@ESPACE_KEY", DbType.String, espaceKey);
                return Convert.ToBoolean(cmd.ExecuteScalar(/*skipLog*/true));
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspaceInfo(Transaction tran, string espaceName) {
            Command cmd = tran.CreateCommand("SELECT ID, SS_KEY, IS_MULTITENANT, IS_USER_PROVIDER, VERSION_ID FROM OSSYS_ESPACE WHERE UPPER(NAME)=@ESPACENAME");
            cmd.CreateParameter("@ESPACENAME", DbType.String, espaceName.ToUpper());
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspaceInfoByVersionId(Transaction tran, int versionId) {
            Command cmd = tran.CreateCommand(
                "SELECT ESPACE.ID, ESPACE.SS_KEY, ESPACE.IS_MULTITENANT, ESPACE.IS_USER_PROVIDER, ESPACE.VERSION_ID, ESPACEVERSION.VERSION VERSIONNUMBER " +
                "FROM OSSYS_ESPACE ESPACE, OSSYS_ESPACE_VERSION ESPACEVERSION " +
                "WHERE ESPACEVERSION.ESPACE_ID = ESPACE.ID AND ESPACEVERSION.ID=@VERSIONID");
            cmd.CreateParameter("@VERSIONID", DbType.String, versionId);
            return cmd.ExecuteReader();
        }

        //#551568 - To avoid problems with espace renames, we should get espaceinfo by running espaceId
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetPublishedEspaceInfo(Transaction tran, int espaceId) {
            string keyColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("KEY");
            Command cmd = tran.CreateCommand(
                "SELECT OSSYS_ESPACE.ID, OSSYS_ESPACE.SS_KEY, OSSYS_ESPACE.IS_MULTITENANT, OSSYS_ESPACE.IS_USER_PROVIDER, OSSYS_ESPACE.VERSION_ID, OSSYS_ESPACE.ESPACEKIND, " +
                "       OSSYS_ESPACE_VERSION.VERSION, OSSYS_ESPACE_VERSION.PUBLISHING_ID, OSSYS_ESPACE.IS_ACTIVE, OSSYS_ESPACE_VERSION.OMLHASH, OSSYS_ESPACE.USER_PROVIDER_KEY," +
                "       OSSYS_ESPACE_VERSION.JQUERYVERSION JQUERYVERSION, OSSYS_ESPACE.PENDING_VERSION_ID, OSSYS_ESPACE_RUNTIME.DISABLED, OSSYS_ESPACE.HMAC ESPACEHMAC, " +
                "       OSSYS_APPLICATION.ID APPLICATIONID, OSSYS_APPLICATION." + keyColumn + " APPLICATIONKEY, OSSYS_APPLICATION.NAME APPLICATIONNAME " +
                "FROM OSSYS_ESPACE " +
                "INNER JOIN OSSYS_ESPACE_VERSION ON OSSYS_ESPACE.VERSION_ID = OSSYS_ESPACE_VERSION.ID " +
                "LEFT JOIN OSSYS_ESPACE_RUNTIME ON OSSYS_ESPACE_RUNTIME.ESPACE_ID = OSSYS_ESPACE.ID " +
                "LEFT JOIN OSSYS_MODULE ON OSSYS_MODULE.ESPACE_ID = OSSYS_ESPACE.ID " +
                "LEFT JOIN OSSYS_APP_DEFINITION_MODULE ON OSSYS_APP_DEFINITION_MODULE.MODULE_ID = OSSYS_MODULE.ID " +
                "LEFT JOIN OSSYS_APPLICATION ON OSSYS_APP_DEFINITION_MODULE.APPLICATION_ID = OSSYS_APPLICATION.ID " +
                "WHERE OSSYS_ESPACE.ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return cmd.ExecuteReader(/*skipLog*/true); // Must skip log here because this is used when theres still no AppInfo
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetVersionIdFromEspaceId(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand("SELECT VERSION_ID FROM OSSYS_ESPACE WHERE ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteScalar();
        }
        #endregion

        #region Site Properties
        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetSitePropertyId(Transaction tran, ObjectKey siteSSKey, int espaceId, out bool isShared) {
            isShared = true;
            Command cmd = tran.CreateCommand(
                "SELECT ID, IS_SHARED FROM OSSYS_SITE_PROPERTY_DEFINITION WHERE " +
                "SS_KEY=@SITESSKEY AND ESPACE_ID=@ESPACEID");
            cmd.CreateParameter("@SITESSKEY", DbType.String, siteSSKey);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            using (IDataReader reader = cmd.ExecuteReader()) {
                if (reader.Read()) {
                    isShared = reader.SafeGet<bool>("IS_SHARED");
                    return reader.SafeGet<int>("ID");
                }
            }
            return 0;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetSitePropertyByName(Transaction tran, string propertyName, string eSpaceName, string tenantName) {
            Command cmd = tran.CreateCommand(
              @"SELECT COALESCE(SPSHARED.PROPERTY_VALUE, SP.PROPERTY_VALUE)
                FROM OSSYS_SITE_PROPERTY_DEFINITION SPD
                INNER JOIN OSSYS_ESPACE ESPACE ON ESPACE.ID = SPD.ESPACE_ID AND ESPACE.NAME=@ESPACENAME AND ESPACE.IS_ACTIVE = 1
                INNER JOIN OSSYS_ESPACE_TENANT ESPACETENANT ON ESPACETENANT.ESPACE_ID = ESPACE.ID AND ESPACETENANT.TENANT_NAME = @TENANTNAME AND ESPACETENANT.IS_ACTIVE = 1
                LEFT JOIN OSSYS_SITE_PROPERTY_SHARED SPSHARED ON SPSHARED.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SPD.IS_SHARED = 1
                LEFT JOIN OSSYS_SITE_PROPERTY SP ON SP.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SP.TENANT_ID = ESPACETENANT.TENANT_ID AND SPD.IS_SHARED = 0
                WHERE SPD.NAME=@PROPNAME");
            cmd.CreateParameter("@PROPNAME", DbType.String, propertyName);
            cmd.CreateParameter("@ESPACENAME", DbType.String, eSpaceName);
            cmd.CreateParameter("@TENANTNAME", DbType.String, tenantName);
            return cmd.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public object GetSitePropertyByName(Transaction tran, string propertyName, int eSpaceId, int tenantId) {
            Command cmd = tran.CreateCommand(
              @"SELECT COALESCE(SPSHARED.PROPERTY_VALUE, SP.PROPERTY_VALUE)
                FROM OSSYS_SITE_PROPERTY_DEFINITION SPD
                INNER JOIN OSSYS_ESPACE ESPACE ON ESPACE.ID = SPD.ESPACE_ID AND ESPACE.ID=@ESPACEID AND ESPACE.IS_ACTIVE = 1
                INNER JOIN OSSYS_ESPACE_TENANT ESPACETENANT ON ESPACETENANT.ESPACE_ID = ESPACE.ID AND ESPACETENANT.TENANT_ID = @TENANTID AND ESPACETENANT.IS_ACTIVE = 1
                LEFT JOIN OSSYS_SITE_PROPERTY_SHARED SPSHARED ON SPSHARED.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SPD.IS_SHARED = 1
                LEFT JOIN OSSYS_SITE_PROPERTY SP ON SP.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SP.TENANT_ID = ESPACETENANT.TENANT_ID AND SPD.IS_SHARED = 0
                WHERE SPD.NAME=@PROPNAME");
            cmd.CreateParameter("@PROPNAME", DbType.String, propertyName);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return cmd.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" }, Values2 = new[] { TestSyntaxValues.AUTO, "1", "false" })]
        public bool UpdateSiteProperty(Transaction tran, int sitePropId, bool isShared, int tenantId, string sitePropValue) {
            Command cmd = tran.CreateCommand(
               isShared ? "UPDATE OSSYS_SITE_PROPERTY_SHARED SET PROPERTY_VALUE=@SITEPROPVALUE, USER_MODIFIED=1 WHERE SITE_PROPERTY_DEFINITION_ID=@SITEPROPID"
                        : "UPDATE OSSYS_SITE_PROPERTY SET PROPERTY_VALUE=@SITEPROPVALUE, USER_MODIFIED=1 WHERE SITE_PROPERTY_DEFINITION_ID=@SITEPROPID AND TENANT_ID=@TENANTID");
            cmd.CreateParameter("@SITEPROPID", DbType.Int32, sitePropId);
            cmd.CreateParameter("@SITEPROPVALUE", DbType.String, sitePropValue);
            if (!isShared) {
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            }
            return cmd.ExecuteNonQuery() > 0;
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - site_property_definition_id")]
        internal bool CreateSiteProperty(Transaction tran, int sitePropId, bool isShared, int tenantId, string sitePropValue) {
            Command cmd = tran.CreateCommand(
               isShared ? "INSERT INTO OSSYS_SITE_PROPERTY_SHARED(SITE_PROPERTY_DEFINITION_ID, PROPERTY_VALUE, USER_MODIFIED) VALUES(@SITEPROPID, @SITEPROPVALUE, @USERMODIFIED)"
                        : "INSERT INTO OSSYS_SITE_PROPERTY(TENANT_ID, SITE_PROPERTY_DEFINITION_ID, PROPERTY_VALUE, USER_MODIFIED) VALUES(@TENANTID, @SITEPROPID, @SITEPROPVALUE, @USERMODIFIED)");
            cmd.CreateParameter("@SITEPROPID", DbType.Int32, sitePropId);
            cmd.CreateParameter("@SITEPROPVALUE", DbType.String, sitePropValue);
            cmd.CreateParameter("@USERMODIFIED", DbType.Boolean, true);
            if (!isShared) {
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            }
            return cmd.ExecuteNonQuery() > 0;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetSitePropertiesInfo(Transaction tran, int espaceId, int tenantId) {
            Command cmd = tran.CreateCommand(
              @"SELECT SPD.ID DEF_ID, SPD.SS_KEY, SPD.NAME, SPD.DATA_TYPE, COALESCE(SPSHARED.PROPERTY_VALUE, COALESCE(SP.PROPERTY_VALUE, SPD.DEFAULT_VALUE)) VALUE, IS_SHARED 
                FROM OSSYS_SITE_PROPERTY_DEFINITION SPD 
                LEFT JOIN OSSYS_SITE_PROPERTY_SHARED SPSHARED ON SPSHARED.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SPD.IS_SHARED = 1
                LEFT JOIN OSSYS_SITE_PROPERTY SP ON SP.SITE_PROPERTY_DEFINITION_ID = SPD.ID AND SP.TENANT_ID = @TENANTID AND SPD.IS_SHARED = 0
                WHERE SPD.IS_ACTIVE=1 AND SPD.ESPACE_ID=@ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return cmd.ExecuteReader();
        }
        #endregion

        #region Cyclic Jobs

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetNumberOfTries(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "SELECT NUMBER_OF_TRIES FROM OSSYS_CYCLIC_JOB_SHARED WHERE META_CYCLIC_JOB_ID =@CYCLICJOBID"
                : "SELECT NUMBER_OF_TRIES FROM OSSYS_CYCLIC_JOB WHERE ID =@CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            return Convert.ToInt32(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void IncrementNumberOfTries(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET NUMBER_OF_TRIES = NUMBER_OF_TRIES + 1 WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET NUMBER_OF_TRIES = NUMBER_OF_TRIES + 1 WHERE ID = @CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void ResetNumberOfTries(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET NUMBER_OF_TRIES = 0 WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET NUMBER_OF_TRIES = 0 WHERE ID = @CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "2dca3a5d-7121-fe04-54d0-67f043e6bfe6" })]
        public DateTime GetTimerLastRun(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey) {
            Command cmd = tran.CreateCommand(
      @"SELECT COALESCE(OSSYS_CYCLIC_JOB.LAST_RUN, OSSYS_CYCLIC_JOB_SHARED.LAST_RUN) LAST_RUN
        FROM OSSYS_META_CYCLIC_JOB 
        LEFT JOIN OSSYS_CYCLIC_JOB ON OSSYS_CYCLIC_JOB.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 0 AND TENANT_ID = @TENANTID
        LEFT JOIN OSSYS_CYCLIC_JOB_SHARED ON OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 1
        WHERE ESPACE_ID = @ESPACEID
          AND SS_KEY = @TIMERKEY");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);

            using (IDataReader reader = cmd.ExecuteReader()) {
                if (!reader.Read()) {
                    throw new DataBaseException("Unable to find cyclic job");
                }
                return DataReaderUtils.SafeGet<DateTime>(reader[0], BuiltInFunction.NullDate());
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetTimerNextRun(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey) {
            Command cmd = tran.CreateCommand(
      @"SELECT COALESCE(OSSYS_CYCLIC_JOB.NEXT_RUN, OSSYS_CYCLIC_JOB_SHARED.NEXT_RUN) NEXT_RUN
        FROM OSSYS_META_CYCLIC_JOB 
        LEFT JOIN OSSYS_CYCLIC_JOB ON OSSYS_CYCLIC_JOB.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 0 AND TENANT_ID = @TENANTID
        LEFT JOIN OSSYS_CYCLIC_JOB_SHARED ON OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 1
        WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);
            object obj = cmd.ExecuteScalar();
            return (obj is DateTime ? (DateTime)obj : BuiltInFunction.NullDate());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetTimerRunningSince(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "SELECT IS_RUNNING_SINCE FROM OSSYS_CYCLIC_JOB_SHARED WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID "
                : "SELECT IS_RUNNING_SINCE FROM OSSYS_CYCLIC_JOB WHERE ID = @CYCLICJOBID ");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.ExecuteScalar();
            return DataReaderUtils.SafeGet<DateTime>(cmd.ExecuteScalar(), BuiltInFunction.NullDate());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "0", "true" }, Values2 = new[] { TestSyntaxValues.AUTO, "0", "false" })]
        public bool GetCyclicJobForUpdate(Transaction tran, int cyclicJobId, bool isShared, out DateTime isRunnSince,
                                          out string schedule, out DateTime lastRun, out DateTime nextRun, out string isRunnBy) {
            isRunnSince = BuiltInFunction.NullDate();
            schedule = "";
            lastRun = BuiltInFunction.NullDate();
            nextRun = BuiltInFunction.NullDate();
            isRunnBy = "";
            string tableName = isShared ? "OSSYS_CYCLIC_JOB_SHARED" : "OSSYS_CYCLIC_JOB";
            string idColumnName = isShared ? "META_CYCLIC_JOB_ID" : "ID";
            var tableSource = DatabaseAccess.ForRuntimeDatabase.DatabaseServices.ObjectFactory.CreateLocalTableSourceInfo(tableName);
            var placeholders = tran.DatabaseServices.DMLService.GetEntityActions(tableSource).SQLPlaceholderValuesForGetForUpdate();
            string sql = placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeStatement) +
                         " SELECT " + placeholders.GetPlaceholderValue(SelectPlaceholder.AfterSelectKeyword) +
                         " IS_RUNNING_SINCE, SCHEDULE, LAST_RUN, NEXT_RUN, IS_RUNNING_BY " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeFromKeyword) + " FROM " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterFromKeyword, true, false) + tableName +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeWhereKeyword, false, true) + " WHERE " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterWhereKeyword) +
                         " " + idColumnName + " = @CYCLICJOBID " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterStatement);
            Command cmd = tran.CreateCommand(sql);

            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            using (IDataReader reader = cmd.ExecuteReader()) {
                if (!reader.Read()) {
                    return false;
                }

                if (reader[0] != DBNull.Value) {
                    isRunnSince = reader.GetDateTime(0);
                }
                if (reader[1] != DBNull.Value) {
                    schedule = reader.GetString(1);
                }
                if (reader[2] != DBNull.Value) {
                    lastRun = reader.GetDateTime(2);
                }
                if (reader[3] != DBNull.Value) {
                    nextRun = reader.GetDateTime(3);
                }
                if (reader[4] != DBNull.Value) {
                    isRunnBy = reader.GetString(4);
                }
            }

            return true;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetCyclicJobId(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey, out bool isShared) {
            isShared = false;

            Command cmd = tran.CreateCommand(
                @"SELECT COALESCE(OSSYS_CYCLIC_JOB.ID, OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID) ID, IS_SHARED
        FROM OSSYS_META_CYCLIC_JOB 
        LEFT JOIN OSSYS_CYCLIC_JOB ON OSSYS_CYCLIC_JOB.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 0 AND TENANT_ID = @TENANTID
        LEFT JOIN OSSYS_CYCLIC_JOB_SHARED ON OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 1
        WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY");
            cmd.CreateParameter("@tenantid", DbType.Int32, tenantId);
            cmd.CreateParameter("@espaceid", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@timerkey", DbType.String, timerKey);

            using (IDataReader reader = cmd.ExecuteReader()) {
                if (reader.Read()) {
                    isShared = reader.SafeGet<bool>("Is_Shared");
                    return reader.SafeGet<int>("Id");
                }
            }
            return 0;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetTimerSchedule(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey) {
            Command cmd = tran.CreateCommand(
      @"SELECT COALESCE(OSSYS_CYCLIC_JOB.SCHEDULE, OSSYS_CYCLIC_JOB_SHARED.SCHEDULE) SCHEDULE
        FROM OSSYS_META_CYCLIC_JOB 
        LEFT JOIN OSSYS_CYCLIC_JOB ON OSSYS_CYCLIC_JOB.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 0 AND TENANT_ID = @TENANTID
        LEFT JOIN OSSYS_CYCLIC_JOB_SHARED ON OSSYS_CYCLIC_JOB_SHARED.META_CYCLIC_JOB_ID = OSSYS_META_CYCLIC_JOB.ID AND OSSYS_META_CYCLIC_JOB.IS_SHARED = 1
        WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);
            return DataReaderUtils.SafeGet<string>(cmd.ExecuteScalar(), "").TrimEnd();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void GetTimerScheduleNextRunAndDbDate(Transaction tran, int cyclicJobId, bool isShared, out string schedule,
                                                            out DateTime dbDate, out DateTime nextRun, out DateTime isRunningSince) {
            Command cmd = tran.CreateCommand(
                "SELECT SCHEDULE, GETDATE(), NEXT_RUN, IS_RUNNING_SINCE " + (isShared
                    ? "FROM OSSYS_CYCLIC_JOB_SHARED WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                    : "FROM OSSYS_CYCLIC_JOB WHERE ID = @CYCLICJOBID"));
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            using (IDataReader reader = cmd.ExecuteReader()) {
                if (!reader.Read()) {
                    reader.Close();
                    throw new DataBaseException("Unable to find cyclic job with id " + cyclicJobId);
                }
                schedule = reader.SafeGet<string>(0, "");
                dbDate = reader.GetDateTime(1);
                nextRun = reader.SafeGet<DateTime>(2, BuiltInFunction.NullDate());
                isRunningSince = reader.SafeGet<DateTime>(3, BuiltInFunction.NullDate());
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void SetTimerSchedule(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey, string schedule) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_CYCLIC_JOB SET SCHEDULE = @SCHEDULE " +
                "WHERE TENANT_ID = @TENANTID " +
                "AND META_CYCLIC_JOB_ID = (SELECT ID FROM OSSYS_META_CYCLIC_JOB WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY AND IS_SHARED = 0)");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);
            cmd.CreateParameter("@SCHEDULE", DbType.String, schedule);
            cmd.ExecuteNonQuery();

            cmd = tran.CreateCommand(
                "UPDATE OSSYS_CYCLIC_JOB_SHARED SET SCHEDULE = @SCHEDULE " +
                "WHERE META_CYCLIC_JOB_ID = (SELECT ID FROM OSSYS_META_CYCLIC_JOB WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @TIMERKEY AND IS_SHARED = 1)");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@TIMERKEY", DbType.String, timerKey);
            cmd.CreateParameter("@SCHEDULE", DbType.String, schedule);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "2dca3a5d-7121-fe04-54d0-67f043e6bfe6" })]
        public void SetTimerNextRun(Transaction tran, int eSpaceId, int tenantId, ObjectKey timerKey, DateTime nextRun) {
            bool isShared;
            int cyclicJobId = GetCyclicJobId(tran, eSpaceId, tenantId, timerKey, out isShared);
            SetTimerNextRun(tran, cyclicJobId, isShared, nextRun);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void SetTimerNextRun(Transaction tran, int cyclicJobId, bool isShared, DateTime nextRun) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET NEXT_RUN = @NEXTRUN, NUMBER_OF_TRIES = 0 WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET NEXT_RUN = @NEXTRUN, NUMBER_OF_TRIES = 0 WHERE ID = @CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.CreateParameter("@NEXTRUN", DbType.DateTime, nextRun);
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to find cyclic job with id " + cyclicJobId);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void SetTimerLastRun(Transaction tran, int cyclicJobId, bool isShared, DateTime lastRun, int duration) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET LAST_RUN = @LASTRUN, LAST_DURATION = @DURATION, IS_RUNNING_SINCE = NULL, IS_RUNNING_BY = ' ' WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET LAST_RUN = @LASTRUN, LAST_DURATION = @DURATION, IS_RUNNING_SINCE = NULL, IS_RUNNING_BY = ' ' WHERE ID = @CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, cyclicJobId);
            cmd.CreateParameter("@LASTRUN", DbType.DateTime, lastRun);
            cmd.CreateParameter("@DURATION", DbType.Int32, duration);
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to find cyclic job with id " + cyclicJobId);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void SetTimerRunningBy(Transaction tran, int timerId, bool isShared, string isRunningBy, out DateTime newIsRunningSince) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET IS_RUNNING_SINCE=GETDATE(), IS_RUNNING_BY = @ISRUNNINGBY WHERE META_CYCLIC_JOB_ID = @CYCLICJOBID"
                : "UPDATE OSSYS_CYCLIC_JOB SET IS_RUNNING_SINCE=GETDATE(), IS_RUNNING_BY = @ISRUNNINGBY WHERE ID=@CYCLICJOBID");
            cmd.CreateParameter("@CYCLICJOBID", DbType.Int32, timerId);
            cmd.CreateParameter("@ISRUNNINGBY", DbType.String, isRunningBy);
            object ret = UpdateTimerAndGetIsRunningSinceValue(cmd, isShared);
            if (ret == null || ret == DBNull.Value) {
                throw new DataBaseException("Unable to update timer. No rows affected");
            }
            newIsRunningSince = Convert.ToDateTime(ret);
        }

        protected virtual object UpdateTimerAndGetIsRunningSinceValue(Command updateCommand, bool isShared) {
            updateCommand.CommandText += (isShared
                ? "; SELECT IS_RUNNING_SINCE FROM OSSYS_CYCLIC_JOB_SHARED WHERE META_CYCLIC_JOB_ID=@CYCLICJOBID"
                : "; SELECT IS_RUNNING_SINCE FROM OSSYS_CYCLIC_JOB WHERE ID=@CYCLICJOBID");
            return updateCommand.ExecuteScalar();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void ClearTimerRunningBy(Transaction tran, int timerId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET IS_RUNNING_SINCE=@NULLDATE, IS_RUNNING_BY = @ISRUNNINGBY WHERE META_CYCLIC_JOB_ID=@TIMERID"
                : "UPDATE OSSYS_CYCLIC_JOB SET IS_RUNNING_SINCE=@NULLDATE, IS_RUNNING_BY = @ISRUNNINGBY WHERE ID=@TIMERID");
            cmd.CreateParameter("@TIMERID", DbType.Int32, timerId);
            cmd.CreateParameter("@ISRUNNINGBY", DbType.String, "");
            cmd.CreateParameter("@NULLDATE", DbType.DateTime, BuiltInFunction.NullDate());
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to update timer. No rows affected");
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "true" })]
        public void UpdateCyclicJob(Transaction tran, int cyclicJobId, bool isShared) {
            Command cmd = tran.CreateCommand(isShared
                ? "UPDATE OSSYS_CYCLIC_JOB_SHARED SET NEXT_RUN=GETDATE() WHERE META_CYCLIC_JOB_ID=@TIMERID"
                : "UPDATE OSSYS_CYCLIC_JOB SET NEXT_RUN=GETDATE() WHERE ID=@TIMERID");
            cmd.CreateParameter("@TIMERID", DbType.Int32, cyclicJobId);
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to update timer. No rows affected");
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void RunSystemComponentsBootstrapCyclicJob(Transaction tran) {
        }

        #endregion

        #region Tenants

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTenantIdByEspaceId(Transaction tran, int espaceId) {
            Command cmd = tran.CreateCommand(tran.DatabaseServices.DMLService.Queries.GetMaxRecordsSQL(1, "ID", "OSSYS_TENANT", "ESPACE_ID=@ESPACEID"));
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTenantIdByEspaceName(Transaction tran, string eSpaceName) {
            Command cmd = tran.CreateCommand(tran.DatabaseServices.DMLService.Queries.GetMaxRecordsSQL(1, "ID", "OSSYS_TENANT", "NAME=@ESPACENAME"));
            cmd.CreateParameter("@ESPACENAME", DbType.String, eSpaceName);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTenantIdByEspaceKey(Transaction tran, ObjectKey eSpaceKey) {
            Command cmd = tran.CreateCommand(tran.DatabaseServices.DMLService.Queries.GetMaxRecordsSQL(1,
                "OSSYS_TENANT.ID",
                "OSSYS_TENANT INNER JOIN OSSYS_ESPACE ON OSSYS_TENANT.ESPACE_ID = OSSYS_ESPACE.ID",
                "OSSYS_ESPACE.SS_KEY=@ESPACEKEY"));
            cmd.CreateParameter("@ESPACEKEY", DbType.String, eSpaceKey);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar(/*skipLog*/true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetDefaultTenantIdByUserProviderEspaceKey(Transaction tran, ObjectKey UserProviderEspaceKey, string reservedTenantName) {
            Command cmd = tran.CreateCommand(
                "SELECT MIN(OSSYS_TENANT.ID) " +
                "FROM OSSYS_TENANT INNER JOIN OSSYS_ESPACE USER_PROVIDER ON OSSYS_TENANT.ESPACE_ID = USER_PROVIDER.ID " +
                "WHERE USER_PROVIDER.SS_KEY=@ESPACEKEY AND (OSSYS_TENANT.NAME=@TNAME OR OSSYS_TENANT.NAME=USER_PROVIDER.NAME)");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, UserProviderEspaceKey);
            cmd.CreateParameter("@TNAME", DbType.String, reservedTenantName);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar(/*skipLog*/true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool IsValidTenantIdForUserProvider(Transaction tran, ObjectKey UserProviderEspaceKey, int tenantId) {
            Command cmd = tran.CreateCommand(
                "SELECT 1 FROM OSSYS_TENANT " +
                "INNER JOIN OSSYS_ESPACE USER_PROVIDER ON OSSYS_TENANT.ESPACE_ID = USER_PROVIDER.ID " +
                "WHERE USER_PROVIDER.SS_KEY=@ESPACEKEY AND OSSYS_TENANT.ID = @TENANTID AND OSSYS_TENANT.IS_ACTIVE = 1");
            cmd.CreateParameter("@ESPACEKEY", DbType.String, UserProviderEspaceKey);
            cmd.CreateParameter("@TENANTID", DbType.String, tenantId);
            return DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar(/*skipLog*/true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetUserProviderEspaceIdByEspaceId(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT COALESCE(U.ID, E.ID) " +
                "FROM OSSYS_ESPACE E LEFT JOIN OSSYS_ESPACE U ON E.USER_PROVIDER_KEY = U.SS_KEY " +
                "WHERE E.ID = @ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.String, eSpaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTenantIdByName(Transaction tran, string eSpaceName, string tenantName) {
            Command cmd = tran.CreateCommand(
                "SELECT TENANT.ID FROM OSSYS_TENANT TENANT, OSSYS_ESPACE ESPACE WHERE " +
                "ESPACE.NAME=@ESPACENAME AND TENANT.ESPACE_ID = ESPACE.ID AND TENANT.NAME=@TENANTNAME");
            cmd.CreateParameter("@ESPACENAME", DbType.String, eSpaceName);
            cmd.CreateParameter("@TENANTNAME", DbType.String, tenantName);
            return Convert.ToInt32(cmd.ExecuteScalar(/*skipLog*/true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetTenantInfo(Transaction tran, int tenantId) {
            Command cmd = tran.CreateCommand("SELECT ID, IS_ACTIVE, NAME FROM OSSYS_TENANT WHERE ID=@TENANTID");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return cmd.ExecuteReader(/*skipLog*/true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool GetTenantActive(Transaction tran, int tenantId) {
            Command cmd = tran.CreateCommand("SELECT IS_ACTIVE FROM OSSYS_TENANT WHERE ID=@TENANTID");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            return DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar());
        }

        [DoNotObfuscate]
        internal int GetObsoleteTenantId(Transaction trans, int espaceId) {
            var cmd = trans.CreateCommand(
                "SELECT T.ID FROM OSSYS_TENANT T JOIN OSSYS_ESPACE E ON T.ESPACE_ID = E.ID WHERE E.IS_MULTITENANT = 0 AND E.ID = @ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }
        #endregion
        
        #region Parameters

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "name1", "1" })]
        public static object GetAppParameterValue(Transaction tran, string parmName, int applicationid) {
            string sql = "SELECT VAL FROM OSSYS_APP_PARAMETER PARAMETER WHERE UPPER(NAME)=@PARMNAME AND APPLICATIONID=@APPID";

            using (Command cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@PARMNAME", DbType.String, parmName.ToUpper());
                cmd.CreateParameter("@APPID", DbType.Int32, applicationid);
                return cmd.ExecuteScalar(true);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "name1", "1" })]
        public static byte[] GetAppParameterBinary(Transaction tran, string paramName, int applicationId) {
            string sql =
                "SELECT APB.BINARY " +
                "FROM OSSYS_APP_PARAMETER AP INNER JOIN OSSYS_APP_PARAM_BINARY APB ON AP.ID = APB.ID " +
                "WHERE UPPER(AP.NAME) = @PARAMNAME AND AP.APPLICATIONID = @APPID";

            using (Command cmd = tran.CreateCommand(sql)) {
                cmd.CreateParameter("@PARAMNAME", DbType.String, paramName.ToUpper());
                cmd.CreateParameter("@APPID", DbType.Int32, applicationId);
                return DataReaderUtils.SafeGet<byte[]>(cmd.ExecuteScalar(true));
            }
        }

        #endregion
        
        #region Static Records
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetStaticRecordsByEntity(Transaction tran, ObjectKey entityKey, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT DATA_ID, NAME, SS_KEY " +
                "FROM OSSYS_ENTITY_RECORD " +
                "WHERE ENTITY_SS_KEY = @ENTITYKEY AND ESPACE_ID = @ESPACEID AND IS_ACTIVE = 1");
            cmd.CreateParameter("@ENTITYKEY", DbType.String, entityKey);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetStaticRecordsByEntity(Transaction tran, ObjectKey entityKey, ObjectKey eSpaceKey) {
            Command cmd = tran.CreateCommand(
                "SELECT RECORD.DATA_ID, RECORD.SS_KEY " +
                "FROM OSSYS_ENTITY_RECORD RECORD INNER JOIN OSSYS_ESPACE ESPACE ON RECORD.ESPACE_ID = ESPACE.ID " +
                "WHERE RECORD.ENTITY_SS_KEY = @ENTITYKEY AND ESPACE.SS_KEY = @ESPACEKEY AND RECORD.IS_ACTIVE = 1");
            cmd.CreateParameter("@ENTITYKEY", DbType.String, entityKey);
            cmd.CreateParameter("@ESPACEKEY", DbType.String, eSpaceKey);
            return cmd.ExecuteReader();
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetStaticRecordBykey(Transaction tran, ObjectKey key, ObjectKey entityKey, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT DATA_ID, NAME, SS_KEY " +
                "FROM OSSYS_ENTITY_RECORD " +
                "WHERE SS_KEY = @ENTRYKEY AND ENTITY_SS_KEY = @ENTITYKEY AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@ENTRYKEY", DbType.String, key);
            cmd.CreateParameter("@ENTITYKEY", DbType.String, entityKey);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetStaticRecordByName(Transaction tran, string name, ObjectKey entityKey, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT DATA_ID, NAME, SS_KEY " +
                "FROM OSSYS_ENTITY_RECORD " +
                "WHERE NAME = @NAME AND ENTITY_SS_KEY = @ENTITYKEY AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@NAME", DbType.String, name);
            cmd.CreateParameter("@ENTITYKEY", DbType.String, entityKey);
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteReader();
        }

        public IDataReader GetStaticRecordsByEspaceKey(Transaction tran, ObjectKey producerKey) {
            Command cmd = tran.CreateCommand(
                @"SELECT RECORD.ENTITY_SS_KEY ENTITY_KEY, RECORD.SS_KEY RECORD_KEY, RECORD.DATA_ID, ESPACE.SS_KEY ESPACE_KEY
                FROM OSSYS_ENTITY_RECORD RECORD
                INNER JOIN OSSYS_ESPACE ESPACE ON RECORD.ESPACE_ID = ESPACE.ID
                WHERE ESPACE.SS_KEY = @PRODUCER_KEY");
            cmd.CreateParameter("@PRODUCER_KEY", DbType.String, producerKey);
            return cmd.ExecuteReader();
        }

        #endregion

        #region Path rules
        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetESpacePathRuleTranslations(Transaction tran) {
            Command cmd = tran.CreateCommand(
                "SELECT TRANSLATION FROM OSSYS_PATHRULE WHERE (KIND = " + (int)PathRuleKind.PassThroughESpace +
                " OR KIND = " + (int)PathRuleKind.ESpacePrettyName + ")");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEspacePrettyNames(Transaction tran) {
            Command cmd = tran.CreateCommand("SELECT INCOMING, TRANSLATION FROM OSSYS_PATHRULE WHERE KIND = " + (int)PathRuleKind.ESpacePrettyName);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetPageRules(Transaction tran, int eSpaceId) {
            Command cmd = tran.CreateCommand(
                "SELECT LOWER(TARGETPAGE) AS TARGETPAGE, INCOMING " +
                "FROM OSSYS_PAGEMETARULE " +
                "WHERE (EXCLUSIVETOESPACE = @ESPACEID OR EXCLUSIVETOESPACE IS NULL) " +
                "AND IS_ACTIVE = 1 ORDER BY RULEORDER");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void CreatePathRule(Transaction tran, int order, string incoming, string translation, bool redirect,
                bool useregexp, bool stopprocessing, object exclusivetositerule, PathRuleKind kind) {
            Command cmd;

            if (exclusivetositerule != null) {
                cmd = tran.CreateCommand(
                    "INSERT INTO OSSYS_PATHRULE (RULEORDER, INCOMING, TRANSLATION, REDIRECT, USEREGEXP, STOPPROCESSING, EXCLUSIVETOSITERULE, KIND) " +
                    "VALUES (@ORDER, @INCOMING, @TRANSLATION, @REDIRECT, @USEREGEXP, @STOPPROCESSING, @EXCLUSIVETOSITERULE, @KIND)");
                cmd.CreateParameter("@exclusivetositerule", DbType.Int32, (int)exclusivetositerule);
            } else {
                cmd = tran.CreateCommand(
                    "INSERT INTO OSSYS_PATHRULE (RULEORDER, INCOMING, TRANSLATION, REDIRECT, USEREGEXP, STOPPROCESSING, KIND) " +
                    "VALUES (@RULEORDER, @INCOMING, @TRANSLATION, @REDIRECT, @USEREGEXP, @STOPPROCESSING, @KIND)");
            }
            cmd.CreateParameter("@RULEORDER", DbType.Int32, order);
            cmd.CreateParameter("@INCOMING", DbType.String, incoming);
            cmd.CreateParameter("@TRANSLATION", DbType.String, translation);
            cmd.CreateParameter("@REDIRECT", DbType.Boolean, redirect);
            cmd.CreateParameter("@USEREGEXP", DbType.Boolean, useregexp);
            cmd.CreateParameter("@STOPPROCESSING", DbType.Boolean, stopprocessing);
            cmd.CreateParameter("@KIND", DbType.Int32, (int)kind);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal string PrettyNameToModuleName(Transaction tran, string prettyName) {
            using (Command cmd = tran.CreateCommand(@"
                SELECT ES.NAME
                FROM OSSYS_ESPACE ES
                INNER JOIN OSSYS_ESPACE_CONFIGURATION EC ON EC.ESPACE_ID=ES.ID
                WHERE EC.NAME = 'PrettyName' AND EC.VAL = @PRETTY_NAME AND IS_ACTIVE=1")) {

                cmd.CreateParameter("@PRETTY_NAME", DbType.String, prettyName);
                return DataReaderUtils.SafeGet<string>(cmd.ExecuteScalar());
            }
        }
        #endregion

        #region Misc metamodel stuff

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetEntitiesAndComplexityPerExtension(Transaction tran) {
            // -1 is invalid as complexity, is used to signal that the record does not exist
            Command cmd = tran.CreateCommand(
                "SELECT SSKEY, NAME, VERSIONID, ENTITIES, (CASE WHEN COMPLEXITY IS NULL THEN -1 ELSE COMPLEXITY END) COMPLEXITY, HMAC FROM " +
                    "(SELECT EX.SS_KEY SSKEY, EX.NAME NAME, EX.VERSION_ID VERSIONID, COUNT(1) ENTITIES FROM OSSYS_EXTENSION EX " +
                        "INNER JOIN OSSYS_ENTITY EN ON EX.ID = EN.EXTENSION_ID AND EN.IS_ACTIVE=1 AND EX.IS_ACTIVE=1 " +
                        "GROUP BY EX.SS_KEY, EX.NAME, EX.VERSION_ID) EXT " +
                    "LEFT JOIN " +
                        "(SELECT EXTENSION_VERSION_ID, COMPLEXITY, HMAC FROM OSSYS_EXTENSION_COMPLEXITY) COMP " +
                        "ON COMP.EXTENSION_VERSION_ID = EXT.VERSIONID");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetActionAndBlockReferencesInfo(Transaction tran, int eSpaceVersionId) {
            Command cmd = tran.CreateCommand(
                "SELECT DISTINCT OSSYS_ESPACE.ID, VERSION_ID FROM OSSYS_ESPACE " +
                "INNER JOIN OSSYS_ESPACE_REFERENCE " +
                "ON VERSION_ID = PUBLISHED_PROD_VERSION_ID " +
                "WHERE CONSUMER_VERSION_ID = " + eSpaceVersionId + " " +
                "AND (KIND = 'Action' OR KIND = 'WebBlock') " +
                "AND PRODUCER_KIND = 'eSpace'");
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetExtensionConfiguration(Transaction tran, int extensionId, string param) {
            Command cmd = tran.CreateCommand("SELECT VAL FROM OSSYS_EXTENSION_CONFIGURATION WHERE EXTENSION_ID = @EXTENSIONID AND NAME = @PARAM");
            cmd.CreateParameter("@EXTENSIONID", DbType.Int32, extensionId);
            cmd.CreateParameter("@PARAM", DbType.String, param);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetTextResources(Transaction tran, int eSpaceId, string locale) {
            Command cmd = tran.CreateCommand(
                "SELECT TRANSLATION, RESOURCEKEY " +
                "FROM OSSYS_TRANSLATIONOVERRIDE " +
                "WHERE LOCALE = @LOCALE AND ESPACE_ID = @ESPACEID");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@LOCALE", DbType.String, locale);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool HasEntitiesToUpdate(Transaction tran, int espaceId, int tenantId) {
            var cmd = tran.CreateCommand(
                "SELECT 1 FROM OSSYS_ENTITY ENT " +
                "JOIN OSSYS_ESPACE ESP ON ESP.ID = ENT.ESPACE_ID " +
                "LEFT JOIN OSSYS_TENANT_VIEW TVIEWS ON ENT.SS_KEY = TVIEWS.ENTITY_KEY AND ESP.ID = TVIEWS.ESPACE_ID AND TVIEWS.TENANT_ID = @TENANT_ID " +
                "LEFT JOIN OSSYS_ENTITY_VERSION ENV ON ENV.ID = ENT.ID " +
                "WHERE ESP.IS_ACTIVE = 1 AND ENT.IS_ACTIVE = 1 AND ENT.MULTITENANT = 1 AND (TVIEWS.TENANT_ID IS NULL OR (ENV.VERSION_HASH IS NOT NULL AND ENV.VERSION_HASH <> TVIEWS.VERSION_HASH))");
            cmd.CreateParameter("@TENANT_ID", tenantId);
            return DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar(/*skipLog*/true));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetWebReferenceURLs(Transaction tran, string webrefSSKey, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT URL, EFFECTIVE_URL FROM OSSYS_WEB_REFERENCE WHERE ESPACE_ID = @ESPACEID AND SS_KEY = @WEBREFSSKEY");
            cmd.CreateParameter("@ESPACEID", DbType.Int32, espaceId);
            cmd.CreateParameter("@WEBREFSSKEY", DbType.String, webrefSSKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool IsCallbackProviderWithHideSetting(Transaction tran, string espaceName) {
            Command cmd = tran.CreateCommand("SELECT COUNT(1) FROM OSSYS_CALLBACK WHERE PROVIDERNAME=@PROVIDER AND HIDE_IN_PROVIDER = 1");
            cmd.CreateParameter("@PROVIDER", DbType.String, espaceName);
            return Convert.ToInt32(cmd.ExecuteScalar()) > 0;
        }
        #endregion

        #region AndroidDownloads

        public static void InsertTemporaryAndroidDownload(Transaction tran, string guid, string mimeType, DateTime timestamp, byte[] fileContent, string hash, string filename, string disposition) {
            bool exists = false;
            int fileId = 0;
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_TEMP_ANDROID_FILE WHERE HASH = @filehash");
            cmd.CreateParameter("@filehash", DbType.String, hash);

            fileId = Convert.ToInt32(cmd.ExecuteScalar());
            exists = fileId > 0;

            if (!exists) {
                cmd = tran.CreateCommand("INSERT INTO OSSYS_TEMP_ANDROID_FILE (HASH, CONTENT) VALUES (@filehash, @filecontent)");
                cmd.CreateParameter("@filehash", DbType.String, hash);
                cmd.CreateParameter("@filecontent", DbType.Binary, fileContent);
                fileId = DBRuntimePlatform.Instance.ExecuteNonQueryGetIdentity(cmd, "ID");
            }

            cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_TEMP_ANDROID_DOWNLOAD (GUID, MIMETYPE, EXPIRES, FILENAME, DISPOSITION, FILE_CONTENT_ID) " +
                "VALUES (@guid, @mimetype, @timestamp, @filename, @disposition, @idfilecontent)");
            cmd.CreateParameter("@guid", DbType.String, guid);
            cmd.CreateParameter("@mimetype", DbType.String, mimeType);
            cmd.CreateParameter("@timestamp", DbType.DateTime, timestamp);
            cmd.CreateParameter("@filename", DbType.String, filename);
            cmd.CreateParameter("@disposition", DbType.String, disposition);
            cmd.CreateParameter("@idfilecontent", DbType.Int32, fileId);
            cmd.ExecuteNonQuery();
        }

        public static IDataReader GetTemporaryAndroidDownload(Transaction tran, string guid) {
            Command cmd = tran.CreateCommand(
                "SELECT MIMETYPE, EXPIRES, CONTENT, FILENAME, DISPOSITION FROM OSSYS_TEMP_ANDROID_DOWNLOAD " +
                "INNER JOIN OSSYS_TEMP_ANDROID_FILE ON OSSYS_TEMP_ANDROID_DOWNLOAD.FILE_CONTENT_ID = OSSYS_TEMP_ANDROID_FILE.ID " +
                "WHERE GUID = @guid");
            cmd.CreateParameter("@guid", DbType.String, guid);
            return cmd.ExecuteReader();
        }

        #endregion

        #region FrontendResolution
        
        public virtual ZoneSettings GetDeploymentZoneAddressByModuleKey(Transaction tran, ObjectKey moduleKey) {
            bool enableHttps = false;
            string zoneByKey = null;
            using (Command cmd = tran.CreateCommand("SELECT DEPLOYMENTZONEADDRESS, ENABLEHTTPS FROM OSSYS_MODULEINTERNALADDRESS WHERE MODULEKEY= @MODULEKEY")) {
                cmd.CreateParameter("@MODULEKEY", DbType.String, moduleKey);
                using (IDataReader reader = cmd.ExecuteReader()) {
                    if (reader.Read()) {
                        enableHttps = reader.SafeGet<bool>("ENABLEHTTPS");
                        zoneByKey = reader.SafeGet<string>("DEPLOYMENTZONEADDRESS");
                    }
                }
            }
            return new ZoneSettings(enableHttps, zoneByKey);
        }

        public virtual void GetModuleKeyAndIdByName(Transaction tran, string moduleName, out ObjectKey moduleKey, out int moduleId) {
            moduleKey = null;
            moduleId = -1;
            using (Command cmd = tran.CreateCommand("SELECT ID, SS_KEY FROM OSSYS_ESPACE WHERE NAME=@MODULENAME")) {
                cmd.CreateParameter("@MODULENAME", DbType.String, moduleName);
                using (IDataReader reader = cmd.ExecuteReader()) {
                    if (reader.Read()) {
                        moduleKey = ObjectKey.Parse(reader.SafeGet<string>("SS_KEY"));
                        moduleId = reader.SafeGet<int>("ID");
                    }
                }
            }
        }

        public virtual void GetModuleNameAndIdByKey(Transaction tran, ObjectKey moduleKey, out string moduleName, out int moduleId) {
            moduleName = null;
            moduleId = -1;
            using (Command cmd = tran.CreateCommand("SELECT ID, NAME FROM OSSYS_ESPACE WHERE SS_KEY=@MODULEKEY")) { 
                cmd.CreateParameter("@MODULEKEY", DbType.String, moduleKey);
                using (IDataReader reader = cmd.ExecuteReader()) {
                    if (reader.Read()) {
                        moduleId = reader.SafeGet<int>("ID");
                        moduleName = reader.SafeGet<string>("NAME");
                    }
                }
            }
        }
        #endregion

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetFailedLoginAttemptsCountFromUser(Transaction tran, string username, DateTime datetimeInitial, string IPAddress) {
            Command cmd = tran.CreateCommand(@"SELECT USERNAMEFAILURECOUNT, INSTANT 
                                            FROM OSSYS_LOGIN_ATTEMPT 
                                            WHERE UPPER(USERNAME)=@USERNAME AND 
                                            INSTANT>=@DATETIME AND 
                                            IPADDRESS=@IPADDRESS AND
                                            SUCCESS=@SUCCESS
                                            ORDER BY INSTANT DESC, ID DESC");
            cmd.CreateParameter("@USERNAME", DbType.String, username.ToUpper());
            cmd.CreateParameter("@DATETIME", DbType.DateTime, datetimeInitial);
            cmd.CreateParameter("@IPADDRESS", DbType.String, IPAddress);
            cmd.CreateParameter("@SUCCESS", DbType.Boolean, false);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetLastLoginAttemptsFromIPAddress(Transaction tran, string originAddress, DateTime datetimeInitial) {
            Command cmd = tran.CreateCommand(@"SELECT USERID, USERNAME, IPADDRESSFAILURECOUNT, INSTANT 
                                            FROM OSSYS_LOGIN_ATTEMPT 
                                            WHERE IPADDRESS=@IPADDRESS AND INSTANT>=@DATETIME AND SUCCESS=@SUCCESS
                                            ORDER BY INSTANT DESC, ID DESC");
            cmd.CreateParameter("@IPADDRESS", DbType.String, originAddress);
            cmd.CreateParameter("@DATETIME", DbType.DateTime, datetimeInitial);
            cmd.CreateParameter("@SUCCESS", DbType.Boolean, false);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void CreateLoginAttemptRecord(Transaction tran, int userId, string username, bool success, DateTime instant, string IPAddress, int usernameFailureCount,
                    int IPAddressFailureCount, string userAgent, string visitor, string requestKey, string result) {
            //userAgent is limited to avoid running into errors if it is larger than 250 characters
            var cappedUserAgent = "";
            if (userAgent != null) {
                cappedUserAgent = userAgent.Substring(0, (userAgent.Length <= 250) ? userAgent.Length : 250);
            }
            Command cmd = tran.CreateCommand(
            @"INSERT INTO OSSYS_LOGIN_ATTEMPT (USERID, USERNAME, SUCCESS, INSTANT, IPADDRESS, USERNAMEFAILURECOUNT, IPADDRESSFAILURECOUNT, 
            USERAGENT, VISITOR, REQUESTKEY, RESULT) 
            VALUES(@USERID, @USERNAME, @SUCCESS, @INSTANT, @IPADDRESS, @USERNAMEFAILURECOUNT, @IPADDRESSFAILURECOUNT, 
            @USERAGENT, @VISITOR, @REQUESTKEY, @RESULT)");
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@USERNAME", DbType.String, username);
            cmd.CreateParameter("@SUCCESS", DbType.Boolean, success);
            cmd.CreateParameter("@INSTANT", DbType.DateTime, instant);
            cmd.CreateParameter("@IPADDRESS", DbType.String, IPAddress);
            cmd.CreateParameter("@USERNAMEFAILURECOUNT", DbType.Int32, usernameFailureCount);
            cmd.CreateParameter("@IPADDRESSFAILURECOUNT", DbType.Int32, IPAddressFailureCount);
            cmd.CreateParameter("@USERAGENT", DbType.String, cappedUserAgent);
            cmd.CreateParameter("@VISITOR", DbType.String, visitor);
            cmd.CreateParameter("@REQUESTKEY", DbType.String, requestKey);
            cmd.CreateParameter("@RESULT", DbType.String, result);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetLastFailedLoginAttemptsFromUserOrIp(Transaction tran, int userId, string username, string IPAddress, DateTime since) {
            // **DUPLICATED CODE**
            // If you fix a bug in this query, please review User_GetLastFailedLoginAttempts from Users.oml
            // as code is duplicated in both sides. Thanks.

            Command cmd = tran.CreateCommand(@"SELECT ID, USERID, USERNAME, SUCCESS, INSTANT, IPADDRESS, USERNAMEFAILURECOUNT, IPADDRESSFAILURECOUNT,
                                            USERAGENT, VISITOR, REQUESTKEY, RESULT 
                                            FROM OSSYS_LOGIN_ATTEMPT
                                            WHERE " +
                                               (userId == 0 ? "" : @"USERID=@USERID AND ") +
                                               (StringUtils.IsEmpty(username) ? "" : @"USERNAME=@USERNAME AND ") +
                                               (StringUtils.IsEmpty(IPAddress) ? "" : @"IPADDRESS=@IPADDRESS AND ") +
                                            @"INSTANT>=@DATETIME AND 
                                            SUCCESS=@SUCCESS
                                            ORDER BY INSTANT DESC, ID DESC"); // Order by INSTANT and ID because the instants may be equal and IDs can't.
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@USERNAME", DbType.String, username);
            cmd.CreateParameter("@IPADDRESS", DbType.String, IPAddress);
            cmd.CreateParameter("@DATETIME", DbType.DateTime, since);
            cmd.CreateParameter("@SUCCESS", DbType.Boolean, false);

            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetUserLocks(Transaction tran, int userId, DateTime since) {
            // **DUPLICATED CODE**
            // If you fix a bug in this query, please review GetFailedAttemptsForUser advanced query in User_Show preparation from Users.oml
            // as code is duplicated in both sides. Thanks.

            Command cmd = tran.CreateCommand(@"SELECT ID, USERID, USERNAME, SUCCESS, INSTANT, IPADDRESS, USERNAMEFAILURECOUNT, IPADDRESSFAILURECOUNT,
                                            USERAGENT, VISITOR, REQUESTKEY, RESULT 
                                            FROM OSSYS_LOGIN_ATTEMPT
                                            WHERE ID IN
                                                (SELECT MAX(OSSYS_LOGIN_ATTEMPT.ID) FROM OSSYS_LOGIN_ATTEMPT
                                                WHERE OSSYS_LOGIN_ATTEMPT.SUCCESS = 0
                                                AND OSSYS_LOGIN_ATTEMPT.INSTANT >= @DATETIME
                                                AND (OSSYS_LOGIN_ATTEMPT.RESULT = 'BlockedUser' OR OSSYS_LOGIN_ATTEMPT.RESULT = 'BlockedIP' OR OSSYS_LOGIN_ATTEMPT.RESULT = 'Unblocked')
                                                AND OSSYS_LOGIN_ATTEMPT.USERID = @USERID
                                                GROUP BY OSSYS_LOGIN_ATTEMPT.USERNAME, OSSYS_LOGIN_ATTEMPT.IPADDRESS)
                                            AND OSSYS_LOGIN_ATTEMPT.RESULT <> 'Unblocked'");

            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@DATETIME", DbType.DateTime, since);

            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetIPLocks(Transaction tran, string IPAddress, DateTime since) {
            // **DUPLICATED CODE**
            // If you fix a bug in this query, please review GetFailedAttemptsForUser advanced query in BlockedIPAddresses preparation from Users.oml
            // as code is duplicated in both sides. Thanks.

            Command cmd = tran.CreateCommand(@"SELECT ID, USERID, USERNAME, SUCCESS, INSTANT, IPADDRESS, USERNAMEFAILURECOUNT, IPADDRESSFAILURECOUNT,
                                            USERAGENT, VISITOR, REQUESTKEY, RESULT 
                                            FROM OSSYS_LOGIN_ATTEMPT
                                            WHERE ID IN
                                                (SELECT MAX(OSSYS_LOGIN_ATTEMPT.ID) FROM OSSYS_LOGIN_ATTEMPT
                                                WHERE OSSYS_LOGIN_ATTEMPT.SUCCESS = 0
                                                AND OSSYS_LOGIN_ATTEMPT.INSTANT >= @DATETIME
                                                AND (OSSYS_LOGIN_ATTEMPT.RESULT = 'BlockedIP' OR OSSYS_LOGIN_ATTEMPT.RESULT = 'Unblocked') " +
                                               (StringUtils.IsEmpty(IPAddress) ? "" : @"AND OSSYS_LOGIN_ATTEMPT.IPADDRESS = @IPADDRESS ") +
                                                @"GROUP BY OSSYS_LOGIN_ATTEMPT.IPADDRESS)
                                            AND OSSYS_LOGIN_ATTEMPT.RESULT <> 'Unblocked'");

            //WHY DO WE HAVE ='Unblocked' AND THEN <>'Unblocked'?
            //We want to get the last record associated with the IP address that will tell us if the address is blocked or not. 
            //Then, if that last record represents an 'unblock' that means the IP has no associated lock and it will
            //return an empty result

            cmd.CreateParameter("@IPADDRESS", DbType.String, IPAddress);
            cmd.CreateParameter("@DATETIME", DbType.DateTime, since);

            return cmd.ExecuteReader();
        }
    }
}
