/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Runtime.Serialization;
using System.Text;
using OutSystems.RuntimeCommon;
using System.Diagnostics;

namespace OutSystems.HubEdition.RuntimePlatform {

    [Serializable]
    public abstract class OSException: Exception {
        protected OSException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public OSException(string message) : base(message) { }
        public OSException(string message, Exception innerEx) : base(message, innerEx) { }

        public virtual string GetUniqueName() {
            return this.GetType().Name;
        }

        public virtual string MessageForLogging() {
            return Message;
        }
    }

    [Serializable]
    public class UserException: OSException {
        protected UserException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public UserException(string message) : base(message) { }
		public UserException (string message, Exception innerEx) : base (message, innerEx) {}
    }

    [Serializable]
    public class SecurityException: OSException {
        protected SecurityException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public SecurityException(string message) : base(message) { }
        public SecurityException(string message, Exception innerEx) : base(message, innerEx) { }
	}

    [Serializable]
    public class NotAnonymousException : SecurityException {
        protected NotAnonymousException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public NotAnonymousException(string message) : base(message) { }
        public NotAnonymousException(string message, Exception innerEx) : base(message, innerEx) { }
	}

    [Serializable]
    public class NotRegisteredException : SecurityException {
        protected NotRegisteredException(SerializationInfo info, StreamingContext context) : base(info, context) { }
		public NotRegisteredException (string message) : base (message) {}
		public NotRegisteredException (string message, Exception innerEx) : base (message, innerEx) {}
    }

    // Note: For backward compatibility and future use
    [Serializable]
    public class SystemException: OSException {
        protected SystemException(SerializationInfo info, StreamingContext context) : base(info, context) { }
		public SystemException (string message) : base (message) {}
		public SystemException (string message, Exception innerEx) : base (message, innerEx) {}
	}

    [Serializable]
    public class DataBaseException: OSException {
        protected DataBaseException(SerializationInfo info, StreamingContext context) : base(info, context) { }
		public DataBaseException (string message) : base (message) {}
		public DataBaseException (string message, Exception innerEx) : base ( message, innerEx) {}

        public override string MessageForLogging() {
            var message = Message;
            if (InnerException != null) {
                message += " " + InnerException.Message ?? String.Empty;
            }
            return message;
        }
    }

    [Serializable]
    public class CommunicationException : OSException {
        protected CommunicationException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public CommunicationException(string message) : base(message) { }
        public CommunicationException(string message, Exception innerEx) : base(message, innerEx) { }
    }

    [Serializable]
    public class InvalidLoginException: SecurityException {
        protected InvalidLoginException(SerializationInfo info, StreamingContext context) : base(info, context) { }
		public InvalidLoginException (string message) : base (message) {}
		public InvalidLoginException (string message, Exception innerEx) : base (message, innerEx) {}
	}

    [Serializable]
    public class InvalidSessionException : SystemException {
        protected InvalidSessionException(SerializationInfo info, StreamingContext context) : base(info, context) { }
		public InvalidSessionException (string message) : base (message) {}
		public InvalidSessionException (string message, Exception innerEx) : base (message, innerEx) {}
	}

    [Serializable]
    public class RecursiveIterationException : OSException {
        protected RecursiveIterationException(SerializationInfo info, StreamingContext context) : base(info, context) { }
		public RecursiveIterationException (string message) : base (message) {}
		public RecursiveIterationException (string message, Exception innerEx) : base (message, innerEx) {}
	}

    [Serializable]
    public class LicensingException : OSException {
        private string detail;
        public string Detail {
            get { return detail; }
        }

        public string AdditionalInformationToLog { get; private set; }

        protected LicensingException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public LicensingException(string message) : base(message) { }
        public LicensingException(string message, string detail) : base(message) { this.detail = detail; }
        public LicensingException(string message, Exception innerEx) : base(message, innerEx) { }

        public static LicensingException CreateWithAdditionalInformationToLog(string message, string additionalInformationToLog) {
            var result = new LicensingException(message);
            result.AdditionalInformationToLog = additionalInformationToLog;
            return result;
        }

        public static LicensingException CreateWithAdditionalInformationToLog(string message, params object[] nameAndValuePairs) {
            Debug.Assert((nameAndValuePairs.Length % 2) == 0);
            var additionalInformation = new StringBuilder();            

            for (int i = 0; i < nameAndValuePairs.Length; i+= 2) {
                additionalInformation.AppendLine(String.Format("{0}: {1}", nameAndValuePairs [i], nameAndValuePairs [i + 1]));
            }

            return CreateWithAdditionalInformationToLog(message, additionalInformation.ToString());
        }
    }

    [Serializable]
    public class EmailException : OSException {
        private string stackTrace;

        public override string StackTrace {
            get {
                string baseStack = base.StackTrace;

                if (stackTrace.IsEmpty()) {
                    return baseStack;
                } else if (baseStack.IsEmpty()) {
                    return stackTrace;
                } else {
                    return stackTrace + " On " + Environment.NewLine + baseStack; 
                }
            }
        }

        protected EmailException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public EmailException(string message) : base(message) { }
        public EmailException(string message, string stackTrace) : base(message) { this.stackTrace = stackTrace; }
        public EmailException(string message, Exception innerEx) : base(message + (innerEx.Message.IsEmpty() ? "" : ((message.IsEmpty() ? "" : " ") + innerEx.Message))) {
            this.stackTrace = innerEx.StackTrace;
        }
    }

    [Serializable]
    public class AbortActivityChangeException : OSException {
        protected AbortActivityChangeException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public AbortActivityChangeException(string message) : base(message) { }
        public AbortActivityChangeException(string message, Exception innerEx) : base(message, innerEx) { }
    }

    [Serializable]
    public class ApplicationBackendUnavailableException : OSException {
        protected ApplicationBackendUnavailableException(SerializationInfo info, StreamingContext context) : base(info, context) { }
        public ApplicationBackendUnavailableException(string message) : base(message) { }
        public ApplicationBackendUnavailableException(string message, Exception innerEx) : base(message, innerEx) { }
    }
}
