/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using OutSystems.HubEdition.RuntimePlatform;

namespace OutSystems.HubEdition.RuntimePlatform {
    /// <summary>
    /// Contains all the information about the tenant.
    /// </summary>
    public class EspaceInfo : IDisposable {

        private AppInfo _appInfo;
        private readonly int _espaceId;
        private volatile IDictionary<int, EspaceTenantInfo> _tenants = new Dictionary<int, EspaceTenantInfo>();

        public int Id {
            get {
                return _espaceId;
            }
        }


        public EspaceInfo(int espaceId, AppInfo appInfo) {
            _espaceId = espaceId;
            _appInfo = appInfo;
        }


        private EspaceTenantInfo CurrentTenant {
            get {
                EspaceTenantInfo espaceTenantInfo;
                TenantInfo tenant = _appInfo.Tenant;
                if (!_tenants.TryGetValue(tenant.Id, out espaceTenantInfo)) {
                    lock (_tenants) {
                        if (!_tenants.TryGetValue(tenant.Id, out espaceTenantInfo)) {
                            espaceTenantInfo = new EspaceTenantInfo(_espaceId, tenant);
                            _tenants[tenant.Id] = espaceTenantInfo;
                        }
                    }
                }

                return espaceTenantInfo;
            }
        }

        public SitePropertiesInfo EspaceSiteProperties {
            get {
                return CurrentTenant.TenantSiteProperties;
            }
        }

        public void Dispose() {
            _tenants.Values.ToList().ForEach(t => t.Dispose());
        }
    }
}
