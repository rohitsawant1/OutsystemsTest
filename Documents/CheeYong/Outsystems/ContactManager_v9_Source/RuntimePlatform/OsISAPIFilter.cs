/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Web;

namespace OutSystems.HubEdition.RuntimePlatform {

    /// <summary>
    /// This class is to be used in all interactions with Headers that are set in the OsISAPI Filter.
    /// If the feature is disabled ("IIS.OsISAPIFilterEnabled" setting) all headers are ignored for security reasons.
    /// </summary>
    public class OsISAPIFilter {
        const string OSOriginalHostHeader = "OS-Host";
        const string OSOriginalHostSuffixHeader = "OS-Host-Suffix";
        const string OSOriginalPathHeader = "OS-Path";
        const string OSOriginalPtaHeader = "OS-Pta";
        const string OSOriginalPageHeader = "OS-Page";

        // Custom headers
        const string OSLocaleHeader = "OS-Locale";

        public static OsISAPIFilter Instance {
            get { return AppInfo.GetAppInfo().OsContext.OsISAPIFilter; }
        }

        public OsISAPIFilter() {
        }

        public bool IsEnabled { get; } = false;

        public bool IsActiveInRequest(HttpRequest request) {
            return IsEnabled && request.Headers[OSOriginalHostHeader] != null;
        }
        
        public string GetHost(HttpRequest request) {
            if (IsActiveInRequest(request)) {
                return request.Headers[OSOriginalHostHeader];
            }
            return null;
        }

        public string GetHost(HttpRequest request, string defaultValue) {
            return GetHost(request) ?? defaultValue;
        }

        public string GetHost() {
            return GetHost(HttpContext.Current.Request);
        }
        
        public string GetHostSuffix(HttpRequest request) {
            if (IsActiveInRequest(request)) {
                return request.Headers[OSOriginalHostSuffixHeader];
            }
            return null;
        }

        public string GetHostSuffix(HttpRequest request, string defaultValue) {
            return GetHostSuffix(request) ?? defaultValue;
        }
        
        public string GetHostSuffix() {
            return GetHostSuffix(HttpContext.Current.Request);
        }
        
        public string GetPath(HttpRequest request) {
            if (IsActiveInRequest(request)) {
                return request.Headers[OSOriginalPathHeader];
            }
            return null;
        }

        public string GetPath(HttpRequest request, string defaultValue) {
            return GetPath(request) ?? defaultValue;
        }

        public string GetPath() {
            return GetPath(HttpContext.Current.Request);
        }
        
        public string GetPTA(HttpRequest request) {
            if (IsActiveInRequest(request)) {
                return request.Headers[OSOriginalPtaHeader];
            }
            return null;
        }

        public string GetPTA(HttpRequest request, string defaultValue) {
            return GetPTA(request) ?? defaultValue;
        }

        public string GetPTA() {
            return GetPTA(HttpContext.Current.Request);
        }
        
        public string GetPage(HttpRequest request) {
            if (IsActiveInRequest(request)) {
                return request.Headers[OSOriginalPageHeader];
            }
            return null;
        }

        public string GetPage(HttpRequest request, string defaultValue) {
            return GetPage(request) ?? defaultValue;
        }

        public string GetPage() {
            return GetPage(HttpContext.Current.Request);
        }

        public string GetLocale(HttpRequest request) {
            return GetCustomHeader(request, OSLocaleHeader);
        }

        public string GetCustomHeader(HttpRequest request, string name){
            if (IsActiveInRequest(request)) {
                return request.Headers[name];
            }
            return null;
        }

    }
}
