/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Text;
using System.Web;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {


    /// <summary>
    /// Contains the definitions for all the builtin functions
    /// </summary>	
    /// <remarks>
    /// When a function is added, it is necessary to include it in the compiler.
    /// See the "FillFunctionInfo" function in the "Language" class.
    /// 
    /// NOTE : TRY/CATCH added to all functions even if we think/know they 
    /// throw no exception (just in case). Exception: fn returning the argument received.
    /// </remarks>
    public static class BuiltInFunction {

        public const string ExceptionURLSessionName = "__exceptionUrl__";
        
        // Math functions
        public static decimal Abs(decimal n) {
            return ScriptableBuiltInFunction.Abs(n);
        }

        public static decimal Mod(decimal n, decimal m) {
            return ScriptableBuiltInFunction.Mod(n, m);
        }

        public static decimal Power(decimal n, decimal m) {
            return ScriptableBuiltInFunction.Power(n, m);
        }

        // for backward compatibility
        public static decimal Round(decimal n) {
            return ScriptableBuiltInFunction.Round(n);
        }

        public static decimal Round(decimal n, int fractionalDigits) {
            return ScriptableBuiltInFunction.Round(n, fractionalDigits);
        }

        public static decimal Sqrt(decimal n) {
            return ScriptableBuiltInFunction.Sqrt(n);
        }

        public static decimal Trunc(decimal n) {
            return ScriptableBuiltInFunction.Trunc(n);
        }

        // Numeric
        public static decimal Min(decimal n, decimal m) {
            return ScriptableBuiltInFunction.Min(n, m);
        }

        public static decimal Max(decimal n, decimal m) {
            return ScriptableBuiltInFunction.Max(n, m);
        }

        public static int Sign(decimal n) {
            return ScriptableBuiltInFunction.Sign(n);
        }

        // Text
        public static int Length(string t) {
            return ScriptableBuiltInFunction.Length(t);
        }

        public static int LengthSC(string t) {
            return ScriptableBuiltInFunction.LengthSC(t);
        }

        public static string Concat(string t1, string t2) {
            return ScriptableBuiltInFunction.Concat(t1, t2);
        }

        public static string ToLower(string t) {
            return ScriptableBuiltInFunction.ToLower(t);
        }

        public static string ToUpper(string t) {
            return ScriptableBuiltInFunction.ToUpper(t);
        }

        public static string Trim(string t) {
            return ScriptableBuiltInFunction.Trim(t);
        }

        public static string TrimStart(string t) {
            return ScriptableBuiltInFunction.TrimStart(t);
        }

        public static string TrimEnd(string t) {
            return ScriptableBuiltInFunction.TrimEnd(t);
        }

        // for backward compatibility
        public static int Index(string t, string s) {
            return ScriptableBuiltInFunction.Index(t, s);
        }

        public static int Index(string t, string s, int startIndex, bool searchFromEnd, bool ignoreCase) {
            return ScriptableBuiltInFunction.Index(t, s, startIndex, searchFromEnd, ignoreCase);
        }

        public static int IndexSC(string t, string s, int startIndex, bool searchFromEnd, bool ignoreCase) {
            return ScriptableBuiltInFunction.IndexSC(t, s, startIndex, searchFromEnd, ignoreCase);
        }

        public static string Replace(string t, string s, string r) {
            return ScriptableBuiltInFunction.Replace(t, s, r);
        }

        public static string Substr(string t, int s, int l) {
            return ScriptableBuiltInFunction.Substr(t, s, l);
        }

        public static string SubstrSC(string t, int s, int l) {
            return ScriptableBuiltInFunction.SubstrSC(t, s, l);
        }

        public static string EncodeSql(string s) {
            return DatabaseAccess.ForCurrentDatabase.DatabaseServices.DMLService.EscapeTextValue(s);
        }

        public static string EncodeUrl(string s) {
            try {
                return HttpUtility.UrlEncode(s).Replace("'", "%27");
            } catch {
                return string.Empty;
            }
        }

        public static string EncodeHtmlAttribute(string s) {
                if (s == null) {
                    return string.Empty;
                } else {
                    return s.Replace("&", "&amp;")
                            .Replace("'", "&#39;")
                            .Replace("\n", "&#10;")
                            .Replace("\r", "&#13;")
                            .Replace("\"", "&quot;")
                            .Replace("<", "&lt;")
                            .Replace(">", "&gt;");
                }
        }
        
        public static string EncodeHtml( string s) {
            try {
                if (s == null) {
                    return string.Empty;
                } else {
                    return HttpUtility.HtmlEncode(s)
                                      .FixHtmlSpaces()
                                      .Replace("'", "&#39;")
                                      .Replace("\r", null)
                                      .Replace("\n", "<br/>");
                }
            } catch {
                return string.Empty;
            }
        }

        public static string EncodeJavascript(string s) {
            return s.Replace("\\", "\\x5c").Replace("'", "\\x27").Replace("\"", "\\x22").
                Replace("&", "\\x26").Replace("<", "\\x3c").
                Replace(">", "\\x3e").Replace("\r", "\\r").Replace("\n", "\\n");
        }

        // public static string NewLine()... is defined as inline function

        public static string Chr(int unicodeCharCode) {
            return ScriptableBuiltInFunction.Chr(unicodeCharCode);
        }
        
        // Date & Time
        public static DateTime CurrDate() {
            return ScriptableBuiltInFunction.CurrDate();
        }

        public static DateTime CurrTime() {
            return ScriptableBuiltInFunction.CurrTime();
        }

        public static DateTime CurrDateTime() {
            return ScriptableBuiltInFunction.CurrDateTime();
        }

        public static int Day(DateTime dt) {
            return ScriptableBuiltInFunction.Day(dt);
        }

        public static int Month(DateTime dt) {
            return ScriptableBuiltInFunction.Month(dt);
        }

        public static int Year(DateTime dt) {
            return ScriptableBuiltInFunction.Year(dt);
        }

        public static int DayOfWeek(DateTime dt) {
            return ScriptableBuiltInFunction.DayOfWeek(dt);
        }

        public static int Hour(DateTime dt) {
            return ScriptableBuiltInFunction.Hour(dt);
        }

        public static int Minute(DateTime dt) {
            return ScriptableBuiltInFunction.Minute(dt);
        }

        public static int Second(DateTime dt) {
            return ScriptableBuiltInFunction.Second(dt);
        }

        public static DateTime BuildDateTime(DateTime d, DateTime t) {
            return ScriptableBuiltInFunction.BuildDateTime(d, t);
        }

        public static DateTime NewDate(int y, int mo, int d) {
            return ScriptableBuiltInFunction.NewDate(y, mo, d);
        }

        public static DateTime NewTime(int h, int mi, int s) {
            return ScriptableBuiltInFunction.NewTime(h, mi, s);
        }

        public static DateTime NewDateTime(int y, int mo, int d, int h, int mi, int s) {
            return ScriptableBuiltInFunction.NewDateTime(y, mo, d, h, mi, s);
        }

        public static DateTime AddDays(DateTime dt, int n) {
            return ScriptableBuiltInFunction.AddDays(dt, n);
        }

        public static DateTime AddMonths(DateTime dt, int n) {
            return ScriptableBuiltInFunction.AddMonths(dt, n);
        }

        public static DateTime AddYears(DateTime dt, int n) {
            return ScriptableBuiltInFunction.AddYears(dt, n);
        }

        public static DateTime AddHours(DateTime dt, int n) {
            return ScriptableBuiltInFunction.AddHours(dt, n);
        }

        public static DateTime AddMinutes(DateTime dt, int n) {
            return ScriptableBuiltInFunction.AddMinutes(dt, n);
        }

        public static DateTime AddSeconds(DateTime dt, int n) {
            return ScriptableBuiltInFunction.AddSeconds(dt, n);
        }

        // Diff functions had to match with the correspondent sql functions
        public static int DiffDays(DateTime dt, DateTime dt2) {
            return ScriptableBuiltInFunction.DiffDays(dt, dt2);
        }

        public static int DiffHours(DateTime dt, DateTime dt2) {
            return ScriptableBuiltInFunction.DiffHours(dt, dt2);
        }

        public static int DiffMinutes(DateTime dt, DateTime dt2) {
            return ScriptableBuiltInFunction.DiffMinutes(dt, dt2);
        }

        public static int DiffSeconds(DateTime dt, DateTime dt2) {
            return ScriptableBuiltInFunction.DiffSeconds(dt, dt2);
        }
    
        // Type Conversion
        public static int TextToInteger(string t) {
            return ScriptableBuiltInFunction.TextToInteger(t);
        }

        public static bool TextToIntegerValidate(string t) {
            return ScriptableBuiltInFunction.TextToIntegerValidate(t);
        }

        public static int TextToIntegerInput(string t) {
            return ScriptableBuiltInFunction.TextToIntegerInput(t);
        }

        public static bool TextToIntegerInputValidate(string t) {
            return ScriptableBuiltInFunction.TextToIntegerInputValidate(t);
        }

        public static long TextToLongInteger(string t) {
            return ScriptableBuiltInFunction.TextToLongInteger(t);
        }

        public static bool TextToLongIntegerValidate(string t) {
            return ScriptableBuiltInFunction.TextToLongIntegerValidate(t);
        }

        public static long TextToLongIntegerInput(string t) {
            return ScriptableBuiltInFunction.TextToLongIntegerInput(t);
        }

        public static bool TextToLongIntegerInputValidate(string t) {
            return ScriptableBuiltInFunction.TextToLongIntegerInputValidate(t);
        }

        public static decimal TextToDecimal(string t) {
            return ScriptableBuiltInFunction.TextToDecimal(t);
        }

        public static bool TextToDecimalValidate(string t) {
            return ScriptableBuiltInFunction.TextToDecimalValidate(t);
        }

        public static decimal TextToDecimalInput(string t) {
            return ScriptableBuiltInFunction.TextToDecimalInput(t);
        }

        public static bool TextToDecimalInputValidate(string t) {
            return ScriptableBuiltInFunction.TextToDecimalInputValidate(t);
        }

        public static DateTime TextToDateTime(string t) {
            return ScriptableBuiltInFunction.TextToDateTime(t);
        }

        public static bool TextToDateTimeValidate(string t) {
            return ScriptableBuiltInFunction.TextToDateTimeValidate(t);
        }

        public static DateTime TextToDate(string t) {
            return ScriptableBuiltInFunction.TextToDate(t);
        }

        public static bool TextToDateValidate(string t) {
            return ScriptableBuiltInFunction.TextToDateValidate(t);
        }

        public static DateTime TextToTime(string t) {
            return ScriptableBuiltInFunction.TextToTime(t);
        }

        public static bool TextToTimeValidate(string t) {
            return ScriptableBuiltInFunction.TextToTimeValidate(t);
        }

        public static string IntegerToText(int i) {
            return ScriptableBuiltInFunction.IntegerToText(i);
        }

        public static string LongIntegerToText(long b) {
            return ScriptableBuiltInFunction.LongIntegerToText(b);
        }

        public static decimal IntegerToDecimal(int i) {
            return ScriptableBuiltInFunction.IntegerToDecimal(i);
        }

        public static bool IntegerToBoolean(int i) {
            return ScriptableBuiltInFunction.IntegerToBoolean(i);
        }

        public static string DecimalToText(decimal d) {
            return ScriptableBuiltInFunction.DecimalToText(d);
        }

        public static int DecimalToInteger(decimal d) {
            return ScriptableBuiltInFunction.DecimalToInteger(d);
        }

        public static bool DecimalToIntegerValidate(decimal d) {
            return ScriptableBuiltInFunction.DecimalToIntegerValidate(d);
        }

        public static long DecimalToLongInteger(decimal d) {
            return ScriptableBuiltInFunction.DecimalToLongInteger(d);
        }

        public static bool DecimalToLongIntegerValidate(decimal d) {
            return ScriptableBuiltInFunction.DecimalToLongIntegerValidate(d);
        }

        public static int LongIntegerToInteger(long b) {
            return ScriptableBuiltInFunction.LongIntegerToInteger(b);
        }

        public static bool LongIntegerToIntegerValidate(long b) {
            return ScriptableBuiltInFunction.LongIntegerToIntegerValidate(b);
        }

        public static bool DecimalToBoolean(decimal d) {
            return ScriptableBuiltInFunction.DecimalToBoolean(d);
        }

        public static string BooleanToText(bool b) {
            return ScriptableBuiltInFunction.BooleanToText(b);
        }

        public static int BooleanToInteger(bool b) {
            return ScriptableBuiltInFunction.BooleanToInteger(b);
        }

        public static string DateTimeToText(DateTime dt) {
            return ScriptableBuiltInFunction.DateTimeToText(dt);
        }

        public static DateTime DateTimeToDate(DateTime dt) {
            return ScriptableBuiltInFunction.DateTimeToDate(dt);
        }

        public static DateTime DateTimeToTime(DateTime dt) {
            return ScriptableBuiltInFunction.DateTimeToTime(dt);
        }

        public static string DateToText(DateTime d) {
            return ScriptableBuiltInFunction.DateToText(d);
        }

        public static DateTime DateToDateTime(DateTime d) {
            return ScriptableBuiltInFunction.DateToDateTime(d);
        }

        public static string TimeToText(DateTime t) {
            return ScriptableBuiltInFunction.TimeToText(t);
        }

        public static int IdentifierToInteger(int id) {
            return ScriptableBuiltInFunction.IdentifierToInteger(id);
        }

        public static long IdentifierToLongInteger(long id) {
            return ScriptableBuiltInFunction.IdentifierToLongInteger(id);
        }

        public static int IntegerToIdentifier(int i) {
            return ScriptableBuiltInFunction.IntegerToIdentifier(i);
        }

        public static long LongIntegerToIdentifier(long b) {
            return ScriptableBuiltInFunction.LongIntegerToIdentifier(b);
        }

        public static string IdentifierToText(string id) {
            return ScriptableBuiltInFunction.IdentifierToText(id);
        }

        public static string TextToIdentifier(string t) {
            return ScriptableBuiltInFunction.TextToIdentifier(t);
        }

        public static int NullIdentifier() {
            return ScriptableBuiltInFunction.NullIdentifier();
        }

        public static string NullTextIdentifier() {
            return ScriptableBuiltInFunction.NullTextIdentifier();
        }

        public static string NewLine() {
            return ScriptableBuiltInFunction.NewLine();
        }

        public static DateTime NullDate() {
            return ScriptableBuiltInFunction.NullDate();
        }

        public static DateTime MaxDate() {
            return ScriptableBuiltInFunction.MaxDate();
        }

        public static object NullObject() {
            return ScriptableBuiltInFunction.NullObject();
        }

        public static byte[] NullBinary() {
            return ScriptableBuiltInFunction.NullBinary();
        }

        public static bool AreBinaryNulls(byte[] left, byte[] right) {
            return (left == null || (left != null && left.Length == 0))
                && (right == null || (right != null && right.Length == 0));
        }

        public static object ToObject(object obj) {
            return ScriptableBuiltInFunction.ToObject(obj);
        }

        // Formatting
        public static string FormatCurrency(
            decimal val,
            string symbol,
            int decimal_digits,
            string decimal_separator,
            string group_separator) {

            return ScriptableBuiltInFunction.FormatCurrency(val, symbol, decimal_digits, decimal_separator, group_separator);
        }

        public static string FormatDecimal(
            decimal val,
            int decimal_digits,
            string decimal_separator,
            string group_separator) {

            return ScriptableBuiltInFunction.FormatDecimal(val, decimal_digits, decimal_separator, group_separator);
        }
        public static string FormatPercent(
            decimal val,
            int decimal_digits,
            string decimal_separator) {

            return ScriptableBuiltInFunction.FormatPercent(val, decimal_digits, decimal_separator);
        }

        public static string FormatPhoneNumber(
            string val,
            int int_code_digits,
            int area_code_digits,
            int phone_digits,
            string int_separator,
            string area_separator,
            string phone_separator) {

            return ScriptableBuiltInFunction.FormatPhoneNumber(val, int_code_digits, area_code_digits, phone_digits, int_separator, area_separator, phone_separator);
        }

        public static string FormatDateTime(DateTime dt, string format) {
            return ScriptableBuiltInFunction.FormatDateTime(dt, format);
        }

        [Obsolete("Deprecated since 10.0. Use FormatDateTime instead.")]
        public static string FormatShortDateTime(DateTime dt, string date_separator, string time_separator) {
            return ScriptableBuiltInFunction.FormatShortDateTime(dt, date_separator, time_separator);
        }

        [Obsolete("Deprecated since 10.0. Use FormatDateTime instead.")]
        public static string FormatFullDateTime(DateTime dt, string date_separator, string time_separator) {
            return ScriptableBuiltInFunction.FormatFullDateTime(dt, date_separator, time_separator);
        }

        [Obsolete("Deprecated since 10.0. Use FormatDateTime instead.")]
        public static string FormatFullDate(DateTime d, string date_separator) {
            return ScriptableBuiltInFunction.FormatFullDate(d, date_separator);
        }

        [Obsolete("Deprecated since 10.0. Use FormatDateTime instead.")]
        public static string FormatTime(DateTime t, string time_separator) {
            return ScriptableBuiltInFunction.FormatTime(t, time_separator);
        }

        [Obsolete("Deprecated since 10.0. Use FormatDateTime instead.")]
        public static string FormatMonthDayDate(DateTime d, string date_separator) {
            return ScriptableBuiltInFunction.FormatMonthDayDate(d, date_separator);
        }

        [Obsolete("Deprecated since 10.0. Use FormatDateTime instead.")]
        public static string FormatShortDate(DateTime d, string date_separator) {
            return ScriptableBuiltInFunction.FormatShortDate(d, date_separator);
        }

        [Obsolete("Deprecated since 10.0. Use FormatDateTime instead.")]
        public static string FormatYearMonthDate(DateTime d, string date_separator) {
            return ScriptableBuiltInFunction.FormatYearMonthDate(d, date_separator);
        }

        public static string FormatBoolean(bool val, string true_value, string false_value) {
            try {
                return val ? true_value : false_value;
            } catch {
                return string.Empty;
            }
        }

        public static string EmailAddressCreate(string name, string email) {
            return Email.EmailFunctions.Compose(Encoding.UTF8, name, email); // UTF8 encoding expected
        }

        public static string EmailAddressesConcatenate(string address1, string address2) {
            return Email.EmailFunctions.Append(address1, address2);
        }

        public static bool EmailAddressValidate(string address) {
            return ScriptableBuiltInFunction.EmailAddressValidate(address);
        }
        
        public static string internalIf(bool val, string true_value, string false_value) {
            try {
                return val ? true_value : false_value;
            } catch {
                return string.Empty;
            }
        }

        public static string FormatText(string val, int min_chars, int max_chars, bool left_padding, string padding_char) {
            return ScriptableBuiltInFunction.FormatText(val, min_chars, max_chars, left_padding, padding_char);
        }

        public static string FormatTextSC(string val, int min_chars, int max_chars, bool left_padding, string padding_char) {
            return ScriptableBuiltInFunction.FormatTextSC(val, min_chars, max_chars, left_padding, padding_char);
        }

        // Miscellaneous

        public static string GetEntryEspaceName() {
            return AppInfo.GetAppInfo().eSpaceName;
        }

        public static string GetCurrentLocale() {
            try {
                AppInfo app = AppInfo.GetAppInfo();
                if (app != null && app.MultilingualEnabled) {
                    return app.OsContext.CurrentLocale;
                } else {
                    return string.Empty;
                }
            } catch {
                return string.Empty;
            }
        }
        

        public static string GetDatabaseProvider() {
            try {
                return DatabaseAccess.ForCurrentDatabase.DatabaseServices.DatabaseConfiguration.DatabaseProvider.Key.Serialize();
            } catch {
                return string.Empty;
            }
        }

        public static string GetApplicationServerType() {
            return ".Net";
        }
        
        public static string GetUserAgent() {
            try {
                return System.Web.HttpContext.Current.Request.UserAgent ?? string.Empty;
            } catch {
                return string.Empty;
            }
        }

        public static HttpBrowserCapabilities GetBrowserCapabilities() {
            try {
                return System.Web.HttpContext.Current.Request.Browser;
            } catch {
                return null;
            }
        }

        [Obsolete("Deprecated since 4.1. Use GetUserAgent instead.")]
        public static string GetBrowserType() {
            try {
                HttpBrowserCapabilities hbc = HttpContext.Current.Request.Browser;
                return hbc.Type;
            } catch {
                return string.Empty;
            }
        }

        [Obsolete("Deprecated since 9.1. Use RuntimePlatformUtils.Hashing.GeneratePasswordHashWithAlgorithm instead.")]
        public static string Encrypt(string s) {
            return RuntimePlatformUtils.Hashing.GeneratePasswordHashWithAlgorithm(s, RuntimePlatformUtils.Hashing.MD5Hash.Instance);
        }
        
        public static string GeneratePassword(int ssLength, bool ssAlphanumeric) {

            string allowedChars;
            if (ssAlphanumeric) {
                allowedChars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            } else {
                allowedChars = "0123456789";
            }
            try {
                return RuntimeCommon.Cryptography.PasswordHelper.PasswordWithLimitationsHelper.GeneratePasswordWithCharacterLimitations(ssLength, allowedChars);
            } catch (Exception e) {
                // since GeneratePassword is a BuiltInFunction, it is not expected to throw an exception when bad stuff happens
                OSTrace.Debug("Empty password generated, because of Exception in generation.", e);
                return string.Empty;
            }
        }

        public static string GetBookmarkableURL() {
            try {
                var page = AppInfo.GetAppInfo().OsContext.CurrentScreen as IBookmarkableURL;
                if (page != null) {
                    var url = page.GetBookmarkableURL();
                    if (url != null) {
                        return RuntimePlatformUtils.CheckUriSecurity(HttpContext.Current.Request, url);
                    }
                }
            } catch { }
            return string.Empty;
        }

        public static bool CurrentThemeIsMobile() {
            try {
                var page = AppInfo.GetAppInfo().OsContext.CurrentScreen as IBookmarkableURL;
                return page != null && page.IsUsingMobileTheme;
            } catch {
                return false;
            }
        }

        public static string GetPersonalAreaName() {
            try {
            return AppInfo.GetAppInfo().PtaName;
            } catch {
                return string.Empty;
            }
        }

        public static string GetExceptionURL() {
            try {
                return (string)AppInfo.GetAppInfo().OsContext.Session[BuiltInFunction.ExceptionURLSessionName] ?? "";
            } catch {
                return string.Empty;
            }
        }

        public static string AddPersonalAreaToURLPath(string url) {
            try {
                string origurl = url, servername = "", espacename = "", pagename = "";

                string ptaname = "/" + ((string)HttpContext.Current.Items["osCurrentPTAName"] ?? "");
                if (ptaname.Length == 1)
                    return url;

                int pos = url.IndexOf('?');
                string querystring = "";
                if (pos != -1) {
                    querystring = url.Substring(pos);
                    url = url.Substring(0, pos);
                }

                string http = "";
                if (url.ToLower().IndexOf("http://") != -1) {
                    http = url.Substring(0, 7);
                    url = url.Substring(7);
                } else if (url.ToLower().IndexOf("https://") != -1) {
                    http = url.Substring(0, 8);
                    url = url.Substring(8);
                }

                bool wasTreatedByISAPIFilter = false;
                
                AppInfo appInfo = AppInfo.GetAppInfo();
                if (appInfo != null) {
                    HeContext heContext = appInfo.OsContext;
                    HttpRequest request = HttpContext.Current.Request;
                    if (heContext != null && heContext.OsISAPIFilter.IsActiveInRequest(request)) {

                        wasTreatedByISAPIFilter = true;
                        // ISAPI filtered call

                        pos = url.IndexOf("/");
                        if (http != "") {
                            if (pos == -1) {
                                // support pta on root app
                                servername = url;
                                url = "";
                            } else {
                                servername = url.Substring(0, pos);
                                url = url.Substring(pos);
                            }
                        } else {
                            if (pos != 0) {
                                return origurl;
                            } else if (pos == 0) {
                                servername = "";
                            }
                        }

                        bool bThisServer = servername.Length == 0 || string.Equals(servername, heContext.OsISAPIFilter.GetHost(request), StringComparison.InvariantCultureIgnoreCase);

                        if (bThisServer) {
                            // if server not specified OR the same as current, append any host prefix
                            servername += heContext.OsISAPIFilter.GetHostSuffix(request);

                            // Handle espace names
                            //TODO RRTC Needs to be reviews, will certainly fail when platform db is offline
                            using (Transaction tran = DatabaseAccess.ForRuntimeDatabase.GetReadOnlyTransaction()) {
                                using (IDataReader reader = DBRuntimePlatform.Instance.GetESpacePathRuleTranslations(tran)) {
                                    while (reader.Read()) {
                                        string translation = (string)reader["Translation"];
                                        if (url.StartsWith(translation, StringComparison.InvariantCultureIgnoreCase) &&
                                            (url.Length == translation.Length || url[translation.Length] == '/')) {
                                            espacename = translation;
                                            pagename = url.Substring(translation.Length);

                                            // prevent "double" pta name
                                            String ptaHeader = heContext.OsISAPIFilter.GetPTA(request);
                                            if (ptaHeader != null) {
                                                if (ptaname.ToLower().Equals(ptaHeader.ToLower())) {
                                                    if (pagename.StartsWith(ptaHeader)) {
                                                        if (pagename.Length == ptaHeader.Length ||
                                                            pagename[ptaHeader.Length] == '/') {
                                                            pagename = pagename.Substring(ptaHeader.Length);
                                                        }
                                                    }
                                                }
                                            }

                                            break;
                                        }
                                    }

                                    if (espacename.Length == 0) {
                                        // since we did not find an espace name, consider everything page of the root app
                                        // TODO MSM: check if site has root app defined: if not do things the old way
                                        espacename = "";
                                        pagename = url;
                                        wasTreatedByISAPIFilter = false;
                                    }
                                }
                            }

                        } else {
                            // since this is not the same server, we have no info on espace names, so just do things the old way
                            //  i.e. espace name is up to next "/"
                            pos = url.IndexOf("/", 1);
                            if (pos == -1) {
                                espacename = url;
                            } else {
                                espacename = url.Substring(0, pos);
                                pagename = url.Substring(pos);
                            }
                        }
                    }
                }

                if (!wasTreatedByISAPIFilter) {
                    // Normal, old-fashioned call

                    pos = url.IndexOf("/");
                    if (http != "") {
                        if (pos == -1) {
                            return origurl;
                        } else {
                            servername = url.Substring(0, pos + 1);
                            url = url.Substring(pos + 1);
                        }
                    } else {
                        if (pos != 0) {
                            return origurl;
                        } else if (pos == 0) {
                            servername = "/";
                            url = url.Substring(1);
                        }
                    }

                    pos = url.IndexOf("/");
                    if (pos == -1) {
                        espacename = url;
                    } else {
                        espacename = url.Substring(0, pos);
                        pagename = url.Substring(pos);
                    }

                    if (espacename == "" || espacename.IndexOf(".") != -1)
                        return origurl;

                    if (pagename.IndexOf(ptaname + "/") == 0 || pagename == ptaname)
                        return origurl;
                }

                return http + servername + espacename + ptaname + pagename + querystring;					

                
            } catch {
                return string.Empty;
            }
        }

        public static int GetObsoleteTenantId() {
            int espaceId = AppInfo.GetAppInfo().eSpaceId;
            int tenantId;

            using (Transaction tran = DatabaseAccess.ForRuntimeDatabase.GetReadOnlyTransaction()) {
                tenantId = DBRuntimePlatform.Instance.GetObsoleteTenantId(tran, espaceId);
            }

            // IsMultiTenant => (tenantId == 0)
            if (tenantId == 0) {
                return AppInfo.GetAppInfo().Tenant.Id;
            } else {
                return tenantId;
            }
        }

        public static bool IsLoadingScreen() {
            return AppInfo.GetAppInfo().IsLoadingScreen;
        }

        public static string NotifyWidgetGetMessage() {
            return AppInfo.GetAppInfo().OsContext.AjaxEventContextInfo.NotifyMessage;
        }

        public static bool CheckRole(int roleId, int userId) {
            if( userId == 0) {
                return false;
            }
            if (userId == AppInfo.GetAppInfo().OsContext.Session.UserId) {
                return AppInfo.GetAppInfo().OsContext.Session.CheckRole(roleId);
            }
            using (Transaction tran = DatabaseAccess.ForRuntimeDatabase.GetReadOnlyTransaction()) {
                return Convert.ToInt32(DBRuntimePlatform.Instance.CheckRole(tran, userId, roleId, AppInfo.GetAppInfo().OsContext.Session.TenantId)) > 0;
            }
        }

        public static int GetUserId() {
            return AppInfo.GetAppInfo().OsContext.Session.UserId;
        }

        // WHEN CHANGING THIS CODE, PLEASE KEEP THE FUNCTIONS RELATIVE ORDER IN SYNC WITH 
        // SERVICE STUDIO ORDER, AND IN SAME 'GROUPING'. THANKS.
    }
}
