/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Runtime.CompilerServices;
using OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.HubEdition.RuntimePlatform.Processes;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider;
using OutSystems.HubEdition.Extensibility.Data.DMLService;
using OutSystems.Internal.Db;

namespace OutSystems.HubEdition.RuntimePlatform {

    public partial class DBRuntimePlatform {


        [DoNotTestSyntax("Utility method already tested by other methods")]
        public string GetNextRunErrorBackoffStatement(IDMLFunctions functions, string errorCountColumn, string backoffVar, string retryBaseVar) {
            return functions.AddSeconds("GETDATE()",
                string.Format("(POWER({0}, CASE WHEN {1} < 40 THEN {2} ELSE 40 END) * {3})", backoffVar, errorCountColumn, errorCountColumn, retryBaseVar));
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void CreateMissingStartActivityInProcess(Transaction tran, int processId, string activitySSKey) {
            using (Command cmd = tran.CreateCommand(
                 "INSERT INTO OSSYS_BPM_ACTIVITY (TENANT_ID, ACTIVITY_DEF_ID, PROCESS_ID, NAME, CREATED, STATUS_ID, NEXT_RUN, PRECEDENT_ACTIVITY_ID) " +
                 "SELECT PROCESS.TENANT_ID, ACTIVITYDEFINITION.ID TARGETDEFID, PROCESS.ID PROCESSID, ACTIVITYDEFINITION.NAME CONDITIONALNAME, GETDATE(), @ACTIVITYSTATUSCREATED, GETDATE(), MAX(STARTACTIVITY.ID) PRECEDENTACTIVITYID " +
                 "FROM OSSYS_BPM_PROCESS PROCESS " +
                 "INNER JOIN OSSYS_BPM_PROCESS_DEFINITION PROCESSDEFINITION ON PROCESS.PROCESS_DEF_ID = PROCESSDEFINITION.ID AND PROCESS.ID = @PROCESSID " +
                 "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION ACTIVITYDEFINITION ON ACTIVITYDEFINITION.PROCESS_DEF_ID = PROCESSDEFINITION.ID AND ACTIVITYDEFINITION.SS_KEY = @ACTIVITYSSKEY " +
                 "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION STARTACTIVITYDEFINITION ON STARTACTIVITYDEFINITION.PROCESS_DEF_ID = PROCESSDEFINITION.ID AND STARTACTIVITYDEFINITION.IS_ACTIVE = 1 AND STARTACTIVITYDEFINITION.KIND = @ACTIVITYKINDSTART " +
                 "INNER JOIN OSSYS_BPM_ACTIVITY STARTACTIVITY ON STARTACTIVITY.ACTIVITY_DEF_ID = STARTACTIVITYDEFINITION.ID AND STARTACTIVITY.PROCESS_ID = PROCESS.ID AND STARTACTIVITY.STATUS_ID = @ACTIVITYSTATUSCLOSED " +
                 "LEFT JOIN OSSYS_BPM_ACTIVITY EXISTINGACTIVITY ON EXISTINGACTIVITY.ACTIVITY_DEF_ID = ACTIVITYDEFINITION.ID AND EXISTINGACTIVITY.PROCESS_ID = PROCESS.ID AND EXISTINGACTIVITY.STATUS_ID NOT IN (@ACTIVITYSTATUSCLOSED, @ACTIVITYSTATUSTERMINATED) " +
                 "WHERE EXISTINGACTIVITY.ID IS NULL  GROUP BY PROCESS.TENANT_ID, PROCESS.ID, ACTIVITYDEFINITION.ID, ACTIVITYDEFINITION.NAME")) {

                cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
                cmd.CreateParameter("@ACTIVITYSSKEY", DbType.String, activitySSKey);
                cmd.CreateParameter("@ACTIVITYKINDSTART", DbType.Int32, (int)ActivityKind.Start);
                cmd.CreateParameter("@ACTIVITYSTATUSCLOSED", DbType.Int32, (int)ActivityStatus.Closed);
                cmd.CreateParameter("@ACTIVITYSTATUSTERMINATED", DbType.Int32, (int)ActivityStatus.Terminated);
                cmd.CreateParameter("@ACTIVITYSTATUSCREATED", DbType.Int32, (int)ActivityStatus.Created);
                cmd.ExecuteNonQuery();
            }
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetActiveActivityInProcess(Transaction tran, int processId, string activitySSKey, ActivityStatus status) {
            Command cmd = tran.CreateCommand(
                "SELECT ACT.ID FROM OSSYS_BPM_ACTIVITY ACT " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION AD ON ACT.ACTIVITY_DEF_ID = AD.ID " +
                "WHERE ACT.PROCESS_ID = @PROCESSID AND ACT.STATUS_ID = @STATUS " +
                "AND AD.SS_KEY = @ACTIVITYSSKEY AND AD.IS_ACTIVE = 1");

            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.CreateParameter("@ACTIVITYSSKEY", DbType.String, activitySSKey);
            cmd.CreateParameter("@STATUS", DbType.Int32, status);

            return Convert.ToInt32(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetPrecedentActivityId(Transaction tran, int currentActivity, string targetSSKey) {
            var sql = GetPrecedentActivityIdSQL();

            Command cmd = tran.CreateCommand(sql);
            cmd.CreateParameter("@STARTID", DbType.Int32, currentActivity);
            cmd.CreateParameter("@TARGETKEY", DbType.String, targetSSKey);

            object prededentId = cmd.ExecuteScalar();
            if (prededentId == null || prededentId == DBNull.Value) {
                return BuiltInFunction.NullIdentifier();
            } else {
                return Convert.ToInt32(prededentId);
            }
        }

        protected virtual string GetPrecedentActivityIdSQL() {
            throw new NotImplementedException(GetNotImplementedMessage());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetPrecedentActivityId(Transaction tran, int currentActivity) {
            Command cmd = tran.CreateCommand(
                "SELECT PRECEDENT_ACTIVITY_ID " +
                "FROM OSSYS_BPM_ACTIVITY " +
                "WHERE ID = @CURRENTACTIVITY");
            cmd.CreateParameter("@CURRENTACTIVITY", DbType.Int32, currentActivity);

            object prededentId = cmd.ExecuteScalar();
            if (prededentId == null || prededentId == DBNull.Value) {
                return BuiltInFunction.NullIdentifier();
            } else {
                return Convert.ToInt32(prededentId);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetActivitySuccessorsCount(Transaction tran, int currentActivity) {
            Command cmd = tran.CreateCommand(
                "SELECT COUNT(1) " +
                "FROM OSSYS_BPM_ACTIVITY A " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEF_LINK LINKS " +
                "ON A.ACTIVITY_DEF_ID = LINKS.SOURCE_ACTIVITY_DEF_ID " +
                "WHERE A.ID = @CURRENTACTIVITY");
            cmd.CreateParameter("@CURRENTACTIVITY", DbType.Int32, currentActivity);

            object count = cmd.ExecuteScalar();
            if (count == null || count == DBNull.Value) {
                return 0;
            } else {
                return Convert.ToInt32(count);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetParentActivityId(Transaction tran, int subprocessId) {
            Command cmd = tran.CreateCommand(
                "SELECT PARENT_ACTIVITY_ID " +
                "FROM OSSYS_BPM_PROCESS " +
                "WHERE ID = @SUBPROCESSID");
            cmd.CreateParameter("@SUBPROCESSID", DbType.Int32, subprocessId);

            object activityId = cmd.ExecuteScalar();
            if (activityId == null || activityId == DBNull.Value) {
                return BuiltInFunction.NullIdentifier();
            } else {
                return Convert.ToInt32(activityId);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetProcessTenantId(Transaction tran, int processId) {
            Command cmd = tran.CreateCommand(
                "SELECT TENANT_ID " +
                "FROM OSSYS_BPM_PROCESS " +
                "WHERE ID = @PROCESSID");
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);

            object tenantId = cmd.ExecuteScalar();
            if (tenantId == null || tenantId == DBNull.Value) {
                return BuiltInFunction.NullIdentifier();
            } else {
                return Convert.ToInt32(tenantId);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetAncestorActivityIdInTenant(Transaction tran, int subprocessId, int desiredTenantId) {
            int currentProcessId = subprocessId;
            while (true) {
                Command cmd = tran.CreateCommand(
                    "SELECT PARENT_PROCESS_ID, PARENT_ACTIVITY_ID " +
                    "FROM OSSYS_BPM_PROCESS " +
                    "WHERE ID = @CURRENTPROCESSID");
                cmd.CreateParameter("@CURRENTPROCESSID", DbType.Int32, currentProcessId);

                using (IDataReader reader = cmd.ExecuteReader()) {
                    if (reader.Read()) {
                        int parentProcessId = reader.SafeGet<int>("PARENT_PROCESS_ID");
                        int parentActivityId = reader.SafeGet<int>("PARENT_ACTIVITY_ID");
                        reader.SafeClose();

                        int tenantId = GetProcessTenantId(tran, parentProcessId);

                        if (tenantId == desiredTenantId) {
                            return parentActivityId;
                        }

                        currentProcessId = parentProcessId;
                    } else {
                        return BuiltInFunction.NullIdentifier();
                    }
                }
            }
        }

        //the folowing methods do not recieve a transaction just to make their usage easyer
        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetActivityOutputDefId(ObjectKey espaceSSKey, ObjectKey SSKey) {
            return GetActivityVariableDefId(espaceSSKey, SSKey, /*isActivity*/true, /*isInput*/false);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetProcessInputDefId(ObjectKey espaceSSKey, ObjectKey SSKey) {
            return GetActivityVariableDefId(espaceSSKey, SSKey, /*isActivity*/false, /*isInput*/true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetProcessOutputDefId(ObjectKey espaceSSKey, ObjectKey SSKey) {
            return GetActivityVariableDefId(espaceSSKey, SSKey, /*isActivity*/false, /*isInput*/false);
        }

        public int GetActivityVariableDefId(ObjectKey espaceSSKey, ObjectKey SSKey, bool isActivity, bool isInput) {
            using (Transaction tran = DatabaseAccess.ForRuntimeDatabase.GetReadOnlyTransaction()) {
                return GetActivityVariableDefId(tran, espaceSSKey, SSKey, isActivity, isInput);
            }
        }

        private int GetActivityVariableDefId(Transaction tran, ObjectKey espaceSSKey, ObjectKey SSKey, bool isActivity, bool isInput) {
            Command cmd = tran.CreateCommand(
                "SELECT D.ID " +
                "FROM OSSYS_BPM_" + (isActivity ? "ACTIVITY_" : "PROCESS_") + (isInput ? "INPUT" : "OUTPUT") + "_DEF D " +
                (isActivity ? "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION AD ON AD.ID = D.ACTIVITY_DEF_ID " : "") +
                "INNER JOIN OSSYS_BPM_PROCESS_DEFINITION PD ON PD.ID = " + (isActivity ? "AD" : "D") + ".PROCESS_DEF_ID " +
                "INNER JOIN OSSYS_ESPACE E ON E.ID = PD.ESPACE_ID " +
                "WHERE D.IS_ACTIVE = 1 AND D.SS_KEY = @SSKEY " +
                (isActivity ? "AND AD.IS_ACTIVE = 1 " : "") +
                "AND PD.IS_ACTIVE = 1 " +
                "AND E.IS_ACTIVE = 1 AND E.SS_KEY = @ESPACESSKEY");
            cmd.CreateParameter("@SSKEY", DbType.String, SSKey);
            cmd.CreateParameter("@ESPACESSKEY", DbType.String, espaceSSKey);
            object id = cmd.ExecuteScalar();
            if (id == null || id == DBNull.Value) {
                throw new InvalidOperationException("Could not find a " + (isActivity ? "activity" : "process") + " " + (isInput ? "input" : "output") + " definition. The process may be updating at the moment.");
            } else {
                return Convert.ToInt32(id);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetActivityOutput(Transaction tran, ObjectKey outputSSKey, int activityId) {
            Command cmd = tran.CreateCommand(
                "SELECT OUTPUT_VALUE VALUE, DATA_TYPE " +
                "FROM OSSYS_BPM_ACTIVITY_OUTPUT " +
                "WHERE ACTIVITY_ID = @ACTIVITYID AND SS_KEY = @OUTPUTSSKEY");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            cmd.CreateParameter("@OUTPUTSSKEY", DbType.String, outputSSKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetProcessOutput(Transaction tran, ObjectKey outputSSKey, int processId) {
            Command cmd = tran.CreateCommand(
                "SELECT OUTPUT_VALUE VALUE, DATA_TYPE " +
                "FROM OSSYS_BPM_PROCESS_OUTPUT " +
                "WHERE PROCESS_ID = @PROCESSID AND SS_KEY = @OUTPUTSSKEY");
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.CreateParameter("@OUTPUTSSKEY", DbType.String, outputSSKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetSubProcessInstance(Transaction tran, int processId, int activityId) {
            Command cmd = tran.CreateCommand(
                "SELECT P.ID " +
                "FROM OSSYS_BPM_PROCESS P " +
                "INNER JOIN OSSYS_BPM_ACTIVITY ACT ON ACT.ID = P.PARENT_ACTIVITY_ID " +
                "WHERE ACT.ID = @ACTIVITYID AND ACT.PROCESS_ID = @PROCESSID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            return Convert.ToInt32(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetSubProcessOutput(Transaction tran, ObjectKey outputSSKey, int activityId) {
            Command cmd = tran.CreateCommand(
                "SELECT O.SS_KEY, O.OUTPUT_VALUE VALUE, O.DATA_TYPE " +
                "FROM OSSYS_BPM_PROCESS_OUTPUT O " +
                "INNER JOIN OSSYS_BPM_PROCESS P ON P.ID = O.PROCESS_ID " +
                "WHERE P.PARENT_ACTIVITY_ID = @ACTIVITYID AND SS_KEY = @OUTPUTSSKEY");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            cmd.CreateParameter("@OUTPUTSSKEY", DbType.String, outputSSKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetProcessInput(Transaction tran, ObjectKey inputSSKey, int processId) {
            Command cmd = tran.CreateCommand(
                "SELECT SS_KEY, INPUT_VALUE VALUE, DATA_TYPE DATA_TYPE " +
                "FROM OSSYS_BPM_PROCESS_INPUT " +
                "WHERE PROCESS_ID = @PROCESSID AND SS_KEY = @INPUTSSKEY");
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.CreateParameter("@INPUTSSKEY", DbType.String, inputSSKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - activityId")]
        public void AddOrUpdateActivityOutput(Transaction tran, int activityId, int tenantId, IActivityVariable output) {
            AddOrUpdateActivityVariable(tran, activityId, tenantId, output, /*isActivity*/true, /*isInput*/false);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - processId")]
        public void AddProcessInput(Transaction tran, int processId, int tenantId, IActivityVariable input) {
            AddActivityVariable(tran, processId, tenantId, input, /*isActivity*/false, /*isInput*/true);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - processId")]
        public void AddProcessOutput(Transaction tran, int processId, int tenantId, IActivityVariable output) {
            AddActivityVariable(tran, processId, tenantId, output, /*isActivity*/false, /*isInput*/false);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - processId")]
        public void AddOrUpdateProcessOutput(Transaction tran, int processId, int tenantId, IActivityVariable output) {
            AddOrUpdateActivityVariable(tran, processId, tenantId, output, /*isActivity*/false, /*isInput*/false);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - id")]
        private void AddOrUpdateActivityVariable(Transaction tran, int id, int tenantId, IActivityVariable variable, bool isActivity, bool isInput) {
            //Get the overhead of the select ..but like this we avoid deadlocks on the table PK index
            Command cmd = tran.CreateCommand(
                "SELECT ID FROM OSSYS_BPM_" + (isActivity ? "ACTIVITY_" : "PROCESS_") + (isInput ? "INPUT" : "OUTPUT") +
                " WHERE TENANT_ID = @TENANTID AND " + (isInput ? "INPUT" : "OUTPUT") + "_DEF_ID = @VARIABLEDEFID AND " + (isActivity ? "ACTIVITY_ID = @ACTIVITYID" : "PROCESS_ID = @PROCESSID"));
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@VARIABLEDEFID", DbType.Int32, variable.DefinitionId);
            cmd.CreateParameter(isActivity ? "@ACTIVITYID" : "@PROCESSID", DbType.Int32, id);

            int variableId = DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
            if (variableId == BuiltInFunction.NullIdentifier()) {
                AddActivityVariable(tran, id, tenantId, variable, isActivity, isInput);
            } else {
                cmd = tran.CreateCommand(
                    "UPDATE OSSYS_BPM_" + (isActivity ? "ACTIVITY_" : "PROCESS_") + (isInput ? "INPUT" : "OUTPUT") +
                    " SET " + (isInput ? "INPUT" : "OUTPUT") + "_VALUE = @VALUE " +
                    " WHERE ID = @VARIABLEID AND (" + (isInput ? "INPUT" : "OUTPUT") + "_VALUE IS NULL OR " + (isInput ? "INPUT" : "OUTPUT") +
                    "_VALUE <> @VALUE)");

                cmd.CreateParameter("@VALUE", DbType.String, RuntimePlatformUtils.ConvertToString(variable.ValueObj));
                cmd.CreateParameter("@VARIABLEID", DbType.Int32, variableId);
                cmd.ExecuteNonQuery();
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - id")]
        public bool ActivityVariableIsSaved(Transaction tran, int id, int tenantId, IActivityVariable variable, bool isActivity, bool isInput) {
            Command cmd = tran.CreateCommand(
                "SELECT COUNT(*) FROM OSSYS_BPM_" + (isActivity ? "ACTIVITY_" : "PROCESS_") + (isInput ? "INPUT" : "OUTPUT") +
                " WHERE TENANT_ID=@TENANTID AND " +
                (isInput ? "INPUT" : "OUTPUT") + "_DEF_ID=@VARIABLEDEFID AND " +
                (isActivity ? "ACTIVITY_ID=@ACTIVITYID" : "PROCESS_ID=@PROCESSID"));
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@VARIABLEDEFID", DbType.Int32, variable.DefinitionId);
            cmd.CreateParameter(isActivity ? "@ACTIVITYID" : "@PROCESSID", DbType.Int32, id);
            return Convert.ToInt32(cmd.ExecuteScalar()) > 0;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - id")]
        private void AddActivityVariable(Transaction tran, int id, int tenantId, IActivityVariable variable, bool isActivity, bool isInput) {
            Command cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_BPM_" + (isActivity ? "ACTIVITY_" : "PROCESS_") + (isInput ? "INPUT" : "OUTPUT") + " (TENANT_ID, " +
                (isInput ? "INPUT" : "OUTPUT") + "_DEF_ID, " + (isActivity ? "ACTIVITY_ID" : "PROCESS_ID") +
                ", SS_KEY, NAME, DATA_TYPE, SS_TYPE, " + (isInput ? "INPUT" : "OUTPUT") + "_VALUE) " +
                "VALUES (@TENANTID, @VARIABLEDEFID, " + (isActivity ? "@ACTIVITYID" : "@PROCESSID") +
                ", @SSKEY, @NAME, @DATATYPE, @SSTYPE, @VALUE)");
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@VARIABLEDEFID", DbType.Int32, variable.DefinitionId);
            cmd.CreateParameter(isActivity ? "@ACTIVITYID" : "@PROCESSID", DbType.Int32, id);
            cmd.CreateParameter("@SSKEY", DbType.String, ObjectKeyUtils.DatabaseValue(variable.Key));
            cmd.CreateParameter("@NAME", DbType.String, variable.Name);
            cmd.CreateParameter("@DATATYPE", DbType.String, variable.DataType);
            cmd.CreateParameter("@SSTYPE", DbType.String, variable.SSType);
            cmd.CreateParameter("@VALUE", DbType.String, RuntimePlatformUtils.ConvertToString(variable.ValueObj));
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetUnsetProcessOutputs(Transaction tran, int processId) {
            Command cmd = tran.CreateCommand(
                "SELECT OD.SS_KEY FROM OSSYS_BPM_PROCESS P " +
                "INNER JOIN OSSYS_BPM_PROCESS_OUTPUT_DEF OD ON P.PROCESS_DEF_ID = OD.PROCESS_DEF_ID " +
                "LEFT OUTER JOIN OSSYS_BPM_PROCESS_OUTPUT O ON P.ID = O.PROCESS_ID AND OD.ID = O.OUTPUT_DEF_ID " +
                "WHERE P.ID = @PROCESS_ID AND O.ID IS NULL");
            cmd.CreateParameter("@PROCESS_ID", DbType.Int32, processId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetActivityProcessId(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand("SELECT PROCESS_ID FROM OSSYS_BPM_ACTIVITY WHERE ID = @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar(), 0);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetActivityClosedBy(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand(
                "SELECT ACT.USER_ID FROM OSSYS_BPM_ACTIVITY ACT " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_STATUS S ON ACT.STATUS_ID = S.ID " +
                "WHERE S.IS_TERMINAL = 1 AND ACT.ID = @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar(), 0);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetActivityClosedInstant(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand("SELECT CLOSED FROM OSSYS_BPM_ACTIVITY WHERE ID = @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            return DataReaderUtils.SafeGet<DateTime>(cmd.ExecuteScalar(), BuiltInFunction.NullDate());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetActivityCloseCount(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand(
                "SELECT COUNT(*) " +
                "FROM OSSYS_BPM_ACTIVITY CURACTIVITY " +
                "INNER JOIN OSSYS_BPM_ACTIVITY SISTERACTIVITIES ON SISTERACTIVITIES.PROCESS_ID = CURACTIVITY.PROCESS_ID " +
                "WHERE CURACTIVITY.ID = @ACTIVITYID AND SISTERACTIVITIES.STATUS_ID = @CLOSEDSTATUS " +
                "AND SISTERACTIVITIES.ACTIVITY_DEF_ID = CURACTIVITY.ACTIVITY_DEF_ID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            cmd.CreateParameter("@CLOSEDSTATUS", DbType.Int32, ActivityStatus.Closed);
            return Convert.ToInt32(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool GetActivityIsExpired(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand("SELECT EXPIRED FROM OSSYS_BPM_ACTIVITY WHERE ID = @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            return DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool GetActivityIsSkipped(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand("SELECT SKIPPED FROM OSSYS_BPM_ACTIVITY WHERE ID = @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            return DataReaderUtils.SafeGet<bool>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public DateTime GetActivityNextRun(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand("SELECT NEXT_RUN FROM OSSYS_BPM_ACTIVITY WHERE ID = @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            return DataReaderUtils.SafeGet<DateTime>(cmd.ExecuteScalar(), BuiltInFunction.NullDate());
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool HasParentProcess(Transaction tran, int processId, out int parentProcessId, out int parentActivityId, out string espaceKey, out string key) {
            Command cmd = tran.CreateCommand(
                "SELECT E.SS_KEY AS ESPACEKEY, P.PARENT_PROCESS_ID, P.PARENT_ACTIVITY_ID, AD.SS_KEY " +
                "FROM OSSYS_BPM_PROCESS P " +
                "INNER JOIN OSSYS_BPM_ACTIVITY A ON P.PARENT_ACTIVITY_ID = A.ID " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION AD ON A.ACTIVITY_DEF_ID = AD.ID " +
                "INNER JOIN OSSYS_BPM_PROCESS_DEFINITION PD ON AD.PROCESS_DEF_ID = PD.ID " +
                "INNER JOIN OSSYS_ESPACE E ON PD.ESPACE_ID = E.ID " +
                "WHERE P.ID = @PROCESSID");

            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);

            key = "";
            parentProcessId = BuiltInFunction.NullIdentifier();
            parentActivityId = BuiltInFunction.NullIdentifier();
            espaceKey = "";
            using (var reader = cmd.ExecuteReader()) {
                if (reader.Read()) {
                    key = reader.SafeGet<string>("SS_KEY");
                    espaceKey = reader.SafeGet<string>("ESPACEKEY");
                    parentActivityId = reader.SafeGet<int>("PARENT_ACTIVITY_ID");
                    parentProcessId = reader.SafeGet<int>("PARENT_PROCESS_ID");
                }
            }
            return parentActivityId != BuiltInFunction.NullIdentifier();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - activityId")]
        public int GetParentProcessId(Transaction tran, int activityId, out int tenantId) {
            tenantId = BuiltInFunction.NullIdentifier();
            Command cmd = tran.CreateCommand("SELECT PROCESS_ID, TENANT_ID FROM OSSYS_BPM_ACTIVITY WHERE ID = @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            using (var reader = cmd.ExecuteReader()) {
                int id = BuiltInFunction.NullIdentifier();
                if (reader.Read()) {
                    tenantId = reader.SafeGet<int>("TENANT_ID");
                    id = reader.SafeGet<int>("PROCESS_ID");
                }
                if (id == BuiltInFunction.NullIdentifier()) {
                    throw new DataBaseException("Could not find the parent process for the ACTIVITY_ID = " + activityId);
                }
                return id;
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetActivityDataForWS(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand(
                "SELECT E.NAME AS ESPACE_NAME, E.SS_KEY AS ESPACE_KEY, AD.SS_KEY, ACT.TENANT_ID AS TENANT_ID, ACT.PROCESS_ID, AK.ID AS ACTIVITYKIND, AD.NAME AS ACTIVITYNAME, PD.NAME AS PROCESSNAME " +
                "FROM OSSYS_BPM_ACTIVITY ACT " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION AD ON AD.ID = ACT.ACTIVITY_DEF_ID " +
                "INNER JOIN OSSYS_BPM_PROCESS_DEFINITION PD ON PD.ID = AD.PROCESS_DEF_ID " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_KIND AK ON AD.KIND = AK.ID " +
                "INNER JOIN OSSYS_ESPACE E ON PD.ESPACE_ID = E.ID AND E.IS_ACTIVE = 1 " +
                "INNER JOIN OSSYS_TENANT T ON ACT.TENANT_ID = T.ID AND T.IS_ACTIVE = 1 " +
                "WHERE ACT.ID =  @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetProcessDataForWS(Transaction tran, int processId) {
            Command cmd = tran.CreateCommand(
                "SELECT E.NAME AS ESPACE_NAME, E.SS_KEY AS ESPACE_KEY, PD.SS_KEY, P.TENANT_ID AS TENANT_ID " +
                "FROM OSSYS_BPM_PROCESS P " +
                "INNER JOIN OSSYS_BPM_PROCESS_DEFINITION PD ON PD.ID = P.PROCESS_DEF_ID " +
                "INNER JOIN OSSYS_ESPACE E ON PD.ESPACE_ID = E.ID AND E.IS_ACTIVE = 1 " +
                "INNER JOIN OSSYS_TENANT T ON P.TENANT_ID = T.ID AND T.IS_ACTIVE = 1 " +
                "WHERE P.ID =  @PROCESSID");
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetProcessDataForWS(Transaction tran, ObjectKey processSSKey, ObjectKey espaceSSKey) {
            Command cmd = tran.CreateCommand(
                "SELECT E.NAME AS ESPACE_NAME " +
                "FROM OSSYS_BPM_PROCESS_DEFINITION PD " +
                "INNER JOIN OSSYS_ESPACE E ON PD.ESPACE_ID = E.ID AND E.IS_ACTIVE = 1 " +
                "WHERE PD.SS_KEY =  @PROCESSSSKEY AND E.SS_KEY = @ESPACESSKEY");
            cmd.CreateParameter("@PROCESSSSKEY", DbType.String, processSSKey);
            cmd.CreateParameter("@ESPACESSKEY", DbType.String, espaceSSKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - activityId")]
        public bool NeedsActivityPermissions(Transaction tran, int activityId, out int assignedUser, out ActivityStatus statusId) {
            Command cmd = tran.CreateCommand(
                "SELECT AD.REQUIRES_PERMISSION, ACT.USER_ID, ACT.STATUS_ID " +
                "FROM OSSYS_BPM_ACTIVITY ACT " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION AD ON AD.ID = ACT.ACTIVITY_DEF_ID " +
                "WHERE ACT.ID =  @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            using (var reader = cmd.ExecuteReader()) {
                if (reader.Read()) {
                    assignedUser = reader.SafeGet<int>("USER_ID");
                    statusId = (ActivityStatus)reader.SafeGet<int>("STATUS_ID");
                    return reader.SafeGet<bool>("REQUIRES_PERMISSION");
                } else {
                    throw new DataBaseException("The Activity #" + activityId + " could not be found.");
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IEnumerable<Pair<ObjectKey, int>> GetActivityRoles(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand(
                "SELECT P.SS_KEY, P.ESPACE_ID " +
                "FROM OSSYS_BPM_ACTIVITY ACT " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEF_ROLE ADR ON ADR.ACTIVITY_DEF_ID = ACT.ACTIVITY_DEF_ID " +
                "INNER JOIN OSSYS_ROLE P ON P.ID = ADR.ROLE_ID " +
                "WHERE ACT.ID =  @ACTIVITYID AND P.IS_ACTIVE = 1");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            List<Pair<ObjectKey, int>> roles = new List<Pair<ObjectKey, int>>();
            using (var reader = cmd.ExecuteReader()) {
                while (reader.Read()) {
                    roles.Add(Pair.Create(ObjectKey.Parse(reader.SafeGet<string>("SS_KEY")), reader.SafeGet<int>("ESPACE_ID")));
                }
                return roles;
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UpdateHumanActivityParams(Transaction tran, int activityId, DateTime? activationInstant, string inboxDetail) {
            UpdateHumanActivityParams(tran, activityId, null, null, null, activationInstant, inboxDetail);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UpdateHumanActivityParams(Transaction tran, int activityId, int? userId, int? groupId, DateTime? dueDate, DateTime? activationInstant, string inboxDetail) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_BPM_ACTIVITY SET " +
                (userId != null ? "USER_ID = @USERID, " : "") +
                (groupId != null ? "GROUP_ID = @GROUPID, " : "") +
                (dueDate != null ? "DUE_DATE = @DUEDATE, " : "") +
                (activationInstant != null ? "NEXT_RUN = @NEXTRUN, " : "") +
                (inboxDetail != null ? "INBOX_DETAIL = @INBOXDETAIL, " : "") +
                "LAST_MODIFIED = GETDATE() " +
                "WHERE ID = @ACTIVITYID");
            if (userId != null) {
                if (userId == 0) {
                    cmd.CreateParameter("@USERID", DBNull.Value);
                } else {
                    cmd.CreateParameter("@USERID", DbType.Int32, userId);
                }
            }
            if (groupId != null) {
                if (groupId == 0) {
                    cmd.CreateParameter("@GROUPID", DBNull.Value);
                } else {
                    cmd.CreateParameter("@GROUPID", DbType.Int32, groupId);
                }
            }
            if (dueDate != null) {
                cmd.CreateParameter("@DUEDATE", DbType.DateTime, dueDate);
            }
            if (activationInstant != null) {
                if (activationInstant.Value == BuiltInFunction.NullDate()) {
                    cmd.CreateParameter("@NEXTRUN", DBNull.Value);
                } else {
                    cmd.CreateParameter("@NEXTRUN", DbType.DateTime, activationInstant.Value);
                }
            }
            if (inboxDetail != null) {
                cmd.CreateParameter("@INBOXDETAIL", DbType.String, inboxDetail.Left(100));
            }
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Throws exception when id is not found")]
        public void UpdateActivityNextRun(Transaction tran, int id) {
            Command cmd = tran.CreateCommand("UPDATE OSSYS_BPM_ACTIVITY SET NEXT_RUN=GETDATE(), LAST_MODIFIED = GETDATE() WHERE ID=@ID");

            cmd.CreateParameter("@ID", DbType.Int32, id);

            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to update activity. No rows affected");
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UpdateActivityNextRun(Transaction tran, int activityId, DateTime nextRun) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_BPM_ACTIVITY SET NEXT_RUN = @NEXTRUN, LAST_MODIFIED = GETDATE() WHERE ID = @ACTIVITYID");

            if (nextRun == BuiltInFunction.NullDate()) {
                cmd.CreateParameter("@NEXTRUN", DBNull.Value);
            } else {
                cmd.CreateParameter("@NEXTRUN", DbType.DateTime, nextRun);
            }
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UpdateWaitActivityExpired(Transaction tran, int activityId, bool expired) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_BPM_ACTIVITY SET EXPIRED = @EXPIRED, LAST_MODIFIED = GETDATE() WHERE ID = @ACTIVITYID");

            cmd.CreateParameter("@EXPIRED", DbType.Boolean, expired);
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UpdateActivitySkipped(Transaction tran, int activityId, bool skipped) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_BPM_ACTIVITY SET SKIPPED = @SKIPPED, LAST_MODIFIED = GETDATE() WHERE ID = @ACTIVITYID");

            cmd.CreateParameter("@SKIPPED", DbType.Boolean, skipped);
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UpdateHumanActivityUser(Transaction tran, int activityId, int userId) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_BPM_ACTIVITY SET USER_ID = @USERID, LAST_MODIFIED = GETDATE() WHERE ID = @ACTIVITYID");
            if (userId == 0) {
                cmd.CreateParameter("@USERID", DBNull.Value);
            } else {
                cmd.CreateParameter("@USERID", DbType.Int32, userId);
            }
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UpdateProcessInboxDetail(Transaction tran, int processId, string inboxDetail) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_BPM_PROCESS SET LABEL = @INBOXDETAIL WHERE ID = @PROCESSID");
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.CreateParameter("@INBOXDETAIL", DbType.String, (inboxDetail ?? string.Empty).Left(100));
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetProcessLabel(Transaction tran, int id) {
            Command cmd = tran.CreateCommand("SELECT LABEL FROM OSSYS_BPM_PROCESS WHERE ID = @ID");
            cmd.CreateParameter("@ID", DbType.Int32, id);

            return DataReaderUtils.SafeGet<string>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public ActivityStatus GetActivityStatus(Transaction tran, int activityId) {
            Command cmd = tran.CreateCommand("SELECT STATUS_ID FROM OSSYS_BPM_ACTIVITY WHERE ID = @ACTIVITYID");
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            return (ActivityStatus)DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public ProcessStatus GetProcessStatus(Transaction tran, int processId) {
            Command cmd = tran.CreateCommand("SELECT STATUS_ID FROM OSSYS_BPM_PROCESS WHERE ID = @PROCESSID");
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);

            return (ProcessStatus)DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void SetProcessStatus(Transaction tran, int tenantId, int processId, ProcessStatus status, int userId) {
            Command cmd = tran.CreateCommand(
                "UPDATE OSSYS_BPM_PROCESS " +
                "SET STATUS_ID = @STATUSID, LAST_MODIFIED = @LASTMODIFIED, LAST_MODIFIED_BY = @LASTMODIFIEDBY " +
                "WHERE TENANT_ID = @TENANTID AND ID = @PROCESSID");

            if (status == ProcessStatus.Unknown) {
                cmd.CreateParameter("@STATUSID", DBNull.Value);
            } else {
                cmd.CreateParameter("@STATUSID", DbType.Int32, (int)status);
            }
            cmd.CreateParameter("@LASTMODIFIED", DbType.DateTime, BuiltInFunction.CurrDateTime());
            if (userId == 0) {
                cmd.CreateParameter("@LASTMODIFIEDBY", DBNull.Value);
            } else {
                cmd.CreateParameter("@LASTMODIFIEDBY", DbType.Int32, userId);
            }

            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public int GetTopProcessId(Transaction tran, int processId) {
            Command cmd = tran.CreateCommand("SELECT TOP_PROCESS_ID FROM OSSYS_BPM_PROCESS WHERE ID = @PROCESSID");
            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);

            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool CheckProcessExists(Transaction tran, int ProcessId) {
            Command cmd = tran.CreateCommand("SELECT 1 FROM OSSYS_BPM_PROCESS WHERE ID = @PROCESSID");
            cmd.CreateParameter("@PROCESSID", DbType.Int32, ProcessId);
            return Convert.ToBoolean(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Throws exception when timerId is not found")]
        public void ClearJobRunningBy(Transaction tran, int timerId) {
            Command cmd = tran.CreateCommand("UPDATE OSSYS_BPM_ACTIVITY SET IS_RUNNING_SINCE=NULL , IS_RUNNING_AT = @ISRUNNINGBY WHERE ID=@TIMERID");
            cmd.CreateParameter("@TIMERID", DbType.Int32, timerId);
            cmd.CreateParameter("@ISRUNNINGBY", DbType.String, "");
            if (cmd.ExecuteNonQuery() == 0) {
                throw new DataBaseException("Unable to update timer. No rows affected");
            }
        }
                
        [MethodImpl(MethodImplOptions.NoInlining)]
        protected virtual string GetCreateActivityNextRunSql(IDMLService dmlService) {
            return "GETDATE()";
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - processId")]
        public int CreateActivity(Transaction tran, int tenantId, int activityDefId, int processId, string name, int userId, int precedentActivityId, string precedentOutcome, DateTime? dueDate, string inboxDetail) {
            //Set next run a bit in the future so with read uncommited the schedulers dont pick it right away and give us time to finish and commit the transactions
            IDMLService dml = tran.DatabaseServices.DMLService;
            string nextRunSnippet = GetCreateActivityNextRunSql(dml);
            string userIdColumn = dml.Identifiers.EscapeIdentifier("USER_ID");
            string sql =
                "INSERT INTO OSSYS_BPM_ACTIVITY (TENANT_ID, ACTIVITY_DEF_ID, PROCESS_ID, NAME, " + userIdColumn +
                ", CREATED, OPENED, CLOSED, " +
                "STATUS_ID, IS_RUNNING_SINCE, IS_RUNNING_AT, NEXT_RUN, PRECEDENT_ACTIVITY_ID, PRECEDENT_OUTCOME" +
                (dueDate != null ? ", DUE_DATE" : "") +
                (inboxDetail != null ? ", INBOX_DETAIL" : "") + ") " +
                "VALUES (@TENANT_ID, @SSACTIVITY_DEF_ID, @SSPROCESS_ID, @SSNAME, @SSUSER_ID, GETDATE(), @SSOPENED, @SSCLOSED, " +
                "@SSSTATUS_ID, @SSIS_RUNNING_SINCE, @SSIS_RUNNING_AT, " + nextRunSnippet +
                ", @SSPRECEDENT_ACTIVITY_ID, @SSPRECEDENT_OUTCOME" +
                (dueDate != null ? ", @SSDUE_DATE" : "") +
                (inboxDetail != null ? ", @SSINBOX_DETAIL" : "") + ")";
            Command sqlCmd = tran.CreateCommand(GetNoCountSQL(sql, true));
            sqlCmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
            sqlCmd.CreateParameter("@SSACTIVITY_DEF_ID", DbType.Int32, activityDefId);
            sqlCmd.CreateParameter("@SSPROCESS_ID", DbType.Int32, processId);
            sqlCmd.CreateParameter("@SSNAME", DbType.AnsiString, name);
            if (userId == 0) {
                sqlCmd.CreateParameter("@SSUSER_ID", DBNull.Value);
            } else {
                sqlCmd.CreateParameter("@SSUSER_ID", DbType.Int32, userId);
            }
            sqlCmd.CreateParameter("@SSOPENED", DbType.DateTime, BuiltInFunction.NullDate());
            sqlCmd.CreateParameter("@SSCLOSED", DbType.DateTime, BuiltInFunction.NullDate());
            sqlCmd.CreateParameter("@SSSTATUS_ID", DbType.Int32, ActivityStatus.Created);
            sqlCmd.CreateParameter("@SSIS_RUNNING_SINCE", DBNull.Value);
            sqlCmd.CreateParameter("@SSIS_RUNNING_AT", DbType.AnsiString, string.Empty);
            if (precedentActivityId == 0) {
                sqlCmd.CreateParameter("@SSPRECEDENT_ACTIVITY_ID", DBNull.Value);
            } else {
                sqlCmd.CreateParameter("@SSPRECEDENT_ACTIVITY_ID", DbType.Int32, precedentActivityId);
            }
            sqlCmd.CreateParameter("@SSPRECEDENT_OUTCOME", DbType.AnsiString, precedentOutcome);

            if (dueDate != null) {
                sqlCmd.CreateParameter("@SSDUE_DATE", DbType.DateTime, dueDate.Value);
            }
            if (inboxDetail != null) {
                sqlCmd.CreateParameter("@SSINBOX_DETAIL", DbType.AnsiString, inboxDetail);
            }
            return ExecuteNonQueryGetIdentity(sqlCmd, "ID");
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void UpdateActivity(Transaction tran, int? tenantId, int activityId, int? activityDefId, int? processId, string name, int? userId,
            bool? setCreatedNow, bool? setOpenedNow, bool? setClosedNow,
            ActivityStatus? status, bool? setIsRunningSinceNow, string isRunningAt, bool? hasError, string errorId, bool? setNextRunNow, DateTime? explicitNextRun,
            int? precedentActivityId, string precedentOutcome, DateTime? dueDate, string inboxDetail, string inboxInstructions) {

            IDMLIdentifiers identifiers = tran.DatabaseServices.DMLService.Identifiers;
            string userIdColumn = identifiers.EscapeIdentifier("USER_ID");
            string errorCountColumn = identifiers.EscapeIdentifier("ERROR_COUNT");
            string idColumn = identifiers.EscapeIdentifier("ID");

            string sql =
                "UPDATE OSSYS_BPM_ACTIVITY " +
                "SET " +
                ((activityDefId.HasValue ? ", ACTIVITY_DEF_ID = @SSACTIVITY_DEF_ID" : "") +
                 (processId.HasValue ? ", PROCESS_ID = @SSPROCESS_ID" : "") +
                 (name != null ? ", NAME = @SSNAME" : "") +
                 (userId.HasValue ? ", " + userIdColumn + " = @SSUSER_ID" : "") +
                 (setCreatedNow.HasValue ? ", CREATED = GETDATE()" : "") +
                 (setOpenedNow.HasValue ? (setOpenedNow.Value ? ", OPENED = GETDATE()" : ", OPENED = @SSNULLDATETIME") : "") +
                 (setClosedNow.HasValue && setClosedNow.Value ? ", CLOSED = GETDATE()" : "") +
                 (status.HasValue ? ", STATUS_ID = @SSSTATUS_ID" : "") +
                 (setIsRunningSinceNow.HasValue
                     ? ", IS_RUNNING_SINCE = " + (setIsRunningSinceNow.Value ? "GETDATE()" : "@SSIS_RUNNING_SINCE")
                     : "") +
                 (isRunningAt != null ? ", IS_RUNNING_AT = @SSIS_RUNNING_AT" : "") +
                 ((hasError.HasValue && hasError.Value)
                     ? (", NEXT_RUN = " + GetNextRunErrorBackoffStatement(tran.DatabaseServices.DMLService.Functions, errorCountColumn, "@BACKOFF", "@RETRYBASESEC"))
                     : (setNextRunNow.HasValue ? ", NEXT_RUN = " + (setNextRunNow.Value ? "GETDATE()" : "@SSNEXT_RUN") : "")) +
                 ((hasError.HasValue && hasError.Value) ? ", " + errorCountColumn + " = " + errorCountColumn + " + 1" : "") +
                 (hasError.HasValue ? (hasError.Value ? ", LAST_ERROR_ID = @SSERRORID" : ", LAST_ERROR_ID = '' ") : "") +
                 (precedentActivityId.HasValue ? ", PRECEDENT_ACTIVITY_ID = @SSPRECEDENT_ACTIVITY_ID" : "") +
                 (precedentOutcome != null ? ", PRECEDENT_OUTCOME = @SSPRECEDENT_OUTCOME" : "") +
                 (dueDate.HasValue ? ", DUE_DATE = @SSDUE_DATE" : "") +
                 (inboxDetail != null ? ", INBOX_DETAIL = @SSINBOX_DETAIL" : "") +
                 ", LAST_MODIFIED = GETDATE() " +
                 " WHERE " + idColumn + " = @SSACTIVITY_ID " +
                 (tenantId.HasValue ? "AND TENANT_ID = @TENANT_ID" : "")).TrimStart(',');

            Command sqlCmd = tran.CreateCommand(GetNoCountSQL(sql, false));
            if (tenantId.HasValue) {
                sqlCmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
            }
            if (activityDefId.HasValue) {
                sqlCmd.CreateParameter("@SSACTIVITY_DEF_ID", DbType.Int32, activityDefId.Value);
            }
            if (processId.HasValue) {
                sqlCmd.CreateParameter("@SSPROCESS_ID", DbType.Int32, processId.Value);
            }

            if (hasError.HasValue && hasError.Value) {
                sqlCmd.CreateParameter("@BACKOFF", DbType.Decimal, RuntimePlatformSettings.BPT.ProcessBackoffConstant.GetValue());
                sqlCmd.CreateParameter("@RETRYBASESEC", DbType.Int32, RuntimePlatformSettings.BPT.ProcessBackoffRetrybaseSec.GetValue());
            }

            if (name != null) {
                sqlCmd.CreateParameter("@SSNAME", DbType.AnsiString, name);
            }
            if (userId.HasValue) {
                if (userId == 0) {
                    sqlCmd.CreateParameter("@SSUSER_ID", DBNull.Value);
                } else {
                    sqlCmd.CreateParameter("@SSUSER_ID", DbType.Int32, userId.Value);
                }
            }
            if (hasError.HasValue && hasError.Value) {
                sqlCmd.CreateParameter("@SSERRORID", DbType.AnsiString, errorId);
            }
            if (setOpenedNow.HasValue && !setOpenedNow.Value) {
                sqlCmd.CreateParameter("@SSNULLDATETIME", DbType.DateTime, Constants.DefaultDateTime);
            }
            if (status.HasValue) {
                sqlCmd.CreateParameter("@SSSTATUS_ID", DbType.Int32, (int)(status.Value));
            }
            if (setIsRunningSinceNow.HasValue && setIsRunningSinceNow == false) {
                sqlCmd.CreateParameter("@SSIS_RUNNING_SINCE", DBNull.Value);
            }
            if (isRunningAt != null) {
                sqlCmd.CreateParameter("@SSIS_RUNNING_AT", DbType.AnsiString, isRunningAt);
            }
            if (setNextRunNow.HasValue && setNextRunNow.Value == false) {
                if (hasError != null && hasError.Value) {
                    throw new ArgumentException("Setting the NextRun of an activity is not allowed when also setting the HasError.");
                }

                if (explicitNextRun.HasValue && explicitNextRun.Value != BuiltInFunction.NullDate()) {
                    sqlCmd.CreateParameter("@SSNEXT_RUN", DbType.DateTime, explicitNextRun.Value);
                } else {
                    sqlCmd.CreateParameter("@SSNEXT_RUN", DBNull.Value);
                }
            }
            if (precedentActivityId.HasValue) {
                if (precedentActivityId == 0) {
                    sqlCmd.CreateParameter("@SSPRECEDENT_ACTIVITY_ID", DBNull.Value);
                } else {
                    sqlCmd.CreateParameter("@SSPRECEDENT_ACTIVITY_ID", DbType.Int32, precedentActivityId.Value);
                }
            }
            if (precedentOutcome != null) {
                sqlCmd.CreateParameter("@SSPRECEDENT_OUTCOME", DbType.AnsiString, precedentOutcome);
            }
            if (dueDate.HasValue) {
                sqlCmd.CreateParameter("@SSDUE_DATE", DbType.DateTime, dueDate.Value);
            }
            if (inboxDetail != null) {
                sqlCmd.CreateParameter("@SSINBOX_DETAIL", DbType.AnsiString, inboxDetail);
            }
            sqlCmd.CreateParameter("@SSACTIVITY_ID", DbType.Int32, activityId);

            sqlCmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1", "1", "1", TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "Active" })]
        public int CreateProcess(Transaction tran, int tenantId, int createdBy, int processDefId, int parentProcessId, int parentActivityId, int topProcessId, ProcessStatus status) {
            string sql =
                "INSERT INTO OSSYS_BPM_PROCESS (TENANT_ID, CREATED, CREATED_BY, PROCESS_DEF_ID, PARENT_PROCESS_ID, " +
                "PARENT_ACTIVITY_ID, TOP_PROCESS_ID, STATUS_ID, LAST_MODIFIED, LAST_MODIFIED_BY) " +
                "VALUES (@TENANT_ID, GETDATE(), @SSCREATED_BY, @SSPROCESS_DEF_ID, @SSPARENT_PROCESS_ID, " +
                "@SSPARENT_ACTIVITY_ID, @SSTOP_PROCESS_ID, @SSSTATUS_ID, @SSLAST_MODIFIED, @SSLAST_MODIFIED_BY)";

            Command sqlCmd = tran.CreateCommand(GetNoCountSQL(sql, true));
            sqlCmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantId);
            if (createdBy == 0) {
                sqlCmd.CreateParameter("@SSCREATED_BY", DBNull.Value);
                sqlCmd.CreateParameter("@SSLAST_MODIFIED_BY", DBNull.Value);
            } else {
                sqlCmd.CreateParameter("@SSCREATED_BY", DbType.Int32, createdBy);
                sqlCmd.CreateParameter("@SSLAST_MODIFIED_BY", DbType.Int32, createdBy);
            }
            sqlCmd.CreateParameter("@SSPROCESS_DEF_ID", DbType.Int32, processDefId);
            if (parentProcessId == 0) {
                sqlCmd.CreateParameter("@SSPARENT_PROCESS_ID", DBNull.Value);
            } else {
                sqlCmd.CreateParameter("@SSPARENT_PROCESS_ID", DbType.Int32, parentProcessId);
            }
            if (parentActivityId == 0) {
                sqlCmd.CreateParameter("@SSPARENT_ACTIVITY_ID", DBNull.Value);
            } else {
                sqlCmd.CreateParameter("@SSPARENT_ACTIVITY_ID", DbType.Int32, parentActivityId);
            }
            if (topProcessId == 0) {
                sqlCmd.CreateParameter("@SSTOP_PROCESS_ID", DBNull.Value);
            } else {
                sqlCmd.CreateParameter("@SSTOP_PROCESS_ID", DbType.Int32, topProcessId);
            }
            sqlCmd.CreateParameter("@SSSTATUS_ID", DbType.Int32, (int)status);
            sqlCmd.CreateParameter("@SSLAST_MODIFIED", DbType.DateTime, BuiltInFunction.CurrDateTime());

            int processId = ExecuteNonQueryGetIdentity(sqlCmd, "Id");

            //if this is the top process, then set it's own id there
            if (topProcessId == 0) {
                Command cmd = tran.CreateCommand(GetNoCountSQL(
                    "UPDATE OSSYS_BPM_PROCESS SET TOP_PROCESS_ID = @TOPPROCESSID WHERE TENANT_ID = @TENANTID AND ID = @PROCESSID", false));

                cmd.CreateParameter("@TOPPROCESSID", DbType.Int32, processId);
                cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
                cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
                cmd.ExecuteNonQuery();
            }

            return processId;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal void SwitchProcessTenant(Transaction tran, int processId, int oldTenantId, int newTenantId) {
            Command cmd = tran.CreateCommand(GetNoCountSQL(
                "UPDATE OSSYS_BPM_PROCESS SET TENANT_ID = @NEWTENANTID WHERE ID = @PROCESSID AND TENANT_ID = @OLDTENANTID", false));

            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.CreateParameter("@OLDTENANTID", DbType.Int32, oldTenantId);
            cmd.CreateParameter("@NEWTENANTID", DbType.Int32, newTenantId);
            cmd.ExecuteNonQuery();

            cmd = tran.CreateCommand(GetNoCountSQL(
                "UPDATE OSSYS_BPM_PROCESS_INPUT SET TENANT_ID = @NEWTENANTID WHERE PROCESS_ID = @PROCESSID AND TENANT_ID = @OLDTENANTID", false));

            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.CreateParameter("@OLDTENANTID", DbType.Int32, oldTenantId);
            cmd.CreateParameter("@NEWTENANTID", DbType.Int32, newTenantId);
            cmd.ExecuteNonQuery();

            cmd = tran.CreateCommand(GetNoCountSQL(
                "UPDATE OSSYS_BPM_PROCESS_OUTPUT SET TENANT_ID = @NEWTENANTID WHERE PROCESS_ID = @PROCESSID AND TENANT_ID = @OLDTENANTID", false));

            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.CreateParameter("@OLDTENANTID", DbType.Int32, oldTenantId);
            cmd.CreateParameter("@NEWTENANTID", DbType.Int32, newTenantId);
            cmd.ExecuteNonQuery();

            cmd = tran.CreateCommand(GetNoCountSQL(
                "UPDATE OSSYS_BPM_ACTIVITY SET TENANT_ID = @NEWTENANTID WHERE PROCESS_ID = @PROCESSID AND TENANT_ID = @OLDTENANTID", false));

            cmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            cmd.CreateParameter("@OLDTENANTID", DbType.Int32, oldTenantId);
            cmd.CreateParameter("@NEWTENANTID", DbType.Int32, newTenantId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetActivityDefinition(Transaction tran, ObjectKey activitySSKey, ObjectKey espaceSSKey) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT AD.ID, AD.SS_KEY, AD.NAME, AD.KIND, AD.PROCESS_DEF_ID, AD.INVOKED_PROCESS_DEF_ID, AD.REQUIRES_PERMISSION " +
                "FROM OSSYS_BPM_ACTIVITY_DEFINITION AD " +
                "INNER JOIN OSSYS_BPM_PROCESS_DEFINITION PD ON PD.ID = AD.PROCESS_DEF_ID AND PD.IS_ACTIVE = 1 " +
                "INNER JOIN OSSYS_ESPACE E ON E.ID = PD.ESPACE_ID AND E.IS_ACTIVE = 1 " +
                "WHERE E.SS_KEY = @ESPACESSKEY AND AD.SS_KEY = @ACTIVITYSSKEY AND AD.IS_ACTIVE = 1");
            sqlCmd.CreateParameter("@ACTIVITYSSKEY", DbType.String, activitySSKey);
            sqlCmd.CreateParameter("@ESPACESSKEY", DbType.String, espaceSSKey);

            return sqlCmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetActivityDefinition(Transaction tran, int activityDefId) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT ID, SS_KEY, NAME, KIND, PROCESS_DEF_ID, INVOKED_PROCESS_DEF_ID, REQUIRES_PERMISSION " +
                "FROM OSSYS_BPM_ACTIVITY_DEFINITION " +
                "WHERE ID = @ACTIVITYDEFID AND IS_ACTIVE = 1");
            sqlCmd.CreateParameter("@ACTIVITYDEFID", DbType.Int32, activityDefId);

            return sqlCmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetActivityDefinitionsForKind(Transaction tran, int processId, ActivityKind kind) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT AD.ID, AD.SS_KEY, AD.NAME, AD.KIND, AD.PROCESS_DEF_ID, AD.INVOKED_PROCESS_DEF_ID, AD.REQUIRES_PERMISSION " +
                "FROM OSSYS_BPM_ACTIVITY_DEFINITION AD " +
                "INNER JOIN OSSYS_BPM_PROCESS P ON P.PROCESS_DEF_ID = AD.PROCESS_DEF_ID " +
                "WHERE P.ID = @PROCESSID AND AD.KIND = @KIND AND AD.IS_ACTIVE = 1");
            sqlCmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            sqlCmd.CreateParameter("@KIND", DbType.Int32, (int)kind);

            return sqlCmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "1" })]
        public ActivityKind GetActivityDefinitionKind(Transaction tran, int activityDefId) {
            using (var reader = GetActivityDefinition(tran, activityDefId)) {
                if (reader.Read()) {
                    return (ActivityKind)reader.SafeGet<int>("KIND");
                } else {
                    throw new DataBaseException("No activity definition found for Activity_Def_Id = " + activityDefId);
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "true" },
                          Values2 = new[] { TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, TestSyntaxValues.AUTO, "false" })]
        public IDataReader GetActivity(Transaction tran, int? tenantId, int activityId, bool forUpdate) {
            string tableName = "OSSYS_BPM_ACTIVITY";
            IDictionary<SelectPlaceholder, string> placeholders;
            if (forUpdate) {
                var tableSource = DatabaseAccess.ForRuntimeDatabase.DatabaseServices.ObjectFactory.CreateLocalTableSourceInfo(tableName);
                placeholders = tran.DatabaseServices.DMLService.GetEntityActions(tableSource).SQLPlaceholderValuesForGetForUpdate();
            } else {
                placeholders = new Dictionary<SelectPlaceholder, string>();
            }

            string sql = placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeStatement) +
                         " SELECT " + placeholders.GetPlaceholderValue(SelectPlaceholder.AfterSelectKeyword) +
                         " ACTIVITY_DEF_ID, PROCESS_ID, USER_ID, STATUS_ID, IS_RUNNING_SINCE, IS_RUNNING_AT, " +
                         "NEXT_RUN, PRECEDENT_ACTIVITY_ID, PRECEDENT_OUTCOME, DUE_DATE " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeFromKeyword) + " FROM " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterFromKeyword, true, false) + tableName +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeWhereKeyword, false, true) + " WHERE " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterWhereKeyword) +
                         ((tenantId != null) ? " TENANT_ID = @TENANTID AND" : "") + " ID = @ACTIVITYID " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterStatement);

            Command sqlCmd = tran.CreateCommand(sql);
            if (tenantId.HasValue) sqlCmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            sqlCmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);

            return sqlCmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public bool HasActiveActivityInProcess(Transaction tran, int tenantId, ObjectKey activitySSKey, int processId) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT COUNT(1) " +
                "FROM OSSYS_BPM_ACTIVITY ACT " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION AD ON AD.ID = ACT.ACTIVITY_DEF_ID " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_STATUS S ON S.ID = ACT.STATUS_ID AND S.IS_TERMINAL = 0 " +
                "WHERE ACT.TENANT_ID = @TENANTID AND AD.SS_KEY = @ACTIVITYSSKEY AND ACT.PROCESS_ID = @PROCESSID");
            sqlCmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            sqlCmd.CreateParameter("@ACTIVITYSSKEY", DbType.String, activitySSKey);
            sqlCmd.CreateParameter("@PROCESSID", DbType.Int32, processId);

            return Convert.ToInt32(sqlCmd.ExecuteScalar()) > 0;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetProcessDefinition(Transaction tran, ObjectKey processSSKey, ObjectKey espaceSSKey) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT PD.ID, PD.NAME, PD.ESPACE_ID, PD.IS_LOCKED " +
                "FROM OSSYS_BPM_PROCESS_DEFINITION PD " +
                "INNER JOIN OSSYS_ESPACE E ON E.ID = PD.ESPACE_ID AND E.IS_ACTIVE = 1 " +
                "WHERE E.SS_KEY = @ESPACESSKEY AND PD.SS_KEY = @PROCESSSSKEY AND PD.IS_ACTIVE = 1");
            sqlCmd.CreateParameter("@PROCESSSSKEY", DbType.String, processSSKey);
            sqlCmd.CreateParameter("@ESPACESSKEY", DbType.String, espaceSSKey);

            return sqlCmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetProcessForUpdate(Transaction tran, int tenantId, int processId) {
            string tableName = "OSSYS_BPM_PROCESS";
            var tableSource = DatabaseAccess.ForRuntimeDatabase.DatabaseServices.ObjectFactory.CreateLocalTableSourceInfo(tableName);
            IDictionary<SelectPlaceholder, string> placeholders = tran.DatabaseServices.DMLService.GetEntityActions(tableSource).SQLPlaceholderValuesForGetForUpdate();

            string sql = placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeStatement) +
                         " SELECT " + placeholders.GetPlaceholderValue(SelectPlaceholder.AfterSelectKeyword) +
                         " ID, PARENT_ACTIVITY_ID, STATUS_ID " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeFromKeyword) + " FROM " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterFromKeyword, true, false) + tableName +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeWhereKeyword, false, true) + " WHERE " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterWhereKeyword) +
                         " TENANT_ID = @TENANTID AND ID = @PROCESSID " +
                         placeholders.GetPlaceholderValue(SelectPlaceholder.AfterStatement);

            Command sqlCmd = tran.CreateCommand(sql);
            sqlCmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            sqlCmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            return sqlCmd.ExecuteReader();
        }

        public int CountBlockingNonTerminatedActivities(Transaction tran, int tenantId, int processId) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT COUNT(*) " +
                "FROM OSSYS_BPM_ACTIVITY ACTIVITY " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_STATUS STATUS ON STATUS.ID = ACTIVITY.STATUS_ID AND STATUS.IS_TERMINAL = 0 " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION DEFINITION ON DEFINITION.ID = ACTIVITY.ACTIVITY_DEF_ID AND DEFINITION.IS_ACTIVE = 1 " +
                "WHERE TENANT_ID = @TENANTID AND PROCESS_ID = @PROCESSID " +
                "AND DEFINITION.KIND <> " + (int)ActivityKind.ConditionalStart);

            sqlCmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            sqlCmd.CreateParameter("@PROCESSID", DbType.Int32, processId);

            return Convert.ToInt32(sqlCmd.ExecuteScalar());
        }

        public IDataReader GetNonTerminatedActivities(Transaction tran, int tenantId, int processId) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT ACTIVITY.ID, DEFINITION.SS_KEY " +
                "FROM OSSYS_BPM_ACTIVITY ACTIVITY " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION DEFINITION ON DEFINITION.ID = ACTIVITY.ACTIVITY_DEF_ID " +
                "INNER JOIN OSSYS_BPM_ACTIVITY_STATUS STATUS ON STATUS.ID = ACTIVITY.STATUS_ID AND STATUS.IS_TERMINAL = 0 " +
                "WHERE TENANT_ID = @TENANTID AND PROCESS_ID = @PROCESSID");
            sqlCmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            sqlCmd.CreateParameter("@PROCESSID", DbType.Int32, processId);

            return sqlCmd.ExecuteReader();
        }

        public void RemoveSuspendedProcessUpgradeData(Transaction tran, int processId) {
            Command sqlCmd = tran.CreateCommand("DELETE FROM OSSYS_BPM_PROCESS_UPGRADE WHERE PROCESS_ID = @PROCESSID");
            sqlCmd.CreateParameter("@PROCESSID", DbType.Int32, processId);
            sqlCmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetPhysicalTableName(Transaction tran, string entityName, string espaceName) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT EN.PHYSICAL_TABLE_NAME FROM OSSYS_ENTITY EN INNER JOIN OSSYS_ESPACE ES ON EN.ESPACE_ID = ES.ID " +
                "WHERE EN.NAME = @ENTITY AND ES.NAME = @ESPACE AND EN.IS_ACTIVE = 1 AND ES.IS_ACTIVE = 1");
            sqlCmd.CreateParameter("@ENTITY", entityName);
            sqlCmd.CreateParameter("@ESPACE", espaceName);

            return Convert.ToString(sqlCmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public string GetPhysicalTableName(Transaction tran, GlobalObjectKey entityKey, out string catalogName) {
            Command sqlCmd = tran.CreateCommand(
                "SELECT EN.PHYSICAL_TABLE_NAME TABLENAME, CATALOG.NAME CATALOGNAME " +
                "FROM OSSYS_ENTITY EN " +
                "INNER JOIN OSSYS_ESPACE ES ON EN.ESPACE_ID = ES.ID " +
                "INNER JOIN OSSYS_DBCATALOG CATALOG ON ES.DBCATALOG_ID = CATALOG.ID " +
                "WHERE EN.SS_KEY = @ENTITYKEY AND ES.SS_KEY = @ESPACEKEY AND EN.IS_ACTIVE = 1 AND ES.IS_ACTIVE = 1");

            sqlCmd.CreateParameter("@ENTITYKEY", DbType.String, entityKey.Key);
            sqlCmd.CreateParameter("@ESPACEKEY", DbType.String, entityKey.OwnerKey);

            using (IDataReader reader = sqlCmd.ExecuteReader()) {
                if (reader.Read()) {
                    catalogName = reader.SafeGet<string>("CATALOGNAME");
                    return reader.SafeGet<string>("TABLENAME");
                } else {
                    catalogName = null;
                    return null;
                }
            }
        }

        public void DeleteEvent(Transaction trans, int id) {
            DeleteEvent(trans, id, EventQueueTableName);
        }

        public void DeleteLightEvent(Transaction trans, long id) {
            DeleteEvent(trans, id, LightEventQueueTableName);
        }

        private void DeleteEvent(Transaction trans, long id, string tableName) {
            Command cmd = trans.CreateCommand("DELETE FROM " + tableName + " WHERE ID=@ID");
            cmd.CreateParameter("@ID", DbType.Int64, id);
            cmd.ExecuteNonQuery();
        }

        public const string EventQueueTableName = "OSSYS_BPM_EVENT_QUEUE";
        protected const string EventDequeueForFrontendProcedureName = "DEQUEUE_EVENT_FOR_FRONTEND";
        protected const string EventDequeueForApplicationProcedureName = "DEQUEUE_EVENT_FOR_APP";

        public const string LightEventQueueTableName = "OSSYS_BPM_EVENT";
        protected const string LightEventDequeueForFrontendProcedureName = "DEQUEUE_BPM_EVENT_FOR_FRONT";
        protected const string LightEventDequeueForApplicationProcedureName = "DEQUEUE_BPM_EVENT_FOR_APP";

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void RequeueEvent(Transaction trans, int id, bool hasError) {
            RequeueEvent(trans, id, hasError, EventQueueTableName);
        }


        [MethodImpl(MethodImplOptions.NoInlining)]
        public void RequeueLightEvent(Transaction trans, long id, bool hasError) {
            RequeueEvent(trans, id, hasError, LightEventQueueTableName);
        }

        private void RequeueEvent(Transaction trans, long id, bool hasError, string tableName) {
            string errorCountColumns = trans.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("ERROR_COUNT");
            string sql = "UPDATE " + tableName + " SET DEQUEUE_TIME=NULL " +
                         (hasError
                             ? ", NEXT_RUN = " + GetNextRunErrorBackoffStatement(trans.DatabaseServices.DMLService.Functions, errorCountColumns, "@BACKOFF", "@RETRYBASESEC")
                             : "") +
                         (hasError ? ", " + errorCountColumns + " = " + errorCountColumns + " + 1 " : "") +
                         "WHERE ID=@ID";

            Command cmd = trans.CreateCommand(sql);
            cmd.CreateParameter("@ID", DbType.Int64, id);
            if (hasError) {
                cmd.CreateParameter("@BACKOFF", DbType.Decimal, RuntimePlatformSettings.BPT.ProcessBackoffRetrybaseSec.GetValue());
                cmd.CreateParameter("@RETRYBASESEC", DbType.Int32, RuntimePlatformSettings.BPT.ProcessBackoffRetrybaseSec.GetValue());
            }
            cmd.ExecuteNonQuery();
        }

        protected virtual string GetDequeueEventSQL(ObjectKey applicationKey = null) {
            return applicationKey != null ? EventDequeueForApplicationProcedureName : EventDequeueForFrontendProcedureName;
        }

        protected virtual string GetDequeueLightEventSQL(ObjectKey applicationKey = null) {
            return applicationKey != null ? LightEventDequeueForApplicationProcedureName : LightEventDequeueForFrontendProcedureName;
        }

        protected virtual string GetDequeueEventReaderParamName() {
            return null;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader DequeueEventForFrontend(Transaction trans, bool isLightEvent, int batch, int activityId, string frontendName) {
            if (isLightEvent) {
                return DequeueLightEventForFrontend(trans, batch, activityId, frontendName);
            } else {
                return DequeueNormalEventForFrontend(trans, batch, activityId, frontendName);
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader DequeueNormalEventForFrontend(Transaction trans, int batch, int activityId, string frontendName) {
            Command cmd = trans.CreateCommand(GetDequeueEventSQL());

            cmd.CreateParameter("@BATCHSIZE", DbType.Int32, batch);
            cmd.CreateParameter("@NULLDATE", DbType.DateTime, BuiltInFunction.NullDate());
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            cmd.CreateParameter("@FRONTENDNAME", DbType.String, frontendName);

            return cmd.ExecuteStoredProcedureWithResultSet(GetDequeueEventReaderParamName());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader DequeueNormalEventForApplication(Transaction trans, int batch, int activityId, ObjectKey applicationKey) {
            Command cmd = trans.CreateCommand(GetDequeueEventSQL(applicationKey));

            cmd.CreateParameter("@BATCHSIZE", DbType.Int32, batch);
            cmd.CreateParameter("@NULLDATE", DbType.DateTime, BuiltInFunction.NullDate());
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            cmd.CreateParameter("@APPLICATIONKEY", DbType.String, applicationKey);

            return cmd.ExecuteStoredProcedureWithResultSet(GetDequeueEventReaderParamName());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader DequeueLightEventForFrontend(Transaction trans, int batch, int activityId, string frontendName) {
            Command cmd = trans.CreateCommand(GetDequeueLightEventSQL());

            cmd.CreateParameter("@BATCHSIZE", DbType.Int32, batch);
            cmd.CreateParameter("@NULLDATE", DbType.DateTime, BuiltInFunction.NullDate());
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            cmd.CreateParameter("@FRONTENDNAME", DbType.String, frontendName);
            
            return cmd.ExecuteStoredProcedureWithResultSet(GetDequeueEventReaderParamName());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader DequeueLightEventForApplication(Transaction trans, int batch, int activityId, ObjectKey applicationKey) {
            Command cmd = trans.CreateCommand(GetDequeueLightEventSQL(applicationKey));

            cmd.CreateParameter("@BATCHSIZE", DbType.Int32, batch);
            cmd.CreateParameter("@NULLDATE", DbType.DateTime, BuiltInFunction.NullDate());
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId);
            cmd.CreateParameter("@APPLICATIONKEY", DbType.String, applicationKey);

            return cmd.ExecuteStoredProcedureWithResultSet(GetDequeueEventReaderParamName());
        }
    }
}
