/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Threading;
using System.Web;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Log;

namespace OutSystems.HubEdition.RuntimePlatform {
    public class UnhandledExceptionModule : IHttpModule {

        private static object _initLock = new object();

        private static bool _initialized = false;

        public void Init(HttpApplication app) {
            // Do this one time for each AppDomain
            lock (_initLock) {
                if (!_initialized) {
                    AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(OnUnhandledException);
                    _initialized = true;
                }
            }
        }

        public void Dispose() {
        }

        private static void OnUnhandledException(object sender, UnhandledExceptionEventArgs e) {
            string message = string.Empty;
            try {
                if (null != e) {
                    Exception exception = e.ExceptionObject as Exception;
                    if (null != exception) {
                        if (null != exception.InnerException) {
                            exception = exception.InnerException;
                        }
                        message += "type=[" + exception.GetType().FullName + "] message=[" + exception.Message + "] stack=[" + exception.StackTrace + "]";
                    } else {
                        message += e.ToString();
                    }
                }
            } catch {
            }
            OutSystems.RuntimeCommon.Log.EventLogger.WriteError("An unhandled exception was thrown." + Environment.NewLine + message);
        }
    }
}