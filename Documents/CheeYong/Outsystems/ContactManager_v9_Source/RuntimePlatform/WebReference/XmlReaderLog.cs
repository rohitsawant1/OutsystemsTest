/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Text;
using System.Xml;


namespace OutSystems.HubEdition.RuntimePlatform.WebReference {
    public class XmlReaderLog : XmlReader {
        XmlReader _me;
        StringBuilder builder = new StringBuilder();

        public XmlReaderLog(XmlReader parent) {
            _me = parent;
        }
        
        public string Xml {
            get {
                return builder.ToString();
            }
        }

        public override bool CanReadBinaryContent {
            get {
                return _me.CanReadBinaryContent;
            }
        }

        public override string ReadContentAsString() {
            return _me.ReadContentAsString();
        }

        public override int ReadElementContentAsBase64(byte[] buffer, int index, int count) {
            var res = _me.ReadElementContentAsBase64(buffer, index, count);

            if (_me.NodeType == XmlNodeType.EndElement) {
                builder.Append("BINARY DATA");
                RetrieveEndElement(builder);
            }

            if (_me.NodeType == XmlNodeType.Element) {
                RetrieveStartElement(builder);
            }

            return res;
        }

        public override int ReadContentAsBase64(byte[] buffer, int index, int count) {
            return _me.ReadContentAsBase64(buffer, index, count);
        }

        #region Abstract method that must be implemented
        public override XmlNodeType NodeType {
            get {

                return _me.NodeType;
            }
        }

        public override string LocalName {
            get {
                return _me.LocalName;
            }
        }

        public override string NamespaceURI {
            get {
                return _me.NamespaceURI;
            }
        }

        public override string Prefix {
            get {
                return _me.Prefix;
            }
        }

        public override bool HasValue {
            get { return _me.HasValue; }
        }

        public override string Value {
            get { return _me.Value; }
        }

        public override int Depth {
            get { return _me.Depth; }
        }

        public override string BaseURI {
            get { return _me.BaseURI; }
        }

        public override bool IsEmptyElement {
            get { return _me.IsEmptyElement; }
        }

        public override int AttributeCount {
            get { return _me.AttributeCount; }
        }

        public override string GetAttribute(int i) {
            return _me.GetAttribute(i);
        }

        public override string GetAttribute(string name) {
            return _me.GetAttribute(name);
        }

        public override string GetAttribute(string name, string namespaceURI) {
            return _me.GetAttribute(name, namespaceURI);
        }

        public override void MoveToAttribute(int i) {
            _me.MoveToAttribute(i);
        }

        public override bool MoveToAttribute(string name) {
            return _me.MoveToAttribute(name);
        }

        public override bool MoveToAttribute(string name, string ns) {
            return _me.MoveToAttribute(name, ns);
        }

        public override bool MoveToFirstAttribute() {
            return _me.MoveToFirstAttribute();
        }

        public override bool MoveToNextAttribute() {
            return _me.MoveToNextAttribute();
        }

        public override bool MoveToElement() {
            return _me.MoveToElement();
        }

        public override bool ReadAttributeValue() {
            return _me.ReadAttributeValue();
        }

        public override bool Read() {

            bool res = _me.Read();

            StringView(this.builder);

            return res;
        }

        public override bool EOF {
            get { return _me.EOF; }
        }

        public override void Close() {
            _me.Close();
        }

        public override ReadState ReadState {
            get { return _me.ReadState; }
        }

        public override XmlNameTable NameTable {
            get { return _me.NameTable; }
        }

        public override string LookupNamespace(string prefix) {
            return _me.LookupNamespace(prefix);
        }

        public override void ResolveEntity() {
            _me.ResolveEntity();
        }

        #endregion

        protected void RetrieveStartElement(StringBuilder sb) {
            sb.Append("<");
            sb.Append(_me.Name);

            if (_me.HasAttributes) {
                _me.MoveToFirstAttribute();
                do {
                    sb.Append(" ");
                    sb.Append(_me.Name);
                    sb.Append("=\"");
                    sb.Append(_me.Value);
                    sb.Append("\"");

                } while (_me.MoveToNextAttribute());

                //Let's put cursor back to Element to avoid messing up reader state.
                _me.MoveToElement();
            }

            if (_me.IsEmptyElement) {
                sb.Append("/");
            }

            sb.Append(">");
        }

        protected void RetrieveEndElement(StringBuilder sb) {
            sb.Append("</");
            sb.Append(_me.Name);
            sb.Append(">");
        }

        protected void StringView(StringBuilder sb) {

            if (_me.NodeType == XmlNodeType.Element) {

                RetrieveStartElement(sb);
            }

            else if (_me.NodeType == XmlNodeType.EndElement) {
                RetrieveEndElement(sb);
            }

            else if(_me.NodeType == XmlNodeType.Text || _me.NodeType == XmlNodeType.Whitespace) {
                sb.Append(_me.Value.ToString());
            }



            else if(_me.NodeType == XmlNodeType.XmlDeclaration) {
                sb.Append("<?");
                sb.Append(_me.Name);
                sb.Append(" ");
                sb.Append(_me.Value);
                sb.Append("?>");
            }

        }

    }
}