/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Web;
using OutSystems.RuntimeCommon;
using System.Text;

namespace OutSystems.HubEdition.RuntimePlatform.Web
{
	/// <summary>
	/// Summary description for JavaScriptManager.
	/// </summary>
	public class JavaScriptManager {
		public static readonly String ViewStateHiddenFieldName = "__OSVSTATE";
		
		private Hashtable parentEditRecordElements = new Hashtable();
		private Hashtable parentEditRecordValidators = new Hashtable();
        private Hashtable visibleParentEditRecordValidators = new Hashtable();

		/// <summary>
		/// Method to create the script that creates the elements arrays
		/// </summary>
		/// <returns>A string with the script.</returns>
        private string createElementsArraysScript() {
			StringBuilder result = new StringBuilder();

			foreach (string parentEditRecord in parentEditRecordElements.Keys) {
                StringBuilder arrayElements = new StringBuilder();
				int arrayElementCount = 0;

				if (parentEditRecordValidators.ContainsKey(parentEditRecord)) {
					foreach (string id in (ArrayList) parentEditRecordElements[parentEditRecord]) {
						if (arrayElementCount > 0) {
							arrayElements.Append(", ");

							// Add a break line every five elements
							if ((arrayElementCount % 5) == 0) {
								arrayElements.Append(Environment.NewLine);
							}
						}

						arrayElements.Append("\"" + id + "\"");
						arrayElementCount++;
					}
				}

				if (arrayElementCount > 0) {
					result.Append("var " + GetJSElementsToValidateVarName(parentEditRecord) + " = new Array(" + arrayElements.ToString() + ");" + Environment.NewLine);
				}
			}
			
			return result.ToString();
		}


		private static string GetJSElementsToValidateVarName(string editRecordName) {
            return "OsPage_" + editRecordName.Replace(':', '_') + "Elements";
        }

		private static string GetJSElementsToValidateInButton(string buttonId) {
			return "document.getElementById(\"" + buttonId + "\").elementsToValidate";
		}


		/// <summary>
		/// Method to create the script that associates the validators (button and links) to the elements arrays
		/// </summary>
        /// <returns>A string with the script.</returns>
		private string createParentEditRecordValidatorsScript() {
			StringBuilder parentEditRecordScript = new StringBuilder();

            foreach (string parentEditRecord in visibleParentEditRecordValidators.Keys) {
				bool arrayDefined = parentEditRecordElements.ContainsKey(parentEditRecord);

				foreach (string id in (ArrayList) visibleParentEditRecordValidators[parentEditRecord]) {
					
					if (arrayDefined) {
						parentEditRecordScript.Append(GetButtonElementsToValidateJavascript(id, parentEditRecord));
					} else {
					    parentEditRecordScript.Append(GetJSElementsToValidateInButton(id) + " = new Array();");
					}

					parentEditRecordScript.AppendLine();
				}
			}

			return parentEditRecordScript.ToString();
		}

		/// <summary>
		/// Gets the javascript to refresh the button's elementsToValidate array
		/// (This is used in Ajax Refreshes for buttons that have a ParentEditRecord set)
		/// </summary>
		/// <param name="buttonClientId"></param>
		/// <param name="parentEditRecordName"></param>
        /// <returns>A string with the javascript.</returns>
		public static string GetButtonElementsToValidateJavascript(string buttonClientId, string parentEditRecordName) {
			return GetJSElementsToValidateInButton(buttonClientId) + "=(window." + GetJSElementsToValidateVarName(parentEditRecordName) + "||new Array());";
		}


		/// <summary>
		/// Method used to get the Parent Edit Record Validators script, based on the previous calls to
		/// addIdToParentEditRecord and addValidatorToParentEditRecord
		/// </summary>
		public string parentEditRecordValidatorsScript {
			get {
				string elementsArraysScript = createElementsArraysScript();
				string parentEditRecordScript = createParentEditRecordValidatorsScript();
				
				if ((parentEditRecordScript != "") || (elementsArraysScript != "")) {
					return "<script type=\"text/javascript\">\r\n//<![CDATA[\r\n"
						+ elementsArraysScript + "\r\n" + parentEditRecordScript + "\r\n// ]]>\r\n</script>\r\n";
				} else {
					return "";
				}
			}
		}

		public void addIdToParentEditRecord(string id, string parentEditRecord) {
			if (!parentEditRecordElements.ContainsKey(parentEditRecord)) {
				parentEditRecordElements.Add(parentEditRecord, new ArrayList());
			}

			((ArrayList) parentEditRecordElements[parentEditRecord]).Add(id);
		}

		public void addValidatorToParentEditRecord(string id, string parentEditRecord, bool isVisible) {
			if (!parentEditRecordValidators.ContainsKey(parentEditRecord)) {
				parentEditRecordValidators.Add(parentEditRecord, new ArrayList());
			}

			((ArrayList) parentEditRecordValidators[parentEditRecord]).Add(id);

            if (isVisible) {
                if (!visibleParentEditRecordValidators.ContainsKey(parentEditRecord)) {
                    visibleParentEditRecordValidators.Add(parentEditRecord, new ArrayList());
                }
                ((ArrayList)visibleParentEditRecordValidators[parentEditRecord]).Add(id);
            }
		}

		// Static method to return javascript code
		public static string GetClientValidateCode(string controlId) {
			return "OsPage_ClientValidate('" + controlId + "');";
		}

		public static string GetConditionalClientValidateCode(string controlId) {
			return "if (OsPage_ClientValidate('" + controlId + "')) ";
		}

		public static string osAjaxCallScript(string widgetId, string targetEvent, string bucketIds, string ajaxEvent) {
			if (!bucketIds.EndsWith(","))
				bucketIds += ",";
			return "OsAjax(arguments[0] || window.event,'" + widgetId + "','" + targetEvent + "','" + ajaxEvent + "','" + bucketIds + "','');";
		}

		public static string osAjaxCallScript(string widgetId, string targetEvent, string bucketIds, string ajaxEvent, bool delay) {
			if (!bucketIds.EndsWith(","))
				bucketIds += ",";
			return "OsAjaxDelayed(null,'" + widgetId + "','" + targetEvent + "','" + ajaxEvent + "','" + bucketIds + "'," + (delay ? "osOnChangeTimerDelay" : "0") + ");";
		}


		public static string osAjaxCallScript(string widgetId, string targetEvent, string bucketIds) {
			return osAjaxCallScript(widgetId, targetEvent, bucketIds, "");
		}

		public static string osAjaxNotifyWidget(string widgetId, string message) {
			// include "parent." since this script is to be executed within the Iframe.
			return "OsNotifyWidget('" + widgetId + "', '" + BuiltInFunction.EncodeJavascript(message) + "');";
		}

		public static string onSubmitValidationCode {
			get {
				return Environment.NewLine + "if (!OsValidatorOnSubmit()) return false;";
			}
		}

		public static string onSubmitFixCheckboxesCode {
			get {
				return "OsPrepareCheckboxesForSubmit();";
			}
		}

        public static string onSubmitFixUploadCode {
            get {
                return Environment.NewLine + "OsFixUploadBeforeSubmit();";
            }
        }
		
		public static string startupScript {
			get {
                String result = @"
<script type=""text/javascript"">
//<![CDATA[
var OsPage_ValidationActive = false;
OsValidatorOnLoad();

function OsValidatorOnSubmit() {
  if (OsPage_ValidationActive) { return OsValidatorCommonOnSubmit(); }
  return true;
}
// ]]>
</script>
";

                return result.Replace("\r\n", Environment.NewLine);
			}
		}
		
		/// <summary>
		/// Get relative path to be used in the javascript location
		/// </summary>
		/// <returns>Javascript relative path</returns>
		public static string GetRelativeJavaScriptPrefix() {
			string prefix = (string)HttpContext.Current.Items["OSRelativeJSPrefix"];
			if (prefix == null) {
				prefix = "";
			}
			return prefix;
		}

		/// <summary>
		/// Checks request relative path, to be used in the javascript location
		/// </summary>
        /// <param name="applicationPath">base application path </param>
		public static void CheckRelativeJavaScriptPrefix(string applicationPath) {
			HttpRequest request = HttpContext.Current.Request;
			string relativePath = applicationPath;
			
			// if there is no url transformation, we may be able to optimise the JS path...
			if (!AppInfo.GetAppInfo().OsContext.OsISAPIFilter.IsActiveInRequest(request)) {
				try {
					string applicationPathLower = applicationPath.ToLower(); 
					string path = request.Path;
					string pathLower = path.ToLower();

					int index = pathLower.IndexOf(applicationPathLower);

					// if url differs from imagePath, use full/non-relative path, don't optimise
					if (index >= 0) {
						// remove application suffix 
						string suffix = pathLower.Substring(index + applicationPathLower.Length);

						// remove after ? (query parameters)
						index = suffix.IndexOf('?');
						if (index > -1) {
							suffix = suffix.Substring(0, index);
						}

						// if there is a / after image path, then is not in the current folder, don't optimise
						if (suffix.IndexOf('/') <= -1) {
							relativePath = "";
						}
					}
				} catch { }
			}

			// store in current http request context
			HttpContext.Current.Items["OSRelativeJSPrefix"] = relativePath;
			
		}


		/// <summary>
		/// Sets the OnChange timer delay for the inputs in the current page
		/// </summary>
		/// <param name="ms"></param>
		public static void SetOnChangeTimerDelay(int ms) {
			((IPageJavascriptQueue)(AppInfo.GetAppInfo().OsContext.CurrentScreen)).AddQueuedJavascript("osOnChangeTimerDelay = " + ms + ";");
		}
	
	    public static string GetConfirmationMessageOnClickCode(string id, string message) {
            return String.Format("confirm('{0}');", message);
		}
		
		public static string GetControlWithConfirmMessageOnClickCode(string clientId, string previousOnClickCode, string confirmMessage) {
		    string onClickText = (previousOnClickCode == null)? "": previousOnClickCode;

			if (!String.IsNullOrEmpty(confirmMessage) ) {
				onClickText += "var ret = " + JavaScriptManager.GetConfirmationMessageOnClickCode(clientId, confirmMessage);
				onClickText += "if( ret != true ) {return false;}";
			}
			
			return onClickText;
		}
		
		public static string GetButtonOnClickCode(string clientId, string uniqueId, string previousOnClickCode, string confirmMessage, 
		        bool isAjax, bool causesValidation) {
		        
		    string onClickText = GetControlWithConfirmMessageOnClickCode(clientId, previousOnClickCode, confirmMessage);

			if (isAjax) {
				if (causesValidation) {
					onClickText += GetConditionalClientValidateCode(clientId);
				}
				onClickText += osAjaxCallScript(clientId, uniqueId, ViewStateHiddenFieldName) + " return false;";
			} else {
				if (causesValidation) {
					onClickText += GetClientValidateCode(clientId);
				}
			}			
			
			return onClickText;
		}
		
		public static string GetLinkHRefCode(string clientId, bool isAjax, bool causesValidation, string postBackEventReferenceCode, 
		        string postBackClientHyperlinkCode) {
		        
		    String htmlTextAttribute = "";
			bool isJavascript = false;
			
			if (isAjax) {
				isJavascript = true;
			} else {
				if (causesValidation) {
					htmlTextAttribute += GetConditionalClientValidateCode(clientId) + postBackEventReferenceCode;
					isJavascript = true;
				} else {
					htmlTextAttribute += postBackClientHyperlinkCode;
				}
			}
			if ( isJavascript ) {
				if ( htmlTextAttribute != "" )
					htmlTextAttribute = "javascript:{" + htmlTextAttribute + "}";
				else
					htmlTextAttribute = "#";
			}
			
			return htmlTextAttribute;
		}
		
		public static string GetInvalidInputJS(string clientID, string message) {
            return "<script language=\"JavaScript\">outsystems.internal.$(function(){OsValidatorShowInvalidInput('" 
                + BuiltInFunction.EncodeJavascript(clientID) + "', '" + BuiltInFunction.EncodeJavascript(message) + "');});</script>";
        }

        public static string GetBlockJavaScriptInclude(string jsFilename) {
            return String.Format("<script src=\"{0}\" type=\"text/javascript\" charset=\"UTF-8\"></script>", jsFilename);
        }
	}

    public interface IPageJavascriptQueue {
		void AddQueuedJavascript(string script);
	}

}
