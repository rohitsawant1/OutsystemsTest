/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.ObjectKeys;


namespace OutSystems.HubEdition.RuntimePlatform {

    public class SiteProperty {
        public enum SitePropertyType {
            Text,
            Integer,
            LongInteger,
            Decimal,
            Boolean,
            DateTime,
            Date,
            Time,
        }

        public readonly int DefId;
        public readonly string Name;
        public readonly ObjectKey Key;
        public readonly bool IsShared;
        public readonly SitePropertyType RuntimeType;

        private string databaseValue;
        public string DatabaseValue {
            get { return databaseValue; }
        }

        private object value;
        public object Value {
            get { return value; }
        }


        private SitePropertiesCollection owner;
        public void SetOwner(SitePropertiesCollection ownerCollection) {
            if (owner != null) {
                throw new InvalidOperationException("The collection of a SiteProperty can only be set once.");
            }
            owner = ownerCollection;
        }

        /// <summary>
        /// Sets the new Value of the site property and returns the correspondent Database Value string.
        /// </summary>
        /// <param name="newValue">New value for the property</param>
        /// <returns></returns>
        public string ChangeValue(object newValue) {
            databaseValue = RuntimePlatformUtils.ConvertToString(newValue);
            value = newValue;
            if (owner != null) {
                owner.OnModified(this);
            }
            return databaseValue;
        }

        /// <summary>
        /// Site Property constructor used for Integer System properties only
        /// </summary>
        public SiteProperty(string name, int intValue)
            : this(0, name, /*key*/null, /*isShared*/true, intValue.ToString(), intValue, SitePropertyType.Integer)  {
        }

        /// <summary>
        /// Site Property constructor used for Text System properties only
        /// </summary>
        public SiteProperty(string name, string textVal)
            : this(0, name, /*key*/null, /*isShared*/true, textVal, textVal, SitePropertyType.Text)  {
        }
        
        public SiteProperty(int defId, string name, ObjectKey key, bool isShared, string databaseValue, string rttype)
            : this(defId, name, key, isShared, databaseValue, RuntimePlatformUtils.ConvertFromString(databaseValue, rttype), DatabaseTypeToSitePropertyType(rttype)) {
        }

        private SiteProperty(int defId, string name, ObjectKey key, bool isShared, string databaseValue, object value, SitePropertyType runtimeType) {
            DefId = defId;
            Name = name;
            Key = key;
            IsShared = isShared;
            this.databaseValue = databaseValue;
            this.value = value;
            RuntimeType = runtimeType;
        }

        private static SitePropertyType DatabaseTypeToSitePropertyType(string rttype) {
            switch (rttype) {
                case "rtInteger":
                    return SitePropertyType.Integer;
                case "rtLongInteger":
                    return SitePropertyType.LongInteger;
                case "rtDecimal":
                case "rtCurrency":
                    return SitePropertyType.Decimal;
                case "rtBoolean":
                    return SitePropertyType.Boolean;
                case "rtDateTime":
                    return SitePropertyType.DateTime;
                case "rtDate":
                    return SitePropertyType.Date;
                case "rtTime":
                    return SitePropertyType.Time;
                case "rtText":
                case "rtPhoneNumber":
                case "rtEmail":
                default:
                    return SitePropertyType.Text;
            }
        }
    }
}
