/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.NewRuntime {
    public class ApplicationInfo {
        [JsonProperty("manifest")]
        public JRaw Manifest = null;

        [JsonProperty("data")]
        public readonly Data Data;

        [JsonIgnore]
        public string ManifestContent {
            get {
                if (Manifest != null) {
                    return Manifest.Value as string;
                }
                return null;
            }
            set {
                Manifest = value == null ? null : new JRaw(value);
            }
        }

        public ApplicationInfo(string manifestContent, string[] entityModuleNames) {
            this.ManifestContent = manifestContent;
            this.Data = new Data(entityModuleNames);
        }
    }

    public class Data {
        [JsonProperty("hasTracingEnabled")]
        public bool? HasTracingEnabled = null;

        [JsonProperty("applicationDefaultTimeout")]
        public int? ApplicationDefaultTimeout;

        [JsonProperty("entityModuleNames")]
        public readonly string[] EntityModuleNames;

        [JsonProperty("modules")]
        public ModuleDefinitions ModuleDefinitions;

        [Obsolete("Legacy field to keep upgrade compatibility with version 10.0.200.0. Do not remove.")]
        [JsonProperty("moduleDefinitions")]
        public readonly Object LegacyModuleDefinitions = new Object();

        public Data(string[] entityModuleNames) {
            this.EntityModuleNames = entityModuleNames;
            this.ModuleDefinitions = new ModuleDefinitions();
        }
    }

    public class ModuleDefinitions : Dictionary<string, ModuleDefinition> {

    }

    public class ModuleDefinition {
        [JsonProperty("moduleName")]
        public string ModuleName;

        [JsonProperty("homeScreenName")]
        public string HomeScreenName;

        [JsonProperty("splashScreenName")]
        public string SplashScreenName;

        [JsonProperty("screens")]
        public Screens Screens;

        [JsonProperty("staticEntities")]
        public StaticEntities StaticEntities;

        public ModuleDefinition() {
            this.Screens = new Screens();
            this.StaticEntities = new StaticEntities();
        }
    }

    public class ModuleDetails {
        [JsonProperty("staticEntities")]
        public readonly StaticEntities StaticEntities;

        public ModuleDetails(StaticEntities staticEntities) {
            this.StaticEntities = staticEntities;
        }
    }

    public class StaticEntities : Dictionary<string, Records> {
    }

    public class Records : Dictionary<string, string> {
    }

    public class Screens : List<ScreenDetail> {
    }

    public class ScreenDetail {
        [JsonProperty("screenUrl")]
        public readonly string ScreenUrl;

        [JsonProperty("screenKey")]
        public readonly string ScreenKey;

        [JsonProperty("screenName")]
        public readonly string ScreenName;

        [JsonProperty("viewModuleName")]
        public readonly string ViewModuleName;

        [JsonProperty("modelModuleName")]
        public readonly string ModelModuleName;

        [JsonProperty("controllerModuleName")]
        public readonly string ControllerModuleName;

        [JsonProperty("webFlowControllerModuleName")]
        public readonly string WebFlowControllerModuleName;
    }
}
