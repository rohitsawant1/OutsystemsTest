/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using Newtonsoft.Json;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.NewRuntime {
    public class ByteArrayConverter : JsonConverter {
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(byte[]);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
            var value = (string)reader.Value;
            if (value == null) {
                // NullValue.
                return null;
            }

            var content = Convert.FromBase64String(value);
            if (CanConvert(objectType)) {
                var mimeType = RuntimePlatformUtils.GetMIMEType(content, out _);
                if (mimeType.EqualsIgnoreCase("image/jpeg") || mimeType.EqualsIgnoreCase("image/jpg")) {
                    // Fix image orientation.
                    return EXIFUtils.FixEXIF(content);
                }
            }
            return content;
        }

        public override bool CanRead {
            get {
                return true;
            }
        }

        public override bool CanWrite {
            get {
                return false;
            }
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
            throw new NotImplementedException("read only serializer");
        }
    }
}