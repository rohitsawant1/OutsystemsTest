/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.NewRuntime {

    public sealed class CheckPermissionsIndex {
        public const string ANY_USAGE_KEY = "*";
        private static void AnonymousCheck(HeContext context) { }

        public delegate void CheckPermissions(HeContext context);

        private readonly Dictionary<Pair<String, ScreenName>, CheckPermissions> checkPermissionsForScreenName;
        private readonly List<CheckPermissionsIndex> childIndexes;
        private readonly Dictionary<string, HashSet<string>> permissionPropagationPath;

        public CheckPermissionsIndex() {
            checkPermissionsForScreenName = new Dictionary<Pair<String, ScreenName>, CheckPermissions>();
            childIndexes = new List<CheckPermissionsIndex>();
            permissionPropagationPath = new Dictionary<string, HashSet<string>>();
        }

        public void AddPermissionPropagationPath(string key, string[] propagationTargets) {
            permissionPropagationPath[key] = new HashSet<string>(propagationTargets);
        }

        public bool TryGetCheckPermissions(ScreenName parentName, out CheckPermissions checkPermissions) {
            return TryGetCheckPermissions(parentName, ANY_USAGE_KEY, out checkPermissions);
        }
        public bool TryGetCheckPermissions(ScreenName parentName, String usageKey, out CheckPermissions checkPermissions) {
            return checkPermissionsForScreenName.TryGetValue(Pair.Create(usageKey, parentName), out checkPermissions);
        }

        public void AddAnonymousCheckPermission(ScreenName screen, string[] propagationPaths) {
            AddCheckPermissions(screen, CheckPermissionsIndex.AnonymousCheck, propagationPaths);
        }

        public void AddCheckPermissions(ScreenName parent, CheckPermissions checkPermissions) {
            AddCheckPermissions(parent, checkPermissions, permissionPropagationPath.Keys, /*addSelfPropagationSource*/false);
        }

        private void AddCheckPermissions(ScreenName parent, CheckPermissions checkPermissions, IEnumerable<string> propagationPaths) {
            AddCheckPermissions(parent, checkPermissions, propagationPaths, /*addSelfPropagationSource*/false);
        }

        private void AddCheckPermissions(ScreenName parent, CheckPermissions checkPermissions, IEnumerable<string> propagationPaths, bool addSelfPropagationSource) {
            foreach (var propagationKey in propagationPaths) {
                HashSet<string> nextPropagationPaths;

                var permissionKey = Pair.Create(propagationKey, parent);
                if (!checkPermissionsForScreenName.ContainsKey(permissionKey)) { // No permissions still set for this key

                    if (permissionPropagationPath.TryGetValue(propagationKey, out nextPropagationPaths)) {
                        checkPermissionsForScreenName.Add(permissionKey, checkPermissions);

                        AddCheckPermissions(parent, checkPermissions, nextPropagationPaths, /*addSelfPropagationSource*/true);

                        foreach (var childIndex in childIndexes) {
                            childIndex.AddCheckPermissions(parent, checkPermissions, nextPropagationPaths);
                        }
                    } else {
                        if (addSelfPropagationSource) { // add target of self propagations anyway, since they can be the target server actions
                            checkPermissionsForScreenName.Add(permissionKey, checkPermissions);
                        }
                    }

                }
            }
        }

        public void AddChildIndex(CheckPermissionsIndex childIndex) {
            childIndexes.Add(childIndex);

            foreach (KeyValuePair<Pair<String, ScreenName>, CheckPermissions> permission in checkPermissionsForScreenName) {
                HashSet<string> nextPropagationPaths;
                if (permissionPropagationPath.TryGetValue(permission.Key.First, out nextPropagationPaths)) {
                    childIndex.AddCheckPermissions(permission.Key.Second, permission.Value, nextPropagationPaths);
                }
            }
        }
    }
}