/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.NewRuntime {
    public class RestConverter : Newtonsoft.Json.JsonConverter {
        public override bool CanConvert(Type objectType) {
            return (objectType.IsGenericType && objectType.GetGenericTypeDefinition() == typeof(RestList<>));
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
            object list = Activator.CreateInstance(objectType);

            var listField = objectType.GetField("list");
            listField.SetValue(list, serializer.Deserialize(reader, listField.FieldType));
            var enumerator = ((System.Collections.IEnumerable)listField.GetValue(list)).GetEnumerator();
            if (enumerator.MoveNext()) {
                var emptyListItemField = objectType.GetField("emptyListItem");
                emptyListItemField.SetValue(list, enumerator.Current);
            }
            return list;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
            var objectType = value.GetType();
            var listField = objectType.GetField("list");

            serializer.Serialize(writer, listField.GetValue(value));
        }
    }

    public class CustomLongConverter : Newtonsoft.Json.JsonConverter {
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(long?);
        }

        public override bool CanWrite { get { return false; } }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
            throw new NotImplementedException();
        }
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
            JToken token = JToken.Load(reader);
            try {
                if (token.Type == JTokenType.Integer) {
                    return token.ToObject<long>();
                }
                return Int64.Parse(token.ToObject<string>());
            } catch (Exception) {
                throw CustomJsonException.ReaderException("Could not convert value to long: " + token.ToObject<string>() + ".", reader);
            }
        }
    }

    public class CustomIntConverter : Newtonsoft.Json.JsonConverter {
        public override bool CanConvert(Type objectType) {
            return objectType == typeof(int?);
        }

        public override bool CanWrite { get { return false; } }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) {
            throw new NotImplementedException();
        }
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
            JToken token = JToken.Load(reader);
            try {
                if (token.Type == JTokenType.Integer) {
                    return token.ToObject<int>();
                }
                return Int32.Parse(token.ToObject<string>());
            } catch (Exception) {
                throw CustomJsonException.ReaderException("Could not convert value to integer: " + token.ToObject<string>() + ".", reader);
            }
        }
    }

    public class CustomJsonException {
        public static JsonReaderException ReaderException (string message, JsonReader reader) {
            var lineinfo = reader as IJsonLineInfo;
            var lineNumber = 0;
            var linePosition = 0;
            var jsonLineInfo = reader as IJsonLineInfo;
            if (jsonLineInfo != null && jsonLineInfo.HasLineInfo()) {
                lineNumber = jsonLineInfo.LineNumber;
                linePosition = jsonLineInfo.LinePosition;
            }

            return new JsonReaderException(message + " Path '" + reader.Path + "', line " + lineNumber + ", position " + linePosition + ".");
        }
    }

    public class RestContractResolver : DefaultContractResolver {

        public static readonly RestContractResolver Instance = new RestContractResolver();

        protected override JsonContract CreateContract(Type objectType) {
            var contract = base.CreateContract(objectType);

            if ((objectType.IsGenericType && objectType.GetGenericTypeDefinition() == typeof(RestList<>))) {
                contract.Converter = new RestConverter();
            }

            if (objectType == typeof(long?)) {
                contract.Converter = new CustomLongConverter();
            }

            if (objectType == typeof(int?)) {
                contract.Converter = new CustomIntConverter();
            }

            return contract;
        }

    }


}