/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Web;
using System.Linq;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.NewRuntime.Authentication {

    public class  MobileLoginInfoEndpoint {

        readonly IMobileLoginCookieNamer cookieNamer;
        readonly MobileLoginConfiguration configuration;

        public MobileLoginInfoEndpoint(IMobileLoginCookieNamer cookieNamer, MobileLoginConfiguration configuration) {
            this.cookieNamer = cookieNamer;
            this.configuration = configuration;
        }

        public LoginInfo ReadLoginInfoFromRequest() {

            var cookies = HttpContext.Current.Request.Cookies;
            var cookieNames = cookies.AllKeys;

            HttpOnlyLoginCookieValue httpCookieValue = null;
            if (!cookieNames.Contains(cookieNamer.HttpOnlyLoginCookieName)) {
                OSTrace.Debug("[Request cookies] No http cookie found");
            } else {
                string cookieValue = cookies.Get(cookieNamer.HttpOnlyLoginCookieName).Value;
                if (!HttpOnlyLoginCookieValue.TryParse(cookieValue, out httpCookieValue)) {
                    OSTrace.Debug("[Request cookies] Http cookie value: {0}", cookieValue);
                }
            }
            
            UserAccessibleLoginCookieValue userCookie = null;
            if (!cookieNames.Contains(cookieNamer.UserAccessibleLoginCookieName)) {
                OSTrace.Debug("[Request cookies] No user cookie found");
            } else {
                string cookieValue = cookies.Get(cookieNamer.UserAccessibleLoginCookieName).Value;
                if (!UserAccessibleLoginCookieValue.TryParse(cookieValue, out userCookie)) {
                    OSTrace.Debug("[Request cookies] User cookie value: {0}", cookieValue);
                }
            }

            var csrfHeaderValue = HttpContext.Current.Request.Headers.Get(cookieNamer.CSRFHeaderName);
            var csrfToken = csrfHeaderValue == null ? null : new CSRFToken(csrfHeaderValue);

            var loginInfo = new LoginInfo(configuration, csrfToken, httpCookieValue, userCookie);

            return loginInfo;
        }

        public void Login(LoginInfo loginInfo, SessionInfo session) {
            loginInfo.Refresh();
            session.UnsafeSetSession(loginInfo.UserId, loginInfo.TenantId, loginInfo.Username);
            session.NewRuntimeLoginInfo = loginInfo;
        }

        public void WriteLoginInfoToResponse(LoginInfo loginInfo) {

            if (loginInfo == null || !loginInfo.IsDirty) {
                return;
            }

            loginInfo.Sign();

            bool sendAsPersistentCookie = loginInfo.IsPersistent || loginInfo.IsAnonymous;
            int persistentCookieAge = (int) configuration.PersistentLoginCookieExpiration.TotalSeconds;

            var httpOnly = new HttpCookie(cookieNamer.HttpOnlyLoginCookieName, loginInfo.HttpCookieValue);
            httpOnly.Path = "/";
            httpOnly.HttpOnly = true;
            httpOnly.Secure = true;
            if (sendAsPersistentCookie) {
                httpOnly.SetMaxAge(persistentCookieAge);
            }

            var user = new HttpCookie(cookieNamer.UserAccessibleLoginCookieName, loginInfo.UserCookieValue);
            user.Path = "/";
            user.Secure = true;
            if (sendAsPersistentCookie) {
                user.SetMaxAge(persistentCookieAge);
            }

            OSTrace.Debug("[Response cookies] Http cookie value: {0}; User cookie value: {1}", httpOnly.Value, user.Value);

            HttpContext.Current.Response.Cookies.Set(httpOnly);
            HttpContext.Current.Response.Cookies.Set(user);

        }




    }
}
