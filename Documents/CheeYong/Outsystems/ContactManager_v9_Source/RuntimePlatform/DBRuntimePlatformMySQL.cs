/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Text;
using OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition.RuntimePlatform {

    [DatabaseProviderSpecificImplementationFor("MySQL")]
    [DoNotObfuscateType]
    internal class DBRuntimePlatformMySQL : DBRuntimePlatform {
        
        #region Database related

        public override int ExecuteNonQueryGetIdentity(Command cmd, string idColumnName) {
            cmd.CommandText = cmd.CommandText + "; SELECT LAST_INSERT_ID()";
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        public override long ExecuteNonQueryGetLongIdentity(Command cmd, string idColumnName) {
            cmd.CommandText = cmd.CommandText + "; SELECT LAST_INSERT_ID()";
            return DataReaderUtils.SafeGet<long>(cmd.ExecuteScalar());
        }

        #endregion
        
        protected override bool TaskboxUsesEnterpriseManagerUserProvider(Transaction trans) {
            return false;
        }
        
        public override int SaveEmail(Transaction tran, string from, string to, string cc, string bcc, string subject, byte[] content, int contentlen, int activityId, int tenantId, int eSpaceId, string emailDefSSKey, bool storeContent, string messageId, bool enableEmails, string testEmails) {
            Command cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_EMAIL (`from`, `to`, cc, bcc, `subject`, created, activity_id, tenant_id, email_definition_id, store_content, is_test_email, size, message_id)" +
                "values(@EMAILFROM, @EMAILTO, @EMAILCC, @EMAILBCC, @SUBJECT, GETDATE(), @ACTIVITYID, @TENANTID,(SELECT ID FROM OSSYS_EMAIL_DEFINITION ED WHERE ED.SS_KEY = @EMAILDEFSSKEY AND ED.IS_ACTIVE = 1" +
                (eSpaceId != 0 ? " AND ED.ESPACE_ID = @ESPACEID" : "") + ") , @STORECONTENT, @ISTESTEMAIL ,@EMAILSIZE, @MESSAGEID);" +
                "INSERT INTO OSSYS_EMAIL_CONTENT (ID, CONTENT, TENANT_ID) VALUES (LAST_INSERT_ID(), @CONTENT, @TENANTID);" +
                "select LAST_INSERT_ID();");

            cmd.CreateParameter("@EMAILFROM", DbType.String, from);
            cmd.CreateParameter("@EMAILTO", DbType.String, enableEmails ? to : testEmails);
            cmd.CreateParameter("@EMAILCC", DbType.String, enableEmails ? cc : "");
            cmd.CreateParameter("@EMAILBCC", DbType.String, enableEmails ? bcc : "");
            cmd.CreateParameter("@ISTESTEMAIL", DbType.Boolean, !enableEmails);
            cmd.CreateParameter("@SUBJECT", DbType.String, subject);
            cmd.CreateParameter("@MESSAGEID", DbType.String, messageId);
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId != 0 ? (object)activityId : null);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId != 0 ? (object)tenantId : null);
            cmd.CreateParameter("@EMAILDEFSSKEY", DbType.String, emailDefSSKey);
            if (eSpaceId != 0) {
                cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            }
            cmd.CreateParameter("@STORECONTENT", DbType.Boolean, storeContent);
            cmd.CreateParameter("@EMAILSIZE", DbType.Int32, contentlen);
            cmd.CreateParameter("@CONTENT", DbType.Binary, content);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId != 0 ? (object)tenantId : null);

            return Convert.ToInt32(cmd.ExecuteScalar());
        }

        protected override string GetPrecedentActivityIdSQL() {
            return " select GetPrecedentActivityId(@STARTID, @TARGETKEY, " + RuntimePlatformSettings.Queries.QueryRecursionLimit.GetValue() + ")";
        }

        internal override IDataReader GetActivities(Transaction trans, int userId, int tenantId, int startIndex, string locale, string additionalWhereClauses, int maxActivitiesReturned) {

            StringBuilder sql = new StringBuilder();

            sql.AppendFormat(@"
                SELECT 
                    ACT.ID ID, 
                    AD.LABEL LABEL, 
                    ADL.LABEL LABEL_LANG, 
                    ACT.INBOX_DETAIL INBOX_DETAIL, 
                    ACT.DUE_DATE DUE_DATE, 
                    (CASE ACT.STATUS_ID WHEN 2 THEN 1 ELSE 0 END) AS OPENED, 
                    (CASE WHEN ACT.ID > {0} THEN 0 ELSE 1 END) AS SEEN ",
                GetTaskboxLastSeenActivitySql(GetCachedTableName(trans, Constants.EpaTaskboxSeenActivityKey)));

            GetTaskboxFromClauseSql(sql, true);
            GetTaskboxWhereClauseSql(sql, trans, false, additionalWhereClauses);

            sql.Append(@" ORDER BY (CASE ACT.DUE_DATE WHEN @NULLDATE THEN @LONGFUTUREDATE ELSE ACT.DUE_DATE END) ASC,
                            ACT.OPENED DESC,
                            ACT.CREATED DESC");

            sql.Append(@" LIMIT @START, @END");

            Command cmd = trans.CreateCommand(sql.ToString());
            cmd.CreateParameter("@USERID", DbType.Int32, userId);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId);
            cmd.CreateParameter("@START", DbType.Int32, startIndex);
            cmd.CreateParameter("@END", DbType.Int32, maxActivitiesReturned);
            cmd.CreateParameter("@NULLDATE", DbType.DateTime, BuiltInFunction.NullDate());
            cmd.CreateParameter("@LONGFUTUREDATE", DbType.DateTime, BuiltInFunction.NewDate(3000, 1, 1));
            cmd.CreateParameter("@LOCALE", DbType.String, locale);
            IDataReader reader = cmd.ExecuteReader();
            return reader;
        }

        public override bool SelectLastLoginForUpdateNoWait(Transaction tran, int userID, int tenantID) {
            try {
                //In MySQL, NOWAIT is not supported, so we wait a bit until we get the lock
                Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_USER " +
                                                 "WHERE TENANT_ID = @TENANT_ID AND ID = @USER_ID " +
                                                 "FOR UPDATE");
                cmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantID);
                cmd.CreateParameter("@USER_ID", DbType.Int32, userID);
                cmd.CommandTimeout = 1; /*1 seconds*/

                cmd.ExecuteNonQuery("AttemptLogin operation (try get lock to update)", true); // This will always log a ostrace internally, but we can't currently avoid it
                return true;
            } catch {
                return false;
            }
        }
    }
}
