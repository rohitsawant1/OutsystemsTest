/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.RuntimeCommon;
using System.Web.UI;
using System.Web.UI.WebControls;
using OutSystems.HubEdition.RuntimePlatform.Web;
using System.Web.UI.HtmlControls;
using Pair = OutSystems.RuntimeCommon.Pair;

namespace OutSystems.HubEdition.RuntimePlatform.Email {
    public sealed class ControlCss : SimpleCss<Control> {

        public ControlCss(string css) : base(css) {
            var existingStyleSelectorFilter = StyleSelectorFilter;
            if (existingStyleSelectorFilter != null) {
                StyleSelectorFilter = ((styles) => FixStylesNotSupportedInEmail(existingStyleSelectorFilter(styles)));
            } else {
                StyleSelectorFilter = FixStylesNotSupportedInEmail;
            }
        }

        public override void SetStyleFor(Control element) {
            if (element == null) return;

            //If its not a IOSControl or HtmlControl we will not be able to set the style later on, so skip
            if (element is IOSControl || element is HtmlControl) {
                base.SetStyleFor(element);
            }
            
            foreach(Control child in element.Controls) {
                this.SetStyleFor(child); //recusive call
            }

        }

        protected override bool MatchMethod(Control element, SimpleCssSelectorElement selectorElement) {
            if (!selectorElement.Id.IsEmpty() && !selectorElement.Id.EqualsIgnoreCase(element.ClientID)) {
                return false;
            }

            var osControl = element as IOSControl;
            if (osControl != null) {
                return MatchControl(selectorElement, osControl.TagName, osControl.CssClass);
            } 

            
            var htmlControl = element as HtmlControl;
            if (htmlControl != null) {
                string[] cssClass = (htmlControl.Attributes["class"] ?? string.Empty).Split(' ');
                return MatchControl(selectorElement, htmlControl.TagName, cssClass);
            }

            // these fallbacks are only for hierarchy search ..if its not a IOSControl we may will be able to set the style later
            var wc = element as WebControl;
            if (wc != null) {
                return MatchControl(selectorElement, null, wc.CssClass.Split(' '));
            }

            return false;
        }

        private bool MatchControl(SimpleCssSelectorElement selectorElement, string tag, string[] cssClass) {
            if (!selectorElement.Tag.IsEmpty() && selectorElement.Tag != "*" && (tag == null || !selectorElement.Tag.EqualsIgnoreCase(tag))) {
                return false;
            }

            if (!selectorElement.Classes.All(@class => cssClass.Any(elementClass => elementClass.EqualsIgnoreCase(@class)))) {
                return false;
            }

            return true;
        }

        protected override Control GetParentMethod(Control element) {
            return element.Parent;
        }

        protected override void SetStyleMethod(Control element, string style) {
            if (!style.IsEmpty()) {
                var osControl = element as IOSControl;
                if (osControl != null && osControl.Style != null) {
                    osControl.Style.Value = style + (osControl.Style.Value ?? string.Empty);
                    return;
                }

                var htmlControl = element as HtmlControl;
                if (htmlControl != null && htmlControl.Style != null) {
                    htmlControl.Style.Value = style + (htmlControl.Style.Value ?? string.Empty);
                    return;
                }
            }
        }

        private static Regex bgColorRegex = new Regex(@"transparent|(rgb\(\s*\d*\s*%?,\s*\d*\s*%?,\s*\d*\s*%?\))|(rgba\(\s*\d*\s*%?,\s*\d*\s*%?,\s*\d*\s*\%?,\s*\d*\s*\))|((\#([0-9A-F]{3}){1,2}))", RegexOptions.Compiled | RegexOptions.IgnoreCase);

        private IEnumerable<Pair<string, string>> FixStylesNotSupportedInEmail(IEnumerable<Pair<string, string>> styles) {
            foreach (var pair in styles) {
                if (pair.First.EqualsIgnoreCase("background")) {
                    var matches = bgColorRegex.Matches(pair.Second);
                    if (matches.Count > 0) {
                        yield return RuntimeCommon.Pair.Create(pair.First, matches[0].Value);
                    } else if(pair.Second.Contains("inherit")) { //not in regex because more than one option can have "inherit"
                        yield return RuntimeCommon.Pair.Create(pair.First, "inherit");
                    }
                } else {
                    yield return pair;
                }
            }
        }
    }
}
