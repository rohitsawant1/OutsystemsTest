/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using System;
using System.Linq;

namespace OutSystems.HubEdition.RuntimePlatform.Email {
    public sealed class SimpleCssStyleDefinition {

        private readonly IList<SimpleCssSelectorElement> elements;
        public IEnumerable<SimpleCssSelectorElement> Elements {
            get { return elements; }
        }

        public readonly IEnumerable<Pair<string, string>> PropertyDefinitions;
        public readonly int Index;

        private readonly Triplet<int,int,int> specificity;
        public Triplet<int,int,int> Specificity {
            get { return specificity; }
        }

        public SimpleCssStyleDefinition(IList<SimpleCssSelectorElement> selectorElements, IEnumerable<Pair<string, string>> propertyDefinitions, int index) {
            elements = selectorElements;
            PropertyDefinitions = propertyDefinitions;
            Index = index;

            //http://www.w3.org/TR/REC-CSS2/cascade.html#specificity 
            specificity = Triplet.Create(0,0,0);
            foreach (var elem in selectorElements) {
                if (!elem.Id.IsEmpty()) {
                    specificity.First = specificity.First + 1;
                }
				specificity.Second += elem.Classes.Length;
                if (!elem.Tag.IsEmpty()) {
                    specificity.Third = specificity.Third + 1;
                }
			}
        }

        public override bool Equals(object obj) {
            var other = obj as SimpleCssStyleDefinition;
            return other != null && Index == other.Index;
        }

        private string toStringCache;
        public override string ToString() {
            if (toStringCache == null) {
                toStringCache = elements.StrCat(" ") + PropertyDefinitions.StrCat(" ");
            }
            return toStringCache;
        }
        
        public override int GetHashCode() {
            return Index;
        }

        public class SpecificityComparer : IComparer<Triplet<int, int, int>> {
            public static readonly SpecificityComparer Instance = new SpecificityComparer();
            private SpecificityComparer() { }

            public int Compare(Triplet<int, int, int> left, Triplet<int, int, int> right) {
                int currCompare;

                currCompare = left.First.CompareTo(right.First);
                if (currCompare == 0) {
                    currCompare = left.Second.CompareTo(right.Second);
                    if (currCompare == 0) {
                        currCompare = left.Third.CompareTo(right.Third);
                    }
                }
                return currCompare;
            }
        }



        public bool Matches<T>(T element, Func<T, SimpleCssSelectorElement, bool> MatchElement, Func<T, T> GetParent) {

            if (!MatchElement(element, elements[elements.Count - 1])) {
                return false;
            }

            element = GetParent(element);

            for (int i = elements.Count - 2; i >= 0; --i) {
                if (element == null) {
                    return false;
                }

                var selectorElement = elements[i];
                do {
                    if (MatchElement(element, selectorElement)) {
                        break;
                    } else {
                        element = GetParent(element);
                    }

                } while (element != null);

                if (element == null) {
                    return false;
                }

                element = GetParent(element);
            }
            return true;
        }        
    }
}
