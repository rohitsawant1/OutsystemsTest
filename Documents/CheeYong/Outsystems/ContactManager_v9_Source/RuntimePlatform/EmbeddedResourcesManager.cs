/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Resources;
using System.Reflection;
using System.Collections;
using System.Globalization;
using System.IO;
using OutSystems.RuntimeCommon;
using System.Linq;

namespace OutSystems.HubEdition.RuntimePlatform {

    /// <summary>
    /// This resource manager is used to look for language resources in the assembly manifest
    /// (that is, as embedded resources).
    /// This is in contrast with the default ResourceManager, which expects language resources
    /// to be placed in satellite assemblies.
    /// </summary>
    public class EmbeddedResourceManager : ResourceManager, IResourceManager {

        private class EmptyResourceSet : ResourceSet {
            public static readonly EmptyResourceSet Instance = new EmptyResourceSet();
        }
        
        protected volatile Dictionary<string, ResourceSet> resources = new Dictionary<string, ResourceSet>();
        private object lockingobject = new object();
        protected Action<Exception, int, string> logErrorHandler;

        public EmbeddedResourceManager(string resName, Assembly assembly, Action<Exception, int, string> logErrorHandler)
            : this(resName, assembly) {
            this.logErrorHandler = logErrorHandler;
        }

        public EmbeddedResourceManager(string resName, Assembly assembly)
            : base(resName, assembly) {
        }

        private void MarkResourceSetToReload() {
            lock (lockingobject) {
                resources.Clear();
            }
        }

        protected override ResourceSet InternalGetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents) {
            ResourceSet resource;

            // search for specific resource file in the assembly resources
            string cultureName = culture.Name;
            if (cultureName.IsEmpty()) {
                resource = EmptyResourceSet.Instance;
            } else {
                string resourceFileName = BaseName + "." + cultureName + ".resources";
                if (!resources.TryGetValue(resourceFileName, out resource)) {
                    lock (lockingobject) {
                        if (!resources.TryGetValue(resourceFileName, out resource)) {
                            Stream s = MainAssembly.GetManifestResourceStream(resourceFileName);
                            if (s != null) {
                                resource = new ResourceSet(s);
                            } else {
                                // delegate in parent
                                resource = base.InternalGetResourceSet(culture, createIfNotExists, tryParents);
                            }
                            resources[resourceFileName] = resource;
                        }
                    }
                }
            }
            return resource;
        }

        [Obsolete("Use GetString instead.")]
        public string SafeGetString(string key, Action<Exception, int> logError) {
            logErrorHandler = delegate(Exception e, int retries, string k) { logError(e, retries); };
            return GetString(key);
        }

        public override string GetString(string key) {
 	        string res = null;
            int retries = 5;
            while (retries > 0) {
                try {
                    res = base.GetString(key);
                    break;
                } catch (Exception exception) {
                    retries--;
                    logErrorHandler(exception, retries, key);
                    MarkResourceSetToReload();
                }
            }
            return res;
        }
    }
}
