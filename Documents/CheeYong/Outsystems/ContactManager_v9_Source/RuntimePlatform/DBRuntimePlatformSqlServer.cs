/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using OutSystems.HubEdition.Extensibility.Data.DMLService;
using OutSystems.Internal.Db;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition.RuntimePlatform {

    [OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.DatabaseProviderSpecificImplementationFor("SqlServer")]
    [DoNotObfuscateType]
    internal class DBRuntimePlatformSqlServer : DBRuntimePlatform {

        #region Database related

        public override int ExecuteNonQueryGetIdentity(Command cmd, string idColumnName) {
            cmd.CommandText = cmd.CommandText + "; SELECT SCOPE_IDENTITY()";
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        public override long ExecuteNonQueryGetLongIdentity(Command cmd, string idColumnName) {
            cmd.CommandText = cmd.CommandText + "; SELECT SCOPE_IDENTITY()";
            return DataReaderUtils.SafeGet<long>(cmd.ExecuteScalar());
        }

        #endregion

        public override int SaveEmail(Transaction tran, string @from, string to, string cc, string bcc, string subject, byte[] content, int contentlen,
                                      int activityId, int tenantId, int eSpaceId, string emailDefSSKey, bool storeContent, string messageId, bool enableEmails,
                                      string testEmails) {
            Command cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_EMAIL ([FROM], [TO], [CC], [BCC], SUBJECT, CREATED, ACTIVITY_ID, TENANT_ID, EMAIL_DEFINITION_ID, STORE_CONTENT, IS_TEST_EMAIL, SIZE, MESSAGE_ID) " +
                "SELECT @EMAILFROM, @EMAILTO, @EMAILCC, @EMAILBCC, @SUBJECT, GETDATE(), @ACTIVITYID, @TENANTID, " +
                "   (SELECT TOP 1 ID FROM OSSYS_EMAIL_DEFINITION ED WHERE ED.SS_KEY = @EMAILDEFSSKEY AND ED.IS_ACTIVE = 1" +
                (eSpaceId != 0 ? " AND ED.ESPACE_ID = @ESPACEID" : "") + "), @STORECONTENT, @ISTESTEMAIL ,@EMAILSIZE, @MESSAGEID;" +
                "DECLARE @EMAILID INT;" +
                "SELECT @EMAILID = SCOPE_IDENTITY();" +
                "INSERT INTO OSSYS_EMAIL_CONTENT (ID, CONTENT, TENANT_ID) VALUES (@EMAILID, @CONTENT, @TENANTID);" +
                "SELECT @EMAILID;");

            cmd.CreateParameter("@EMAILFROM", DbType.String, from);
            cmd.CreateParameter("@EMAILTO", DbType.String, enableEmails ? to : testEmails);
            cmd.CreateParameter("@EMAILCC", DbType.String, enableEmails ? cc : "");
            cmd.CreateParameter("@EMAILBCC", DbType.String, enableEmails ? bcc : "");
            cmd.CreateParameter("@ISTESTEMAIL", DbType.Boolean, !enableEmails);
            cmd.CreateParameter("@SUBJECT", DbType.String, subject);
            cmd.CreateParameter("@MESSAGEID", DbType.String, messageId);
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId != 0 ? (object)activityId : null);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId != 0 ? (object)tenantId : null);
            cmd.CreateParameter("@EMAILDEFSSKEY", DbType.String, emailDefSSKey);
            if (eSpaceId != 0) {
                cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            }
            cmd.CreateParameter("@STORECONTENT", DbType.Boolean, storeContent);
            cmd.CreateParameter("@EMAILSIZE", DbType.Int32, contentlen);
            cmd.CreateParameter("@CONTENT", DbType.Binary, content);

            return (int)cmd.ExecuteScalar();
        }

        public override void GetDbSpecificCatalogConfigurationParameters(Dictionary<string, object> parameters, IDataReader reader,
                string databaseName) {

            parameters.Add("Catalog", databaseName.IsNullOrEmpty() ? DataReaderUtils.SafeGet<string>(reader["NAME"], string.Empty).Trim() : databaseName);
        }

        protected override string GetPrecedentActivityIdSQL() {
            return @"WITH CHILDREN (ID, PRECEDENT_ID, ACTIVITY_DEF_ID, SS_KEY) AS (
                        SELECT PRECEDENT.ID, PRECEDENT.PRECEDENT_ACTIVITY_ID, PRECEDENT.ACTIVITY_DEF_ID, D.SS_KEY
                        FROM OSSYS_BPM_ACTIVITY ACT
	                    INNER JOIN OSSYS_BPM_ACTIVITY PRECEDENT ON PRECEDENT.ID = ACT.PRECEDENT_ACTIVITY_ID
                        INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION D ON D.ID = PRECEDENT.ACTIVITY_DEF_ID
                        WHERE ACT.ID = @STARTID

                        UNION ALL

                        SELECT ACT.ID, ACT.PRECEDENT_ACTIVITY_ID ID, ACT.ACTIVITY_DEF_ID, D.SS_KEY
                        FROM OSSYS_BPM_ACTIVITY ACT
                        INNER JOIN CHILDREN C ON C.PRECEDENT_ID = ACT.ID
                        INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION D ON D.ID = ACT.ACTIVITY_DEF_ID
                        WHERE C.SS_KEY <> @TARGETKEY
                    )
                    SELECT ID
                    FROM CHILDREN
                    WHERE SS_KEY = @TARGETKEY 
                    OPTION (MAXRECURSION " + RuntimePlatformSettings.Queries.QueryRecursionLimit.GetValue() + ")";
        }

        protected override string GetNoCountSQL(string sql, bool setOn) {
            return "SET NOCOUNT " + (setOn ? "ON" : "OFF") + ";" + sql;
        }

        protected override string GetCreateActivityNextRunSql(IDMLService dmlService) {
            return dmlService.Functions.AddSeconds("GETDATE()", "1");
        }

        protected override void GetTaskboxActivityCountSelectClauseSql(StringBuilder sql, string lastSeenActivityQuery) {
            sql.AppendFormat(@"
                    DECLARE @LASTSEENACTIVITYID INT;
                    SELECT @LASTSEENACTIVITYID = {0}
                    SELECT COUNT(1) TOTAL, SUM(CASE WHEN ACT.[ID] > @LASTSEENACTIVITYID THEN 1 ELSE 0 END) UNSEEN ",
                lastSeenActivityQuery);
        }

        public override bool SelectLastLoginForUpdateNoWait(Transaction tran, int userID, int tenantID) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_USER WITH ( UPDLOCK READPAST ) " +
                                             "WHERE TENANT_ID = @TENANT_ID AND ID = @USER_ID");
            cmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantID);
            cmd.CreateParameter("@USER_ID", DbType.Int32, userID);

            using (var reader = cmd.ExecuteReader("AttemptLogin operation (try get lock to update)", true)) {
                return reader.Read(); // Check if we locked a line or skipped
            }
        }

        protected override string GetDequeueEventSQL(ObjectKey applicationKey = null) {
            return RuntimePlatformSettings.Processes.EnableImprovedDequeueEvent.GetValue() ? 
                //Hammer until ABE remove this old procedure
                (applicationKey != null ? EventDequeueForApplicationProcedureName : EventDequeueForFrontendProcedureName) :  
                base.GetDequeueEventSQL(applicationKey);
        }

    }
}
