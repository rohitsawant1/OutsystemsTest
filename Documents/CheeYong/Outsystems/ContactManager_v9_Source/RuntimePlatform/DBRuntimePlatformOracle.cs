/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using OutSystems.Internal.Db;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition.RuntimePlatform {

    [OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider.DatabaseProviderSpecificImplementationFor("Oracle")]
    [DoNotObfuscateType]
    internal class DBRuntimePlatformOracle : DBRuntimePlatform {

        #region Database related
        
        public override int ExecuteNonQueryGetIdentity(Command cmd, string idColumnName) {
            cmd.CommandText = cmd.CommandText + " RETURNING " + idColumnName.ToUpper() + " INTO @id";

            DataParameter IdParamenter = cmd.CreateOutputParameter("@id", DbType.Int32);
            cmd.ExecuteNonQuery();
            return DataReaderUtils.SafeGet<int>(IdParamenter.Value);
        }

        public override long ExecuteNonQueryGetLongIdentity(Command cmd, string idColumnName) {
            cmd.CommandText = cmd.CommandText + " RETURNING " + idColumnName.ToUpper() + " INTO @id";

            DataParameter IdParamenter = cmd.CreateOutputParameter("@id", DbType.Int64);
            cmd.ExecuteNonQuery();
            return DataReaderUtils.SafeGet<long>(IdParamenter.Value);
        }

        #endregion

        public override int SaveEmail(Transaction tran, string @from, string to, string cc, string bcc, string subject, byte[] content, int contentlen,
                                      int activityId, int tenantId, int eSpaceId, string emailDefSSKey, bool storeContent, string messageId, bool enableEmails,
                                      string testEmails) {
            Command cmd = tran.CreateCommand(
                "DECLARE EMAILDEFINITIONID NUMBER(10,0);" +
                "BEGIN " +
                "SELECT ID INTO EMAILDEFINITIONID " +
                "FROM OSSYS_EMAIL_DEFINITION ED " +
                "WHERE ED.SS_KEY = @EMAILDEFSSKEY AND ED.IS_ACTIVE = 1 " + (eSpaceId != 0 ? "AND ED.ESPACE_ID = @ESPACEID " : "") + "AND ROWNUM <= 1;" +
                "INSERT INTO OSSYS_EMAIL (\"FROM\", \"TO\", \"CC\", \"BCC\", SUBJECT, CREATED, ACTIVITY_ID, TENANT_ID, EMAIL_DEFINITION_ID, STORE_CONTENT, IS_TEST_EMAIL, \"SIZE\", MESSAGE_ID) " +
                "VALUES(@EMAILFROM, @EMAILTO, @EMAILCC, @EMAILBCC, @SUBJECT, GETDATE(), @ACTIVITYID, @TENANTID, EMAILDEFINITIONID, @STORECONTENT, @ISTESTEMAIL ,@EMAILSIZE, @MESSAGEID) " +
                "RETURNING ID INTO @EMAILID;" +
                "END;");

            cmd.CreateParameter("@EMAILFROM", DbType.String, from);
            cmd.CreateParameter("@EMAILTO", DbType.String, enableEmails ? to : testEmails);
            cmd.CreateParameter("@EMAILCC", DbType.String, enableEmails ? cc : "");
            cmd.CreateParameter("@EMAILBCC", DbType.String, enableEmails ? bcc : "");
            cmd.CreateParameter("@ISTESTEMAIL", DbType.Boolean, !enableEmails);
            cmd.CreateParameter("@SUBJECT", DbType.String, subject);
            cmd.CreateParameter("@MESSAGEID", DbType.String, messageId);
            cmd.CreateParameter("@ACTIVITYID", DbType.Int32, activityId != 0 ? (object)activityId : null);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId != 0 ? (object)tenantId : null);
            cmd.CreateParameter("@EMAILDEFSSKEY", DbType.String, emailDefSSKey);
            if (eSpaceId != 0) {
                cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            }
            cmd.CreateParameter("@STORECONTENT", DbType.Boolean, storeContent);
            cmd.CreateParameter("@EMAILSIZE", DbType.Int32, contentlen);

            DataParameter IdParamenter = cmd.CreateOutputParameter("@EMAILID", DbType.Int32);
            cmd.ExecuteNonQuery();
            int emailId = DataReaderUtils.SafeGet<int>(IdParamenter.Value);

            cmd = tran.CreateCommand(
                "INSERT INTO OSSYS_EMAIL_CONTENT (\"ID\", \"CONTENT\", \"TENANT_ID\") VALUES (@EMAILID, @CONTENT, @TENANTID)");

            cmd.CreateParameter("@EMAILID", DbType.Int32, emailId);
            cmd.CreateParameter("@CONTENT", DbType.Binary, content);
            cmd.CreateParameter("@TENANTID", DbType.Int32, tenantId != 0 ? (object)tenantId : null);
            cmd.ExecuteNonQuery();

            return emailId;
        }
        

        public override void GetDbSpecificCatalogConfigurationParameters(Dictionary<string, object> parameters, IDataReader reader,
                string databaseName) {

            parameters.Add("Schema", databaseName.IsNullOrEmpty() ? DataReaderUtils.SafeGet<string>(reader["NAME"], string.Empty).Trim() : databaseName);
            parameters.Add("Tablespace", DataReaderUtils.SafeGet<string>(reader["DATATABLESPACE"], string.Empty).Trim());
            parameters.Add("TablespaceIndex", DataReaderUtils.SafeGet<string>(reader["INDEXTABLESPACE"], string.Empty).Trim());
        }

        protected override object UpdateTimerAndGetIsRunningSinceValue(Command updateCommand, bool isShared) {
            updateCommand.CommandText = "BEGIN " + updateCommand.CommandText + " RETURNING IS_RUNNING_SINCE INTO @NEW_IS_RUNNING_SINCE; END;";
            DataParameter IdParameter = updateCommand.CreateOutputParameter("@NEW_IS_RUNNING_SINCE", DbType.DateTime);
            updateCommand.ExecuteNonQuery();
            return IdParameter.Value;
        }

        protected override string GetPrecedentActivityIdSQL() {
            return @"SELECT ID
                     FROM (
                         SELECT ACT.ID, ACT.PRECEDENT_ACTIVITY_ID, ACT.ACTIVITY_DEF_ID, D.SS_KEY 
                         FROM OSSYS_BPM_ACTIVITY ACT
                         INNER JOIN OSSYS_BPM_ACTIVITY_DEFINITION D ON D.ID = ACT.ACTIVITY_DEF_ID
                         START WITH ACT.ID = @STARTID
                         CONNECT BY
                         PRIOR ACT.PRECEDENT_ACTIVITY_ID = ACT.ID AND PRIOR D.SS_KEY <> @TARGETKEY
                         )
                     WHERE SS_KEY = @TARGETKEY";
        }

        protected override string GetDequeueEventSQL(ObjectKey applicationKey = null) {
            return RuntimePlatformSettings.Processes.EnableImprovedDequeueEvent.GetValue() ? 
                //Hammer until ABE remove this old procedure
                (applicationKey != null ? EventDequeueForApplicationProcedureName : EventDequeueForFrontendProcedureName) : 
                base.GetDequeueEventSQL(applicationKey);
        }

        protected override string GetDequeueEventReaderParamName() {
            return "RECORDSET";
        }

        public override bool SelectLastLoginForUpdateNoWait(Transaction tran, int userID, int tenantID) {
            Command cmd = tran.CreateCommand("SELECT ID FROM OSSYS_USER " +
                                             "WHERE TENANT_ID = @TENANT_ID AND ID = @USER_ID " +
                                             "FOR UPDATE SKIP LOCKED");
            cmd.CreateParameter("@TENANT_ID", DbType.Int32, tenantID);
            cmd.CreateParameter("@USER_ID", DbType.Int32, userID);

            using (var reader = cmd.ExecuteReader("AttemptLogin operation (try get lock to update)", true)) {
                return reader.Read(); // Check if we locked a line or skipped
            }
        }
    }
}
