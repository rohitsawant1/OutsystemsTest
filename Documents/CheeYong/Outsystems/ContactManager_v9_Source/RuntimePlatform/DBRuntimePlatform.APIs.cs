/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Data;
using System.Runtime.CompilerServices;
using OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;

namespace OutSystems.HubEdition.RuntimePlatform {

    public partial class DBRuntimePlatform {

        #region External Javascript API

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader GetExternalCodeByEspaceOrApplication(Transaction tran, int eSpaceId, string applicationKey, string eSpaceKey) {
            string orderColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("ORDER");
            Command cmd = tran.CreateCommand(
                @"SELECT    OSSYS_CALLBACK.*, 
                            COALESCE(OSSYS_CALLBACKTYPE.LABEL,'Dynamic') CALLBACKTYPE, 
                            COALESCE(OSSYS_CALLBACKLOCATION.LABEL,'BodyBottom') CALLBACKLOCATION 

                FROM OSSYS_CALLBACK 

                LEFT JOIN OSSYS_ESPACE ON OSSYS_ESPACE.NAME = OSSYS_CALLBACK.PROVIDERNAME 
				                AND OSSYS_ESPACE.IS_ACTIVE = 1 
				                AND EXISTS(SELECT 1 FROM OSSYS_ESPACE_TENANT ET INNER JOIN OSSYS_TENANT TENANT ON TENANT.ID = ET.TENANT_ID AND TENANT.IS_ACTIVE = 1 WHERE ET.ESPACE_ID = OSSYS_ESPACE.ID) 

                LEFT JOIN OSSYS_CALLBACKTYPE ON OSSYS_CALLBACK.CALLBACKTYPEID = OSSYS_CALLBACKTYPE.ID 
                LEFT JOIN OSSYS_CALLBACKLOCATION ON OSSYS_CALLBACK.CALLBACKLOCATIONID = OSSYS_CALLBACKLOCATION.ID 

                WHERE ((COALESCE(OSSYS_CALLBACKTYPE.LABEL,'Dynamic') = 'Dynamic' AND (ESPACEID = @ESPACEID OR ESPACEID IS NULL) OR 
                    (COALESCE(OSSYS_CALLBACKTYPE.LABEL,'Dynamic') <> 'Dynamic' AND OSSYS_CALLBACK.ISACTIVE = 1 AND @APPLICATIONKEY NOT IN(SELECT APPLICATIONKEY FROM OSSYS_CALLBACK_EXCLUDEDAPP WHERE OSSYS_CALLBACK.ID = OSSYS_CALLBACK_EXCLUDEDAPP.CALLBACKID)
                                                 AND @ESPACEKEY NOT IN (SELECT ESPACEKEY FROM OSSYS_CALLBACK_EXCLUDEDESPACE WHERE OSSYS_CALLBACK.ID = OSSYS_CALLBACK_EXCLUDEDESPACE.CALLBACKID ))))
	 
                ORDER BY COALESCE(OSSYS_CALLBACKLOCATION." + orderColumn + ",(SELECT ID FROM OSSYS_CALLBACKLOCATION WHERE LABEL = 'BodyBottom')), COALESCE(OSSYS_CALLBACK." + orderColumn + ",0), OSSYS_CALLBACK.ID");

            cmd.CreateParameter("@ESPACEID", DbType.Int32, eSpaceId);
            cmd.CreateParameter("@APPLICATIONKEY", DbType.String, applicationKey);
            cmd.CreateParameter("@ESPACEKEY", DbType.String, eSpaceKey);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static void Script_Deactivate(Transaction tran, string scriptName) {
            Command cmd = tran.CreateCommand(@"UPDATE OSSYS_CALLBACK SET ISACTIVE = 0 WHERE CALLBACKNAME=@SCRIPTNAME");
            cmd.CreateParameter("@SCRIPTNAME", DbType.String, scriptName);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static void Script_Activate(Transaction tran, string scriptName) {
            Command cmd = tran.CreateCommand(@"UPDATE ossys_Callback SET ISACTIVE = 1 WHERE CALLBACKNAME=@scriptName");
            cmd.CreateParameter("@scriptName", DbType.String, scriptName);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static int Script_GetId(Transaction trans, string scriptName) {
            Command cmd = trans.CreateCommand(
                @"SELECT OSSYS_CALLBACK.ID FROM OSSYS_CALLBACK 
                    LEFT JOIN OSSYS_CALLBACKTYPE ON OSSYS_CALLBACK.CALLBACKTYPEID = OSSYS_CALLBACKTYPE.ID
                  WHERE CALLBACKNAME = @SCRIPTNAME AND NOT(OSSYS_CALLBACKTYPE.LABEL IS NULL) AND NOT(OSSYS_CALLBACKTYPE.LABEL='Dynamic')");
            cmd.CreateParameter("@SCRIPTNAME", DbType.String, scriptName);
            return DataReaderUtils.SafeGet<int>(cmd.ExecuteScalar());
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - scriptId")]
        public void Script_AddApplicationExclusion(Transaction tran, int scriptId, string applicationKey) {
            Command cmd = tran.CreateCommand(@"INSERT INTO OSSYS_CALLBACK_EXCLUDEDAPP (CALLBACKID, APPLICATIONKEY) VALUES(@SCRIPTID, @APPLICATIONKEY)");
            cmd.CreateParameter("@SCRIPTID", DbType.Int32, scriptId);
            cmd.CreateParameter("@APPLICATIONKEY", DbType.String, applicationKey);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void Script_RemoveApplicationExclusion(Transaction tran, int scriptId, string applicationKey) {
            Command cmd = tran.CreateCommand( @"DELETE FROM OSSYS_CALLBACK_EXCLUDEDAPP WHERE CALLBACKID = @SCRIPTID AND APPLICATIONKEY = @APPLICATIONKEY");
            cmd.CreateParameter("@SCRIPTID", DbType.Int32, scriptId);
            cmd.CreateParameter("@APPLICATIONKEY", DbType.String, applicationKey);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [DoNotTestSyntax("Foreign key constraints - scriptId")]
        public void Script_AddEspaceExclusion(Transaction tran, int scriptId, string eSpaceKey) {
            Command cmd = tran.CreateCommand(@"INSERT INTO OSSYS_CALLBACK_EXCLUDEDESPACE (CALLBACKID, ESPACEKEY) VALUES(@SCRIPTID, @ESPACEKEY)");
            cmd.CreateParameter("@SCRIPTID", DbType.Int32, scriptId);
            cmd.CreateParameter("@ESPACEKEY", DbType.String, eSpaceKey);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void Script_RemoveEspaceExclusion(Transaction tran, int scriptId, string eSpaceKey){
            Command cmd = tran.CreateCommand(@"DELETE FROM OSSYS_CALLBACK_EXCLUDEDESPACE WHERE CALLBACKID = @SCRIPTID AND ESPACEKEY = @ESPACEKEY");
            cmd.CreateParameter("@SCRIPTID", DbType.Int32, scriptId);
            cmd.CreateParameter("@ESPACEKEY", DbType.String, eSpaceKey);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void Script_Delete(Transaction tran, int scriptId) {
            Command cmd = tran.CreateCommand(@"DELETE FROM OSSYS_CALLBACK WHERE ID = @SCRIPTID");
            cmd.CreateParameter("@SCRIPTID", DbType.Int32, scriptId);
            cmd.ExecuteNonQuery();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader Script_Get(Transaction tran, string scriptName) {
            string keyColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("KEY");
            Command cmd = tran.CreateCommand(
                @"SELECT OSSYS_CALLBACK.*, OSSYS_CALLBACK_EXCLUDEDAPP.APPLICATIONKEY, OSSYS_APPLICATION.NAME AS APPNAME, OSSYS_CALLBACK_EXCLUDEDESPACE.ESPACEKEY, 
                    OSSYS_ESPACE.NAME AS ESPACENAME, OSSYS_CALLBACKLOCATION.LABEL AS LOCATION
                    FROM OSSYS_CALLBACK 
                    LEFT JOIN OSSYS_CALLBACK_EXCLUDEDAPP ON OSSYS_CALLBACK.ID = OSSYS_CALLBACK_EXCLUDEDAPP.CALLBACKID 
                    LEFT JOIN OSSYS_CALLBACK_EXCLUDEDESPACE ON OSSYS_CALLBACK.ID = OSSYS_CALLBACK_EXCLUDEDESPACE.CALLBACKID 
                    LEFT JOIN OSSYS_APPLICATION ON OSSYS_CALLBACK_EXCLUDEDAPP.APPLICATIONKEY = OSSYS_APPLICATION." + keyColumn + @"
                    LEFT JOIN OSSYS_ESPACE ON OSSYS_CALLBACK_EXCLUDEDESPACE.ESPACEKEY = OSSYS_ESPACE.SS_KEY
                    LEFT JOIN OSSYS_CALLBACKTYPE ON OSSYS_CALLBACK.CALLBACKTYPEID = OSSYS_CALLBACKTYPE.ID
                    LEFT JOIN OSSYS_CALLBACKLOCATION ON OSSYS_CALLBACK.CALLBACKLOCATIONID = OSSYS_CALLBACKLOCATION.ID
                    WHERE CALLBACKNAME =  @SCRIPTNAME AND NOT(OSSYS_CALLBACKTYPE.LABEL IS NULL) AND NOT(OSSYS_CALLBACKTYPE.LABEL='Dynamic')");
            cmd.CreateParameter("@SCRIPTNAME", DbType.String, scriptName);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public IDataReader Script_List(Transaction tran, bool showInactive) {
            string keyColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("KEY");
            string orderColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("ORDER");
            Command cmd = tran.CreateCommand(
                @"SELECT OSSYS_CALLBACK.*, OSSYS_CALLBACK_EXCLUDEDAPP.APPLICATIONKEY, OSSYS_APPLICATION.NAME AS APPNAME, OSSYS_CALLBACK_EXCLUDEDESPACE.ESPACEKEY, 
                    OSSYS_ESPACE.NAME AS ESPACENAME, OSSYS_CALLBACKLOCATION.LABEL AS LOCATION  
                    FROM OSSYS_CALLBACK 
                    LEFT JOIN OSSYS_CALLBACK_EXCLUDEDAPP ON OSSYS_CALLBACK.ID = OSSYS_CALLBACK_EXCLUDEDAPP.CALLBACKID 
                    LEFT JOIN OSSYS_APPLICATION ON OSSYS_CALLBACK_EXCLUDEDAPP.APPLICATIONKEY = OSSYS_APPLICATION." + keyColumn + @"
                    LEFT JOIN OSSYS_CALLBACK_EXCLUDEDESPACE ON OSSYS_CALLBACK.ID = OSSYS_CALLBACK_EXCLUDEDESPACE.CALLBACKID 
                    LEFT JOIN OSSYS_ESPACE ON OSSYS_CALLBACK_EXCLUDEDESPACE.ESPACEKEY = OSSYS_ESPACE.SS_KEY
                    LEFT JOIN OSSYS_CALLBACKTYPE ON OSSYS_CALLBACK.CALLBACKTYPEID = OSSYS_CALLBACKTYPE.ID
                    LEFT JOIN OSSYS_CALLBACKLOCATION ON OSSYS_CALLBACK.CALLBACKLOCATIONID = OSSYS_CALLBACKLOCATION.ID 
                  WHERE (@SHOWINACTIVE=1 OR OSSYS_CALLBACK.ISACTIVE = 1) AND NOT(OSSYS_CALLBACKTYPE.LABEL IS NULL) AND NOT(OSSYS_CALLBACKTYPE.LABEL='Dynamic')
                  ORDER BY OSSYS_CALLBACKLOCATION." + orderColumn + ", OSSYS_CALLBACK." + orderColumn + ", OSSYS_CALLBACK.CALLBACKNAME");
            cmd.CreateParameter("@SHOWINACTIVE", DbType.Int32, showInactive);
            return cmd.ExecuteReader();
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public void Script_CreateOrUpdate(Transaction tran, string name, string url, string script, string location, int order, string description) {
            string orderColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("ORDER");
            Command cmd = tran.CreateCommand(
                @"SELECT OSSYS_CALLBACK.ID, OSSYS_CALLBACK.ISACTIVE FROM OSSYS_CALLBACK 
                    LEFT JOIN OSSYS_CALLBACKTYPE ON OSSYS_CALLBACK.CALLBACKTYPEID = OSSYS_CALLBACKTYPE.ID
                  WHERE OSSYS_CALLBACK.CALLBACKNAME = @NAME AND NOT(OSSYS_CALLBACKTYPE.LABEL IS NULL) AND NOT(OSSYS_CALLBACKTYPE.LABEL='Dynamic')");
            cmd.CreateParameter("@NAME", DbType.String, name);

            using (IDataReader reader = cmd.ExecuteReader()) {
                string scriptType = url.Equals("")? "Script": "External Script";
                if (reader.Read()) {
                    int isActive = reader.SafeGet<int>("ISACTIVE");
                    int id = reader.SafeGet<int>("ID");
                    reader.SafeClose();
                    cmd = tran.CreateCommand(
                        @"UPDATE OSSYS_CALLBACK SET CALLBACKNAME=@NAME, URL=@URL, DESCRIPTION=@DESCRIPTION," + orderColumn + @"=@SCRIPTORDER,
                                CALLBACKLOCATIONID=(SELECT ID FROM OSSYS_CALLBACKLOCATION WHERE LABEL = @LOCATION), 
                                CALLBACKTYPEID=(SELECT ID FROM OSSYS_CALLBACKTYPE WHERE LABEL = '" + scriptType + @"' ),
                                SCRIPT=@SCRIPT, ISACTIVE=@ISACTIVE WHERE OSSYS_CALLBACK.ID = @ID");

                    cmd.CreateParameter("@NAME", DbType.String, name);
                    cmd.CreateParameter("@URL", DbType.String, url);
                    cmd.CreateParameter("@DESCRIPTION", DbType.String, description);
                    cmd.CreateParameter("@SCRIPTORDER", DbType.Int32, order);
                    cmd.CreateParameter("@LOCATION", DbType.String, location);
                    cmd.CreateParameter("@SCRIPT", DbType.String, script);
                    cmd.CreateParameter("@ID", DbType.Int32, id);
                    cmd.CreateParameter("@ISACTIVE", DbType.Int32, isActive);
                    cmd.ExecuteNonQuery();

                } else {
                    reader.SafeClose();
                    cmd = tran.CreateCommand(
                        @"INSERT INTO OSSYS_CALLBACK (CALLBACKNAME, URL,DESCRIPTION, " + orderColumn + @", CALLBACKLOCATIONID, CALLBACKTYPEID, SCRIPT, ISACTIVE) SELECT
                              @NAME, @URL,@DESCRIPTION,@SCRIPTORDER,
                              (SELECT ID FROM OSSYS_CALLBACKLOCATION WHERE LABEL = @LOCATION),
                              (SELECT ID FROM OSSYS_CALLBACKTYPE WHERE LABEL = '" + scriptType + @"' ), @SCRIPT, 1 FROM DUAL");
                    cmd.CreateParameter("@NAME", DbType.String, name);
                    cmd.CreateParameter("@URL", DbType.String, url);
                    cmd.CreateParameter("@DESCRIPTION", DbType.String, description);
                    cmd.CreateParameter("@SCRIPTORDER", DbType.Int32, order);
                    cmd.CreateParameter("@LOCATION", DbType.String, location);
                    cmd.CreateParameter("@SCRIPT", DbType.String, script);
                    cmd.ExecuteNonQuery();
                }
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        [TestSyntaxValues(Values = new[] { TestSyntaxValues.AUTO, "0" }, Values2 = new[] { TestSyntaxValues.AUTO, "1" })]
        public IDataReader Script_GetLocations(Transaction tran, int locationId) {
            string orderColumn = tran.DatabaseServices.DMLService.Identifiers.EscapeIdentifier("ORDER");
            Command cmd;
            if (locationId != 0) {
                cmd = tran.CreateCommand(
                @"SELECT OSSYS_CALLBACKLOCATION.ID, OSSYS_CALLBACKLOCATION.LABEL, OSSYS_CALLBACKLOCATION." + orderColumn + @" FROM OSSYS_CALLBACKLOCATION 
                  WHERE OSSYS_CALLBACKLOCATION.ID = @LOCATIONID ORDER BY OSSYS_CALLBACKLOCATION." + orderColumn);
                cmd.CreateParameter("@LOCATIONID", DbType.Int32, locationId);
            } else {
                cmd = tran.CreateCommand(
                @"SELECT OSSYS_CALLBACKLOCATION.ID, OSSYS_CALLBACKLOCATION.LABEL, OSSYS_CALLBACKLOCATION." + orderColumn + @" FROM OSSYS_CALLBACKLOCATION
                  ORDER BY OSSYS_CALLBACKLOCATION." + orderColumn);
            }
            return cmd.ExecuteReader();
        }
        #endregion

        // more APIs to come...
    }
}
