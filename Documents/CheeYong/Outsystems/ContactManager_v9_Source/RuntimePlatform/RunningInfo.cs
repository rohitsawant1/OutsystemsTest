/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Reflection;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {
    /// <summary>
    /// Summary description for RunningInfo.
    /// </summary>
    public class RunningInfo {
        // these contain the uid/name of the eSpace and user of the running instance
        public static string EspaceUID;
        public static string EspaceName;
        public static string PAName;
        public static string PAUserName;

        protected static int espaceId;
        public static int ESpaceId {
            get { return espaceId; }
        }

        protected static int userId;
        public static int UserId {
            get { return userId; }
        }

        public static string ESpaceHash { get; set; }
        public static string ESpaceVersionToken { get; set; }
        public static int ESpaceVersionId { get; set; }
        public static bool DebugMode { get; set; }

        protected static int espaceRunningId;
        protected static int areaId;
        private static bool initialized;

        protected static string InitializingErrorMessage { get; set; }
        protected static bool IsInitialized {
            get { return initialized; }
        }

        public static void InitializeRunningInfo() {
            if (initialized) {
                return;
            }

            lock (typeof(RunningInfo)) {
                if (initialized) {
                    return;
                }

                AppInfo appInfo = AppInfo.GetAppInfo();
                if (appInfo == null) {
                    InitializingErrorMessage = "AppInfo is null";
                    return;
                }

                try {
                    EspaceName = appInfo.eSpaceName;
                    PAName = appInfo.PtaName;
                    PAUserName = appInfo.PtaUserName;

                    espaceId = appInfo.eSpaceId;
                    if (espaceId == 0) {
                        initialized = false;
                    }

                    if (PAName == "") {
                        PAName = null;
                    }

                    if (PAUserName == "") {
                        PAUserName = null;
                    } else if (PAUserName != null) {
                        using (Transaction tran = DatabaseAccess.ForSystemDatabase.GetCommitableTransaction()) {
                            // TODO RRCT: The user id could be generated at compile-time and dumped as a setting
                            int scTenantId = DBRuntimePlatform.Instance.GetTenantIdByName(tran, Constants.ServiceCenterName, Constants.ServiceCenterName);
                            userId = DBRuntimePlatform.Instance.GetUserId(tran, scTenantId, PAUserName);
                        }
                    }
                } catch (Exception e) {
                    initialized = false;
                    InitializingErrorMessage = "An exception ocurred during RunningInfo initialization: " + e.Message;
                    Log.ErrorLog.LogApplicationError(InitializingErrorMessage, e.StackTrace, null, "InitializeRunningInfo");
                    OSTrace.Error(InitializingErrorMessage, e);
                    throw;
                }

                initialized = true;
            }
        }

        public static void InvokeRegister(Transaction tran, string type) {
            try {
                Type t = Type.GetType(type, true);
                MethodInfo m = t.GetMethod("RegisterInfo");
                if (m == null) {
                    OSTrace.Debug("Unable to locate method Register in type " + t);
                    return;
                }

                m.Invoke(null, new object[] { tran });
            } catch (Exception e) {
                OSTrace.Error("Error Invoking Register", e);
                // #774299 - The exception is not propagated to avoid having broken references stopping the application load.
                // If a reference is required, a runtime error will be thrown when the application tries to access it.
            }
        }

        public static void Reset(Transaction tran) {
            DBRuntimePlatform.Instance.ResetArea(tran, areaId);
        }

        public static void RegisterAssembly(Transaction tran, string espaceName, string hash, bool inDebugMode, string debuggerVersion, string signature) {
            DBRuntimePlatform.Instance.CreateAssembly(tran, areaId, DBRuntimePlatform.Instance.GetEspaceId(tran, espaceName),
                hash, signature, inDebugMode, debuggerVersion);
        }

        public static void RegisterAssemblyDependency(Transaction tran, string consumerName, string producerName, string signatureInUse) {
            int assemblyId = DBRuntimePlatform.Instance.GetAssemblyId(tran, areaId, DBRuntimePlatform.Instance.GetEspaceId(tran, consumerName));
            int prodId = DBRuntimePlatform.Instance.GetEspaceId(tran, producerName);
            // The eSpace might have been deleted.... (#66927)
            if (prodId != 0)
                DBRuntimePlatform.Instance.CreateAssemblyDependency(tran, assemblyId, prodId, signatureInUse);
        }

        public static void RegisterEntryPoint(Transaction tran, string name, bool isDefault) {
            DBRuntimePlatform.Instance.CreateEntryPoint(tran, areaId, name, isDefault);
        }

        public static void RegisterExtensionAssembly() {
        }

        public RunningInfo() {
        }
    }
}
