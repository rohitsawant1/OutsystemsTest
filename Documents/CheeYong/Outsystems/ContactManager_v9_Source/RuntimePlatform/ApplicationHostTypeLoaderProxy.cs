/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.ComponentModel;
using System.Reflection;

namespace OutSystems.HubEdition.RuntimePlatform {
    /// <summary>
    /// This class creates a typeloader proxy, so we can execute logic from other vdirs
    /// This is used for QA ISAPI tests, and is referenced in OsISAPITestsAPI.xif extension
    /// </summary>

    [Serializable]
    public class ApplicationHostTypeLoaderProxy : ISite {

        private AssemblyName _assemblyName;
        private string _typeName;

        public ApplicationHostTypeLoaderProxy(AssemblyName assemblyName, string typeName) {
            _assemblyName = assemblyName;
            _typeName = typeName;
        }

        private Assembly _assembly;

        public virtual IContainer Container
        {
            get
            {
                AppDomain.CurrentDomain.AssemblyResolve += AssemblyResolve;
                _assembly = Assembly.Load(_assemblyName);
                Type type = _assembly.GetType(_typeName);
                
                return (IContainer)type.GetConstructor(new Type[] { }).Invoke(new object[] { }); ;
            }
        }

        private Assembly AssemblyResolve(object sender, ResolveEventArgs args) {
            if (args.Name == _assemblyName.Name) {
                return _assembly;
            } else {
                return null;
            }
        }

        #region ISite Members

        public object GetService(Type serviceType) { return null; }
        public IComponent Component { get { return null; } }
        public bool DesignMode { get { return false; } }
        public string Name { get { return string.Empty; } set { } }

        #endregion
    }
}
