/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;

namespace OutSystems.HubEdition.RuntimePlatform {

    public class SessionConfiguration {

        public delegate int SessionJobQuery(Command cmd);

        public class Errors {

            public const string CONNECTIONSTRING_NOT_FOUND = "The machine.config doesn't contain the session state connection string.";
            public const string UNABLE_TO_CONNECT = "Unable to connect to the session DB.";
            public const string TABLES_NOT_FOUND = "Unable to find the session DB tables.";
        }

        /// <summary>
        /// Gets the state DB connection string. This method also takes care of creating
        /// the extra table needed by the session management module, and will fail with
        /// an exception if it can't do that or if the session DB has not been initialized yet.
        /// </summary>
        /// <returns>The state DB connection string</returns>
        public static IRuntimeDatabaseConfiguration GetSessionConfiguration() {
            // Checks connection string

            CheckSessionDB(); 

            // returns configuration
            return DatabaseAccess.ForSession.DatabaseServices.DatabaseConfiguration;
        }

        private static void CheckSessionDB() {
            // check if the Session State Model exists
            try {
                DatabaseAccess.ForSession.DatabaseServices.SessionService.CheckSessionModel();
            } catch (Exception e) {
                throw new DataBaseException(Errors.TABLES_NOT_FOUND + ": " + e.Message, e);
            }
        }
    }
}
