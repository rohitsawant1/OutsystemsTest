/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {
    public static class RuntimePlatformSettings {

        public static class Misc {
            public static readonly RuntimeSetting<bool> GenerateLegacyExcell2003 = new RuntimeSetting<bool>("OutSystems.HubEdition.GenerateLegacyExcell2003", false);

            public static readonly RuntimeSetting<string> SettingsKeyPath = new RuntimeSetting<string>("OutSystems.HubEdition.SettingsKeyPath", string.Empty);

            public static readonly RuntimeSetting<string> DefaultErrorPage = new RuntimeSetting<string>("OutSystems.HubEdition.DefaultErrorPage", string.Empty);

            // not ossys_parameter. used in the web.config
            public static readonly RuntimeSetting<string> UnifiedEspaceKey = new RuntimeSetting<string>("OutSystems.HubEdition.UnifiedEspaceKey", string.Empty);

            public static readonly RuntimeSetting<int> DefaultWebReferenceTimeoutMs = new RuntimeSetting<int>("OutSystems.HubEdition.DefaultWebReferenceTimeoutMs", 100000);

            public static readonly RuntimeSetting<bool> DisableMetricsCollect = new RuntimeSetting<bool>("OutSystems.HubEdition.DisableMetricsCollect", false);

            public static readonly RuntimeSetting<string> HTTPtoHTTPSproxyHeader = new RuntimeSetting<string>("OutSystems.HubEdition.HTTPtoHTTPSproxyHeader", string.Empty);

            public static readonly RuntimeSetting<bool> JavascriptAPI_ShowHiddenFields = new RuntimeSetting<bool>("OutSystems.HubEdition.JavascriptAPI_ShowHiddenFields", false);
            
            public static readonly RuntimeSetting<int> ApplicationServerPort = new RuntimeSetting<int>("ApplicationServerPort", 80);

            public static readonly RuntimeSetting<int> ApplicationServerSecurePort = new RuntimeSetting<int>("ApplicationServerSecurePort", 443);

            public static readonly RuntimeSetting<string> InternalAddress = new RuntimeSetting<string>("InternalAddress", "127.0.0.1");

            public static readonly RuntimeSetting<bool> RuntimeExpect100Continue = new RuntimeSetting<bool>("Runtime.Expect100Continue", false);

            public static readonly RuntimeSetting<string> CallbackDebugInformationKey = new RuntimeSetting<string>("OutSystems.HubEdition.Callback.DebugInformationKey", string.Empty);

            public static readonly RuntimeSetting<bool> RequestTracerExposedIntegrationExecuted = new RuntimeSetting<bool>("RequestEvents.ExposedIntegrationExecuted.Enabled", false);

            public static readonly RuntimeSetting<bool> RequestTracerServiceActionExecuted = new RuntimeSetting<bool>("RequestEvents.ServiceActionExecuted.Enabled", true);

            public static readonly RuntimeSetting<bool> RequestTracerInternalCallExecuted = new RuntimeSetting<bool>("RequestEvents.ExposedIntegrationExecuted.Enabled", false);

            public static readonly RuntimeSetting<bool> QueuesAvailable = new RuntimeSetting<bool>("OutSystems.HubEdition.QueuesAvailable", false);

            public static readonly RuntimeSetting<bool> CompressHttpAjaxResponse = new RuntimeSetting<bool>("OutSystems.HubEdition.CompressHttpAjaxResponse", true);

            public static readonly RuntimeSetting<string> PluginDirectory = new RuntimeSetting<string>("OutSystems.PluginDirectory", string.Empty);
            
            public static readonly RuntimeSetting<int> SlowExtensionCallInMs = new RuntimeSetting<int>("OutSystems.HubEdition.Log.SlowExtensionCallInMs", 200);

            public static readonly RuntimeSetting<int> SlowIntegrationInMs = new RuntimeSetting<int>("OutSystems.HubEdition.Log.SlowIntegrationInMs", 200);

            public static readonly RuntimeSetting<int> SlowServiceActionInMs = new RuntimeSetting<int>("OutSystems.HubEdition.Log.SlowServiceActionInMs", 200);

            public static readonly RuntimeSetting<int> MaxLogsPerRequestAudit = new RuntimeSetting<int>("OutSystems.HubEdition.Log.MaxLogsPerRequestAudit", 3000);

            public static readonly RuntimeSetting<int> MaxLogsPerSecondInLogsEndpoint = new RuntimeSetting<int>("OutSystems.HubEdition.Log.MaxLogsPerSecondInLogsEndpoint", 200);

            public static readonly RuntimeSetting<int> MaxLogsPerRequestExtension = new RuntimeSetting<int>("OutSystems.HubEdition.Log.MaxLogsPerRequestExtension", 3000);

            public static readonly RuntimeSetting<string> XUACompatible = new RuntimeSetting<string>("OutSystems.WebPages.X-UA-Compatible", "IE=edge,chrome=1");
        }

        public static class Cache {
            public static readonly RuntimeSetting<string> CacheControlPath = new RuntimeSetting<string>("Cache.ControlPath", string.Empty);
        }

        public static class Module {
            public static string BuildKey(string settingName) {
                return "OutSystems.Module." + settingName;
            }

            public static readonly RuntimeSetting<int> Id = new RuntimeSetting<int>(BuildKey("Id"), 0);
            //TODO jmt: remove the version id from the appSettings.config, since it is already being dumped to the web.config
            public static readonly RuntimeSetting<int> VersionId = new RuntimeSetting<int>(BuildKey("VersionId"), 0);
            public static readonly RuntimeSetting<bool> IsActive = new RuntimeSetting<bool>(BuildKey("IsActive"), true);
            public static readonly RuntimeSetting<string> PersonalAreaName = new RuntimeSetting<string>(BuildKey("PersonalAreaName"), "");

            public static readonly RuntimeSetting<string> HMAC = new RuntimeSetting<string>("OutSystems.HubEdition.EspaceHMAC", "");
            public static readonly RuntimeSetting<string> CompilationDate = new RuntimeSetting<string>("OutSystems.HubEdition.EspaceCompilationDate", "");

            public static readonly RuntimeSetting<bool> PerformanceMonitoringEnabled = new RuntimeSetting<bool>(BuildKey("PerformanceMonitoringEnabled"), false);
            public static readonly RuntimeSetting<bool> AllowAuditing = new RuntimeSetting<bool>(BuildKey("AllowAuditing"), true);
            public static readonly RuntimeSetting<bool> AllowLogging = new RuntimeSetting<bool>(BuildKey("AllowLogging"), true);
            public static readonly RuntimeSetting<bool> RemoteShowStack = new RuntimeSetting<bool>(BuildKey("RemoteShowStack"), false);
            public static readonly RuntimeSetting<bool> HasEPAEnabled = new RuntimeSetting<bool>(BuildKey("HasEPAEnabled"), false);
            
            public static ModuleSetting ForKey(ObjectKey moduleKey) {
                return new ModuleSetting(moduleKey);
            }
            public static ModuleSetting ForKey(string moduleKey) {
                return ForKey(ObjectKey.Parse(moduleKey));
            }

            public class ModuleSetting {
                private ObjectKey ModuleKey;
                public ModuleSetting(ObjectKey ModuleKey) {
                    this.ModuleKey = ModuleKey;
                }
                private string GetKey() {
                    return BuildKey(ObjectKeyUtils.DatabaseValue(ModuleKey));
                }

                public RuntimeSetting<T> ForSetting<T>(string settingName, T defaultValue = default(T)) {
                    return new RuntimeSetting<T>(GetKey() + "." + settingName, defaultValue);
                }
            }
        }

        public static class Application {
            public static readonly RuntimeSetting<string> Key = new RuntimeSetting<string>("OutSystems.Application.Key", null);
            public static readonly RuntimeSetting<string> Name = new RuntimeSetting<string>("OutSystems.Application.Name", null);
            public static readonly RuntimeSetting<string> ModuleNames = new RuntimeSetting<string>("OutSystems.Application.ModuleNames", "");
            public static readonly RuntimeSetting<bool> Enabled = new RuntimeSetting<bool>("OutSystems.Application.Enabled", false);
            public static readonly RuntimeSetting<int> DefaultTimeout = new RuntimeSetting<int>("OutSystems.Application.DefaultTimeout", 0);
            public static readonly RuntimeSetting<bool> IsApplication = new RuntimeSetting<bool>("OutSystems.Application.IsApplication", false);
        }

        public static class Environment {
            public static readonly RuntimeSetting<string> Key = new RuntimeSetting<string>("OutSystems.Environment.Key", null);
            public static readonly RuntimeSetting<string> Name = new RuntimeSetting<string>("OutSystems.Environment.Name", null);
            // TODO RRCT #RRCT-699 jmt: this setting should be removed. an application should not be aware of Service Center
            public static readonly RuntimeSetting<int> ServiceCenterId = new RuntimeSetting<int>("OutSystems.Environment.ServiceCenterId", 1);
            public static readonly RuntimeSetting<string> AdministrationEmail = new RuntimeSetting<string>("OutSystems.Environment.AdministrationEmail", string.Empty);
            public static readonly RuntimeSetting<bool> ISAPIFilterEnabled = new RuntimeSetting<bool>("OutSystems.Environment.ISAPIFilterEnabled", true);
            public static readonly RuntimeSetting<bool> OptimizeTenantViewsCreation = new RuntimeSetting<bool>("OutSystems.Environment.OptimizeTenantViewsCreation", true);
        }

        public static class ScreenServices {
            public static readonly RuntimeSetting<bool> TraceAll = new RuntimeSetting<bool>("OutSystems.ScreenServices.REST.TraceAll", false);
            public static readonly RuntimeSetting<bool> TraceErrors = new RuntimeSetting<bool>("OutSystems.ScreenServices.REST.TraceErrors", false);
        }

        public static class ServiceAPIs {
            public static readonly RuntimeSetting<bool> TraceAll = new RuntimeSetting<bool>("OutSystems.ServiceAPIs.TraceAll", false);
            public static readonly RuntimeSetting<bool> TraceErrors = new RuntimeSetting<bool>("OutSystems.ServiceAPIs.TraceErrors", false);
            // request lifetime in seconds
            public static readonly RuntimeSetting<int> RequestLifetime = new RuntimeSetting<int>("OutSystems.ServiceAPIs.RequestLifetime", 300);
        }

        public static class SiteProperties {
            public static readonly RuntimeSetting<bool> LogRuntimeChanges = new RuntimeSetting<bool>("OutSystems.SiteProperties.LogRuntimeChanges", false);
        }

        public static class Plugin {
            private const string BaseKey = "OutSystems.Plugin.";

            public static class CacheInvalidation {
                public static readonly RuntimeSetting<string> CacheProviderKey = new RuntimeSetting<string>(BaseKey + "Caching.CacheProviderKey", "OutSystems.Plugin.RabbitMQPubSubCache", false);
                public static readonly RuntimeSetting<bool> EnableRabbitMQCacheInvalidation = new RuntimeSetting<bool>(BaseKey + "RabbitMQ.Enable", true);
                public static readonly RuntimeSetting<string> RabbitMQAddress = new RuntimeSetting<string>(BaseKey + "RabbitMQ.Address", "localhost");
                public static readonly RuntimeSetting<int> RabbitMQPort = new RuntimeSetting<int>(BaseKey + "RabbitMQ.Port", 5672);
                public static readonly RuntimeSetting<string> RabbitMQUsername = new RuntimeSetting<string>(BaseKey + "RabbitMQ.Username", "admin");
                public static readonly RuntimeSetting<string> RabbitMQPassword = new RuntimeSetting<string>(BaseKey + "RabbitMQ.Password", "", isEncrypted: true);
                public static readonly RuntimeSetting<string> RabbitMQVirtualHost = new RuntimeSetting<string>(BaseKey + "RabbitMQ.VirtualHost", "/outsystems");
                public static readonly RuntimeSetting<bool> RabbitMQTlsEnabled = new RuntimeSetting<bool>(BaseKey + "RabbitMQ.TlsEnabled", false);
                public static readonly RuntimeSetting<string> RabbitMQTlsServerCanonicalName = new RuntimeSetting<string>(BaseKey + "RabbitMQ.TlsServerCanonicalName", string.Empty);
            }

            public static string GetSettingKey(string pluginName, string moduleKey, string pluginKey, string settingName) {
                return BaseKey + string.Join(".", pluginName, moduleKey, pluginKey, settingName);
            }

            public static RuntimeSetting<T> GetSetting<T>(string pluginName, string moduleKey, string pluginKey, string settingName, T defaultValue, bool isEncrypted = false) {
                return new RuntimeSetting<T>(GetSettingKey(pluginName, moduleKey, pluginKey, settingName), defaultValue, isEncrypted);
            }
        }

        public static class Catalog {
            public class ModuleCatalogSetting {
                private string ModuleKey { get; set; }

                public ModuleCatalogSetting(string moduleKey) {
                    this.ModuleKey = moduleKey;
                }

                private string GetKey() {
                    return string.Format("OutSystems.Module.{0}.Catalog", ModuleKey);
                }

                public RuntimeSetting<string> Catalog {
                    get { return new RuntimeSetting<string>(GetKey(), Constants.MainDatabaseLogicalName); }
                }
            }

            public static ModuleCatalogSetting ForModule(string moduleKey) {
                return new ModuleCatalogSetting(moduleKey);
            }

            public class CatalogConfigurationSetting {
                private string CatalogName { get; set; }

                public CatalogConfigurationSetting(string catalogName) {
                    this.CatalogName = catalogName;
                }

                private string GetKey(string configName) {
                    return string.Format("OutSystems.Catalog.{0}.{1}", CatalogName, configName);
                }

                public RuntimeSetting<string> Name {
                    get { return new RuntimeSetting<string>(GetKey("Name"), Constants.MainDatabaseLogicalName); }
                }

                public RuntimeSetting<string> Catalog {
                    get { return new RuntimeSetting<string>(GetKey("Catalog"), Constants.MainDatabaseLogicalName); }
                }

                public RuntimeSetting<string> Schema {
                    get { return new RuntimeSetting<string>(GetKey("Schema"), string.Empty); }
                }

                public RuntimeSetting<string> Tablespace {
                    get { return new RuntimeSetting<string>(GetKey("Tablespace"), string.Empty); }
                }

                public RuntimeSetting<string> TablespaceIndex {
                    get { return new RuntimeSetting<string>(GetKey("TablespaceIndex"), string.Empty); }
                }

                public RuntimeSetting<string> Username {
                    get { return new RuntimeSetting<string>(GetKey("Username"), string.Empty); }
                }

                public RuntimeSetting<string> Password {
                    get { return new RuntimeSetting<string>(GetKey("Password"), string.Empty, true); }
                }

                public Dictionary<string, object> All {
                    get {
                        var name = Name.GetValue();
                        if (name.IsNullOrEmpty() || name.Equals(Constants.MainDatabaseLogicalName)) {
                            return null;
                        }

                        var details = new Dictionary<string, object>();

                        var catalog = Catalog.GetValue();
                        if (!string.IsNullOrEmpty(catalog)) {
                            details["Catalog"] = catalog;
                        }

                        var schema = Schema.GetValue();
                        if (!string.IsNullOrEmpty(schema)) {
                            details["Schema"] = schema;
                        }

                        var tablespace = Tablespace.GetValue();
                        if (!string.IsNullOrEmpty(tablespace)) {
                            details["Tablespace"] = tablespace;
                        }

                        var tablespaceIndex = TablespaceIndex.GetValue();
                        if (!string.IsNullOrEmpty(tablespaceIndex)) {
                            details["TablespaceIndex"] = tablespaceIndex;
                        }

                        var username = Username.GetValue();
                        if (!string.IsNullOrEmpty(username)) {
                            details["Username"] = username;
                        }

                        var password = Password.GetValue();
                        if (!string.IsNullOrEmpty(password)) {
                            details["Password"] = password;
                        }

                        return details;
                    }
                }
            }

            public static CatalogConfigurationSetting Configuration(string catalogName) {
                return new CatalogConfigurationSetting(catalogName);
            }
        }

        public static class InternalNetwork {
            public static readonly RuntimeSetting<string> TrustedProxyAddresses = new RuntimeSetting<string>("OutSystems.HubEdition.InternalNetwork.TrustedProxyAddresses", null);
            public static readonly RuntimeSetting<bool> EnableTrustedProxies = new RuntimeSetting<bool>("OutSystems.HubEdition.InternalNetwork.EnableTrustedProxies", true);
            public static readonly RuntimeSetting<bool> EnableBehaviour = new RuntimeSetting<bool>("OutSystems.HubEdition.InternalNetwork.EnableBehaviour", true);
            public static readonly RuntimeSetting<string> IPAdressList = new RuntimeSetting<string>("OutSystems.HubEdition.InternalNetwork.IPAdressList", null);
            public static readonly RuntimeSetting<bool> EnableFallbackToFirstTrustedWhenAllForwardedIPsTrusted = new RuntimeSetting<bool>("OutSystems.HubEdition.InternalNetwork.EnableFallbackToFirstTrustedWhenAllForwardedIPsTrusted", false);
            // TODO jmt: deprecated
            public static readonly RuntimeSetting<string> IPAdresses = new RuntimeSetting<string>("OutSystems.HubEdition.InternalNetwork.IPAdresses", null);
        }

        public static class Queries {
            public static readonly RuntimeSetting<int> SlowQueryInMs = new RuntimeSetting<int>("OutSystems.HubEdition.Log.SlowQueryInMs", 200);
            public static readonly RuntimeSetting<int> QueryRecursionLimit = new RuntimeSetting<int>("OutSystems.HubEdition.QueryRecursionLimit", 100);
            public static readonly RuntimeSetting<int> QueryTimeout = new RuntimeSetting<int>("OutSystems.HubEdition.QueryTimeout", 30);
        }

        public static class Debug {
            public static readonly RuntimeSetting<bool> UseShortRequestsOnDebugger = new RuntimeSetting<bool>("OutSystems.HubEdition.UseShortRequestsOnDebugger", DebuggerEvents.USE_SHORT_REQUESTS_DEFAULT);
            // TODO jmt: not used in hubserver
            public static readonly RuntimeSetting<bool> AllowDebuggingMobileAppsFromAnyIP = new RuntimeSetting<bool>("OutSystems.HubEdition.AllowDebuggingMobileAppsFromAnyIP", false);
            public static readonly RuntimeSetting<bool> DebugSetCurrentLocale = new RuntimeSetting<bool>("DebugSetCurrentLocale", false);
            public static readonly RuntimeSetting<bool> ForceClientSideTracing = new RuntimeSetting<bool>("OutSystems.Tracing.ForceClientSideTracing", false);
        }

        public static class Authentication {
            public static readonly RuntimeSetting<bool> ForceSecureAlgorithmsInAuthentication = new RuntimeSetting<bool>("OutSystems.HubEdition.ForceSecureAlgorithmsInAuthentication", false);
            public static readonly RuntimeSetting<bool> PasswordUpgradeOnLogin = new RuntimeSetting<bool>("OutSystems.HubEdition.PasswordUpgradeOnLogin", true);
            public static readonly RuntimeSetting<int> RememberLoginTimeoutInDays = new RuntimeSetting<int>("OutSystems.HubEdition.RememberLoginTimeoutInDays", 10);
            public static readonly RuntimeSetting<bool> UpdateUserLastLogin = new RuntimeSetting<bool>("OutSystems.Authentication.UpdateUserLastLogin", true);

            public static readonly RuntimeSetting<int> MobileLogin_Persistent_MaxIdleTimeInDays = new RuntimeSetting<int>("OutSystems.HubEdition.MobileLogin_Persistent_MaxIdleTimeInDays", 30);
            public static readonly RuntimeSetting<int> MobileLogin_Persistent_CookieExpirationInDays = new RuntimeSetting<int>("OutSystems.HubEdition.MobileLogin_Persistent_CookieExpirationInDays", 365);
            public static readonly RuntimeSetting<int> MobileLogin_Session_MaxIdleTimeInMinutes = new RuntimeSetting<int>("OutSystems.HubEdition.MobileLogin_Session_MaxIdleTimeInMinutes", 30);
            public static readonly RuntimeSetting<int> MobileLogin_CacheTimeInMinutes = new RuntimeSetting<int>("OutSystems.HubEdition.MobileLogin_CacheTimeInMinutes", 5);

            public static readonly RuntimeSetting<string> MobileLogin_AuthenticationHMACKey = new RuntimeSetting<string>("OutSystems.HubEdition.MobileLogin_AuthenticationHMACKey", null, true);
            public static readonly RuntimeSetting<string> MobileLogin_AuthenticationEncryptKey = new RuntimeSetting<string>("OutSystems.HubEdition.MobileLogin_AuthenticationEncryptKey", null, true);

            public static readonly RuntimeSetting<bool> EnforceSessionCookiesHttpOnly = new RuntimeSetting<bool>("OutSystems.HubEdition.EnforceSessionCookiesHttpOnly", true);
            public static readonly RuntimeSetting<bool> EnforceSessionCookiesSecure = new RuntimeSetting<bool>("OutSystems.HubEdition.EnforceSessionCookiesSecure", false);
            
            public static readonly RuntimeSetting<string> ReferencesAuthenticationKey = new RuntimeSetting<string>("OutSystems.HubEdition.References.AuthenticationEncryptKey", null, true);
            public static readonly RuntimeSetting<string> ReferencesHashKey = new RuntimeSetting<string>("OutSystems.HubEdition.References.HashKey", null, true);
            public static readonly RuntimeSetting<bool> ReferencesAllowLegacyAuth = new RuntimeSetting<bool>("OutSystems.HubEdition.References.AllowLegacyAuth", false);
        }

        public static class Security {
            public static readonly RuntimeSetting<bool> EnforceValidTypesOnBinaryEndpoints = new RuntimeSetting<bool>("OutSystems.Security.EnforceValidTypesOnBinaryEndpoints", false); //RRCT-2002
            public static readonly RuntimeSetting<bool> EnableSessionFixationProtection = new RuntimeSetting<bool>("EnableSessionFixationProtection", true);
            public static readonly RuntimeSetting<int> SessionFixationAllowedOverlapWindowInSecs = new RuntimeSetting<int>("SessionFixationAllowedOverlapWindowInSecs", 30);
            public static readonly RuntimeSetting<bool> DebugSessionFixationProtection = new RuntimeSetting<bool>("DebugSessionFixationProtection", false);
            public static readonly RuntimeSetting<bool> EnableHSTS = new RuntimeSetting<bool>("EnableHSTS", false);
            public static readonly RuntimeSetting<bool> EnableSecurityFeaturesISA = new RuntimeSetting<bool>("EnableSecurityFeaturesISA", true);

            public static readonly RuntimeSetting<bool> EnableContentSecurityPolicy = new RuntimeSetting<bool>("OutSystems.Security.ContentSecurityPolicy.EnableContentSecurityPolicy", false);
            public static readonly RuntimeSetting<bool> ForceIntegrationSecurity = new RuntimeSetting<bool>("OutSystems.Security.ContentSecurityPolicy.ForceIntegrationSecurity", false);
            public static readonly RuntimeSetting<bool> ForceScreensSecurity = new RuntimeSetting<bool>("OutSystems.Security.ContentSecurityPolicy.ForceScreensSecurity", false);
        }
            
        public static class ContentSecurityPolicy {
            public static class Directives {
                public const string BaseUri = "base-uri";
                public const string ChildSource = "child-src";
                public const string ConnectSource = "connect-src";
                public const string DefaultSource = "default-src";
                public const string FontSource = "font-src";
                public const string ImageSource = "img-src";
                public const string MediaSource = "media-src";
                public const string ObjectSource = "object-src";
                public const string PluginTypes = "plugin-types";
                public const string ScriptSource = "script-src";
                public const string StyleSource = "style-src";
                public const string FrameAncestors = "frame-ancestors";
                public const string FrameSource = "frame-src";
                public const string ReportTo = "report-to";
                public const string ReportUri = "report-uri";
                public const string Other = "other";
            }

            private const string BaseKey = "OutSystems.Security.ContentSecurityPolicy.";

            private static string GetKey(string directiveName) {
                return BaseKey + directiveName;
            }

            public static readonly RuntimeSetting<string> BaseUri = new RuntimeSetting<string>(GetKey(Directives.BaseUri), string.Empty);
            public static readonly RuntimeSetting<string> ChildSource = new RuntimeSetting<string>(GetKey(Directives.ChildSource), string.Empty);
            public static readonly RuntimeSetting<string> ConnectSource = new RuntimeSetting<string>(GetKey(Directives.ConnectSource), string.Empty);
            public static readonly RuntimeSetting<string> DefaultSource = new RuntimeSetting<string>(GetKey(Directives.DefaultSource), string.Empty);
            public static readonly RuntimeSetting<string> FontSource = new RuntimeSetting<string>(GetKey(Directives.FontSource), string.Empty);
            public static readonly RuntimeSetting<string> FrameAncestors = new RuntimeSetting<string>(GetKey(Directives.FrameAncestors), string.Empty);
            public static readonly RuntimeSetting<string> ImageSource = new RuntimeSetting<string>(GetKey(Directives.ImageSource), string.Empty);
            public static readonly RuntimeSetting<string> MediaSource = new RuntimeSetting<string>(GetKey(Directives.MediaSource), string.Empty);
            public static readonly RuntimeSetting<string> ObjectSource = new RuntimeSetting<string>(GetKey(Directives.ObjectSource), string.Empty);
            public static readonly RuntimeSetting<string> Other = new RuntimeSetting<string>(GetKey(Directives.Other), string.Empty);
            public static readonly RuntimeSetting<string> PluginTypes = new RuntimeSetting<string>(GetKey(Directives.PluginTypes), string.Empty);
            public static readonly RuntimeSetting<string> ScriptSource = new RuntimeSetting<string>(GetKey(Directives.ScriptSource), string.Empty);
            public static readonly RuntimeSetting<string> StyleSource = new RuntimeSetting<string>(GetKey(Directives.StyleSource), string.Empty);
            public static readonly RuntimeSetting<string> ReportTo = new RuntimeSetting<string>(GetKey(Directives.ReportTo), string.Empty);
        }

        public static class EMail {
            public static readonly RuntimeSetting<string> DefaultDnsName = new RuntimeSetting<string>("DefaultDnsName", string.Empty);

            public static readonly RuntimeSetting<string> ServerHost = new RuntimeSetting<string>("Email.Server.Host", string.Empty);
            public static readonly RuntimeSetting<string> DefaultOriginator = new RuntimeSetting<string>("Email.DefaultOriginator", string.Empty);
            public static readonly RuntimeSetting<string> DefaultOriginatorName = new RuntimeSetting<string>("Email.DefaultOriginatorName", string.Empty);
            public static readonly RuntimeSetting<bool> EnableEmails = new RuntimeSetting<bool>("Email.EnableEmails", true);
            public static readonly RuntimeSetting<string> TestEmails = new RuntimeSetting<string>("Email.TestEmails", string.Empty);
            public static readonly RuntimeSetting<string> UrlsToExcludeOnRender = new RuntimeSetting<string>("Email.UrlsToExcludeOnRender", string.Empty);

            // TODO jmt: no uses found in hubserver
            public static readonly RuntimeSetting<string> DefaultOriginatorCustomLogQueuePath = new RuntimeSetting<string>("Email.DefaultOriginatorCustomLogQueuePath", string.Empty);
        }

        public static class BPT {
            public static readonly RuntimeSetting<int> ProcessBackoffRetrybaseSec = new RuntimeSetting<int>("OutSystems.BPT.ProcessesBackoffRetrybaseSec", 60);
            public static readonly RuntimeSetting<double> ProcessBackoffConstant = new RuntimeSetting<double>("OutSystems.BPT.ProcessesBackoffConstant", 1.2);
            public static readonly RuntimeSetting<int> ActivitiesTimeout = new RuntimeSetting<int>("OutSystems.BPT.ActivitiesTimeout", 150);
            public static readonly RuntimeSetting<int> AutomaticActivitiesTimeout = new RuntimeSetting<int>("OutSystems.BPT.AutomaticActivitiesTimeout", 300);
        }

        public static class Timers {
            public static readonly RuntimeSetting<int> NumberOfRetries = new RuntimeSetting<int>("OutSystems.Timers.NumberOfRetries", 3);
        }

        public static class SMS {
            public static readonly RuntimeSetting<int?> BulkSmsMaxDestinations = new RuntimeSetting<int?>("OutSystems.HubEdition.BulkSmsMaxDestinations", null);
        }

        public static class Sandbox {
            public static readonly RuntimeSetting<bool> SandboxOperating = new RuntimeSetting<bool>("Sandbox.Operating", false);
            public static readonly RuntimeSetting<string> SandboxBoxesKeyName = new RuntimeSetting<string>("Sandbox.Boxes.KeyName", string.Empty);
            public static readonly RuntimeSetting<string> SandboxEmailQueuePath = new RuntimeSetting<string>("Sandbox.Email.QueuePath", ".\\Private$\\OutsystemsEmailNotifications");
            public static readonly RuntimeSetting<int> SandboxQueueMessagesMaxAge = new RuntimeSetting<int>("OutSystems.HubEdition.Log.QueueMessagesMaxAge", 1200);
        }

        public static class Processes {
            // Max time to wait for a conditional start to reach the ready state when invoking and explicit startactivity
            public static readonly RuntimeSetting<int> StartActivityReadyWaitTimeInSeconds = new RuntimeSetting<int>("BPT.StartActivityReadyWaitTimeInSeconds", 30);

            // When set, regular conditional start listeners are created on demand when invoking the explicit startactivity.
            // Conditional starts that register event listeners or have a child onready callback are not delayed even when this
            // setting is set to true.
            public static readonly RuntimeSetting<bool> ConditionalStartListenersCreatedOnDemand = new RuntimeSetting<bool>("BPT.ConditionalStartListenersCreatedOnDemand", false);

            // When enabled, allows to use lightweight processes (with a Start -> Automatic Activity -> End structure) that handle a database event, 
            // using a fast execution engine. 
            public static readonly RuntimeSetting<bool> EnableLightProcessExecution = new RuntimeSetting<bool>("BPT.EnableLightProcessExecution", false);
            public static readonly RuntimeSetting<bool> EnableImprovedDequeueEvent = new RuntimeSetting<bool>("BPT.EnableImprovedDequeueEvent", true);
        }

        public static class ViewState {
            public static readonly RuntimeSetting<bool> EncryptViewState = new RuntimeSetting<bool>("EncryptViewState", true);
            public static readonly RuntimeSetting<bool> EncryptViewStateWithVisitorId = new RuntimeSetting<bool>("EncryptViewStateWithVisitorId", true);
            public static readonly RuntimeSetting<bool> EncryptViewStateWithUserId = new RuntimeSetting<bool>("EncryptViewStateWithUserId", false);
        }

        public static class ExternalConnections {

            public static string BaseKey = "OutSystems.ExternalConnections.";

            public class DBConnectionSetting {
                private string DBConnectionname { get; set; }

                public DBConnectionSetting(string dbConnectionName) {
                    this.DBConnectionname = dbConnectionName;
                }
                public RuntimeSetting<string> DBConnection {
                    get { return new RuntimeSetting<string>(GetKey(), ""); }
                }

                public string GetKey() {
                    return string.Format("{0}{1}",BaseKey, DBConnectionname);
                }
            }
        }

        public static class Fixes {
		    // RPD-3565 advance query flag to control the fix of literals being misinterpreted as identifiers
            public static readonly RuntimeSetting<bool> LiteralsMisinterpretedAsIdentifiers = new RuntimeSetting<bool>("Fix_LiteralsMisinterpretedAsIdentifiers", true);
        }
    }
}
