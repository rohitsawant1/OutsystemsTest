/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Licensing;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.Logging;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {

    internal class LicenseProperties {
        #region License Runtime Parameters

        #region Multitenancy Allowed
        internal static readonly bool DefaultMultitenancyAllowed = true;
        private bool _multitenancyAllowed = true;
        internal bool MultitenancyAllowed {
            get { return _multitenancyAllowed; }
            set { _multitenancyAllowed = value; }
        }
        #endregion Multitenancy Allowed

        #region Application Monitoring
        internal static readonly bool DefaultApplicationMonitoringEnabled = true;
        private bool _applicationMonitoringEnabled = true;

        public bool ApplicationMonitoringEnabled {
            get { return _applicationMonitoringEnabled; }
            set {
                _applicationMonitoringEnabled = value;
                RuntimeLogger.ApplicationMonitoringEnabled = value;
            }
        }
        #endregion Application Monitoring

        #region Selective Logging
        internal static readonly bool DefaultSelectiveLoggingEnabled = true;
        private bool _selectiveLoggingEnabled = false;
        internal bool SelectiveLoggingEnabled {
            get { return _selectiveLoggingEnabled; }
            set { _selectiveLoggingEnabled = value; }
        }
        #endregion Selective Logging

        #region Platform Extensibility APIs
        internal static readonly bool DefaultPlatformExtensibilityAPIsEnabled = true;
        private bool _platformExtensibilityAPIsEnabled = false;
        internal bool PlatformExtensibilityAPIsEnabled {
            get { return _platformExtensibilityAPIsEnabled; }
            set { _platformExtensibilityAPIsEnabled = value; }
        }
        #endregion Platform Extensibility APIs

        #region Development Limitations
        internal static readonly string DefaultDevelopmentLimitURLParameter = string.Empty;
        private string _developmentLimitURLParameter = string.Empty;
        internal string DevelopmentLimitURLParameter {
            get { return _developmentLimitURLParameter; }
            set { _developmentLimitURLParameter = value ?? string.Empty; }
        }

        internal static readonly string DefaultDevelopmentLimitWatermark = string.Empty;
        private string _developmentLimitWatermark = string.Empty;
        internal string DevelopmentLimitWatermark {
            get { return _developmentLimitWatermark; }
            set { _developmentLimitWatermark = value ?? string.Empty; }
        }
        #endregion Development Limitations

        #region Multilingual
        internal static readonly bool DefaultMultilingualEnabled = true;
        private bool _multilingualEnabled = false;
        internal bool MultilingualEnabled {
            get { return _multilingualEnabled; }
            set { _multilingualEnabled = value; }
        }
        #endregion Multilingual

        #endregion License Runtime Parameters

        internal LicenseProperties() {
            _multitenancyAllowed = DefaultMultitenancyAllowed;
            ApplicationMonitoringEnabled = DefaultApplicationMonitoringEnabled; // enable application monitoring for SC
            _selectiveLoggingEnabled = DefaultSelectiveLoggingEnabled; // enable selective for SC;
            _platformExtensibilityAPIsEnabled = DefaultPlatformExtensibilityAPIsEnabled; // enable APIs by default
            _developmentLimitURLParameter = DefaultDevelopmentLimitURLParameter;
            _developmentLimitWatermark = DefaultDevelopmentLimitWatermark;
            _multilingualEnabled = DefaultMultilingualEnabled; // enable multilingual for ECT, EM, ...
        }
    }

    internal class LicenseParameters {
        internal volatile LicenseProperties licenseProperties;

        public LicenseParameters(ESpaceInfoForAppStart eSpaceInfo, ILicensingParametersRepository licensingRepo, bool useDefaults) {
            this.licenseProperties = new LicenseProperties();
        }

#region License Runtime Parameters

        #region Multitenancy Allowed

        internal bool MultitenancyAllowed {
            get => GetProperty(() => licenseProperties.MultitenancyAllowed);
        }
        #endregion Multitenancy Allowed

        #region Application Monitoring

        public bool ApplicationMonitoringEnabled {
            get => GetProperty(() => licenseProperties.ApplicationMonitoringEnabled);
            set { licenseProperties.ApplicationMonitoringEnabled = value; }

        }
        #endregion Application Monitoring

        #region Selective Logging

        internal bool SelectiveLoggingEnabled {
            get => GetProperty(() => licenseProperties.SelectiveLoggingEnabled);
        }
        #endregion Selective Logging

        #region Platform Extensibility APIs

        internal bool PlatformExtensibilityAPIsEnabled {
            get => GetProperty(() => licenseProperties.PlatformExtensibilityAPIsEnabled);
            set { licenseProperties.PlatformExtensibilityAPIsEnabled = value; }
        }
        #endregion Platform Extensibility APIs

        #region Development Limitations

        internal string DevelopmentLimitURLParameter {
            get => GetProperty(() => licenseProperties.DevelopmentLimitURLParameter);
        }

        internal string DevelopmentLimitWatermark {
            get => GetProperty(() => licenseProperties.DevelopmentLimitWatermark);
        }
        #endregion Development Limitations

        #region Multilingual

        internal bool MultilingualEnabled {
            get => GetProperty(() => licenseProperties.MultilingualEnabled);
        }
        #endregion Multilingual

        #endregion License Runtime Parameters

        /// <summary>
        /// this method centralizes the logic to obtain the property value
        /// </summary>
        /// <typeparam name="T">the generic type</typeparam>
        /// <param name="updatedVariable">the delegate function to return the property value</param>
        /// <returns>the variable updated</returns>
        private T GetProperty<T>(Func<T> updatedVariable) {
            return updatedVariable();
        }
    }
}
