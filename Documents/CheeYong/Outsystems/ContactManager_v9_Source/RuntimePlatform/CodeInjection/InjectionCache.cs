/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Linq;
using OutSystems.HubEdition.RuntimePlatform.Callbacks.Invoke;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Callbacks;
using System.Web;
using OutSystems.RuntimeCommon;
using System.Collections;
using OutSystems.ObjectKeys;

namespace OutSystems.HubEdition.RuntimePlatform {
    public sealed class InjectionCache {

        private IEnumerable<ICodeInjectionElement> _injectionElements;
        private IEnumerable<AbstractCallback.EventListener> _callbackListeners;

        private const int MAX_ERRORS_IN_APPLICATION_LIFETIME = 5;
        private IDictionary<AbstractCallback, int> _errorsInCallbacks;

        public InjectionCache(IEnumerable<ICodeInjectionElement> injectionElements, IEnumerable<AbstractCallback.EventListener> listeners) {
            _injectionElements = injectionElements;
            _callbackListeners = listeners;

            _errorsInCallbacks = new Dictionary<AbstractCallback, int>();
        }

        private IEnumerable<AbstractCallback.EventListener> GetApplicableListeners(CallbackEvent evt, int espaceId, int? tenantId) {
            return _callbackListeners.Where(l => l.AppliesToEvent(evt) && l.AppliesToTenant(espaceId, tenantId));
        }

        public void RunCallbacks(AppInfo app, SessionInfo session, CallbackEvent evt) {
            RunCallbacks(app, session, evt, app.eSpaceId, session == null ? (int?)null : app.Tenant.Id);
        }

        public void RunCallbacks(AppInfo app, SessionInfo session, CallbackEvent evt, int espaceId, int? tenantId) {
            if (evt == CallbackEvent.ApplicationStart || evt == CallbackEvent.InvalidateCache) {
                return;
            }

            var invokedCallbacks = new HashSet<AbstractCallback>();
            foreach (var l in GetApplicableListeners(evt, espaceId, tenantId).Where(l => l.NeedsInvoke(app, session, evt))) {
                if (!invokedCallbacks.Contains(l.Callback) && !IsBroken(l.Callback)) {
                    try {
                        l.Callback.StoreResults(evt, app, session, l.Callback.Invoke(app, session, l));
                    } catch (Exception e) {
                        RegisterError(l.Callback, evt, app, e);
                    }

                    invokedCallbacks.Add(l.Callback);
                }
            }
        }

        public IEnumerable<string> RetrieveContentInjection(CodeInjectionFactory.Locations location, bool allowsCallbacks, AppInfo app, SessionInfo session, Callbacks.CallbackPageContext context) {

            foreach (var c in _injectionElements.Where(c => !IsBroken(c))) {
                string content = string.Empty;
                    if (c.GetLocation() == location) {
                        var callback = c as AbstractCallback;
                        if (callback != null) {
                            if (allowsCallbacks) {
                                try {
                                    content = callback.RetrieveContentInjection(app, session, context);
                                } catch (Exception e) {
                                    RegisterError(callback, CallbackEvent.Unknown, app, e);
                                }
                            }
                        } else {
                            var js = c as InjectedJavascript;
                            if (!app.OsContext.hasDisabledScript(js.Name) && !app.OsContext.hasDisabledScript("")) {
                                content = js.Dump();
                            }
                        }
                    }
                yield return content;
            }
        }

        private bool IsBroken(ICodeInjectionElement element) {
            var callback = element as AbstractCallback;
            if (callback == null) {
                return false;
            }
            int errors = 0;
            _errorsInCallbacks.TryGetValue(callback, out errors);
            return errors >= MAX_ERRORS_IN_APPLICATION_LIFETIME;
        }

        private void RegisterError(AbstractCallback callback, CallbackEvent evt, AppInfo app, Exception e) {
            int eSpaceId = 0;
            int tenantId = 0;
            HeContext heContext = null;

            try {
                eSpaceId = (app != null? app.eSpaceId : 0);
                tenantId = (app != null && HttpContext.Current != null? app.Tenant.Id : 0);
                
                if (app != null) {
                    heContext =  app.OsContext;
                }
            } catch {
            }

            int errors = 0;
            _errorsInCallbacks.TryGetValue(callback, out errors);
            _errorsInCallbacks[callback] = (errors + 1);

            ErrorLog.LogApplicationError(
                eSpaceId,
                tenantId,
                "Error invoking callback " + callback.GetType().FullName + " on event " + evt.ToString() + ": " + e.Message,
                e, 
                heContext,
                "Callback");
        }
    }
}