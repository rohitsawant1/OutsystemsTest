/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.RuntimePlatform.Callbacks.Invoke;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform.Callbacks {
    [Serializable]
    public abstract class AbstractContentCallback : AbstractCallback {
        public AbstractContentCallback(int callbackId, CodeInjectionFactory.Locations locationId, AbstractStringCallbackInvoke invoke)
            : base(callbackId, locationId, invoke) {
        }

        public sealed override object Invoke(AppInfo app, SessionInfo session, AbstractCallback.EventListener listener) {
            return InvokeInner(app, session, listener);
        }
        protected virtual string InvokeInner(AppInfo app, SessionInfo session, AbstractCallback.EventListener listener) {
            return (string) base.Invoke(app, session, listener);
        }

        public sealed override void StoreResults(CallbackEvent evt, AppInfo app, SessionInfo session, object results) {
            StoreResults(evt, app, session, (string) results);
        }

        public sealed override string RetrieveContentInjection(AppInfo app, SessionInfo session, CallbackPageContext context) {
            if (app.Context.Request.UserAgent != null &&
                app.Context.Request.UserAgent.Contains("RichMail") || 
                app.OsContext.ResponseDisabledTaskBox) {
                // disable content injection for RichMail requests and when taskbox is disabled
                return string.Empty;
            } else {
                return PostProcess(RetrieveContentInjectionInner(app, session, context), context);
            }
        }

        private string PostProcess(string content, CallbackPageContext context) {
            return content.
                Replace("%USER_ID%", context.UserId.ToString()).
                Replace("%ESPACENAME%", context.ESpaceName).
                Replace("%ESPACEKEY%", context.ESpaceKey.ToString()).
                Replace("%OSPAGENAME%", context.WebScreenName).
                Replace("%OSPAGEINFOFORJAVASCRIPT%", context.OsPageInfo).
                Replace("%EMPTY%", string.Empty); // the %EMPTY% must be the last one to allow escaping
        }

        protected abstract string RetrieveContentInjectionInner(AppInfo app, SessionInfo session, CallbackPageContext context);

        protected abstract void StoreResults(CallbackEvent evt, AppInfo app, SessionInfo session, string results);

        #region Utils

        protected void StoreResultsInStorage(CallbackResultStorage storage, string results) {
            base.StoreResultsInStorage(storage, results);
        }

        protected new string RetrieveResultsFromStorage(CallbackResultStorage storage) {
            return (string) base.RetrieveResultsFromStorage(storage);
        }
        #endregion
    }
}