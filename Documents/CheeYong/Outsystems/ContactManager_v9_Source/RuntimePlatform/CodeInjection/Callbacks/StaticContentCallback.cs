/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.RuntimePlatform.Callbacks.Invoke;

namespace OutSystems.HubEdition.RuntimePlatform.Callbacks {
    [Serializable]
    public partial class StaticContentCallback : AbstractContentCallback {
        public StaticContentCallback(int callbackId, CodeInjectionFactory.Locations locationId, AbstractStringCallbackInvoke invoke)
            : base(callbackId, locationId, invoke) {
        }

        protected sealed override string InvokeInner(AppInfo app, SessionInfo session, AbstractCallback.EventListener listener) {
            return Invoke(app, listener);
        }

        protected virtual string Invoke(AppInfo app, AbstractCallback.EventListener listener) {
            return base.InvokeInner(app, null, listener);
        }

        public override sealed AbstractCallback.EventListener BuildEventListener(CallbackEvent evt, int espaceId, int tenantId) {
            return BuildEventListenerInner(evt, espaceId, tenantId);
        }

        protected sealed override void StoreResults(CallbackEvent evt, AppInfo app, SessionInfo session, string results) {
            StoreResultsInner(app, results);
        }

        protected sealed override string RetrieveContentInjectionInner(AppInfo app, SessionInfo session, CallbackPageContext context) {
            return RetrieveContentInjection(app, context);
        }

        protected virtual StaticContentCallback.EventListener BuildEventListenerInner(CallbackEvent evt, int espaceId, int tenantId) {
            return new StaticContentCallback.EventListener(this, evt, espaceId, tenantId);
        }

        protected virtual void StoreResultsInner(AppInfo app, string results) {
            StoreResultsInStorage(app.CallbackResults, results);
        }

        protected virtual string RetrieveContentInjection(AppInfo app, CallbackPageContext context) {
            string content = RetrieveContentInjectionInner(app, context);
            if (IsLocalizable && content == null) {
                // This may happen in sessions with different locales, in the first time the callback results are rendered
                StoreResultsInner(app, Invoke(app, null));
                content = RetrieveContentInjectionInner(app, context);
            }

            return content;
        }

        protected virtual string RetrieveContentInjectionInner(AppInfo app, CallbackPageContext context) {
            return RetrieveResultsFromStorage(app.CallbackResults);
        }

        protected virtual bool IsAlreadyCached(AppInfo app) {
            string locale = EffectiveLocale;
            if (locale != null) {
                return app.CallbackResults.Has(this._id, locale);
            } else {
                return app.CallbackResults.HasSingleton(this._id);
            }
        }
    }
}