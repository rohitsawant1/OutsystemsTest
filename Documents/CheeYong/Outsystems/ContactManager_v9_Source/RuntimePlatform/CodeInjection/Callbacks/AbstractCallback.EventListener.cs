/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace OutSystems.HubEdition.RuntimePlatform.Callbacks {
    public abstract partial class AbstractCallback {
        public class EventListener {
            private AbstractCallback _callback;
            protected CallbackEvent _evt;
            private int _espaceId;
            private int _tenantId;

            public EventListener(AbstractCallback callback, CallbackEvent evt, int espaceId, int tenantId) {
                _callback = callback;
                _evt = evt;
                _espaceId = espaceId;
                _tenantId = tenantId;
            }

            /// <summary>
            /// Calling this method makes sure every event listener is bound to the same callback object
            /// </summary>
            public void NormalizeCallback(HashSet<AbstractCallback> callbacks) {
                _callback = callbacks.FirstOrDefault(c => c.Equals(_callback));
            }

            public AbstractCallback Callback {
                get { return _callback; }
            }


            public bool AppliesToEvent(CallbackEvent evt) {
                return _evt == evt || _callback.ForceHandleEvent(evt);
            }
            public bool AppliesToTenant(int espaceId, int? tenantId) {
                return (_espaceId == 0 && (tenantId == null || _tenantId == 0 || _tenantId == tenantId)) ||
                       (_espaceId == espaceId && (tenantId == null || _tenantId == 0 || _tenantId == tenantId));
            }

            public virtual bool NeedsInvoke(AppInfo app, SessionInfo session, CallbackEvent triggeredEvt) {
                if (!_callback.IsLocalizable && triggeredEvt == CallbackEvent.ChangeLocale) {
                    return false;
                } else {
                    return true;
                }
            }
            
            public CallbackEvent Event { get { return _evt; } }

            public override int GetHashCode() {
                return (_callback == null ? 0 : _callback.GetHashCode()) ^
                       _evt.GetHashCode() ^
                       _espaceId.GetHashCode() ^
                       _tenantId.GetHashCode();
            }

            public override bool Equals(object obj) {
                    var other = obj as EventListener;
                    return this == other;
            }

            public static bool operator ==(EventListener listener1, EventListener listener2) {
                if (ReferenceEquals(listener1, null)) {
                    return ReferenceEquals(listener2, null);
                }
                if (ReferenceEquals(listener2, null)) {
                    return false;
                }

                return ((listener1._callback == null && listener2._callback == null)
                        || (listener1._callback != null && listener1._callback.Equals(listener2._callback)))
                        && listener1._evt.Equals(listener2._evt)
                        && (listener1._espaceId == listener2._espaceId)
                        && (listener1._tenantId == listener2._tenantId);
            }

            public static bool operator !=(EventListener listener1, EventListener listener2) {
                return !(listener1 == listener2);
            }
        }
    }
}