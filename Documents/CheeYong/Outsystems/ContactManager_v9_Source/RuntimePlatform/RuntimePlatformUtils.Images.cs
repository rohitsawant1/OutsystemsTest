/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using OutSystems.RuntimeCommon.Cryptography;

namespace OutSystems.HubEdition.RuntimePlatform {

    partial class RuntimePlatformUtils {
        public static class Images {
            private static readonly string PRIVATE_SALT = "aG5OOTNKM0dYaENoeVFxdGdFSVo0b3U0cWpjcHpHMFVYZFhub0ljdkplck00bkhJSTFEWGJEZXlmMVVKQTRyM09wMUs0ZUFxVUR4UGlRcTl0Qm9ORE5oZlY5UWFsVVZ1eGJQeUViZkJZbWZvc3cwbEdLRmt2VEt2VjlXSU1Fb2Zzd2w2eVE2UlN4NERpQTNQZHFkOGJVcXlRZm81a1czUm1UVkRhT2Exa2xnTmNvY3dxVUhKenBGWk94b2o0d3ltMkJ6aVRnZHBDWUU0UnIzOENvT1VvbDFUM25Xc3FDaWptcWNVZ1RWRHFPSERuSFM5MlFMQ1dZalRoUHh5bmhJMQ==";
            private static volatile string _databaseBinaryEnvironmentPassword;
            private static readonly object _lockObject = new object();
            private static volatile KeyData _keyData;

            private static string DatabaseBinaryEnvironmentPassword {
                get {
                    if (_databaseBinaryEnvironmentPassword == null) {
                        lock (_lockObject) {
                            if (_databaseBinaryEnvironmentPassword == null) {
                                string environmentKey = SecureConfidentialInformationEncryption.ReadKeyFromFile(RuntimePlatformSettings.Misc.SettingsKeyPath.GetValue());
                                _databaseBinaryEnvironmentPassword = GuidHelper.GenerateToBase64(PRIVATE_SALT + environmentKey);
                            }
                        }
                    }
                    return _databaseBinaryEnvironmentPassword;
                }
            }

            private static KeyData KeyData {
                get {
                    if (_keyData == null) {
                        _keyData = SymmCryptHelper.GetAES256KeyDataWithFixedIV(DatabaseBinaryEnvironmentPassword, Convert.FromBase64String(PRIVATE_SALT));
                    }
                    return _keyData;
                }
            }

            public static string EncryptImageDetails(string imageDetails) {
                return SymmCryptHelper.EncryptWithAES256(KeyData, imageDetails);
            }

            public static string DecryptImageDetails(string imageDetails) {
                return SymmCryptHelper.DecryptWithAES256(KeyData, imageDetails);
            }

            public static string GetDatabaseImagePath(string entityName, string attributeName, string idValue, string fileName) {
                string entityDetails = EncryptImageDetails(entityName + "/" + attributeName + "/" + idValue);
                entityDetails = entityDetails.Replace("+", "-").Replace("/", "_");    /* Replace invalid URL chars */
                return "_image" + WebPageExtension + "/" + entityDetails + "/" + fileName;
            }

            public static string GetImageFilenameForURL(string fileName) {
                return BuiltInFunction.EncodeUrl(fileName.Trim().Replace("/", "_").Replace("\\", "_").Replace("&", "_")).Replace("+", "%20");
            }
        }
    }
}
