/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Diagnostics;
using OutSystems.HubEdition.RuntimePlatform.Broadcasting;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition {

	[Serializable()]
	public class QueueStatus {
		public string QueueName;
        public long QueueSize;

        public QueueStatus(string name, long size) {
            this.QueueName = name;
            this.QueueSize = size;
        }
	}
	
	[Serializable()]
	public struct ThreadStatus {
		/// <summary>
		/// Thread name
		/// </summary>
		public string Name;

		/// <summary>
		/// Status name
		/// </summary>
		public string Status;

		/// <summary>
		/// How long the thread is in this status
		/// </summary>
		public int SecondsInStatus;

		/// <summary>
		/// How much time is it supposed to be in this status:
		///  "0" means it is not supposed to be in this status (it is an error situation)
		///  "-1" means the time in this status is not limited. 
		/// </summary>
		public int MaximumExpectedSeconds;

		/// <summary>
		/// Other details to appear in the monitoring user interface
		/// </summary>
		public string Detail;
	}


	[Serializable()]
	public class IPingServiceOutput {
		public QueueStatus[] queues;
		public ThreadStatus[] threads;
        public long utcInSeconds = (long)(DateTime.UtcNow - new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;
	}

    /// <summary>
	/// NOTE: Don't use ref or out parameters here because the Java Remoting doesn't support them...
	/// </summary>
    public interface IPingService {
        IPingServiceOutput PingService(PingMessage msg);
        void ReloadSettings(PingMessage msg);
        void ChangeLogLevel(TraceLevel level);
	}
}
