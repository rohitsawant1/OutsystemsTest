/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {    
    /// <summary>
    /// This class holds and serialize, in JSON format, the AJAX response with the snippets to replace in the page
    /// </summary>
    /// 
    public class OSJSONResponse
    {
        
        //Inspired by Solidus Snake, clone of Solid Snake... Just go and play Metal Gear Solid 2
        //....
        //Now for real, apparently forward slash is called solidus and backward slash is reverse solidus
        //according to RFC-7159 (https://tools.ietf.org/html/rfc7159)
        //This was added to keep a behaviour from JSONSharp lib https://stackoverflow.com/a/4556317
        public static JRaw EscapeSolidus(string val) {
            return new JRaw(JsonConvert.SerializeObject(val).Replace("/", "\\/"));
            }
        
        public void AddToOuter(String name, string value) {
            string tagName;
            string innerHTML;
            JObject attributes;
            SplitHTMLChunk(value.Trim(), out tagName, out innerHTML, out attributes);

            JObject splitOuter = new JObject();
            splitOuter.Add(innerValue, EscapeSolidus(innerHTML));
            splitOuter.Add(attributesValue, attributes);

            outer[name] = splitOuter;
        }

        private static Regex tagContentsRE = new Regex("^<[^>]+>", RegexOptions.Compiled | RegexOptions.Multiline);
        private static Regex tagRE = new Regex("^<([a-zA-Z0-9:_-]+)", RegexOptions.Compiled);
        private static Regex attributeRE = new Regex(" ([a-zA-Z0-9:_-]+) *= *('[^']*'|\"[^\"]*\")", RegexOptions.Compiled);
        private void SplitHTMLChunk(string value, out string tagName, out string innerHTML, out JObject attributes) {
            Debug.Assert(value.StartsWith("<"), "HTML chunk doesn't start with an HTML tag");
            Debug.Assert(value.EndsWith(">"), "HTML chunk doesn't end with an HTML tag");

            string tagContents = tagContentsRE.Match(value).Value;
            tagName = tagRE.Match(tagContents).Groups[1].Value;

            int innerStart = tagContents.Length;
            int lastClosingTag = value.LastIndexOf('<');
            int innerLength = lastClosingTag - innerStart;

            
            // Custom widgets can have initialization scripts appended in the end
            if (tagName.ToLower() != "script" && value.Substring(lastClosingTag).ToLower() == "</script>") {
                var lastScriptStart = value.LastIndexOf("<script", StringComparison.OrdinalIgnoreCase);
                var initScript = value.Substring(lastScriptStart);
                innerHTML = (innerLength > 0 ? value.Substring(innerStart, lastScriptStart - innerStart) : "");
                innerHTML += initScript;
            } else {
                innerHTML = (innerLength > 0 ? value.Substring(innerStart, innerLength) : "");
            }

            MatchCollection matches = attributeRE.Matches(tagContents);
            attributes = new JObject();
            foreach (Match m in matches) {
                string attrName = m.Groups[1].Value;
                string attrValue = m.Groups[2].Value;
                attrValue = attrValue.Substring(1, attrValue.Length - 2); // Remove the single or double quotes
                attributes[attrName] = attrValue;
            }
        }

		public void AddToList(String name, string html, string operation, int rowIndex, bool isTableRecord, string oddLineStyle, string evenLineStyle, bool useBullets) {
			JArray listItem = new JArray();
			listItem.Add(EscapeSolidus(html));
			int operationNumber = 0;
			switch (operation) {
				case "Append":
					operationNumber = 0;
					break;
				case "Insert":
					operationNumber = 1;
					break;
				case "Remove":
					operationNumber = 2;
					break;					
				case "Refresh":
					operationNumber = 3;
					break;
				default:
					Debug.Assert(false,"unknown list operation: " + operation);
					break;
			}
			listItem.Add(operationNumber);
			listItem.Add(rowIndex);
			listItem.Add(isTableRecord ? 1 : 0);
			if (isTableRecord) {
				listItem.Add(oddLineStyle);
				listItem.Add(evenLineStyle);
			} else {
				listItem.Add(useBullets ? 1 : 0);
			}

            list[name] = listItem;
		}


        /// <summary>
        /// Returns the "javascript" snippets to add to the page
        /// </summary>
		public JArray Js
        {
            get {
                return js;                
            }
        }

        public int JsCount() {
            return js.Count;
        }

		/// <summary>
		/// Adds a javascript snippet to the response
		/// </summary>
		/// <param name="value"></param>
        public void AddToJs(string value) {
			js.Add(value);
        }


		/// <summary>
		/// Inserts a javascript snippet to the response at a given index
		/// </summary>
		/// <param name="index"></param>
		/// <param name="value"></param>
		public void InsertToJs(int index, string value) {
			js.Insert(index, value);
		}


		/// <summary>
		/// Clears all javscript snippets in this response
		/// </summary>
		public void ClearJs() {
		    js.Clear();
		}


		/// <summary>
		/// Adds a filename to the block js filenames to include in the response
		/// </summary>
		/// <param name="jsList">js filename list</param>
        public void AddToBlockJs(IEnumerable<String> jsList) {
			foreach (string js in jsList) {
				blockJs.Add(js);
			}
		}

        public void AddToHidden(string name, string value) {
            hidden[name] = value;
            }
      
        public void AddOtherValues(string name, object value) {
            otherValues[name] = new JValue(value);
            }


        /// <summary>
        /// Serialize to a string in JSON format the snippets to replace in the page
        /// </summary>
        public override string ToString() {
            JObject ajaxResponse = new JObject();
            if (outer.Count > 0) {
                ajaxResponse.Add(outerValue, (outer));
            }
            if (list.Count > 0) {
                ajaxResponse.Add(listValue, (list));   
            }
            if (hidden.Count > 0) {
                ajaxResponse.Add(hiddenValue, (hidden));   
            }
            if (js.Count > 0) {
                ajaxResponse.Add(jsValue, Js);   
            }
            if (blockJs.Count > 0) {
                ajaxResponse.Add(blockJsValue, blockJs);   
            }
			
            foreach (var kvp in this.otherValues) {
                ajaxResponse[kvp.Key ] = kvp.Value;
            }

            return JsonConvert.SerializeObject(ajaxResponse);
        }

        JObject outer = new JObject();
		JObject list = new JObject();
        JObject hidden = new JObject();
        JObject otherValues = new JObject();
		JArray js = new JArray();
        JArray blockJs = new JArray();


        static string outerValue = "outers";
        static string innerValue = "inner";
        static string attributesValue = "attributes";
		static string listValue = "list";
        static string hiddenValue = "hidden";
		static string jsValue = "js";
		static string blockJsValue = "blockJs";
		
    }
}
