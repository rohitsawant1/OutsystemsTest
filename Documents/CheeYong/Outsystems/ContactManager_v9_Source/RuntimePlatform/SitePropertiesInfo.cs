/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Web;
using System.Web.Caching;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using OutSystems.Internal.Db;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;

namespace OutSystems.HubEdition.RuntimePlatform {

    public delegate void SitePropertiesInfoEventHandler(object sender, EventArgs e);
    
    public class SitePropertiesInfoReadOnly : IDisposable {

        public event SitePropertiesInfoEventHandler SitePropertiesInvalidated;

        protected void FireSitePropertiesInvalidated() {
            if (SitePropertiesInvalidated != null) {
                SitePropertiesInvalidated(this, new EventArgs());
            }
        }

        public event SitePropertiesInfoEventHandler SitePropertiesLoaded;

        protected void FireSitePropertiesLoaded() {
            if (SitePropertiesLoaded != null) {
                SitePropertiesLoaded(this, new EventArgs());
            }
        }
        
        private string tenantName;

        private int tenantId;

        private int espaceId;

        public virtual string TenantName {
            get {
                return tenantName;
            }
        }

        public virtual int TenantId {
            get {
                return tenantId;
            }
        }

        public virtual int ESpaceId {
            get {
                return espaceId;
            }
        }

        private volatile SitePropertiesCollection properties;

        public SitePropertiesCollection GetSitePropertiesCollection() {
            var currentProperties = properties;

            if (currentProperties == null) {
                bool loaded = false;
                lock (this) {
                    currentProperties = properties; // check if other thread initialized it
                    if (currentProperties == null) {
                        currentProperties = LoadPropertiesAndInitialize();
                        loaded = true;
                    }
                }

                if (loaded) {
                    FireSitePropertiesLoaded();
                }
            }

            return currentProperties;
        }

        /// <summary>
        /// This function returns the value for the specified Site Property. If it doesn't exist, it will return 'null'
        /// </summary>
        /// <param name="name">Site Property Name</param>
        /// <returns>The value for the Site Property with the given name, or 'null' if it doens't exist.</returns>
        public object GetSafe(string name) {
            if (name.IndexOf(".") >= 0) {
                // Legacy properties were accessed with "ESPACENAME.SITEPROPNAME"
                // Check if correct eSpace
                string ownerEspaceName = name.Split('.')[0];
                name = name.Split('.')[1];
                int ownerEspaceId = 0;

                var app = AppInfo.GetAppInfo();
                if (app.eSpaceName.EqualsIgnoreCase(ownerEspaceName)) {
                    ownerEspaceId = app.eSpaceId;
                }

                if (ownerEspaceId == 0) {
                    using (Transaction trans = DatabaseAccess.ForRuntimeDatabase.GetReadOnlyTransaction()) {
                        ownerEspaceId = DBRuntimePlatform.Instance.GetEspaceId(trans, ownerEspaceName);
                    }
                }

                if (ownerEspaceId != ESpaceId) {
                    return AppInfo.GetAppInfo().Espace(ownerEspaceId).EspaceSiteProperties.GetSafe(name);
                }
            }

            var currentProperties = GetSitePropertiesCollection();

            SiteProperty prop;
            if (currentProperties.TryGetValueByName(name, out prop)) {
                return prop.Value;
            }
            return null;
		}

		/// <summary>
		///  This property returns the value for the specified Site Property. If it doesn't exist, an exception is thrown
		///   If you want to check and handle 'null' yourself, call getSafe() instead!
		/// </summary>
		/// <param name="name">Site Property Name</param>
		public virtual object this[string name] {
			get {
				object ret = GetSafe(name);

				if (ret == null) {
					string message;
					if (name.IndexOf(".") >= 0) {
						message = String.Format("Could not obtain the value for '{0}' Site Property. Please check that eSpace '{1}' is not being published.", name.Split('.')[1], name.Split('.')[0] );
                    } else {
						message = String.Format("Could not obtain the value for '{0}' Site Property. Please republish the eSpace.", name );
					}
                    InvalidateSiteProperties(); // Got an unexpected error, so force a site properties reload.

                    OutSystems.RuntimeCommon.Log.EventLogger.WriteError(message);
					throw new InvalidOperationException(message);
                }

				return ret;
            }
            set {
                throw new InvalidOperationException();
            }
        }
        
        public SitePropertiesInfoReadOnly(string tenantName, int tenantId, int eSpaceId) {
            this.tenantName = tenantName;
            this.tenantId = tenantId;
            espaceId = eSpaceId;

            // Doesn't need lock, because it's in the constructor
            // No two threads can have a reference to the same object, before it's fully created
            // What need to be warranted is that this object is not constructed by two threads concurrently
            LoadPropertiesAndInitializeWithCache();
        }

        private SitePropertiesCollection LoadPropertiesAndInitialize() {
            var newPropertiesCollection = InnerLoadProperties();
            properties = newPropertiesCollection;
            return newPropertiesCollection;
        }

        private void LoadPropertiesAndInitializeWithCache() {
            var newPropertiesCollection = InnerLoadProperties();
            properties = newPropertiesCollection;
            InitCache();
        }

        protected virtual SitePropertiesCollection InnerLoadProperties() {
            return new SitePropertiesCollection(ReadSitePropertiesFromDatabase());
        }

        private IEnumerable<SiteProperty> ReadSitePropertiesFromDatabase() {
            yield return new SiteProperty("TenantName", TenantName);
            yield return new SiteProperty("TenantId", TenantId);

            // Read the properties from the database
            using (Transaction tran = DatabaseAccess.ForRuntimeDatabase.GetReadOnlyTransaction()) {
                using (IDataReader reader = DBRuntimePlatform.Instance.GetSitePropertiesInfo(tran, ESpaceId, TenantId)) {
                    while (reader.Read()) {
                        int defId = reader.SafeGet<int>("Def_Id");
                        ObjectKey propKey = ObjectKey.Parse(Convert.ToString(reader["SS_Key"]));
                        bool isShared = reader.SafeGet<bool>("Is_Shared");
                        string datatype = Convert.ToString(reader["Data_Type"]);
                        string databaseValue = reader.SafeGet<string>("Value", "");
                        string name = Convert.ToString(reader["Name"]);
                        yield return new SiteProperty(defId, name, propKey, isShared, databaseValue, datatype);
                    }
                }
            }
        }

        protected virtual void InitCache() {
            RuntimeCache.Instance.Listen(
                            new CacheKey("siteProperties_e" + ESpaceId + "_t" + TenantId),
                            new EspaceTenantDependency(ESpaceId, TenantId),
                            SitePropRemovedCallback);
        }

        protected void SitePropRemovedCallback() {
            InvalidateSiteProperties();
        }

        protected void InvalidateSiteProperties() {
            lock (this) {
                properties = null;
            }
            FireSitePropertiesInvalidated();
        }

        public void Dispose() {
            RuntimeCache.Instance.StopListen(new CacheKey("siteProperties_e" + ESpaceId + "_t" + TenantId));
        }
    }

    public class SitePropertiesInfo : SitePropertiesInfoReadOnly {

        public override object this[string name] {
            set {
                SiteProperty prop;
                var sitePropetiesCollection = GetSitePropertiesCollection();
                if (sitePropetiesCollection.TryGetValueByName(name, out prop)) {
                    // Check if it is a system var
                    if (prop.Key == null) {
                        throw (new ArgumentException("The site property '" + name + "' is a system property and cannot be changed."));
                    }
                    if (prop.Value != value) {
                        string databaseValue = prop.ChangeValue(value);

                        HeContext heContext = AppInfo.GetAppInfo().OsContext;
                        GenericExtendedActions.CreateOrUpdateSiteProperty(heContext.AppInfo.Tenant.Id, prop.DefId, prop.IsShared, databaseValue);
                        heContext.QueueEspaceToInvalidate(this.ESpaceId, prop.IsShared ? 0 : heContext.Session.TenantId);

                        if (ShouldLogRuntimeChanges) {
                            // Used only to troubleshoot #ABE-1097
                            Log.ErrorLog.StaticWrite(
                                DateTime.Now,
                                heContext.SessionID,
                                heContext.AppInfo.eSpaceId,
                                heContext.AppInfo.Tenant.Id,
                                heContext.Session.UserId,
                                $"The site property '{name}' had its value changed to '{databaseValue}'",
                                Environment.StackTrace,
                                "SiteProperties");
                        }
                    }
                } else {
                    throw (new ArgumentException("The site property '" + name + "' does not exist."));
                }
            }
        }

        public SitePropertiesInfo(TenantInfo tenant, int eSpaceId) 
            : base(tenant.Name, tenant.Id, eSpaceId) {

            ShouldLogRuntimeChanges = RuntimePlatformSettings.SiteProperties.LogRuntimeChanges.GetValue();
        }

        private readonly bool ShouldLogRuntimeChanges;

    }
}
