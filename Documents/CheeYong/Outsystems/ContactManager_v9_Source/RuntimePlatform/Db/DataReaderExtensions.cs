/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Diagnostics;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.RuntimePlatform {

    public static class DataReaderExtensions {

        [DebuggerNonUserCode]
        private static T ReadWrapper<T>(IDataReader reader, int i, string columnName, Func<object, IDataReader, int, T> convertFunction) {
            object column = null;
            try {
                column = reader[i];
                return convertFunction(column, reader, i);
            } catch (Exception excep) {
                throw new System.InvalidCastException("Could not assign '" + column + "' to '" + columnName + "'... " + excep.Message);
            }
        }
        
        [DebuggerNonUserCode]
        public static string ReadText(this IDataReader reader, int i, string columnName) {
            return ReadText(reader, i, columnName, string.Empty);
        }

        [DebuggerNonUserCode]
        public static string ReadText(this IDataReader reader, int i, string columnName, string defaultValue) {
            return ReadWrapper(reader, i, columnName, (column, r, index) => {
                if (column == System.DBNull.Value || column is string) {
                    return (column != System.DBNull.Value ? (string)column : defaultValue);
                } else {
                    if (column is DateTime) {
                        return ((DateTime)column).ToString(FormatInfo.GetOutputDateTimeFormatString(), FormatInfo.defaultHeCultureInfo);
                    } else {
                        return Convert.ToString(column);
                    }
                }
            });
        }

        [DebuggerNonUserCode]
        public static int ReadInteger(this IDataReader reader, int i, string columnName) {
            return ReadInteger(reader, i, columnName, 0);
        }

        [DebuggerNonUserCode]
        public static int ReadInteger(this IDataReader reader, int i, string columnName, int defaultValue) {
            return ReadWrapper(reader, i, columnName, (column, r, index) => {
                if (column == System.DBNull.Value) {
                    return defaultValue;
                } else if (column is int) {
                    return (int)column;
                } else return Convert.ToInt32(column);
                
            });
        }

        [DebuggerNonUserCode]
        public static long ReadLongInteger(this IDataReader reader, int i, string columnName) {
            return ReadLongInteger(reader, i, columnName, 0);
        }

        [DebuggerNonUserCode]
        public static long ReadLongInteger(this IDataReader reader, int i, string columnName, long defaultValue) {
            return ReadWrapper(reader, i, columnName, (column, r, index) => {
                if (column == System.DBNull.Value) {
                    return defaultValue;
                } else if (column is long) {
                    return (long)column;
                } else return Convert.ToInt64(column);
            });
        }

        [DebuggerNonUserCode]
        public static decimal ReadDecimal(this IDataReader reader, int i, string columnName) {
            return ReadDecimal(reader, i, columnName, 0.0M);
        }

        [DebuggerNonUserCode]
        public static decimal ReadDecimal(this IDataReader reader, int i, string columnName, decimal defaultValue) {
            return ReadWrapper(reader, i, columnName, (column, r, index) => {
                if (column == System.DBNull.Value || column is decimal) {
                    return (column != System.DBNull.Value ? (decimal)column : defaultValue);
                } else {
                    return Convert.ToDecimal(column, FormatInfo.Number);
                }
            });
        }

        [DebuggerNonUserCode]
        public static bool ReadBoolean(this IDataReader reader, int i, string columnName) {
            return ReadBoolean(reader, i, columnName, false);
        }

        [DebuggerNonUserCode]
        public static bool ReadBoolean(this IDataReader reader, int i, string columnName, bool defaultValue) {
            return ReadWrapper(reader, i, columnName, (column, r, index) => {
                if (column == System.DBNull.Value || column is bool) {
                    return (column != System.DBNull.Value ? (bool)column : defaultValue);
                } else {
                    return Convert.ToBoolean(column);
                }
            });
        }

        [DebuggerNonUserCode]
        public static DateTime ReadDateTime(this IDataReader reader, int i, string columnName) {
            return ReadDateTime(reader, i, columnName, new DateTime(1900, 1, 1, 0, 0, 0));
        }

        [DebuggerNonUserCode]
        public static DateTime ReadDateTime(this IDataReader reader, int i, string columnName, DateTime defaultValue) {
            return ReadWrapper(reader, i, columnName, (column, r, index) => {
                if (column == System.DBNull.Value || column is DateTime) {
                    return (column != System.DBNull.Value ? (DateTime)column : defaultValue);
                } else {
                    return Convert.ToDateTime(column, FormatInfo.DateTime);
                }
            });
        }

        [DebuggerNonUserCode]
        public static DateTime ReadDate(this IDataReader reader, int i, string columnName) {
            return ReadDate(reader, i, columnName, new DateTime(1900, 1, 1, 0, 0, 0));
        }

        [DebuggerNonUserCode]
        public static DateTime ReadDate(this IDataReader reader, int i, string columnName, DateTime defaultValue) {
            return reader.ReadDateTime(i, columnName, defaultValue);
        }

        [DebuggerNonUserCode]
        public static DateTime ReadTime(this IDataReader reader, int i, string columnName) {
            return ReadTime(reader, i, columnName, new DateTime(1900, 1, 1, 0, 0, 0));
        }

        [DebuggerNonUserCode]
        public static DateTime ReadTime(this IDataReader reader, int i, string columnName, DateTime defaultValue) {
            var time = reader.ReadDateTime(i, columnName, defaultValue);
            time = new DateTime(1900, 1, 1, time.Hour, time.Minute, time.Second);
            return time;
        }

        [DebuggerNonUserCode]
        private static string ReadString(this IDataReader reader, int i, string columnName, string defaultValue) {
            return ReadWrapper(reader, i, columnName, (column, r, index) => {
                if (column == System.DBNull.Value || column is string) {
                    return (column != System.DBNull.Value ? (string)column : defaultValue);
                } else {
                    return Convert.ToString(column);
                }
            });
        }

        [DebuggerNonUserCode]
        public static string ReadPhoneNumber(this IDataReader reader, int i, string columnName) {
            return ReadPhoneNumber(reader, i, columnName, string.Empty);
        }

        [DebuggerNonUserCode]
        public static string ReadPhoneNumber(this IDataReader reader, int i, string columnName, string defaultValue) {
            return reader.ReadString(i, columnName, defaultValue);
        }

        [DebuggerNonUserCode]
        public static string ReadEmail(this IDataReader reader, int i, string columnName) {
            return ReadEmail(reader, i, columnName, string.Empty);
        }

        [DebuggerNonUserCode]
        public static string ReadEmail(this IDataReader reader, int i, string columnName, string defaultValue) {
            return reader.ReadString(i, columnName, defaultValue);
        }

        [DebuggerNonUserCode]
        public static byte[] ReadBinaryData(this IDataReader reader, int i, string columnName) {
            return ReadBinaryData(reader, i, columnName, new byte[0]);
        }

        [DebuggerNonUserCode]
        public static byte[] ReadBinaryData(this IDataReader reader, int i, string columnName, byte[] defaultValue) {
            return ReadWrapper(reader, i, columnName, (column, r, index) => {
                return (column != System.DBNull.Value ? (byte[])column : defaultValue);
            });
        }

        [DebuggerNonUserCode]
        public static decimal ReadCurrency(this IDataReader reader, int i, string columnName) {
            return ReadCurrency(reader, i, columnName, 0.0M);
        }

        [DebuggerNonUserCode]
        public static decimal ReadCurrency(this IDataReader reader, int i, string columnName, decimal defaultValue) {
            return reader.ReadDecimal(i, columnName, defaultValue);
        }

        [DebuggerNonUserCode]
        public static int ReadEntityReference(this IDataReader reader, int i, string columnName) {
            return ReadEntityReference(reader, i, columnName, 0);
        }

        [DebuggerNonUserCode]
        public static int ReadEntityReference(this IDataReader reader, int i, string columnName, int defaultValue) {
            return reader.ReadInteger(i, columnName, defaultValue);
        }

        [DebuggerNonUserCode]
        public static long ReadEntityReferenceLongInteger(this IDataReader reader, int i, string columnName) {
            return ReadLongInteger(reader, i, columnName, 0);
        }

        [DebuggerNonUserCode]
        public static long ReadEntityReferenceLongInteger(this IDataReader reader, int i, string columnName, long defaultValue) {
            return reader.ReadLongInteger(i, columnName, defaultValue);
        }

        [DebuggerNonUserCode]
        public static string ReadEntityReferenceText(this IDataReader reader, int i, string columnName) {
            return ReadEntityReferenceText(reader, i, columnName, string.Empty);
        }

        [DebuggerNonUserCode]
        public static string ReadEntityReferenceText(this IDataReader reader, int i, string columnName, string defaultValue) {
            return reader.ReadString(i, columnName, defaultValue);
        }

    }
}
