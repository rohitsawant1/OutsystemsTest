/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssContactManager {

	public sealed partial class ENRecentItemEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase("794c445f-f27d-4f61-b47a-0da71440df68"), "OSUSR_dma_RecentItem1");
		}
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "id", "Id"
				}
				, { "tenantid", "TenantId"
				}
				, { "userid", "UserId"
				}
				, { "label", "Label"
				}
				, { "tag", "Tag"
				}
				, { "url", "URL"
				}
				, { "instant", "Instant"
				}
			};
		}
	} // ENRecentItemEntity

	/// <summary>
	/// Entity <code>ENRecentItemEntityRecord</code> that represents the Service Studio entity
	///  <code>RecentItem</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("RecentItem", "OttIDtYoMEebKFVmN4Hyxw", "X0RMeX3yYU+0eg2nFEDfaA", 0, "OSUSR_dma_RecentItem1", null)]
	[Serializable()]
	public partial struct ENRecentItemEntityRecord: ISerializable, ITypedRecord<ENRecentItemEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*Y+2exGUODUC5+aZAsn61sQ");
		private static readonly GlobalObjectKey IdTenantId = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*Y5GEDs4xxkG_gT4WwUaIMQ");
		private static readonly GlobalObjectKey IdUserId = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*md4PXuQ8SkKdequXz4PF7w");
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*iAEumvj0ekiZYdGgUbbl5w");
		private static readonly GlobalObjectKey IdTag = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*rjNA8szH40u8CZ_sf2TViQ");
		private static readonly GlobalObjectKey IdURL = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*_CrDvDrxSkqPOyZXhArsFg");
		private static readonly GlobalObjectKey IdInstant = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*DL8zlpOWw0GdGatHyRu6kQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(7, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TENANTID", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("TenantId")]
		private int _ssTenantId;
		public int ssTenantId {
			get {
				return _ssTenantId;
			}
			set {
				if ((_ssTenantId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssTenantId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USERID", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("UserId")]
		private int _ssUserId;
		public int ssUserId {
			get {
				return _ssUserId;
			}
			set {
				if ((_ssUserId!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssUserId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 100, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Label")]
		private string _ssLabel;
		public string ssLabel {
			get {
				return _ssLabel;
			}
			set {
				if ((_ssLabel!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssLabel = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TAG", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Tag")]
		private string _ssTag;
		public string ssTag {
			get {
				return _ssTag;
			}
			set {
				if ((_ssTag!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssTag = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("URL", 150, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("URL")]
		private string _ssURL;
		public string ssURL {
			get {
				return _ssURL;
			}
			set {
				if ((_ssURL!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssURL = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("INSTANT", 0, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Instant")]
		private DateTime _ssInstant;
		public DateTime ssInstant {
			get {
				return _ssInstant;
			}
			set {
				if ((_ssInstant!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssInstant = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENRecentItemEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssTenantId = 0;
			_ssUserId = 0;
			_ssLabel = "";
			_ssTag = "";
			_ssURL = "";
			_ssInstant = new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "RecentItem.Id", 0);
			ssTenantId = r.ReadEntityReference(index++, "RecentItem.TenantId", 0);
			ssUserId = r.ReadEntityReference(index++, "RecentItem.UserId", 0);
			ssLabel = r.ReadText(index++, "RecentItem.Label", "");
			ssTag = r.ReadText(index++, "RecentItem.Tag", "");
			ssURL = r.ReadText(index++, "RecentItem.URL", "");
			ssInstant = r.ReadDateTime(index++, "RecentItem.Instant", new DateTime(1900, 1, 1, 0, 0, 0));
			ChangedAttributes = new BitArray(7, false);
			OptimizedAttributes = new BitArray(7, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENRecentItemEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENRecentItemEntityRecord a, ENRecentItemEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssTenantId != b.ssTenantId) return false;
			if (a.ssUserId != b.ssUserId) return false;
			if (a.ssLabel != b.ssLabel) return false;
			if (a.ssTag != b.ssTag) return false;
			if (a.ssURL != b.ssURL) return false;
			if (a.ssInstant != b.ssInstant) return false;
			return true;
		}

		public static bool operator != (ENRecentItemEntityRecord a, ENRecentItemEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENRecentItemEntityRecord)) return false;
			return (this == (ENRecentItemEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssTenantId.GetHashCode()
				^ ssUserId.GetHashCode()
				^ ssLabel.GetHashCode()
				^ ssTag.GetHashCode()
				^ ssURL.GetHashCode()
				^ ssInstant.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENRecentItemEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(7, true);
			OptimizedAttributes = new BitArray(7, false);
			_ssId = 0;
			_ssTenantId = 0;
			_ssUserId = 0;
			_ssLabel = "";
			_ssTag = "";
			_ssURL = "";
			_ssInstant = new DateTime(1900, 1, 1, 0, 0, 0);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssTenantId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssTenantId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssTenantId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssUserId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssUserId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssUserId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssLabel", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssLabel' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssLabel = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssTag", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssTag' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssTag = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssURL", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssURL' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssURL = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssInstant", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssInstant' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssInstant = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENRecentItemEntityRecord Duplicate() {
			ENRecentItemEntityRecord t;
			t._ssId = this._ssId;
			t._ssTenantId = this._ssTenantId;
			t._ssUserId = this._ssUserId;
			t._ssLabel = this._ssLabel;
			t._ssTag = this._ssTag;
			t._ssURL = this._ssURL;
			t._ssInstant = this._ssInstant;
			t.ChangedAttributes = new BitArray(7);
			t.OptimizedAttributes = new BitArray(7);
			for (int i = 0; i < 7; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TenantId")) VarValue.AppendAttribute(recordElem, "TenantId", ssTenantId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "TenantId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".UserId")) VarValue.AppendAttribute(recordElem, "UserId", ssUserId, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "UserId");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Tag")) VarValue.AppendAttribute(recordElem, "Tag", ssTag, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Tag");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".URL")) VarValue.AppendAttribute(recordElem, "URL", ssURL, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "URL");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Instant")) VarValue.AppendAttribute(recordElem, "Instant", ssInstant, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Instant");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "tenantid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TenantId")) variable.Value = ssTenantId; else variable.Optimized = true;
			} else if (head == "userid") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".UserId")) variable.Value = ssUserId; else variable.Optimized = true;
			} else if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			} else if (head == "tag") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tag")) variable.Value = ssTag; else variable.Optimized = true;
			} else if (head == "url") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".URL")) variable.Value = ssURL; else variable.Optimized = true;
			} else if (head == "instant") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Instant")) variable.Value = ssInstant; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdTenantId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdUserId)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdLabel)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdTag)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdURL)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdInstant)) {
				return ChangedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdTenantId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdUserId)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdLabel)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdTag)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdURL)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdInstant)) {
				return OptimizedAttributes[6];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdTenantId) {
				return ssTenantId;
			} else if (key == IdUserId) {
				return ssUserId;
			} else if (key == IdLabel) {
				return ssLabel;
			} else if (key == IdTag) {
				return ssTag;
			} else if (key == IdURL) {
				return ssURL;
			} else if (key == IdInstant) {
				return ssInstant;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(7);
			OptimizedAttributes = new BitArray(7);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssTenantId = (int) other.AttributeGet(IdTenantId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdTenantId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdTenantId);
			ssUserId = (int) other.AttributeGet(IdUserId);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdUserId);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdUserId);
			ssLabel = (string) other.AttributeGet(IdLabel);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdLabel);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdLabel);
			ssTag = (string) other.AttributeGet(IdTag);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdTag);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdTag);
			ssURL = (string) other.AttributeGet(IdURL);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdURL);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdURL);
			ssInstant = (DateTime) other.AttributeGet(IdInstant);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdInstant);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdInstant);
		}
	} // ENRecentItemEntityRecord
	/// <summary>
	/// Structure <code>RCRecentItemRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCRecentItemRecord: ISerializable, ITypedRecord<RCRecentItemRecord> {
		private static readonly GlobalObjectKey IdRecentItem = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*yXq0WMBzVmD9rJ8tmZ1piw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("RecentItem")]
		public ENRecentItemEntityRecord ssENRecentItem;


		public static implicit operator ENRecentItemEntityRecord(RCRecentItemRecord r) {
			return r.ssENRecentItem;
		}

		public static implicit operator RCRecentItemRecord(ENRecentItemEntityRecord r) {
			RCRecentItemRecord res = new RCRecentItemRecord(null);
			res.ssENRecentItem = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENRecentItem.ChangedAttributes = value;
			}
			get {
				return ssENRecentItem.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCRecentItemRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENRecentItem = new ENRecentItemEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(7, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENRecentItem.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENRecentItem.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENRecentItem.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENRecentItem.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCRecentItemRecord r) {
			this = r;
		}


		public static bool operator == (RCRecentItemRecord a, RCRecentItemRecord b) {
			if (a.ssENRecentItem != b.ssENRecentItem) return false;
			return true;
		}

		public static bool operator != (RCRecentItemRecord a, RCRecentItemRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCRecentItemRecord)) return false;
			return (this == (RCRecentItemRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENRecentItem.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCRecentItemRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENRecentItem = new ENRecentItemEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENRecentItem", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENRecentItem' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENRecentItem = (ENRecentItemEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENRecentItem.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENRecentItem.InternalRecursiveSave();
		}


		public RCRecentItemRecord Duplicate() {
			RCRecentItemRecord t;
			t.ssENRecentItem = (ENRecentItemEntityRecord) this.ssENRecentItem.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENRecentItem.ToXml(this, recordElem, "RecentItem", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "recentitem") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".RecentItem")) variable.Value = ssENRecentItem; else variable.Optimized = true;
				variable.SetFieldName("recentitem");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENRecentItem.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENRecentItem.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdRecentItem) {
				return ssENRecentItem;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENRecentItem.FillFromOther((IRecord) other.AttributeGet(IdRecentItem));
		}
	} // RCRecentItemRecord
	/// <summary>
	/// RecordList type <code>RLRecentItemRecordList</code> that represents a record list of
	///  <code>RecentItem</code>
	/// </summary>
	[Serializable()]
	public partial class RLRecentItemRecordList: GenericRecordList<RCRecentItemRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCRecentItemRecord GetElementDefaultValue() {
			return new RCRecentItemRecord("");
		}

		public T[] ToArray<T>(Func<RCRecentItemRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRecentItemRecordList recordlist, Func<RCRecentItemRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLRecentItemRecordList(RCRecentItemRecord[] array) {
			RLRecentItemRecordList result = new RLRecentItemRecordList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLRecentItemRecordList ToList<T>(T[] array, Func <T, RCRecentItemRecord> converter) {
			RLRecentItemRecordList result = new RLRecentItemRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLRecentItemRecordList FromRestList<T>(RestList<T> restList, Func <T, RCRecentItemRecord> converter) {
			RLRecentItemRecordList result = new RLRecentItemRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRecentItemRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRecentItemRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRecentItemRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRecentItemRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(7, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCRecentItemRecord> NewList() {
			return new RLRecentItemRecordList();
		}


	} // RLRecentItemRecordList

	/// <summary>
	/// RecordList type <code>RLRecentItemList</code> that represents a record list of
	///  <code>RecentItem</code>
	/// </summary>
	[Serializable()]
	public partial class RLRecentItemList: GenericRecordList<ENRecentItemEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENRecentItemEntityRecord GetElementDefaultValue() {
			return new ENRecentItemEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENRecentItemEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLRecentItemList recordlist, Func<ENRecentItemEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLRecentItemList(ENRecentItemEntityRecord[] array) {
			RLRecentItemList result = new RLRecentItemList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLRecentItemList ToList<T>(T[] array, Func <T, ENRecentItemEntityRecord> converter) {
			RLRecentItemList result = new RLRecentItemList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLRecentItemList FromRestList<T>(RestList<T> restList, Func <T, ENRecentItemEntityRecord> converter) {
			RLRecentItemList result = new RLRecentItemList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLRecentItemList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRecentItemList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLRecentItemList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLRecentItemList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENRecentItemEntityRecord> NewList() {
			return new RLRecentItemList();
		}


	} // RLRecentItemList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateRecentItem
		/// </summary>

		public static void CreateRecentItem(HeContext heContext, RCRecentItemRecord inParamSource, out int outParamId) {
			outParamId = 0;

			ENRecentItemEntityRecord ssENRecentItem = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string insertSql =
				 "SET NOCOUNT ON; INSERT INTO " + ENRecentItemEntity.LocalViewName(null, null) + " (" +
				 " [TENANTID]" +
				 ", [USERID]" +
				 ", [LABEL]" +
				 ", [TAG]" +
				 ", [URL]" +
				 ", [INSTANT]" +
				 " ) VALUES (" +
				 " @ssTenantId" +
				 ", @ssUserId" +
				 ", @ssLabel" +
				 ", @ssTag" +
				 ", @ssURL" +
				 ", @ssInstant" +
				 " ) ; SELECT SCOPE_IDENTITY();";
				Command insertSqlCmd = trans.CreateCommand(insertSql);
				if ((ssENRecentItem.ssTenantId==0)) {
					insertSqlCmd.CreateParameter("@ssTenantId", DBNull.Value);
				} else {
					insertSqlCmd.CreateParameter("@ssTenantId", DbType.Int32, ssENRecentItem.ssTenantId);
				}
				if ((ssENRecentItem.ssUserId==0)) {
					insertSqlCmd.CreateParameter("@ssUserId", DBNull.Value);
				} else {
					insertSqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENRecentItem.ssUserId);
				}
				insertSqlCmd.CreateParameter("@ssLabel", DbType.String, ssENRecentItem.ssLabel);
				insertSqlCmd.CreateParameter("@ssTag", DbType.String, ssENRecentItem.ssTag);
				insertSqlCmd.CreateParameter("@ssURL", DbType.String, ssENRecentItem.ssURL);
				insertSqlCmd.CreateParameter("@ssInstant", DbType.DateTime, ssENRecentItem.ssInstant);
				outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateRecentItem", true), typeof(int));
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateRecentItem
		/// </summary>

		public static void CreateOrUpdateRecentItem(HeContext heContext, BitArray usedFields, RCRecentItemRecord inParamSource, out int outParamId) {
			outParamId = 0;

			ENRecentItemEntityRecord ssENRecentItem = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(7, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRecentItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TENANTID] = @ssTenantId"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserId"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LABEL] = @ssLabel"): parameters);
				parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TAG] = @ssTag"): parameters);
				parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[URL] = @ssURL"): parameters);
				parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INSTANT] = @ssInstant"): parameters);
				string whereCondition = " WHERE [ID] = @ssENRecentItemssId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					if ((ssENRecentItem.ssTenantId==0)) {
						sqlCmd.CreateParameter("@ssTenantId", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssTenantId", DbType.Int32, ssENRecentItem.ssTenantId);
					}
					counter++;
				}
				if (usedFields[2]) {
					if ((ssENRecentItem.ssUserId==0)) {
						sqlCmd.CreateParameter("@ssUserId", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENRecentItem.ssUserId);
					}
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssLabel", DbType.String, ssENRecentItem.ssLabel);
					counter++;
				}
				if (usedFields[4]) {
					sqlCmd.CreateParameter("@ssTag", DbType.String, ssENRecentItem.ssTag);
					counter++;
				}
				if (usedFields[5]) {
					sqlCmd.CreateParameter("@ssURL", DbType.String, ssENRecentItem.ssURL);
					counter++;
				}
				if (usedFields[6]) {
					sqlCmd.CreateParameter("@ssInstant", DbType.DateTime, ssENRecentItem.ssInstant);
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[INSTANT] = [INSTANT]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENRecentItemssId", DbType.Int32, ssENRecentItem.ssId);
				counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateRecentItem (update)", true);
				if (counter == 0) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENRecentItemEntity.LocalViewName(null, null) + " (" +
					 " [TENANTID]" +
					 ", [USERID]" +
					 ", [LABEL]" +
					 ", [TAG]" +
					 ", [URL]" +
					 ", [INSTANT]" +
					 " ) VALUES (" +
					 " @ssTenantId" +
					 ", @ssUserId" +
					 ", @ssLabel" +
					 ", @ssTag" +
					 ", @ssURL" +
					 ", @ssInstant" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					if ((ssENRecentItem.ssTenantId==0)) {
						insertSqlCmd.CreateParameter("@ssTenantId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssTenantId", DbType.Int32, ssENRecentItem.ssTenantId);
					}
					if ((ssENRecentItem.ssUserId==0)) {
						insertSqlCmd.CreateParameter("@ssUserId", DBNull.Value);
					} else {
						insertSqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENRecentItem.ssUserId);
					}
					insertSqlCmd.CreateParameter("@ssLabel", DbType.String, ssENRecentItem.ssLabel);
					insertSqlCmd.CreateParameter("@ssTag", DbType.String, ssENRecentItem.ssTag);
					insertSqlCmd.CreateParameter("@ssURL", DbType.String, ssENRecentItem.ssURL);
					insertSqlCmd.CreateParameter("@ssInstant", DbType.DateTime, ssENRecentItem.ssInstant);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateRecentItem", true), typeof(int));
				} else {
					outParamId = ssENRecentItem.ssId;
				}
			}
		}

		/// <summary>
		/// Action: DeleteRecentItem
		/// </summary>

		public static void DeleteRecentItem(HeContext heContext, int inParamId) {
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "DELETE " +
				 "FROM " + ENRecentItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteRecentItem", true);
			}
		}

		/// <summary>
		/// Action: GetRecentItem
		/// </summary>

		public static void GetRecentItem(HeContext heContext, int inParamId, out RCRecentItemRecord outParamRecord) {
			outParamRecord = new RCRecentItemRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [TENANTID]" +
				 ", [USERID]" +
				 ", [LABEL]" +
				 ", [TAG]" +
				 ", [URL]" +
				 ", [INSTANT]" +
				 " FROM " + ENRecentItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRecentItem", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(7, false)
						};
					} else
					throw new DataBaseException(ENRecentItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: GetRecentItemForUpdate
		/// </summary>

		public static void GetRecentItemForUpdate(HeContext heContext, int inParamId, out RCRecentItemRecord outParamRecord) {
			outParamRecord = new RCRecentItemRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [TENANTID]" +
				 ", [USERID]" +
				 ", [LABEL]" +
				 ", [TAG]" +
				 ", [URL]" +
				 ", [INSTANT]" +
				 "FROM " + ENRecentItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
				 "WHERE [ID] = @inParamId ";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetRecentItemForUpdate", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(7, false)
						};
					} else
					throw new DataBaseException(ENRecentItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: UpdateRecentItem
		/// </summary>

		public static void UpdateRecentItem(HeContext heContext, BitArray usedFields, RCRecentItemRecord inParamSource) {
			ENRecentItemEntityRecord ssENRecentItem = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(7, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENRecentItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TENANTID] = @ssTenantId"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERID] = @ssUserId"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LABEL] = @ssLabel"): parameters);
				parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TAG] = @ssTag"): parameters);
				parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[URL] = @ssURL"): parameters);
				parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[INSTANT] = @ssInstant"): parameters);
				string whereCondition = " WHERE [ID] = @ssENRecentItemssId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					if ((ssENRecentItem.ssTenantId==0)) {
						sqlCmd.CreateParameter("@ssTenantId", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssTenantId", DbType.Int32, ssENRecentItem.ssTenantId);
					}
					counter++;
				}
				if (usedFields[2]) {
					if ((ssENRecentItem.ssUserId==0)) {
						sqlCmd.CreateParameter("@ssUserId", DBNull.Value);
					} else {
						sqlCmd.CreateParameter("@ssUserId", DbType.Int32, ssENRecentItem.ssUserId);
					}
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssLabel", DbType.String, ssENRecentItem.ssLabel);
					counter++;
				}
				if (usedFields[4]) {
					sqlCmd.CreateParameter("@ssTag", DbType.String, ssENRecentItem.ssTag);
					counter++;
				}
				if (usedFields[5]) {
					sqlCmd.CreateParameter("@ssURL", DbType.String, ssENRecentItem.ssURL);
					counter++;
				}
				if (usedFields[6]) {
					sqlCmd.CreateParameter("@ssInstant", DbType.DateTime, ssENRecentItem.ssInstant);
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[INSTANT] = [INSTANT]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENRecentItemssId", DbType.Int32, ssENRecentItem.ssId);
				if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateRecentItem", true) <= 0)
				throw new DataBaseException(ENRecentItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENRecentItem.ssId + " was not updated");
			}
		}

	}
}

namespace ssContactManager {
	[XmlType("RecentItem")]
	public class WORCRecentItemRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("TenantId")]
		public int varWSTenantId;

		[System.Xml.Serialization.XmlElement("UserId")]
		public int varWSUserId;

		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		[System.Xml.Serialization.XmlElement("Tag")]
		public string varWSTag;

		[System.Xml.Serialization.XmlElement("URL")]
		public string varWSURL;

		[System.Xml.Serialization.XmlElement("Instant")]
		public DateTime varWSInstant;

		public WORCRecentItemRecord() {
			varWSId = (int) 0;
			varWSTenantId = (int) 0;
			varWSUserId = (int) 0;
			varWSLabel = (string) "";
			varWSTag = (string) "";
			varWSURL = (string) "";
			varWSInstant = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
		}

		public WORCRecentItemRecord(ENRecentItemEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSTenantId = (int) r.ssTenantId;
			varWSUserId = (int) r.ssUserId;
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
			varWSTag = BaseAppUtils.RemoveControlChars(r.ssTag);
			varWSURL = BaseAppUtils.RemoveControlChars(r.ssURL);
			varWSInstant = (DateTime) r.ssInstant;
		}

		public static RLRecentItemList ToRecordList(WORCRecentItemRecord[] array) {
			RLRecentItemList rl = new RLRecentItemList();
			if (array != null) {
				foreach(WORCRecentItemRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCRecentItemRecord[] FromRecordList(RLRecentItemList rl) {
			WORCRecentItemRecord[] array = new WORCRecentItemRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial struct RCRecentItemRecord {
		public static implicit operator WORCRecentItemRecord(RCRecentItemRecord r) {
			return new WORCRecentItemRecord(r.ssENRecentItem);
		}

		public static implicit operator RCRecentItemRecord(WORCRecentItemRecord w) {
			RCRecentItemRecord r = new RCRecentItemRecord("");
			if (w != null) {
				r.ssENRecentItem = w;
			}
			return r;
		}

	}

	partial struct ENRecentItemEntityRecord {
		public static implicit operator WORCRecentItemRecord(ENRecentItemEntityRecord r) {
			return new WORCRecentItemRecord(r);
		}

		public static implicit operator ENRecentItemEntityRecord(WORCRecentItemRecord w) {
			ENRecentItemEntityRecord r = new ENRecentItemEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssTenantId = (int) w.varWSTenantId;
				r.ssUserId = (int) w.varWSUserId;
				r.ssLabel = ((string) w.varWSLabel ?? "");
				r.ssTag = ((string) w.varWSTag ?? "");
				r.ssURL = ((string) w.varWSURL ?? "");
				r.ssInstant = (DateTime) w.varWSInstant;
			}
			return r;
		}

	}
}


namespace ssContactManager {
	[Serializable()]
	public partial class WORLRecentItemRecordList {
		public WORCRecentItemRecord[] Array;


		public WORLRecentItemRecordList(WORCRecentItemRecord[] r) {
			if (r == null)
			Array = new WORCRecentItemRecord[0];
			else
			Array = r;
		}
		public WORLRecentItemRecordList() {
			Array = new WORCRecentItemRecord[0];
		}

		public WORLRecentItemRecordList(RLRecentItemRecordList rl) {
			rl=(RLRecentItemRecordList) rl.Duplicate();
			Array = new WORCRecentItemRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCRecentItemRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLRecentItemRecordList {
		public static implicit operator RLRecentItemRecordList(WORCRecentItemRecord[] array) {
			RLRecentItemRecordList rl = new RLRecentItemRecordList();
			if (array != null) {
				foreach(WORCRecentItemRecord val in array) {
					rl.Append((RCRecentItemRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCRecentItemRecord[](RLRecentItemRecordList rl) {
			WORCRecentItemRecord[] array = new WORCRecentItemRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCRecentItemRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLRecentItemRecordList {
		public static implicit operator RLRecentItemRecordList(WORLRecentItemRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLRecentItemRecordList(RLRecentItemRecordList rl) {
			return new WORLRecentItemRecordList(rl);
		}
		public static implicit operator WORCRecentItemRecord[](WORLRecentItemRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLRecentItemRecordList(WORCRecentItemRecord[] array) {
			return new WORLRecentItemRecordList(array);
		}
	}
}

