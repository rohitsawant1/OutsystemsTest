/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssContactManager {

	public sealed partial class ENMessageTypeEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase("794c445f-f27d-4f61-b47a-0da71440df68"), "OSUSR_dma_MessageType1");
		}
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "id", "Id"
				}
				, { "label", "Label"
				}
			};
		}
	} // ENMessageTypeEntity

	/// <summary>
	/// Entity <code>ENMessageTypeEntityRecord</code> that represents the Service Studio entity
	///  <code>MessageType</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("MessageType", "VZ+cMg2nikak9YkQZoMoGw", "X0RMeX3yYU+0eg2nFEDfaA", 0, "OSUSR_dma_MessageType1", null)]
	[Serializable()]
	public partial struct ENMessageTypeEntityRecord: ISerializable, ITypedRecord<ENMessageTypeEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*c0xnIOJ1TkeIAS_qFYwvaw");
		private static readonly GlobalObjectKey IdLabel = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*gaGRcQ+MYkK+jvpXCCup_Q");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, false, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(2, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LABEL", 50, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Label")]
		private string _ssLabel;
		public string ssLabel {
			get {
				return _ssLabel;
			}
			set {
				if ((_ssLabel!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssLabel = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENMessageTypeEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(2, true);
			OptimizedAttributes = new BitArray(2, false);
			_ssId = 0;
			_ssLabel = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "MessageType.Id", 0);
			ssLabel = r.ReadText(index++, "MessageType.Label", "");
			ChangedAttributes = new BitArray(2, false);
			OptimizedAttributes = new BitArray(2, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENMessageTypeEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENMessageTypeEntityRecord a, ENMessageTypeEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssLabel != b.ssLabel) return false;
			return true;
		}

		public static bool operator != (ENMessageTypeEntityRecord a, ENMessageTypeEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENMessageTypeEntityRecord)) return false;
			return (this == (ENMessageTypeEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssLabel.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENMessageTypeEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(2, true);
			OptimizedAttributes = new BitArray(2, false);
			_ssId = 0;
			_ssLabel = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssLabel", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssLabel' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssLabel = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENMessageTypeEntityRecord Duplicate() {
			ENMessageTypeEntityRecord t;
			t._ssId = this._ssId;
			t._ssLabel = this._ssLabel;
			t.ChangedAttributes = new BitArray(2);
			t.OptimizedAttributes = new BitArray(2);
			for (int i = 0; i < 2; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Label")) VarValue.AppendAttribute(recordElem, "Label", ssLabel, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Label");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "label") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Label")) variable.Value = ssLabel; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return ChangedAttributes[1];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdLabel)) {
				return OptimizedAttributes[1];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdLabel) {
				return ssLabel;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(2);
			OptimizedAttributes = new BitArray(2);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssLabel = (string) other.AttributeGet(IdLabel);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdLabel);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdLabel);
		}
	} // ENMessageTypeEntityRecord
	partial class ENMessageTypeEntity: StaticEntityRuntime {


		public class ENMessageTypeEntityRecordMetadata: StaticEntityRuntime.StaticRecordMetadata {
			public virtual int DataId {
				get {
					return (int) _dataId;
				}
			}

			protected override object IdReader(IDataReader r) {
				Object column = r["Data_Id"];
				return (column != System.DBNull.Value ? Convert.ToInt32(column.ToString()): 0);
			}
		} // " + DeclStaticMetadataClass);


		private static ENMessageTypeEntity instance = new ENMessageTypeEntity(151, ObjectKey.Parse("VZ+cMg2nikak9YkQZoMoGw"));

		public static ENMessageTypeEntity GetInstance() {
			return instance;
		}

		private ENMessageTypeEntity(int espaceId, ObjectKey entityKey): base(espaceId, entityKey) {
		}


		protected override StaticRecordMetadata newStaticRecord() {
			return new ENMessageTypeEntityRecordMetadata();
		}

		private ENMessageTypeEntityRecord GetRecord(ENMessageTypeEntityRecordMetadata meta) {
			return GetRecord(meta.DataId);
		}

		private ENMessageTypeEntityRecord GetRecord(int id) {
			string locale = BuiltInFunction.GetCurrentLocale();
			Object recordObj = RecordsById(locale)[id];
			if (recordObj != null) {
				return (ENMessageTypeEntityRecord) recordObj;
			} else {
				using(Transaction tran = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {

					int pos = 0;
					ENMessageTypeEntityRecord record = new ENMessageTypeEntityRecord(null);

					string sql= "SELECT TOP (1) " +
					 " [ID]  o1" +
					 ", [LABEL]  o2" +
					 " FROM " + ENMessageTypeEntity.LocalViewName(null, locale) + " " +
					 " WHERE [ID] = @DataId";


					Command cmd = tran.CreateCommand(sql);
					cmd.CreateParameter("@DataId", DbType.Int32, id);

					using(IDataReader reader = cmd.ExecuteReader()) {
						if (reader.Read()) {
							record.Read(reader, ref pos);
							RecordsById(locale)[id] = record;
						} else {
							throw new DataBaseException(ViewName(null, "") + " with key " + id + " was not found.");
						}
					}
					return record;
				}

			}
		}

		public static ENMessageTypeEntityRecord GetRecordById(int id) {
			return instance.GetRecord(id);
		}

		public static ENMessageTypeEntityRecord GetRecordByName(string name) {
			ENMessageTypeEntityRecordMetadata meta = (ENMessageTypeEntityRecordMetadata) instance.GetRecordMetadataByName(name);
			if (meta == null || !meta.Valid) {
				throw new DataBaseException(ViewName(null, "") + ", record with Identifier " + name + " was not found.");
			}
			return instance.GetRecord(meta);
		}

		public static ENMessageTypeEntityRecord GetRecordByKey(ObjectKey key) {
			ENMessageTypeEntityRecordMetadata meta = (ENMessageTypeEntityRecordMetadata) instance.GetRecordMetadataByKey(key);
			if (meta == null || !meta.Valid) {
				throw new DataBaseException(ViewName(null, "") + ", record metadata '" + ObjectKeyUtils.DatabaseValue(key) + "' was " + (meta == null ? "not found": "invalid") + ".");
			}
			return instance.GetRecord(meta);
		}

	} // ENMessageTypeEntity;

	/// <summary>
	/// Structure <code>RCMessageTypeRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCMessageTypeRecord: ISerializable, ITypedRecord<RCMessageTypeRecord> {
		private static readonly GlobalObjectKey IdMessageType = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*9rI2iC5mfK6nDPhSlTeWgQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("MessageType")]
		public ENMessageTypeEntityRecord ssENMessageType;


		public static implicit operator ENMessageTypeEntityRecord(RCMessageTypeRecord r) {
			return r.ssENMessageType;
		}

		public static implicit operator RCMessageTypeRecord(ENMessageTypeEntityRecord r) {
			RCMessageTypeRecord res = new RCMessageTypeRecord(null);
			res.ssENMessageType = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENMessageType.ChangedAttributes = value;
			}
			get {
				return ssENMessageType.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCMessageTypeRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENMessageType = new ENMessageTypeEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(2, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENMessageType.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENMessageType.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENMessageType.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENMessageType.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCMessageTypeRecord r) {
			this = r;
		}


		public static bool operator == (RCMessageTypeRecord a, RCMessageTypeRecord b) {
			if (a.ssENMessageType != b.ssENMessageType) return false;
			return true;
		}

		public static bool operator != (RCMessageTypeRecord a, RCMessageTypeRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCMessageTypeRecord)) return false;
			return (this == (RCMessageTypeRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENMessageType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCMessageTypeRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENMessageType = new ENMessageTypeEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENMessageType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENMessageType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENMessageType = (ENMessageTypeEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENMessageType.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENMessageType.InternalRecursiveSave();
		}


		public RCMessageTypeRecord Duplicate() {
			RCMessageTypeRecord t;
			t.ssENMessageType = (ENMessageTypeEntityRecord) this.ssENMessageType.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENMessageType.ToXml(this, recordElem, "MessageType", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "messagetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MessageType")) variable.Value = ssENMessageType; else variable.Optimized = true;
				variable.SetFieldName("messagetype");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENMessageType.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENMessageType.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMessageType) {
				return ssENMessageType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENMessageType.FillFromOther((IRecord) other.AttributeGet(IdMessageType));
		}
	} // RCMessageTypeRecord
	/// <summary>
	/// RecordList type <code>RLMessageTypeRecordList</code> that represents a record list of
	///  <code>MessageType</code>
	/// </summary>
	[Serializable()]
	public partial class RLMessageTypeRecordList: GenericRecordList<RCMessageTypeRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCMessageTypeRecord GetElementDefaultValue() {
			return new RCMessageTypeRecord("");
		}

		public T[] ToArray<T>(Func<RCMessageTypeRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMessageTypeRecordList recordlist, Func<RCMessageTypeRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLMessageTypeRecordList(RCMessageTypeRecord[] array) {
			RLMessageTypeRecordList result = new RLMessageTypeRecordList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLMessageTypeRecordList ToList<T>(T[] array, Func <T, RCMessageTypeRecord> converter) {
			RLMessageTypeRecordList result = new RLMessageTypeRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLMessageTypeRecordList FromRestList<T>(RestList<T> restList, Func <T, RCMessageTypeRecord> converter) {
			RLMessageTypeRecordList result = new RLMessageTypeRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMessageTypeRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMessageTypeRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMessageTypeRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMessageTypeRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(2, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCMessageTypeRecord> NewList() {
			return new RLMessageTypeRecordList();
		}


	} // RLMessageTypeRecordList

	/// <summary>
	/// RecordList type <code>RLMessageTypeList</code> that represents a record list of
	///  <code>MessageType</code>
	/// </summary>
	[Serializable()]
	public partial class RLMessageTypeList: GenericRecordList<ENMessageTypeEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENMessageTypeEntityRecord GetElementDefaultValue() {
			return new ENMessageTypeEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENMessageTypeEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMessageTypeList recordlist, Func<ENMessageTypeEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLMessageTypeList(ENMessageTypeEntityRecord[] array) {
			RLMessageTypeList result = new RLMessageTypeList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLMessageTypeList ToList<T>(T[] array, Func <T, ENMessageTypeEntityRecord> converter) {
			RLMessageTypeList result = new RLMessageTypeList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLMessageTypeList FromRestList<T>(RestList<T> restList, Func <T, ENMessageTypeEntityRecord> converter) {
			RLMessageTypeList result = new RLMessageTypeList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMessageTypeList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMessageTypeList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMessageTypeList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMessageTypeList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENMessageTypeEntityRecord> NewList() {
			return new RLMessageTypeList();
		}


	} // RLMessageTypeList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetMessageType
		/// </summary>

		public static void GetMessageType(HeContext heContext, int inParamId, out RCMessageTypeRecord outParamRecord) {
			outParamRecord = new RCMessageTypeRecord(null);

			try {
				outParamRecord = ENMessageTypeEntity.GetRecordById(inParamId);
			} catch {
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [LABEL]" +
					 " FROM " + ENMessageTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetMessageType", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
						} else
						throw new DataBaseException(ENMessageTypeEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			}
		}

	}
}

namespace ssContactManager {
	[XmlType("MessageType")]
	public class WORCMessageTypeRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Label")]
		public string varWSLabel;

		public WORCMessageTypeRecord() {
			varWSId = (int) 0;
			varWSLabel = (string) "";
		}

		public WORCMessageTypeRecord(ENMessageTypeEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSLabel = BaseAppUtils.RemoveControlChars(r.ssLabel);
		}

		public static RLMessageTypeList ToRecordList(WORCMessageTypeRecord[] array) {
			RLMessageTypeList rl = new RLMessageTypeList();
			if (array != null) {
				foreach(WORCMessageTypeRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCMessageTypeRecord[] FromRecordList(RLMessageTypeList rl) {
			WORCMessageTypeRecord[] array = new WORCMessageTypeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial struct RCMessageTypeRecord {
		public static implicit operator WORCMessageTypeRecord(RCMessageTypeRecord r) {
			return new WORCMessageTypeRecord(r.ssENMessageType);
		}

		public static implicit operator RCMessageTypeRecord(WORCMessageTypeRecord w) {
			RCMessageTypeRecord r = new RCMessageTypeRecord("");
			if (w != null) {
				r.ssENMessageType = w;
			}
			return r;
		}

	}

	partial struct ENMessageTypeEntityRecord {
		public static implicit operator WORCMessageTypeRecord(ENMessageTypeEntityRecord r) {
			return new WORCMessageTypeRecord(r);
		}

		public static implicit operator ENMessageTypeEntityRecord(WORCMessageTypeRecord w) {
			ENMessageTypeEntityRecord r = new ENMessageTypeEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssLabel = ((string) w.varWSLabel ?? "");
			}
			return r;
		}

	}
}


namespace ssContactManager {
	[Serializable()]
	public partial class WORLMessageTypeRecordList {
		public WORCMessageTypeRecord[] Array;


		public WORLMessageTypeRecordList(WORCMessageTypeRecord[] r) {
			if (r == null)
			Array = new WORCMessageTypeRecord[0];
			else
			Array = r;
		}
		public WORLMessageTypeRecordList() {
			Array = new WORCMessageTypeRecord[0];
		}

		public WORLMessageTypeRecordList(RLMessageTypeRecordList rl) {
			rl=(RLMessageTypeRecordList) rl.Duplicate();
			Array = new WORCMessageTypeRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCMessageTypeRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLMessageTypeRecordList {
		public static implicit operator RLMessageTypeRecordList(WORCMessageTypeRecord[] array) {
			RLMessageTypeRecordList rl = new RLMessageTypeRecordList();
			if (array != null) {
				foreach(WORCMessageTypeRecord val in array) {
					rl.Append((RCMessageTypeRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMessageTypeRecord[](RLMessageTypeRecordList rl) {
			WORCMessageTypeRecord[] array = new WORCMessageTypeRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCMessageTypeRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLMessageTypeRecordList {
		public static implicit operator RLMessageTypeRecordList(WORLMessageTypeRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLMessageTypeRecordList(RLMessageTypeRecordList rl) {
			return new WORLMessageTypeRecordList(rl);
		}
		public static implicit operator WORCMessageTypeRecord[](WORLMessageTypeRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMessageTypeRecordList(WORCMessageTypeRecord[] array) {
			return new WORLMessageTypeRecordList(array);
		}
	}
}

