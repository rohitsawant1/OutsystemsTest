/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssContactManager {

	public sealed partial class ENMenuItemEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase("794c445f-f27d-4f61-b47a-0da71440df68"), "OSUSR_dma_MenuItem1");
		}
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "id", "Id"
				}
				, { "order", "Order"
				}
				, { "caption", "Caption"
				}
			};
		}
	} // ENMenuItemEntity

	/// <summary>
	/// Entity <code>ENMenuItemEntityRecord</code> that represents the Service Studio entity
	///  <code>MenuItem</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("MenuItem", "TrZcvI8wwEu7LdpnMR_pjQ", "X0RMeX3yYU+0eg2nFEDfaA", 0, "OSUSR_dma_MenuItem1", null)]
	[Serializable()]
	public partial struct ENMenuItemEntityRecord: ISerializable, ITypedRecord<ENMenuItemEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*qm3Bu7A1ZkKvg+uMetJxiw");
		private static readonly GlobalObjectKey IdOrder = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*PXSBS310QUm2M4NqDVUTFw");
		private static readonly GlobalObjectKey IdCaption = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*voDVP9bMx0qjODpU+_0Ccg");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(3, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ORDER", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Order")]
		private int _ssOrder;
		public int ssOrder {
			get {
				return _ssOrder;
			}
			set {
				if ((_ssOrder!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssOrder = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CAPTION", 50, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Caption")]
		private string _ssCaption;
		public string ssCaption {
			get {
				return _ssCaption;
			}
			set {
				if ((_ssCaption!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssCaption = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENMenuItemEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssOrder = 0;
			_ssCaption = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "MenuItem.Id", 0);
			ssOrder = r.ReadInteger(index++, "MenuItem.Order", 0);
			ssCaption = r.ReadText(index++, "MenuItem.Caption", "");
			ChangedAttributes = new BitArray(3, false);
			OptimizedAttributes = new BitArray(3, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENMenuItemEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENMenuItemEntityRecord a, ENMenuItemEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssOrder != b.ssOrder) return false;
			if (a.ssCaption != b.ssCaption) return false;
			return true;
		}

		public static bool operator != (ENMenuItemEntityRecord a, ENMenuItemEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENMenuItemEntityRecord)) return false;
			return (this == (ENMenuItemEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssOrder.GetHashCode()
				^ ssCaption.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENMenuItemEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(3, true);
			OptimizedAttributes = new BitArray(3, false);
			_ssId = 0;
			_ssOrder = 0;
			_ssCaption = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssOrder", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssOrder' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssOrder = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssCaption", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssCaption' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssCaption = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENMenuItemEntityRecord Duplicate() {
			ENMenuItemEntityRecord t;
			t._ssId = this._ssId;
			t._ssOrder = this._ssOrder;
			t._ssCaption = this._ssCaption;
			t.ChangedAttributes = new BitArray(3);
			t.OptimizedAttributes = new BitArray(3);
			for (int i = 0; i < 3; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Order")) VarValue.AppendAttribute(recordElem, "Order", ssOrder, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Order");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Caption")) VarValue.AppendAttribute(recordElem, "Caption", ssCaption, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Caption");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "order") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Order")) variable.Value = ssOrder; else variable.Optimized = true;
			} else if (head == "caption") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Caption")) variable.Value = ssCaption; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdOrder)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdCaption)) {
				return ChangedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdOrder)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdCaption)) {
				return OptimizedAttributes[2];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdOrder) {
				return ssOrder;
			} else if (key == IdCaption) {
				return ssCaption;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(3);
			OptimizedAttributes = new BitArray(3);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssOrder = (int) other.AttributeGet(IdOrder);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdOrder);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdOrder);
			ssCaption = (string) other.AttributeGet(IdCaption);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdCaption);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdCaption);
		}
	} // ENMenuItemEntityRecord
	partial class ENMenuItemEntity: StaticEntityRuntime {


		public class ENMenuItemEntityRecordMetadata: StaticEntityRuntime.StaticRecordMetadata {
			public virtual int DataId {
				get {
					return (int) _dataId;
				}
			}

			protected override object IdReader(IDataReader r) {
				Object column = r["Data_Id"];
				return (column != System.DBNull.Value ? Convert.ToInt32(column.ToString()): 0);
			}
		} // " + DeclStaticMetadataClass);


		private static ENMenuItemEntity instance = new ENMenuItemEntity(151, ObjectKey.Parse("TrZcvI8wwEu7LdpnMR_pjQ"));

		public static ENMenuItemEntity GetInstance() {
			return instance;
		}

		private ENMenuItemEntity(int espaceId, ObjectKey entityKey): base(espaceId, entityKey) {
		}


		protected override StaticRecordMetadata newStaticRecord() {
			return new ENMenuItemEntityRecordMetadata();
		}

		private ENMenuItemEntityRecord GetRecord(ENMenuItemEntityRecordMetadata meta) {
			return GetRecord(meta.DataId);
		}

		private ENMenuItemEntityRecord GetRecord(int id) {
			string locale = BuiltInFunction.GetCurrentLocale();
			Object recordObj = RecordsById(locale)[id];
			if (recordObj != null) {
				return (ENMenuItemEntityRecord) recordObj;
			} else {
				using(Transaction tran = DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction()) {

					int pos = 0;
					ENMenuItemEntityRecord record = new ENMenuItemEntityRecord(null);

					string sql= "SELECT TOP (1) " +
					 " [ID]  o1" +
					 ", [ORDER]  o2" +
					 ", [CAPTION]  o3" +
					 " FROM " + ENMenuItemEntity.LocalViewName(null, locale) + " " +
					 " WHERE [ID] = @DataId";


					Command cmd = tran.CreateCommand(sql);
					cmd.CreateParameter("@DataId", DbType.Int32, id);

					using(IDataReader reader = cmd.ExecuteReader()) {
						if (reader.Read()) {
							record.Read(reader, ref pos);
							RecordsById(locale)[id] = record;
						} else {
							throw new DataBaseException(ViewName(null, "") + " with key " + id + " was not found.");
						}
					}
					return record;
				}

			}
		}

		public static ENMenuItemEntityRecord GetRecordById(int id) {
			return instance.GetRecord(id);
		}

		public static ENMenuItemEntityRecord GetRecordByName(string name) {
			ENMenuItemEntityRecordMetadata meta = (ENMenuItemEntityRecordMetadata) instance.GetRecordMetadataByName(name);
			if (meta == null || !meta.Valid) {
				throw new DataBaseException(ViewName(null, "") + ", record with Identifier " + name + " was not found.");
			}
			return instance.GetRecord(meta);
		}

		public static ENMenuItemEntityRecord GetRecordByKey(ObjectKey key) {
			ENMenuItemEntityRecordMetadata meta = (ENMenuItemEntityRecordMetadata) instance.GetRecordMetadataByKey(key);
			if (meta == null || !meta.Valid) {
				throw new DataBaseException(ViewName(null, "") + ", record metadata '" + ObjectKeyUtils.DatabaseValue(key) + "' was " + (meta == null ? "not found": "invalid") + ".");
			}
			return instance.GetRecord(meta);
		}

	} // ENMenuItemEntity;

	/// <summary>
	/// Structure <code>RCMenuItemRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCMenuItemRecord: ISerializable, ITypedRecord<RCMenuItemRecord> {
		private static readonly GlobalObjectKey IdMenuItem = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*13MdcmHiiO+Kz0xPIZg+mQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("MenuItem")]
		public ENMenuItemEntityRecord ssENMenuItem;


		public static implicit operator ENMenuItemEntityRecord(RCMenuItemRecord r) {
			return r.ssENMenuItem;
		}

		public static implicit operator RCMenuItemRecord(ENMenuItemEntityRecord r) {
			RCMenuItemRecord res = new RCMenuItemRecord(null);
			res.ssENMenuItem = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENMenuItem.ChangedAttributes = value;
			}
			get {
				return ssENMenuItem.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCMenuItemRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENMenuItem = new ENMenuItemEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(3, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENMenuItem.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENMenuItem.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENMenuItem.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENMenuItem.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCMenuItemRecord r) {
			this = r;
		}


		public static bool operator == (RCMenuItemRecord a, RCMenuItemRecord b) {
			if (a.ssENMenuItem != b.ssENMenuItem) return false;
			return true;
		}

		public static bool operator != (RCMenuItemRecord a, RCMenuItemRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCMenuItemRecord)) return false;
			return (this == (RCMenuItemRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENMenuItem.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCMenuItemRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENMenuItem = new ENMenuItemEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENMenuItem", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENMenuItem' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENMenuItem = (ENMenuItemEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENMenuItem.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENMenuItem.InternalRecursiveSave();
		}


		public RCMenuItemRecord Duplicate() {
			RCMenuItemRecord t;
			t.ssENMenuItem = (ENMenuItemEntityRecord) this.ssENMenuItem.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENMenuItem.ToXml(this, recordElem, "MenuItem", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "menuitem") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MenuItem")) variable.Value = ssENMenuItem; else variable.Optimized = true;
				variable.SetFieldName("menuitem");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENMenuItem.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENMenuItem.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMenuItem) {
				return ssENMenuItem;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENMenuItem.FillFromOther((IRecord) other.AttributeGet(IdMenuItem));
		}
	} // RCMenuItemRecord
	/// <summary>
	/// RecordList type <code>RLMenuItemRecordList</code> that represents a record list of
	///  <code>MenuItem</code>
	/// </summary>
	[Serializable()]
	public partial class RLMenuItemRecordList: GenericRecordList<RCMenuItemRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCMenuItemRecord GetElementDefaultValue() {
			return new RCMenuItemRecord("");
		}

		public T[] ToArray<T>(Func<RCMenuItemRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMenuItemRecordList recordlist, Func<RCMenuItemRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLMenuItemRecordList(RCMenuItemRecord[] array) {
			RLMenuItemRecordList result = new RLMenuItemRecordList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLMenuItemRecordList ToList<T>(T[] array, Func <T, RCMenuItemRecord> converter) {
			RLMenuItemRecordList result = new RLMenuItemRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLMenuItemRecordList FromRestList<T>(RestList<T> restList, Func <T, RCMenuItemRecord> converter) {
			RLMenuItemRecordList result = new RLMenuItemRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMenuItemRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMenuItemRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMenuItemRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMenuItemRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(3, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCMenuItemRecord> NewList() {
			return new RLMenuItemRecordList();
		}


	} // RLMenuItemRecordList

	/// <summary>
	/// RecordList type <code>RLMenuItemList</code> that represents a record list of <code>MenuItem</code>
	/// </summary>
	[Serializable()]
	public partial class RLMenuItemList: GenericRecordList<ENMenuItemEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENMenuItemEntityRecord GetElementDefaultValue() {
			return new ENMenuItemEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENMenuItemEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLMenuItemList recordlist, Func<ENMenuItemEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLMenuItemList(ENMenuItemEntityRecord[] array) {
			RLMenuItemList result = new RLMenuItemList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLMenuItemList ToList<T>(T[] array, Func <T, ENMenuItemEntityRecord> converter) {
			RLMenuItemList result = new RLMenuItemList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLMenuItemList FromRestList<T>(RestList<T> restList, Func <T, ENMenuItemEntityRecord> converter) {
			RLMenuItemList result = new RLMenuItemList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLMenuItemList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMenuItemList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLMenuItemList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLMenuItemList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENMenuItemEntityRecord> NewList() {
			return new RLMenuItemList();
		}


	} // RLMenuItemList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetMenuItem
		/// </summary>

		public static void GetMenuItem(HeContext heContext, int inParamId, out RCMenuItemRecord outParamRecord) {
			outParamRecord = new RCMenuItemRecord(null);

			try {
				outParamRecord = ENMenuItemEntity.GetRecordById(inParamId);
			} catch {
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [ORDER]" +
					 ", [CAPTION]" +
					 " FROM " + ENMenuItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetMenuItem", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
						} else
						throw new DataBaseException(ENMenuItemEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			}
		}

	}
}

namespace ssContactManager {
	[XmlType("MenuItem")]
	public class WORCMenuItemRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Order")]
		public int varWSOrder;

		[System.Xml.Serialization.XmlElement("Caption")]
		public string varWSCaption;

		public WORCMenuItemRecord() {
			varWSId = (int) 0;
			varWSOrder = (int) 0;
			varWSCaption = (string) "";
		}

		public WORCMenuItemRecord(ENMenuItemEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSOrder = (int) r.ssOrder;
			varWSCaption = BaseAppUtils.RemoveControlChars(r.ssCaption);
		}

		public static RLMenuItemList ToRecordList(WORCMenuItemRecord[] array) {
			RLMenuItemList rl = new RLMenuItemList();
			if (array != null) {
				foreach(WORCMenuItemRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCMenuItemRecord[] FromRecordList(RLMenuItemList rl) {
			WORCMenuItemRecord[] array = new WORCMenuItemRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial struct RCMenuItemRecord {
		public static implicit operator WORCMenuItemRecord(RCMenuItemRecord r) {
			return new WORCMenuItemRecord(r.ssENMenuItem);
		}

		public static implicit operator RCMenuItemRecord(WORCMenuItemRecord w) {
			RCMenuItemRecord r = new RCMenuItemRecord("");
			if (w != null) {
				r.ssENMenuItem = w;
			}
			return r;
		}

	}

	partial struct ENMenuItemEntityRecord {
		public static implicit operator WORCMenuItemRecord(ENMenuItemEntityRecord r) {
			return new WORCMenuItemRecord(r);
		}

		public static implicit operator ENMenuItemEntityRecord(WORCMenuItemRecord w) {
			ENMenuItemEntityRecord r = new ENMenuItemEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssOrder = (int) w.varWSOrder;
				r.ssCaption = ((string) w.varWSCaption ?? "");
			}
			return r;
		}

	}
}


namespace ssContactManager {
	[Serializable()]
	public partial class WORLMenuItemRecordList {
		public WORCMenuItemRecord[] Array;


		public WORLMenuItemRecordList(WORCMenuItemRecord[] r) {
			if (r == null)
			Array = new WORCMenuItemRecord[0];
			else
			Array = r;
		}
		public WORLMenuItemRecordList() {
			Array = new WORCMenuItemRecord[0];
		}

		public WORLMenuItemRecordList(RLMenuItemRecordList rl) {
			rl=(RLMenuItemRecordList) rl.Duplicate();
			Array = new WORCMenuItemRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCMenuItemRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLMenuItemRecordList {
		public static implicit operator RLMenuItemRecordList(WORCMenuItemRecord[] array) {
			RLMenuItemRecordList rl = new RLMenuItemRecordList();
			if (array != null) {
				foreach(WORCMenuItemRecord val in array) {
					rl.Append((RCMenuItemRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCMenuItemRecord[](RLMenuItemRecordList rl) {
			WORCMenuItemRecord[] array = new WORCMenuItemRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCMenuItemRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLMenuItemRecordList {
		public static implicit operator RLMenuItemRecordList(WORLMenuItemRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLMenuItemRecordList(RLMenuItemRecordList rl) {
			return new WORLMenuItemRecordList(rl);
		}
		public static implicit operator WORCMenuItemRecord[](WORLMenuItemRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLMenuItemRecordList(WORCMenuItemRecord[] array) {
			return new WORLMenuItemRecordList(array);
		}
	}
}

