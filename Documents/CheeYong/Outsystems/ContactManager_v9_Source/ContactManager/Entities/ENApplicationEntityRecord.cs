/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssContactManager {

	public sealed partial class ENApplicationEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase("478870b9-2d60-4f73-9eb3-7cd8b994a737"), "OSSYS_APPLICATION");
		}
		public static readonly ObjectKey eSpaceKey = ObjectKey.Parse("478870b9-2d60-4f73-9eb3-7cd8b994a737");
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "id", "Id"
				}
				, { "name", "Name"
				}
				, { "description", "Description"
				}
				, { "entry_espace_id", "Entry_eSpace_Id"
				}
				, { "backoffice_espace_id", "BackOffice_eSpace_Id"
				}
				, { "defaultthemeismobile", "DefaultThemeIsMobile"
				}
				, { "key", "Key"
				}
				, { "is_active", "Is_Active"
				}
				, { "disabled", "Disabled"
				}
				, { "createdby", "CreatedBy"
				}
				, { "applicationkind", "ApplicationKind"
				}
				, { "templatekey", "TemplateKey"
				}
				, { "primarycolor", "PrimaryColor"
				}
				, { "nativehash", "NativeHash"
				}
			};
		}
	} // ENApplicationEntity

	/// <summary>
	/// Entity <code>ENApplicationEntityRecord</code> that represents the Service Studio entity
	///  <code>Application</code> <p> Description: Applications in this environment. Old applications ar
	/// e kept as inactive</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Application", "Jdho7BtyZEWPHnMeMvVydQ", "uXCIR2Atc0+es3zYuZSnNw", 0, "OSSYS_APPLICATION", "")]
	[Serializable()]
	public partial struct ENApplicationEntityRecord: ISerializable, ITypedRecord<ENApplicationEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*H0sDotYl70GGfOx8lRM_ug");
		private static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*PGQh5tFlAES_4kli11PhvA");
		private static readonly GlobalObjectKey IdDescription = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*hgknbdpocEyrhUN3vZIPIw");
		private static readonly GlobalObjectKey IdEntry_eSpace_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*C8aobVR_oUuMiwEHwXZWMA");
		private static readonly GlobalObjectKey IdBackOffice_eSpace_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*QCOme+VHd0+lD7yaJaZIyA");
		private static readonly GlobalObjectKey IdDefaultThemeIsMobile = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*S9Y8Od3t_U+9evFgPosG0Q");
		private static readonly GlobalObjectKey IdKey = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*8YD6Rai0VECiY4hVXcisag");
		private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*WeELtUIsZU24Q055np7Bfw");
		private static readonly GlobalObjectKey IdDisabled = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*Ko02D6F5JUaDrRoGyBdYMw");
		private static readonly GlobalObjectKey IdCreatedBy = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*Bkpgv6v2V0iZF3O0owQ8zg");
		private static readonly GlobalObjectKey IdApplicationKind = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*sp2G8EIIb0KmpfnbKe6Ylg");
		private static readonly GlobalObjectKey IdTemplateKey = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*VM4z9Yp7iUGbwXeMmGYpTQ");
		private static readonly GlobalObjectKey IdPrimaryColor = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*MlDLMt4PO0WWCrtMYXQaag");
		private static readonly GlobalObjectKey IdNativeHash = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*rb5hIta3FEKlLwnpMjHeIw");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(14, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NAME", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Name")]
		private string _ssName;
		public string ssName {
			get {
				return _ssName;
			}
			set {
				if ((_ssName!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DESCRIPTION", 2000, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Description")]
		private string _ssDescription;
		public string ssDescription {
			get {
				return _ssDescription;
			}
			set {
				if ((_ssDescription!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssDescription = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ENTRY_ESPACE_ID", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("Entry_eSpace_Id")]
		private int _ssEntry_eSpace_Id;
		public int ssEntry_eSpace_Id {
			get {
				return _ssEntry_eSpace_Id;
			}
			set {
				if ((_ssEntry_eSpace_Id!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssEntry_eSpace_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("BACKOFFICE_ESPACE_ID", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("BackOffice_eSpace_Id")]
		private int _ssBackOffice_eSpace_Id;
		public int ssBackOffice_eSpace_Id {
			get {
				return _ssBackOffice_eSpace_Id;
			}
			set {
				if ((_ssBackOffice_eSpace_Id!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssBackOffice_eSpace_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DEFAULTTHEMEISMOBILE", 0, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("DefaultThemeIsMobile")]
		private bool _ssDefaultThemeIsMobile;
		public bool ssDefaultThemeIsMobile {
			get {
				return _ssDefaultThemeIsMobile;
			}
			set {
				if ((_ssDefaultThemeIsMobile!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssDefaultThemeIsMobile = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("KEY", 100, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Key")]
		private string _ssKey;
		public string ssKey {
			get {
				return _ssKey;
			}
			set {
				if ((_ssKey!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssKey = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Is_Active")]
		private bool _ssIs_Active;
		public bool ssIs_Active {
			get {
				return _ssIs_Active;
			}
			set {
				if ((_ssIs_Active!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssIs_Active = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("DISABLED", 0, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Disabled")]
		private bool _ssDisabled;
		public bool ssDisabled {
			get {
				return _ssDisabled;
			}
			set {
				if ((_ssDisabled!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssDisabled = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATEDBY", 0, false, false, true, false)]
		[System.Xml.Serialization.XmlElement("CreatedBy")]
		private int _ssCreatedBy;
		public int ssCreatedBy {
			get {
				return _ssCreatedBy;
			}
			set {
				if ((_ssCreatedBy!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssCreatedBy = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("APPLICATIONKIND", 0, false, false, true, true)]
		[System.Xml.Serialization.XmlElement("ApplicationKind")]
		private string _ssApplicationKind;
		public string ssApplicationKind {
			get {
				return _ssApplicationKind;
			}
			set {
				if ((_ssApplicationKind!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssApplicationKind = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TEMPLATEKEY", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("TemplateKey")]
		private string _ssTemplateKey;
		public string ssTemplateKey {
			get {
				return _ssTemplateKey;
			}
			set {
				if ((_ssTemplateKey!=value) || OptimizedAttributes[11]) {
					ChangedAttributes[11] = true;
					_ssTemplateKey = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PRIMARYCOLOR", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("PrimaryColor")]
		private string _ssPrimaryColor;
		public string ssPrimaryColor {
			get {
				return _ssPrimaryColor;
			}
			set {
				if ((_ssPrimaryColor!=value) || OptimizedAttributes[12]) {
					ChangedAttributes[12] = true;
					_ssPrimaryColor = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NATIVEHASH", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("NativeHash")]
		private string _ssNativeHash;
		public string ssNativeHash {
			get {
				return _ssNativeHash;
			}
			set {
				if ((_ssNativeHash!=value) || OptimizedAttributes[13]) {
					ChangedAttributes[13] = true;
					_ssNativeHash = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENApplicationEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(14, true);
			OptimizedAttributes = new BitArray(14, false);
			_ssId = 0;
			_ssName = "";
			_ssDescription = "";
			_ssEntry_eSpace_Id = 0;
			_ssBackOffice_eSpace_Id = 0;
			_ssDefaultThemeIsMobile = false;
			_ssKey = "";
			_ssIs_Active = false;
			_ssDisabled = false;
			_ssCreatedBy = 0;
			_ssApplicationKind = "";
			_ssTemplateKey = "";
			_ssPrimaryColor = "";
			_ssNativeHash = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Application.Id", 0);
			ssName = r.ReadText(index++, "Application.Name", "");
			ssDescription = r.ReadText(index++, "Application.Description", "");
			ssEntry_eSpace_Id = r.ReadEntityReference(index++, "Application.Entry_eSpace_Id", 0);
			ssBackOffice_eSpace_Id = r.ReadEntityReference(index++, "Application.BackOffice_eSpace_Id", 0);
			ssDefaultThemeIsMobile = r.ReadBoolean(index++, "Application.DefaultThemeIsMobile", false);
			ssKey = r.ReadText(index++, "Application.Key", "");
			ssIs_Active = r.ReadBoolean(index++, "Application.Is_Active", false);
			ssDisabled = r.ReadBoolean(index++, "Application.Disabled", false);
			ssCreatedBy = r.ReadEntityReference(index++, "Application.CreatedBy", 0);
			ssApplicationKind = r.ReadEntityReferenceText(index++, "Application.ApplicationKind", "");
			ssTemplateKey = r.ReadText(index++, "Application.TemplateKey", "");
			ssPrimaryColor = r.ReadText(index++, "Application.PrimaryColor", "");
			ssNativeHash = r.ReadText(index++, "Application.NativeHash", "");
			ChangedAttributes = new BitArray(14, false);
			OptimizedAttributes = new BitArray(14, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENApplicationEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENApplicationEntityRecord a, ENApplicationEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssDescription != b.ssDescription) return false;
			if (a.ssEntry_eSpace_Id != b.ssEntry_eSpace_Id) return false;
			if (a.ssBackOffice_eSpace_Id != b.ssBackOffice_eSpace_Id) return false;
			if (a.ssDefaultThemeIsMobile != b.ssDefaultThemeIsMobile) return false;
			if (a.ssKey != b.ssKey) return false;
			if (a.ssIs_Active != b.ssIs_Active) return false;
			if (a.ssDisabled != b.ssDisabled) return false;
			if (a.ssCreatedBy != b.ssCreatedBy) return false;
			if (a.ssApplicationKind != b.ssApplicationKind) return false;
			if (a.ssTemplateKey != b.ssTemplateKey) return false;
			if (a.ssPrimaryColor != b.ssPrimaryColor) return false;
			if (a.ssNativeHash != b.ssNativeHash) return false;
			return true;
		}

		public static bool operator != (ENApplicationEntityRecord a, ENApplicationEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENApplicationEntityRecord)) return false;
			return (this == (ENApplicationEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssName.GetHashCode()
				^ ssDescription.GetHashCode()
				^ ssEntry_eSpace_Id.GetHashCode()
				^ ssBackOffice_eSpace_Id.GetHashCode()
				^ ssDefaultThemeIsMobile.GetHashCode()
				^ ssKey.GetHashCode()
				^ ssIs_Active.GetHashCode()
				^ ssDisabled.GetHashCode()
				^ ssCreatedBy.GetHashCode()
				^ ssApplicationKind.GetHashCode()
				^ ssTemplateKey.GetHashCode()
				^ ssPrimaryColor.GetHashCode()
				^ ssNativeHash.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENApplicationEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(14, true);
			OptimizedAttributes = new BitArray(14, false);
			_ssId = 0;
			_ssName = "";
			_ssDescription = "";
			_ssEntry_eSpace_Id = 0;
			_ssBackOffice_eSpace_Id = 0;
			_ssDefaultThemeIsMobile = false;
			_ssKey = "";
			_ssIs_Active = false;
			_ssDisabled = false;
			_ssCreatedBy = 0;
			_ssApplicationKind = "";
			_ssTemplateKey = "";
			_ssPrimaryColor = "";
			_ssNativeHash = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssDescription", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssDescription' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssDescription = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssEntry_eSpace_Id", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssEntry_eSpace_Id' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssEntry_eSpace_Id = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssBackOffice_eSpace_Id", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssBackOffice_eSpace_Id' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssBackOffice_eSpace_Id = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssDefaultThemeIsMobile", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssDefaultThemeIsMobile' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssDefaultThemeIsMobile = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssIs_Active", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssIs_Active' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssIs_Active = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssDisabled", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssDisabled' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssDisabled = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssCreatedBy", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssCreatedBy' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssCreatedBy = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssApplicationKind", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssApplicationKind' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssApplicationKind = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssTemplateKey", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssTemplateKey' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssTemplateKey = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssPrimaryColor", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssPrimaryColor' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssPrimaryColor = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssNativeHash", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssNativeHash' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssNativeHash = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENApplicationEntityRecord Duplicate() {
			ENApplicationEntityRecord t;
			t._ssId = this._ssId;
			t._ssName = this._ssName;
			t._ssDescription = this._ssDescription;
			t._ssEntry_eSpace_Id = this._ssEntry_eSpace_Id;
			t._ssBackOffice_eSpace_Id = this._ssBackOffice_eSpace_Id;
			t._ssDefaultThemeIsMobile = this._ssDefaultThemeIsMobile;
			t._ssKey = this._ssKey;
			t._ssIs_Active = this._ssIs_Active;
			t._ssDisabled = this._ssDisabled;
			t._ssCreatedBy = this._ssCreatedBy;
			t._ssApplicationKind = this._ssApplicationKind;
			t._ssTemplateKey = this._ssTemplateKey;
			t._ssPrimaryColor = this._ssPrimaryColor;
			t._ssNativeHash = this._ssNativeHash;
			t.ChangedAttributes = new BitArray(14);
			t.OptimizedAttributes = new BitArray(14);
			for (int i = 0; i < 14; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Description")) VarValue.AppendAttribute(recordElem, "Description", ssDescription, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Description");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Entry_eSpace_Id")) VarValue.AppendAttribute(recordElem, "Entry_eSpace_Id", ssEntry_eSpace_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "Entry_eSpace_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".BackOffice_eSpace_Id")) VarValue.AppendAttribute(recordElem, "BackOffice_eSpace_Id", ssBackOffice_eSpace_Id, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "BackOffice_eSpace_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".DefaultThemeIsMobile")) VarValue.AppendAttribute(recordElem, "DefaultThemeIsMobile", ssDefaultThemeIsMobile, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "DefaultThemeIsMobile");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Key")) VarValue.AppendAttribute(recordElem, "Key", ssKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Key");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Disabled")) VarValue.AppendAttribute(recordElem, "Disabled", ssDisabled, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Disabled");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".CreatedBy")) VarValue.AppendAttribute(recordElem, "CreatedBy", ssCreatedBy, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "CreatedBy");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".ApplicationKind")) VarValue.AppendAttribute(recordElem, "ApplicationKind", ssApplicationKind, detailLevel, TypeKind.EntityReferenceText); else VarValue.AppendOptimizedAttribute(recordElem, "ApplicationKind");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".TemplateKey")) VarValue.AppendAttribute(recordElem, "TemplateKey", ssTemplateKey, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "TemplateKey");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".PrimaryColor")) VarValue.AppendAttribute(recordElem, "PrimaryColor", ssPrimaryColor, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "PrimaryColor");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".NativeHash")) VarValue.AppendAttribute(recordElem, "NativeHash", ssNativeHash, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "NativeHash");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "description") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Description")) variable.Value = ssDescription; else variable.Optimized = true;
			} else if (head == "entry_espace_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Entry_eSpace_Id")) variable.Value = ssEntry_eSpace_Id; else variable.Optimized = true;
			} else if (head == "backoffice_espace_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".BackOffice_eSpace_Id")) variable.Value = ssBackOffice_eSpace_Id; else variable.Optimized = true;
			} else if (head == "defaultthemeismobile") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".DefaultThemeIsMobile")) variable.Value = ssDefaultThemeIsMobile; else variable.Optimized = true;
			} else if (head == "key") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Key")) variable.Value = ssKey; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
			} else if (head == "disabled") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Disabled")) variable.Value = ssDisabled; else variable.Optimized = true;
			} else if (head == "createdby") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".CreatedBy")) variable.Value = ssCreatedBy; else variable.Optimized = true;
			} else if (head == "applicationkind") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ApplicationKind")) variable.Value = ssApplicationKind; else variable.Optimized = true;
			} else if (head == "templatekey") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".TemplateKey")) variable.Value = ssTemplateKey; else variable.Optimized = true;
			} else if (head == "primarycolor") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".PrimaryColor")) variable.Value = ssPrimaryColor; else variable.Optimized = true;
			} else if (head == "nativehash") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".NativeHash")) variable.Value = ssNativeHash; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdName)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdDescription)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdEntry_eSpace_Id)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdBackOffice_eSpace_Id)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdDefaultThemeIsMobile)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdKey)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdIs_Active)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdDisabled)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdCreatedBy)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdApplicationKind)) {
				return ChangedAttributes[10];
			} else if (key.Equals(IdTemplateKey)) {
				return ChangedAttributes[11];
			} else if (key.Equals(IdPrimaryColor)) {
				return ChangedAttributes[12];
			} else if (key.Equals(IdNativeHash)) {
				return ChangedAttributes[13];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdName)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdDescription)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdEntry_eSpace_Id)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdBackOffice_eSpace_Id)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdDefaultThemeIsMobile)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdKey)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdIs_Active)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdDisabled)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdCreatedBy)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdApplicationKind)) {
				return OptimizedAttributes[10];
			} else if (key.Equals(IdTemplateKey)) {
				return OptimizedAttributes[11];
			} else if (key.Equals(IdPrimaryColor)) {
				return OptimizedAttributes[12];
			} else if (key.Equals(IdNativeHash)) {
				return OptimizedAttributes[13];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdDescription) {
				return ssDescription;
			} else if (key == IdEntry_eSpace_Id) {
				return ssEntry_eSpace_Id;
			} else if (key == IdBackOffice_eSpace_Id) {
				return ssBackOffice_eSpace_Id;
			} else if (key == IdDefaultThemeIsMobile) {
				return ssDefaultThemeIsMobile;
			} else if (key == IdKey) {
				return ssKey;
			} else if (key == IdIs_Active) {
				return ssIs_Active;
			} else if (key == IdDisabled) {
				return ssDisabled;
			} else if (key == IdCreatedBy) {
				return ssCreatedBy;
			} else if (key == IdApplicationKind) {
				return ssApplicationKind;
			} else if (key == IdTemplateKey) {
				return ssTemplateKey;
			} else if (key == IdPrimaryColor) {
				return ssPrimaryColor;
			} else if (key == IdNativeHash) {
				return ssNativeHash;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(14);
			OptimizedAttributes = new BitArray(14);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssName = (string) other.AttributeGet(IdName);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdName);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdName);
			ssDescription = (string) other.AttributeGet(IdDescription);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdDescription);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdDescription);
			ssEntry_eSpace_Id = (int) other.AttributeGet(IdEntry_eSpace_Id);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdEntry_eSpace_Id);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdEntry_eSpace_Id);
			ssBackOffice_eSpace_Id = (int) other.AttributeGet(IdBackOffice_eSpace_Id);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdBackOffice_eSpace_Id);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdBackOffice_eSpace_Id);
			ssDefaultThemeIsMobile = (bool) other.AttributeGet(IdDefaultThemeIsMobile);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdDefaultThemeIsMobile);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdDefaultThemeIsMobile);
			ssKey = (string) other.AttributeGet(IdKey);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdKey);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdKey);
			ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdIs_Active);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdIs_Active);
			ssDisabled = (bool) other.AttributeGet(IdDisabled);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdDisabled);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdDisabled);
			ssCreatedBy = (int) other.AttributeGet(IdCreatedBy);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdCreatedBy);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdCreatedBy);
			ssApplicationKind = (string) other.AttributeGet(IdApplicationKind);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdApplicationKind);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdApplicationKind);
			ssTemplateKey = (string) other.AttributeGet(IdTemplateKey);
			ChangedAttributes[11] = other.ChangedAttributeGet(IdTemplateKey);
			OptimizedAttributes[11] = other.OptimizedAttributeGet(IdTemplateKey);
			ssPrimaryColor = (string) other.AttributeGet(IdPrimaryColor);
			ChangedAttributes[12] = other.ChangedAttributeGet(IdPrimaryColor);
			OptimizedAttributes[12] = other.OptimizedAttributeGet(IdPrimaryColor);
			ssNativeHash = (string) other.AttributeGet(IdNativeHash);
			ChangedAttributes[13] = other.ChangedAttributeGet(IdNativeHash);
			OptimizedAttributes[13] = other.OptimizedAttributeGet(IdNativeHash);
		}
	} // ENApplicationEntityRecord
	/// <summary>
	/// Structure <code>RCApplicationRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCApplicationRecord: ISerializable, ITypedRecord<RCApplicationRecord> {
		private static readonly GlobalObjectKey IdApplication = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*6c_4gug9Adz4EzNckK0HSA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Application")]
		public ENApplicationEntityRecord ssENApplication;


		public static implicit operator ENApplicationEntityRecord(RCApplicationRecord r) {
			return r.ssENApplication;
		}

		public static implicit operator RCApplicationRecord(ENApplicationEntityRecord r) {
			RCApplicationRecord res = new RCApplicationRecord(null);
			res.ssENApplication = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENApplication.ChangedAttributes = value;
			}
			get {
				return ssENApplication.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCApplicationRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENApplication = new ENApplicationEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(14, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENApplication.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENApplication.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENApplication.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENApplication.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCApplicationRecord r) {
			this = r;
		}


		public static bool operator == (RCApplicationRecord a, RCApplicationRecord b) {
			if (a.ssENApplication != b.ssENApplication) return false;
			return true;
		}

		public static bool operator != (RCApplicationRecord a, RCApplicationRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCApplicationRecord)) return false;
			return (this == (RCApplicationRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENApplication.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCApplicationRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENApplication = new ENApplicationEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENApplication", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENApplication' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENApplication = (ENApplicationEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENApplication.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENApplication.InternalRecursiveSave();
		}


		public RCApplicationRecord Duplicate() {
			RCApplicationRecord t;
			t.ssENApplication = (ENApplicationEntityRecord) this.ssENApplication.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENApplication.ToXml(this, recordElem, "Application", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "application") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Application")) variable.Value = ssENApplication; else variable.Optimized = true;
				variable.SetFieldName("application");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENApplication.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENApplication.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdApplication) {
				return ssENApplication;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENApplication.FillFromOther((IRecord) other.AttributeGet(IdApplication));
		}
	} // RCApplicationRecord
	/// <summary>
	/// RecordList type <code>RLApplicationRecordList</code> that represents a record list of
	///  <code>Application</code>
	/// </summary>
	[Serializable()]
	public partial class RLApplicationRecordList: GenericRecordList<RCApplicationRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCApplicationRecord GetElementDefaultValue() {
			return new RCApplicationRecord("");
		}

		public T[] ToArray<T>(Func<RCApplicationRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLApplicationRecordList recordlist, Func<RCApplicationRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLApplicationRecordList(RCApplicationRecord[] array) {
			RLApplicationRecordList result = new RLApplicationRecordList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLApplicationRecordList ToList<T>(T[] array, Func <T, RCApplicationRecord> converter) {
			RLApplicationRecordList result = new RLApplicationRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLApplicationRecordList FromRestList<T>(RestList<T> restList, Func <T, RCApplicationRecord> converter) {
			RLApplicationRecordList result = new RLApplicationRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLApplicationRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLApplicationRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLApplicationRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLApplicationRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(14, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCApplicationRecord> NewList() {
			return new RLApplicationRecordList();
		}


	} // RLApplicationRecordList

	/// <summary>
	/// RecordList type <code>RLApplicationList</code> that represents a record list of
	///  <code>Application</code>
	/// </summary>
	[Serializable()]
	public partial class RLApplicationList: GenericRecordList<ENApplicationEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENApplicationEntityRecord GetElementDefaultValue() {
			return new ENApplicationEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENApplicationEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLApplicationList recordlist, Func<ENApplicationEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLApplicationList(ENApplicationEntityRecord[] array) {
			RLApplicationList result = new RLApplicationList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLApplicationList ToList<T>(T[] array, Func <T, ENApplicationEntityRecord> converter) {
			RLApplicationList result = new RLApplicationList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLApplicationList FromRestList<T>(RestList<T> restList, Func <T, ENApplicationEntityRecord> converter) {
			RLApplicationList result = new RLApplicationList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLApplicationList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLApplicationList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLApplicationList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLApplicationList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENApplicationEntityRecord> NewList() {
			return new RLApplicationList();
		}


	} // RLApplicationList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: GetApplication
		/// </summary>

		public static void GetApplication(HeContext heContext, int inParamId, out RCApplicationRecord outParamRecord) {
			outParamRecord = new RCApplicationRecord(null);

			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ENApplicationEntity.eSpaceKey;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [NAME]" +
					 ", [DESCRIPTION]" +
					 ", [ENTRY_ESPACE_ID]" +
					 ", [BACKOFFICE_ESPACE_ID]" +
					 ", [DEFAULTTHEMEISMOBILE]" +
					 ", [KEY]" +
					 ", [IS_ACTIVE]" +
					 ", [DISABLED]" +
					 ", [CREATEDBY]" +
					 ", [APPLICATIONKIND]" +
					 ", [TEMPLATEKEY]" +
					 ", [PRIMARYCOLOR]" +
					 ", [NATIVEHASH]" +
					 " FROM " + ENApplicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetApplication", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(14, false)
							};
						} else
						throw new DataBaseException(ENApplicationEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

	}
}

namespace ssContactManager {
	[XmlType("Application")]
	public class WORCApplicationRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string varWSName;

		[System.Xml.Serialization.XmlElement("Description")]
		public string varWSDescription;

		[System.Xml.Serialization.XmlElement("Entry_eSpace_Id")]
		public int varWSEntry_eSpace_Id;

		[System.Xml.Serialization.XmlElement("BackOffice_eSpace_Id")]
		public int varWSBackOffice_eSpace_Id;

		[System.Xml.Serialization.XmlElement("DefaultThemeIsMobile")]
		public bool varWSDefaultThemeIsMobile;

		[System.Xml.Serialization.XmlElement("Key")]
		public string varWSKey;

		[System.Xml.Serialization.XmlElement("Is_Active")]
		public bool varWSIs_Active;

		[System.Xml.Serialization.XmlElement("Disabled")]
		public bool varWSDisabled;

		[System.Xml.Serialization.XmlElement("CreatedBy")]
		public int varWSCreatedBy;

		[System.Xml.Serialization.XmlElement("ApplicationKind")]
		public string varWSApplicationKind;

		[System.Xml.Serialization.XmlElement("TemplateKey")]
		public string varWSTemplateKey;

		[System.Xml.Serialization.XmlElement("PrimaryColor")]
		public string varWSPrimaryColor;

		[System.Xml.Serialization.XmlElement("NativeHash")]
		public string varWSNativeHash;

		public WORCApplicationRecord() {
			varWSId = (int) 0;
			varWSName = (string) "";
			varWSDescription = (string) "";
			varWSEntry_eSpace_Id = (int) 0;
			varWSBackOffice_eSpace_Id = (int) 0;
			varWSDefaultThemeIsMobile = (bool) false;
			varWSKey = (string) "";
			varWSIs_Active = (bool) false;
			varWSDisabled = (bool) false;
			varWSCreatedBy = (int) 0;
			varWSApplicationKind = (string) "";
			varWSTemplateKey = (string) "";
			varWSPrimaryColor = (string) "";
			varWSNativeHash = (string) "";
		}

		public WORCApplicationRecord(ENApplicationEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSName = BaseAppUtils.RemoveControlChars(r.ssName);
			varWSDescription = BaseAppUtils.RemoveControlChars(r.ssDescription);
			varWSEntry_eSpace_Id = (int) r.ssEntry_eSpace_Id;
			varWSBackOffice_eSpace_Id = (int) r.ssBackOffice_eSpace_Id;
			varWSDefaultThemeIsMobile = (bool) r.ssDefaultThemeIsMobile;
			varWSKey = BaseAppUtils.RemoveControlChars(r.ssKey);
			varWSIs_Active = (bool) r.ssIs_Active;
			varWSDisabled = (bool) r.ssDisabled;
			varWSCreatedBy = (int) r.ssCreatedBy;
			varWSApplicationKind = BaseAppUtils.RemoveControlChars(r.ssApplicationKind);
			varWSTemplateKey = BaseAppUtils.RemoveControlChars(r.ssTemplateKey);
			varWSPrimaryColor = BaseAppUtils.RemoveControlChars(r.ssPrimaryColor);
			varWSNativeHash = BaseAppUtils.RemoveControlChars(r.ssNativeHash);
		}

		public static RLApplicationList ToRecordList(WORCApplicationRecord[] array) {
			RLApplicationList rl = new RLApplicationList();
			if (array != null) {
				foreach(WORCApplicationRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCApplicationRecord[] FromRecordList(RLApplicationList rl) {
			WORCApplicationRecord[] array = new WORCApplicationRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial struct RCApplicationRecord {
		public static implicit operator WORCApplicationRecord(RCApplicationRecord r) {
			return new WORCApplicationRecord(r.ssENApplication);
		}

		public static implicit operator RCApplicationRecord(WORCApplicationRecord w) {
			RCApplicationRecord r = new RCApplicationRecord("");
			if (w != null) {
				r.ssENApplication = w;
			}
			return r;
		}

	}

	partial struct ENApplicationEntityRecord {
		public static implicit operator WORCApplicationRecord(ENApplicationEntityRecord r) {
			return new WORCApplicationRecord(r);
		}

		public static implicit operator ENApplicationEntityRecord(WORCApplicationRecord w) {
			ENApplicationEntityRecord r = new ENApplicationEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssName = ((string) w.varWSName ?? "");
				r.ssDescription = ((string) w.varWSDescription ?? "");
				r.ssEntry_eSpace_Id = (int) w.varWSEntry_eSpace_Id;
				r.ssBackOffice_eSpace_Id = (int) w.varWSBackOffice_eSpace_Id;
				r.ssDefaultThemeIsMobile = (bool) w.varWSDefaultThemeIsMobile;
				r.ssKey = ((string) w.varWSKey ?? "");
				r.ssIs_Active = (bool) w.varWSIs_Active;
				r.ssDisabled = (bool) w.varWSDisabled;
				r.ssCreatedBy = (int) w.varWSCreatedBy;
				r.ssApplicationKind = (string) w.varWSApplicationKind;
				r.ssTemplateKey = ((string) w.varWSTemplateKey ?? "");
				r.ssPrimaryColor = ((string) w.varWSPrimaryColor ?? "");
				r.ssNativeHash = ((string) w.varWSNativeHash ?? "");
			}
			return r;
		}

	}
}


namespace ssContactManager {
	[Serializable()]
	public partial class WORLApplicationRecordList {
		public WORCApplicationRecord[] Array;


		public WORLApplicationRecordList(WORCApplicationRecord[] r) {
			if (r == null)
			Array = new WORCApplicationRecord[0];
			else
			Array = r;
		}
		public WORLApplicationRecordList() {
			Array = new WORCApplicationRecord[0];
		}

		public WORLApplicationRecordList(RLApplicationRecordList rl) {
			rl=(RLApplicationRecordList) rl.Duplicate();
			Array = new WORCApplicationRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCApplicationRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLApplicationRecordList {
		public static implicit operator RLApplicationRecordList(WORCApplicationRecord[] array) {
			RLApplicationRecordList rl = new RLApplicationRecordList();
			if (array != null) {
				foreach(WORCApplicationRecord val in array) {
					rl.Append((RCApplicationRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCApplicationRecord[](RLApplicationRecordList rl) {
			WORCApplicationRecord[] array = new WORCApplicationRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCApplicationRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLApplicationRecordList {
		public static implicit operator RLApplicationRecordList(WORLApplicationRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLApplicationRecordList(RLApplicationRecordList rl) {
			return new WORLApplicationRecordList(rl);
		}
		public static implicit operator WORCApplicationRecord[](WORLApplicationRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLApplicationRecordList(WORCApplicationRecord[] array) {
			return new WORLApplicationRecordList(array);
		}
	}
}

