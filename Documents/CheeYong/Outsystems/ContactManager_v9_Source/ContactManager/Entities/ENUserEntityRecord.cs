/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssContactManager {

	public sealed partial class ENUserEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(tenant, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return string.Format(BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase("478870b9-2d60-4f73-9eb3-7cd8b994a737"), "{0}"), tenant.HasValue ? "OSSYS_USER_T" + tenant: "OSSYS_USER");
		}
		public static readonly ObjectKey eSpaceKey = ObjectKey.Parse("478870b9-2d60-4f73-9eb3-7cd8b994a737");
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "tenant_id", "Tenant_Id"
				}
				, { "id", "Id"
				}
				, { "name", "Name"
				}
				, { "username", "Username"
				}
				, { "password", "Password"
				}
				, { "email", "Email"
				}
				, { "mobilephone", "MobilePhone"
				}
				, { "external_id", "External_Id"
				}
				, { "creation_date", "Creation_Date"
				}
				, { "last_login", "Last_Login"
				}
				, { "is_active", "Is_Active"
				}
			};
		}
	} // ENUserEntity

	/// <summary>
	/// Entity <code>ENUserEntityRecord</code> that represents the Service Studio entity <code>User</code>
	///  <p> Description: End-user of the applications. Shared between eSpaces with the same user provide
	/// r (defined in Service Studio).</p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("User", "prFMWmuzyEiSBKFciovGTQ", "uXCIR2Atc0+es3zYuZSnNw", 0, "OSSYS_USER", "")]
	[Serializable()]
	public partial struct ENUserEntityRecord: ISerializable, ITypedRecord<ENUserEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdTenant_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*LYIWpF+Ey0aicHD144NUTA.#Tenant_Id");
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*B7uELqKKTUyJG5vlRU_lQw");
		private static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*cuXgKmbx5EaYJXAHSTXToQ");
		private static readonly GlobalObjectKey IdUsername = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*mugM0ElVgUaEErmgAetI8Q");
		private static readonly GlobalObjectKey IdPassword = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*_cxpuWFpPUi4H+A7HaxJQg");
		private static readonly GlobalObjectKey IdEmail = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*kGAqP0RQmkSYTElnszcN7Q");
		private static readonly GlobalObjectKey IdMobilePhone = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*qL8ukzbp2kGJZ0lzLV5McQ");
		private static readonly GlobalObjectKey IdExternal_Id = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*z8MVwsFKV0Ks044qtUfOoA");
		private static readonly GlobalObjectKey IdCreation_Date = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*WY4uSycpREGJnU3kpRyg6A");
		private static readonly GlobalObjectKey IdLast_Login = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*UBODk8iNSEqOlVG0rOue_A");
		private static readonly GlobalObjectKey IdIs_Active = GlobalObjectKey.Parse("uXCIR2Atc0+es3zYuZSnNw*dWrsyaXEJUC80yx4s4VqjQ");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("TENANT_ID", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Tenant_Id")]
		private int _Tenant_Id;
		public int Tenant_Id {
			get {
				return _Tenant_Id;
			}
			set {
				if ((_Tenant_Id!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(11, true);
					_Tenant_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[1]) {
					ChangedAttributes = new BitArray(11, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NAME", 256, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Name")]
		private string _ssName;
		public string ssName {
			get {
				return _ssName;
			}
			set {
				if ((_ssName!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("USERNAME", 250, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Username")]
		private string _ssUsername;
		public string ssUsername {
			get {
				return _ssUsername;
			}
			set {
				if ((_ssUsername!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssUsername = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PASSWORD", 256, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Password")]
		private string _ssPassword;
		public string ssPassword {
			get {
				return _ssPassword;
			}
			set {
				if ((_ssPassword!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssPassword = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EMAIL", 250, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Email")]
		private string _ssEmail;
		public string ssEmail {
			get {
				return _ssEmail;
			}
			set {
				if ((_ssEmail!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssEmail = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("MOBILEPHONE", 20, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("MobilePhone")]
		private string _ssMobilePhone;
		public string ssMobilePhone {
			get {
				return _ssMobilePhone;
			}
			set {
				if ((_ssMobilePhone!=value) || OptimizedAttributes[6]) {
					ChangedAttributes[6] = true;
					_ssMobilePhone = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EXTERNAL_ID", 36, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("External_Id")]
		private string _ssExternal_Id;
		public string ssExternal_Id {
			get {
				return _ssExternal_Id;
			}
			set {
				if ((_ssExternal_Id!=value) || OptimizedAttributes[7]) {
					ChangedAttributes[7] = true;
					_ssExternal_Id = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("CREATION_DATE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Creation_Date")]
		private DateTime _ssCreation_Date;
		public DateTime ssCreation_Date {
			get {
				return _ssCreation_Date;
			}
			set {
				if ((_ssCreation_Date!=value) || OptimizedAttributes[8]) {
					ChangedAttributes[8] = true;
					_ssCreation_Date = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("LAST_LOGIN", 0, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Last_Login")]
		private DateTime _ssLast_Login;
		public DateTime ssLast_Login {
			get {
				return _ssLast_Login;
			}
			set {
				if ((_ssLast_Login!=value) || OptimizedAttributes[9]) {
					ChangedAttributes[9] = true;
					_ssLast_Login = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("IS_ACTIVE", 0, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Is_Active")]
		private bool _ssIs_Active;
		public bool ssIs_Active {
			get {
				return _ssIs_Active;
			}
			set {
				if ((_ssIs_Active!=value) || OptimizedAttributes[10]) {
					ChangedAttributes[10] = true;
					_ssIs_Active = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENUserEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(11, true);
			OptimizedAttributes = new BitArray(11, false);
			_Tenant_Id = 0;
			_ssId = 0;
			_ssName = "";
			_ssUsername = "";
			_ssPassword = "";
			_ssEmail = "";
			_ssMobilePhone = "";
			_ssExternal_Id = "";
			_ssCreation_Date = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLast_Login = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIs_Active = true;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "User.Id", 0);
			ssName = r.ReadText(index++, "User.Name", "");
			ssUsername = r.ReadText(index++, "User.Username", "");
			ssPassword = r.ReadText(index++, "User.Password", "");
			ssEmail = r.ReadEmail(index++, "User.Email", "");
			ssMobilePhone = r.ReadPhoneNumber(index++, "User.MobilePhone", "");
			ssExternal_Id = r.ReadText(index++, "User.External_Id", "");
			ssCreation_Date = r.ReadDateTime(index++, "User.Creation_Date", new DateTime(1900, 1, 1, 0, 0, 0));
			ssLast_Login = r.ReadDateTime(index++, "User.Last_Login", new DateTime(1900, 1, 1, 0, 0, 0));
			ssIs_Active = r.ReadBoolean(index++, "User.Is_Active", false);
			ChangedAttributes = new BitArray(11, false);
			OptimizedAttributes = new BitArray(11, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENUserEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENUserEntityRecord a, ENUserEntityRecord b) {
			if (a.Tenant_Id != b.Tenant_Id) return false;
			if (a.ssId != b.ssId) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssUsername != b.ssUsername) return false;
			if (a.ssPassword != b.ssPassword) return false;
			if (a.ssEmail != b.ssEmail) return false;
			if (a.ssMobilePhone != b.ssMobilePhone) return false;
			if (a.ssExternal_Id != b.ssExternal_Id) return false;
			if (a.ssCreation_Date != b.ssCreation_Date) return false;
			if (a.ssLast_Login != b.ssLast_Login) return false;
			if (a.ssIs_Active != b.ssIs_Active) return false;
			return true;
		}

		public static bool operator != (ENUserEntityRecord a, ENUserEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENUserEntityRecord)) return false;
			return (this == (ENUserEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ Tenant_Id.GetHashCode()
				^ ssId.GetHashCode()
				^ ssName.GetHashCode()
				^ ssUsername.GetHashCode()
				^ ssPassword.GetHashCode()
				^ ssEmail.GetHashCode()
				^ ssMobilePhone.GetHashCode()
				^ ssExternal_Id.GetHashCode()
				^ ssCreation_Date.GetHashCode()
				^ ssLast_Login.GetHashCode()
				^ ssIs_Active.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENUserEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(11, true);
			OptimizedAttributes = new BitArray(11, false);
			_Tenant_Id = 0;
			_ssId = 0;
			_ssName = "";
			_ssUsername = "";
			_ssPassword = "";
			_ssEmail = "";
			_ssMobilePhone = "";
			_ssExternal_Id = "";
			_ssCreation_Date = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssLast_Login = new DateTime(1900, 1, 1, 0, 0, 0);
			_ssIs_Active = true;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_Tenant_Id", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_Tenant_Id' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_Tenant_Id = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssUsername", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssUsername' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssUsername = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssPassword", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssPassword' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssPassword = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssEmail", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssEmail' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssEmail = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssMobilePhone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssMobilePhone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssMobilePhone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssExternal_Id", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssExternal_Id' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssExternal_Id = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssCreation_Date", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssCreation_Date' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssCreation_Date = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssLast_Login", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssLast_Login' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssLast_Login = (DateTime) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssIs_Active", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssIs_Active' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssIs_Active = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENUserEntityRecord Duplicate() {
			ENUserEntityRecord t;
			t._Tenant_Id = this._Tenant_Id;
			t._ssId = this._ssId;
			t._ssName = this._ssName;
			t._ssUsername = this._ssUsername;
			t._ssPassword = this._ssPassword;
			t._ssEmail = this._ssEmail;
			t._ssMobilePhone = this._ssMobilePhone;
			t._ssExternal_Id = this._ssExternal_Id;
			t._ssCreation_Date = this._ssCreation_Date;
			t._ssLast_Login = this._ssLast_Login;
			t._ssIs_Active = this._ssIs_Active;
			t.ChangedAttributes = new BitArray(11);
			t.OptimizedAttributes = new BitArray(11);
			for (int i = 0; i < 11; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Username")) VarValue.AppendAttribute(recordElem, "Username", ssUsername, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Username");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Password")) VarValue.AppendAttribute(recordElem, "Password", ssPassword, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Password");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Email")) VarValue.AppendAttribute(recordElem, "Email", ssEmail, detailLevel, TypeKind.Email); else VarValue.AppendOptimizedAttribute(recordElem, "Email");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MobilePhone")) VarValue.AppendAttribute(recordElem, "MobilePhone", ssMobilePhone, detailLevel, TypeKind.PhoneNumber); else VarValue.AppendOptimizedAttribute(recordElem, "MobilePhone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".External_Id")) VarValue.AppendAttribute(recordElem, "External_Id", ssExternal_Id, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "External_Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Creation_Date")) VarValue.AppendAttribute(recordElem, "Creation_Date", ssCreation_Date, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Creation_Date");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Last_Login")) VarValue.AppendAttribute(recordElem, "Last_Login", ssLast_Login, detailLevel, TypeKind.DateTime); else VarValue.AppendOptimizedAttribute(recordElem, "Last_Login");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Is_Active")) VarValue.AppendAttribute(recordElem, "Is_Active", ssIs_Active, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "Is_Active");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "tenant_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Tenant_Id")) variable.Value = Tenant_Id; else variable.Optimized = true;
			} else if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "username") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Username")) variable.Value = ssUsername; else variable.Optimized = true;
			} else if (head == "password") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Password")) variable.Value = ssPassword; else variable.Optimized = true;
			} else if (head == "email") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Email")) variable.Value = ssEmail; else variable.Optimized = true;
			} else if (head == "mobilephone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MobilePhone")) variable.Value = ssMobilePhone; else variable.Optimized = true;
			} else if (head == "external_id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".External_Id")) variable.Value = ssExternal_Id; else variable.Optimized = true;
			} else if (head == "creation_date") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Creation_Date")) variable.Value = ssCreation_Date; else variable.Optimized = true;
			} else if (head == "last_login") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Last_Login")) variable.Value = ssLast_Login; else variable.Optimized = true;
			} else if (head == "is_active") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Is_Active")) variable.Value = ssIs_Active; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdTenant_Id)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdId)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdName)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdUsername)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdPassword)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdEmail)) {
				return ChangedAttributes[5];
			} else if (key.Equals(IdMobilePhone)) {
				return ChangedAttributes[6];
			} else if (key.Equals(IdExternal_Id)) {
				return ChangedAttributes[7];
			} else if (key.Equals(IdCreation_Date)) {
				return ChangedAttributes[8];
			} else if (key.Equals(IdLast_Login)) {
				return ChangedAttributes[9];
			} else if (key.Equals(IdIs_Active)) {
				return ChangedAttributes[10];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdTenant_Id)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdId)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdName)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdUsername)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdPassword)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdEmail)) {
				return OptimizedAttributes[5];
			} else if (key.Equals(IdMobilePhone)) {
				return OptimizedAttributes[6];
			} else if (key.Equals(IdExternal_Id)) {
				return OptimizedAttributes[7];
			} else if (key.Equals(IdCreation_Date)) {
				return OptimizedAttributes[8];
			} else if (key.Equals(IdLast_Login)) {
				return OptimizedAttributes[9];
			} else if (key.Equals(IdIs_Active)) {
				return OptimizedAttributes[10];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdTenant_Id) {
				return Tenant_Id;
			} else if (key == IdId) {
				return ssId;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdUsername) {
				return ssUsername;
			} else if (key == IdPassword) {
				return ssPassword;
			} else if (key == IdEmail) {
				return ssEmail;
			} else if (key == IdMobilePhone) {
				return ssMobilePhone;
			} else if (key == IdExternal_Id) {
				return ssExternal_Id;
			} else if (key == IdCreation_Date) {
				return ssCreation_Date;
			} else if (key == IdLast_Login) {
				return ssLast_Login;
			} else if (key == IdIs_Active) {
				return ssIs_Active;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(11);
			OptimizedAttributes = new BitArray(11);
			if (other == null) return;
			Tenant_Id = (int) other.AttributeGet(IdTenant_Id);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdTenant_Id);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdTenant_Id);
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdId);
			ssName = (string) other.AttributeGet(IdName);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdName);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdName);
			ssUsername = (string) other.AttributeGet(IdUsername);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdUsername);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdUsername);
			ssPassword = (string) other.AttributeGet(IdPassword);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdPassword);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdPassword);
			ssEmail = (string) other.AttributeGet(IdEmail);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdEmail);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdEmail);
			ssMobilePhone = (string) other.AttributeGet(IdMobilePhone);
			ChangedAttributes[6] = other.ChangedAttributeGet(IdMobilePhone);
			OptimizedAttributes[6] = other.OptimizedAttributeGet(IdMobilePhone);
			ssExternal_Id = (string) other.AttributeGet(IdExternal_Id);
			ChangedAttributes[7] = other.ChangedAttributeGet(IdExternal_Id);
			OptimizedAttributes[7] = other.OptimizedAttributeGet(IdExternal_Id);
			ssCreation_Date = (DateTime) other.AttributeGet(IdCreation_Date);
			ChangedAttributes[8] = other.ChangedAttributeGet(IdCreation_Date);
			OptimizedAttributes[8] = other.OptimizedAttributeGet(IdCreation_Date);
			ssLast_Login = (DateTime) other.AttributeGet(IdLast_Login);
			ChangedAttributes[9] = other.ChangedAttributeGet(IdLast_Login);
			OptimizedAttributes[9] = other.OptimizedAttributeGet(IdLast_Login);
			ssIs_Active = (bool) other.AttributeGet(IdIs_Active);
			ChangedAttributes[10] = other.ChangedAttributeGet(IdIs_Active);
			OptimizedAttributes[10] = other.OptimizedAttributeGet(IdIs_Active);
		}
	} // ENUserEntityRecord
	/// <summary>
	/// Structure <code>RCUserRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCUserRecord: ISerializable, ITypedRecord<RCUserRecord> {
		private static readonly GlobalObjectKey IdUser = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*NRPQzoKKE6jx2aUQjxfOeQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("User")]
		public ENUserEntityRecord ssENUser;


		public static implicit operator ENUserEntityRecord(RCUserRecord r) {
			return r.ssENUser;
		}

		public static implicit operator RCUserRecord(ENUserEntityRecord r) {
			RCUserRecord res = new RCUserRecord(null);
			res.ssENUser = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENUser.ChangedAttributes = value;
			}
			get {
				return ssENUser.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCUserRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(11, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENUser.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENUser.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENUser.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENUser.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCUserRecord r) {
			this = r;
		}


		public static bool operator == (RCUserRecord a, RCUserRecord b) {
			if (a.ssENUser != b.ssENUser) return false;
			return true;
		}

		public static bool operator != (RCUserRecord a, RCUserRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCUserRecord)) return false;
			return (this == (RCUserRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENUser.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCUserRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENUser = new ENUserEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENUser", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENUser' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENUser = (ENUserEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENUser.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENUser.InternalRecursiveSave();
		}


		public RCUserRecord Duplicate() {
			RCUserRecord t;
			t.ssENUser = (ENUserEntityRecord) this.ssENUser.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENUser.ToXml(this, recordElem, "User", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "user") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".User")) variable.Value = ssENUser; else variable.Optimized = true;
				variable.SetFieldName("user");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENUser.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENUser.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdUser) {
				return ssENUser;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENUser.FillFromOther((IRecord) other.AttributeGet(IdUser));
		}
	} // RCUserRecord
	/// <summary>
	/// RecordList type <code>RLUserRecordList</code> that represents a record list of <code>User</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserRecordList: GenericRecordList<RCUserRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCUserRecord GetElementDefaultValue() {
			return new RCUserRecord("");
		}

		public T[] ToArray<T>(Func<RCUserRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserRecordList recordlist, Func<RCUserRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLUserRecordList(RCUserRecord[] array) {
			RLUserRecordList result = new RLUserRecordList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLUserRecordList ToList<T>(T[] array, Func <T, RCUserRecord> converter) {
			RLUserRecordList result = new RLUserRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLUserRecordList FromRestList<T>(RestList<T> restList, Func <T, RCUserRecord> converter) {
			RLUserRecordList result = new RLUserRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(11, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCUserRecord> NewList() {
			return new RLUserRecordList();
		}


	} // RLUserRecordList

	/// <summary>
	/// RecordList type <code>RLUserList</code> that represents a record list of <code>User</code>
	/// </summary>
	[Serializable()]
	public partial class RLUserList: GenericRecordList<ENUserEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENUserEntityRecord GetElementDefaultValue() {
			return new ENUserEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENUserEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLUserList recordlist, Func<ENUserEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLUserList(ENUserEntityRecord[] array) {
			RLUserList result = new RLUserList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLUserList ToList<T>(T[] array, Func <T, ENUserEntityRecord> converter) {
			RLUserList result = new RLUserList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLUserList FromRestList<T>(RestList<T> restList, Func <T, ENUserEntityRecord> converter) {
			RLUserList result = new RLUserList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLUserList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLUserList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLUserList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENUserEntityRecord> NewList() {
			return new RLUserList();
		}


	} // RLUserList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateUser
		/// </summary>

		public static void CreateUser(HeContext heContext, RCUserRecord inParamSource, out int outParamId) {
			outParamId = 0;

			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ENUserEntity.eSpaceKey;
				ENUserEntityRecord ssENUser = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					AppInfo.GetAppInfo().ValidateEndUserAction(trans, EndUserAction.Create, ssENUser.ssId, ssENUser.ssIs_Active);
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENUserEntity.LocalViewName(null, null) + " (" +
					 " [TENANT_ID]" +
					 ", [NAME]" +
					 ", [USERNAME]" +
					 ", [PASSWORD]" +
					 ", [EMAIL]" +
					 ", [MOBILEPHONE]" +
					 ", [EXTERNAL_ID]" +
					 ", [CREATION_DATE]" +
					 ", [LAST_LOGIN]" +
					 ", [IS_ACTIVE]" +
					 " ) VALUES (" +
					 " @Tenant_Id" +
					 ", @ssName" +
					 ", @ssUsername" +
					 ", @ssPassword" +
					 ", @ssEmail" +
					 ", @ssMobilePhone" +
					 ", @ssExternal_Id" +
					 ", @ssCreation_Date" +
					 ", @ssLast_Login" +
					 ", @ssIs_Active" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.AppInfo.Tenant.Id);
					insertSqlCmd.CreateParameter("@ssName", DbType.String, ssENUser.ssName);
					insertSqlCmd.CreateParameter("@ssUsername", DbType.String, ssENUser.ssUsername);
					insertSqlCmd.CreateParameter("@ssPassword", DbType.String, ssENUser.ssPassword);
					insertSqlCmd.CreateParameter("@ssEmail", DbType.String, ssENUser.ssEmail);
					insertSqlCmd.CreateParameter("@ssMobilePhone", DbType.String, ssENUser.ssMobilePhone);
					insertSqlCmd.CreateParameter("@ssExternal_Id", DbType.String, ssENUser.ssExternal_Id);
					insertSqlCmd.CreateParameter("@ssCreation_Date", DbType.DateTime, ssENUser.ssCreation_Date);
					insertSqlCmd.CreateParameter("@ssLast_Login", DbType.DateTime, ssENUser.ssLast_Login);
					insertSqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENUser.ssIs_Active);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateUser", true), typeof(int));
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateUser
		/// </summary>

		public static void CreateOrUpdateUser(HeContext heContext, BitArray usedFields, RCUserRecord inParamSource, out int outParamId) {
			outParamId = 0;

			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ENUserEntity.eSpaceKey;
				ENUserEntityRecord ssENUser = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(11, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[0] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TENANT_ID] = @Tenant_Id"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NAME] = @ssName"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERNAME] = @ssUsername"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PASSWORD] = @ssPassword"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMAIL] = @ssEmail"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MOBILEPHONE] = @ssMobilePhone"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTERNAL_ID] = @ssExternal_Id"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATION_DATE] = @ssCreation_Date"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LAST_LOGIN] = @ssLast_Login"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_ACTIVE] = @ssIs_Active"): parameters);
					string whereCondition = " WHERE [ID] = @ssENUserssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[0]) {
						sqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.AppInfo.Tenant.Id);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssName", DbType.String, ssENUser.ssName);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssUsername", DbType.String, ssENUser.ssUsername);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssPassword", DbType.String, ssENUser.ssPassword);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssEmail", DbType.String, ssENUser.ssEmail);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssMobilePhone", DbType.String, ssENUser.ssMobilePhone);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssExternal_Id", DbType.String, ssENUser.ssExternal_Id);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCreation_Date", DbType.DateTime, ssENUser.ssCreation_Date);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssLast_Login", DbType.DateTime, ssENUser.ssLast_Login);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENUser.ssIs_Active);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[IS_ACTIVE] = [IS_ACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENUserssId", DbType.Int32, ssENUser.ssId);
					counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateUser (update)", true);
					if (counter == 0) {
						AppInfo.GetAppInfo().ValidateEndUserAction(trans, EndUserAction.Create, ssENUser.ssId, ssENUser.ssIs_Active);
						string insertSql =
						 "SET NOCOUNT ON; INSERT INTO " + ENUserEntity.LocalViewName(null, null) + " (" +
						 " [TENANT_ID]" +
						 ", [NAME]" +
						 ", [USERNAME]" +
						 ", [PASSWORD]" +
						 ", [EMAIL]" +
						 ", [MOBILEPHONE]" +
						 ", [EXTERNAL_ID]" +
						 ", [CREATION_DATE]" +
						 ", [LAST_LOGIN]" +
						 ", [IS_ACTIVE]" +
						 " ) VALUES (" +
						 " @Tenant_Id" +
						 ", @ssName" +
						 ", @ssUsername" +
						 ", @ssPassword" +
						 ", @ssEmail" +
						 ", @ssMobilePhone" +
						 ", @ssExternal_Id" +
						 ", @ssCreation_Date" +
						 ", @ssLast_Login" +
						 ", @ssIs_Active" +
						 " ) ; SELECT SCOPE_IDENTITY();";
						Command insertSqlCmd = trans.CreateCommand(insertSql);
						insertSqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.AppInfo.Tenant.Id);
						insertSqlCmd.CreateParameter("@ssName", DbType.String, ssENUser.ssName);
						insertSqlCmd.CreateParameter("@ssUsername", DbType.String, ssENUser.ssUsername);
						insertSqlCmd.CreateParameter("@ssPassword", DbType.String, ssENUser.ssPassword);
						insertSqlCmd.CreateParameter("@ssEmail", DbType.String, ssENUser.ssEmail);
						insertSqlCmd.CreateParameter("@ssMobilePhone", DbType.String, ssENUser.ssMobilePhone);
						insertSqlCmd.CreateParameter("@ssExternal_Id", DbType.String, ssENUser.ssExternal_Id);
						insertSqlCmd.CreateParameter("@ssCreation_Date", DbType.DateTime, ssENUser.ssCreation_Date);
						insertSqlCmd.CreateParameter("@ssLast_Login", DbType.DateTime, ssENUser.ssLast_Login);
						insertSqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENUser.ssIs_Active);
						outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateUser", true), typeof(int));
					} else {
						outParamId = ssENUser.ssId;
					}
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Action: DeleteUser
		/// </summary>

		public static void DeleteUser(HeContext heContext, int inParamId) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ENUserEntity.eSpaceKey;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "DELETE " +
					 "FROM " + ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteUser", true);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Action: GetUser
		/// </summary>

		public static void GetUser(HeContext heContext, int inParamId, out RCUserRecord outParamRecord) {
			outParamRecord = new RCUserRecord(null);

			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ENUserEntity.eSpaceKey;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [NAME]" +
					 ", [USERNAME]" +
					 ", [PASSWORD]" +
					 ", [EMAIL]" +
					 ", [MOBILEPHONE]" +
					 ", [EXTERNAL_ID]" +
					 ", [CREATION_DATE]" +
					 ", [LAST_LOGIN]" +
					 ", [IS_ACTIVE]" +
					 " FROM " + ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
					 "WHERE [ID] = @inParamId";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetUser", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(11, false)
							};
						} else
						throw new DataBaseException(ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Action: GetUserForUpdate
		/// </summary>

		public static void GetUserForUpdate(HeContext heContext, int inParamId, out RCUserRecord outParamRecord) {
			outParamRecord = new RCUserRecord(null);

			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ENUserEntity.eSpaceKey;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					string sql =
					 "SELECT " +
					 " [ID]" +
					 ", [NAME]" +
					 ", [USERNAME]" +
					 ", [PASSWORD]" +
					 ", [EMAIL]" +
					 ", [MOBILEPHONE]" +
					 ", [EXTERNAL_ID]" +
					 ", [CREATION_DATE]" +
					 ", [LAST_LOGIN]" +
					 ", [IS_ACTIVE]" +
					 "FROM " + ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
					 "WHERE [ID] = @inParamId ";
					Command sqlCmd = trans.CreateCommand(sql);
					sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
					using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetUserForUpdate", true, false, false)) {
						if (reader.Read()) {
							outParamRecord.ReadDB(reader);
							outParamRecord.AllOptimizedAttributes = new BitArray[] {
								new BitArray(11, false)
							};
						} else
						throw new DataBaseException(ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
					}
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Action: UpdateUser
		/// </summary>

		public static void UpdateUser(HeContext heContext, BitArray usedFields, RCUserRecord inParamSource) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ENUserEntity.eSpaceKey;
				ENUserEntityRecord ssENUser = inParamSource;
				using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
					if (usedFields == null) {
						usedFields = new BitArray(11, true);
					}
					string updateSet = "SET NOCOUNT OFF; UPDATE " + ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
					string parameters = "";
					parameters = (usedFields[0] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[TENANT_ID] = @Tenant_Id"): parameters);
					parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NAME] = @ssName"): parameters);
					parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[USERNAME] = @ssUsername"): parameters);
					parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PASSWORD] = @ssPassword"): parameters);
					parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMAIL] = @ssEmail"): parameters);
					parameters = (usedFields[6] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[MOBILEPHONE] = @ssMobilePhone"): parameters);
					parameters = (usedFields[7] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EXTERNAL_ID] = @ssExternal_Id"): parameters);
					parameters = (usedFields[8] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[CREATION_DATE] = @ssCreation_Date"): parameters);
					parameters = (usedFields[9] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[LAST_LOGIN] = @ssLast_Login"): parameters);
					parameters = (usedFields[10] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[IS_ACTIVE] = @ssIs_Active"): parameters);
					string whereCondition = " WHERE [ID] = @ssENUserssId";
					string sql = updateSet + parameters + whereCondition;
					Command sqlCmd = trans.CreateCommand(sql);
					int counter = 0;
					if (usedFields[0]) {
						sqlCmd.CreateParameter("@Tenant_Id", DbType.Int32, heContext.AppInfo.Tenant.Id);
						counter++;
					}
					if (usedFields[2]) {
						sqlCmd.CreateParameter("@ssName", DbType.String, ssENUser.ssName);
						counter++;
					}
					if (usedFields[3]) {
						sqlCmd.CreateParameter("@ssUsername", DbType.String, ssENUser.ssUsername);
						counter++;
					}
					if (usedFields[4]) {
						sqlCmd.CreateParameter("@ssPassword", DbType.String, ssENUser.ssPassword);
						counter++;
					}
					if (usedFields[5]) {
						sqlCmd.CreateParameter("@ssEmail", DbType.String, ssENUser.ssEmail);
						counter++;
					}
					if (usedFields[6]) {
						sqlCmd.CreateParameter("@ssMobilePhone", DbType.String, ssENUser.ssMobilePhone);
						counter++;
					}
					if (usedFields[7]) {
						sqlCmd.CreateParameter("@ssExternal_Id", DbType.String, ssENUser.ssExternal_Id);
						counter++;
					}
					if (usedFields[8]) {
						sqlCmd.CreateParameter("@ssCreation_Date", DbType.DateTime, ssENUser.ssCreation_Date);
						counter++;
					}
					if (usedFields[9]) {
						sqlCmd.CreateParameter("@ssLast_Login", DbType.DateTime, ssENUser.ssLast_Login);
						counter++;
					}
					if (usedFields[10]) {
						sqlCmd.CreateParameter("@ssIs_Active", DbType.Boolean, ssENUser.ssIs_Active);
						counter++;
					}
					if (counter == 0) {
						string dummyUpdate = "[IS_ACTIVE] = [IS_ACTIVE]";
						string noUpdate = updateSet + dummyUpdate + whereCondition;
						sqlCmd = trans.CreateCommand(noUpdate);
					}
					sqlCmd.CreateParameter("@ssENUserssId", DbType.Int32, ssENUser.ssId);
					if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateUser", true) <= 0)
					throw new DataBaseException(ENUserEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENUser.ssId + " was not updated");
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

	}
}

namespace ssContactManager {
	[XmlType("User")]
	public class WORCUserRecord {
		[XmlIgnore]
		public int varWSTenant_Id;

		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string varWSName;

		[System.Xml.Serialization.XmlElement("Username")]
		public string varWSUsername;

		[System.Xml.Serialization.XmlElement("Password")]
		public string varWSPassword;

		[System.Xml.Serialization.XmlElement("Email")]
		public string varWSEmail;

		[System.Xml.Serialization.XmlElement("MobilePhone")]
		public string varWSMobilePhone;

		[System.Xml.Serialization.XmlElement("External_Id")]
		public string varWSExternal_Id;

		[System.Xml.Serialization.XmlElement("Creation_Date")]
		public DateTime varWSCreation_Date;

		[System.Xml.Serialization.XmlElement("Last_Login")]
		public DateTime varWSLast_Login;

		[System.Xml.Serialization.XmlElement("Is_Active")]
		public bool varWSIs_Active;

		public WORCUserRecord() {
			varWSTenant_Id = (int) 0;
			varWSId = (int) 0;
			varWSName = (string) "";
			varWSUsername = (string) "";
			varWSPassword = (string) "";
			varWSEmail = (string) "";
			varWSMobilePhone = (string) "";
			varWSExternal_Id = (string) "";
			varWSCreation_Date = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSLast_Login = (DateTime) new DateTime(1900, 1, 1, 0, 0, 0);
			varWSIs_Active = (bool) true;
		}

		public WORCUserRecord(ENUserEntityRecord r) {
			varWSTenant_Id = (int) r.Tenant_Id;
			varWSId = (int) r.ssId;
			varWSName = BaseAppUtils.RemoveControlChars(r.ssName);
			varWSUsername = BaseAppUtils.RemoveControlChars(r.ssUsername);
			varWSPassword = BaseAppUtils.RemoveControlChars(r.ssPassword);
			varWSEmail = BaseAppUtils.RemoveControlChars(r.ssEmail);
			varWSMobilePhone = BaseAppUtils.RemoveControlChars(r.ssMobilePhone);
			varWSExternal_Id = BaseAppUtils.RemoveControlChars(r.ssExternal_Id);
			varWSCreation_Date = (DateTime) r.ssCreation_Date;
			varWSLast_Login = (DateTime) r.ssLast_Login;
			varWSIs_Active = (bool) r.ssIs_Active;
		}

		public static RLUserList ToRecordList(WORCUserRecord[] array) {
			RLUserList rl = new RLUserList();
			if (array != null) {
				foreach(WORCUserRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCUserRecord[] FromRecordList(RLUserList rl) {
			WORCUserRecord[] array = new WORCUserRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial struct RCUserRecord {
		public static implicit operator WORCUserRecord(RCUserRecord r) {
			return new WORCUserRecord(r.ssENUser);
		}

		public static implicit operator RCUserRecord(WORCUserRecord w) {
			RCUserRecord r = new RCUserRecord("");
			if (w != null) {
				r.ssENUser = w;
			}
			return r;
		}

	}

	partial struct ENUserEntityRecord {
		public static implicit operator WORCUserRecord(ENUserEntityRecord r) {
			return new WORCUserRecord(r);
		}

		public static implicit operator ENUserEntityRecord(WORCUserRecord w) {
			ENUserEntityRecord r = new ENUserEntityRecord("");
			if (w != null) {
				r.Tenant_Id = (int) w.varWSTenant_Id;
				r.ssId = (int) w.varWSId;
				r.ssName = ((string) w.varWSName ?? "");
				r.ssUsername = ((string) w.varWSUsername ?? "");
				r.ssPassword = ((string) w.varWSPassword ?? "");
				r.ssEmail = ((string) w.varWSEmail ?? "");
				r.ssMobilePhone = ((string) w.varWSMobilePhone ?? "");
				r.ssExternal_Id = ((string) w.varWSExternal_Id ?? "");
				r.ssCreation_Date = (DateTime) w.varWSCreation_Date;
				r.ssLast_Login = (DateTime) w.varWSLast_Login;
				r.ssIs_Active = (bool) w.varWSIs_Active;
			}
			return r;
		}

	}
}


namespace ssContactManager {
	[Serializable()]
	public partial class WORLUserRecordList {
		public WORCUserRecord[] Array;


		public WORLUserRecordList(WORCUserRecord[] r) {
			if (r == null)
			Array = new WORCUserRecord[0];
			else
			Array = r;
		}
		public WORLUserRecordList() {
			Array = new WORCUserRecord[0];
		}

		public WORLUserRecordList(RLUserRecordList rl) {
			rl=(RLUserRecordList) rl.Duplicate();
			Array = new WORCUserRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCUserRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLUserRecordList {
		public static implicit operator RLUserRecordList(WORCUserRecord[] array) {
			RLUserRecordList rl = new RLUserRecordList();
			if (array != null) {
				foreach(WORCUserRecord val in array) {
					rl.Append((RCUserRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCUserRecord[](RLUserRecordList rl) {
			WORCUserRecord[] array = new WORCUserRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCUserRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLUserRecordList {
		public static implicit operator RLUserRecordList(WORLUserRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLUserRecordList(RLUserRecordList rl) {
			return new WORLUserRecordList(rl);
		}
		public static implicit operator WORCUserRecord[](WORLUserRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLUserRecordList(WORCUserRecord[] array) {
			return new WORLUserRecordList(array);
		}
	}
}

