/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using System.Collections.Generic;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssContactManager {

	public sealed partial class ENContactEntity {
		public static string LocalViewName(int? tenant, string locale) {
			return ViewName(null, locale);
		}
		public static string ViewName(int? tenant, string locale) {
			return BaseAppUtils.EscapeAndQualifySqlIdentifier(DatabaseAccess.ForEspaceDatabase("794c445f-f27d-4f61-b47a-0da71440df68"), "OSUSR_dma_Contact2");
		}
		public static System.Collections.Generic.Dictionary<string, string> AttributesToDatabaseNamesMap() {
			return new System.Collections.Generic.Dictionary<string, string>() {
				{ "id", "Id"
				}
				, { "name", "Name"
				}
				, { "jobtitle", "JobTitle"
				}
				, { "phone", "Phone"
				}
				, { "email", "Email"
				}
				, { "notes", "Notes"
				}
			};
		}
	} // ENContactEntity

	/// <summary>
	/// Entity <code>ENContactEntityRecord</code> that represents the Service Studio entity
	///  <code>Contact</code> <p> Description: </p>
	/// </summary>
	[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityRecordDetails("Contact", "8FoexHOwtk+ApPgBumSaRg", "X0RMeX3yYU+0eg2nFEDfaA", 0, "OSUSR_dma_Contact2", null)]
	[Serializable()]
	public partial struct ENContactEntityRecord: ISerializable, ITypedRecord<ENContactEntityRecord>, ISimpleRecord {
		private static readonly GlobalObjectKey IdId = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*A4XlnFcA2kyJFr7YYEZvCA");
		private static readonly GlobalObjectKey IdName = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*D3LIKpL4pk+X6Uqde6qwJw");
		private static readonly GlobalObjectKey IdJobTitle = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*nFuZfnS70EqlArXz4bdw1Q");
		private static readonly GlobalObjectKey IdPhone = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*0JIwhmO3xEW7XXaWW8bB4w");
		private static readonly GlobalObjectKey IdEmail = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*EIm9E+CvXU+wKr_OBdgxCg");
		private static readonly GlobalObjectKey IdNotes = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*eLtGqeLN0kW7hQhHyDjf3g");

		public static void EnsureInitialized() {}
		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("ID", 0, true, true, false, true)]
		[System.Xml.Serialization.XmlElement("Id")]
		private int _ssId;
		public int ssId {
			get {
				return _ssId;
			}
			set {
				if ((_ssId!=value) || OptimizedAttributes[0]) {
					ChangedAttributes = new BitArray(6, true);
					_ssId = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NAME", 50, false, false, false, true)]
		[System.Xml.Serialization.XmlElement("Name")]
		private string _ssName;
		public string ssName {
			get {
				return _ssName;
			}
			set {
				if ((_ssName!=value) || OptimizedAttributes[1]) {
					ChangedAttributes[1] = true;
					_ssName = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("JOBTITLE", 50, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("JobTitle")]
		private string _ssJobTitle;
		public string ssJobTitle {
			get {
				return _ssJobTitle;
			}
			set {
				if ((_ssJobTitle!=value) || OptimizedAttributes[2]) {
					ChangedAttributes[2] = true;
					_ssJobTitle = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("PHONE", 20, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Phone")]
		private string _ssPhone;
		public string ssPhone {
			get {
				return _ssPhone;
			}
			set {
				if ((_ssPhone!=value) || OptimizedAttributes[3]) {
					ChangedAttributes[3] = true;
					_ssPhone = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("EMAIL", 250, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Email")]
		private string _ssEmail;
		public string ssEmail {
			get {
				return _ssEmail;
			}
			set {
				if ((_ssEmail!=value) || OptimizedAttributes[4]) {
					ChangedAttributes[4] = true;
					_ssEmail = value;
				}
			}
		}

		[OutSystems.HubEdition.RuntimePlatform.MetaInformation.EntityAttributeDetails("NOTES", 500, false, false, false, false)]
		[System.Xml.Serialization.XmlElement("Notes")]
		private string _ssNotes;
		public string ssNotes {
			get {
				return _ssNotes;
			}
			set {
				if ((_ssNotes!=value) || OptimizedAttributes[5]) {
					ChangedAttributes[5] = true;
					_ssNotes = value;
				}
			}
		}


		public BitArray ChangedAttributes;

		public BitArray OptimizedAttributes;

		public ENContactEntityRecord(params string[] dummy) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssName = "";
			_ssJobTitle = "";
			_ssPhone = "";
			_ssEmail = "";
			_ssNotes = "";
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssId = r.ReadInteger(index++, "Contact.Id", 0);
			ssName = r.ReadText(index++, "Contact.Name", "");
			ssJobTitle = r.ReadText(index++, "Contact.JobTitle", "");
			ssPhone = r.ReadPhoneNumber(index++, "Contact.Phone", "");
			ssEmail = r.ReadEmail(index++, "Contact.Email", "");
			ssNotes = r.ReadText(index++, "Contact.Notes", "");
			ChangedAttributes = new BitArray(6, false);
			OptimizedAttributes = new BitArray(6, false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(ENContactEntityRecord r) {
			this = r;
		}


		public static bool operator == (ENContactEntityRecord a, ENContactEntityRecord b) {
			if (a.ssId != b.ssId) return false;
			if (a.ssName != b.ssName) return false;
			if (a.ssJobTitle != b.ssJobTitle) return false;
			if (a.ssPhone != b.ssPhone) return false;
			if (a.ssEmail != b.ssEmail) return false;
			if (a.ssNotes != b.ssNotes) return false;
			return true;
		}

		public static bool operator != (ENContactEntityRecord a, ENContactEntityRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(ENContactEntityRecord)) return false;
			return (this == (ENContactEntityRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssId.GetHashCode()
				^ ssName.GetHashCode()
				^ ssJobTitle.GetHashCode()
				^ ssPhone.GetHashCode()
				^ ssEmail.GetHashCode()
				^ ssNotes.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public ENContactEntityRecord(SerializationInfo info, StreamingContext context) {
			ChangedAttributes = new BitArray(6, true);
			OptimizedAttributes = new BitArray(6, false);
			_ssId = 0;
			_ssName = "";
			_ssJobTitle = "";
			_ssPhone = "";
			_ssEmail = "";
			_ssNotes = "";
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("_ssId", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssId' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssId = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssName", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssName' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssName = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssJobTitle", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssJobTitle' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssJobTitle = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssPhone", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssPhone' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssPhone = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssEmail", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssEmail' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssEmail = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("_ssNotes", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named '_ssNotes' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				_ssNotes = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public ENContactEntityRecord Duplicate() {
			ENContactEntityRecord t;
			t._ssId = this._ssId;
			t._ssName = this._ssName;
			t._ssJobTitle = this._ssJobTitle;
			t._ssPhone = this._ssPhone;
			t._ssEmail = this._ssEmail;
			t._ssNotes = this._ssNotes;
			t.ChangedAttributes = new BitArray(6);
			t.OptimizedAttributes = new BitArray(6);
			for (int i = 0; i < 6; i++) {
				t.ChangedAttributes[i] = ChangedAttributes[i];
				t.OptimizedAttributes[i] = OptimizedAttributes[i];
			}
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Entity");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Id")) VarValue.AppendAttribute(recordElem, "Id", ssId, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Id");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Name")) VarValue.AppendAttribute(recordElem, "Name", ssName, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Name");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".JobTitle")) VarValue.AppendAttribute(recordElem, "JobTitle", ssJobTitle, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "JobTitle");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Phone")) VarValue.AppendAttribute(recordElem, "Phone", ssPhone, detailLevel, TypeKind.PhoneNumber); else VarValue.AppendOptimizedAttribute(recordElem, "Phone");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Email")) VarValue.AppendAttribute(recordElem, "Email", ssEmail, detailLevel, TypeKind.Email); else VarValue.AppendOptimizedAttribute(recordElem, "Email");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Notes")) VarValue.AppendAttribute(recordElem, "Notes", ssNotes, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Notes");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "id") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Id")) variable.Value = ssId; else variable.Optimized = true;
			} else if (head == "name") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Name")) variable.Value = ssName; else variable.Optimized = true;
			} else if (head == "jobtitle") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".JobTitle")) variable.Value = ssJobTitle; else variable.Optimized = true;
			} else if (head == "phone") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Phone")) variable.Value = ssPhone; else variable.Optimized = true;
			} else if (head == "email") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Email")) variable.Value = ssEmail; else variable.Optimized = true;
			} else if (head == "notes") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Notes")) variable.Value = ssNotes; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return ChangedAttributes[0];
			} else if (key.Equals(IdName)) {
				return ChangedAttributes[1];
			} else if (key.Equals(IdJobTitle)) {
				return ChangedAttributes[2];
			} else if (key.Equals(IdPhone)) {
				return ChangedAttributes[3];
			} else if (key.Equals(IdEmail)) {
				return ChangedAttributes[4];
			} else if (key.Equals(IdNotes)) {
				return ChangedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			if (key.Equals(IdId)) {
				return OptimizedAttributes[0];
			} else if (key.Equals(IdName)) {
				return OptimizedAttributes[1];
			} else if (key.Equals(IdJobTitle)) {
				return OptimizedAttributes[2];
			} else if (key.Equals(IdPhone)) {
				return OptimizedAttributes[3];
			} else if (key.Equals(IdEmail)) {
				return OptimizedAttributes[4];
			} else if (key.Equals(IdNotes)) {
				return OptimizedAttributes[5];
			} else {
				throw new Exception("Invalid key");
			}
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdId) {
				return ssId;
			} else if (key == IdName) {
				return ssName;
			} else if (key == IdJobTitle) {
				return ssJobTitle;
			} else if (key == IdPhone) {
				return ssPhone;
			} else if (key == IdEmail) {
				return ssEmail;
			} else if (key == IdNotes) {
				return ssNotes;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			ChangedAttributes = new BitArray(6);
			OptimizedAttributes = new BitArray(6);
			if (other == null) return;
			ssId = (int) other.AttributeGet(IdId);
			ChangedAttributes[0] = other.ChangedAttributeGet(IdId);
			OptimizedAttributes[0] = other.OptimizedAttributeGet(IdId);
			ssName = (string) other.AttributeGet(IdName);
			ChangedAttributes[1] = other.ChangedAttributeGet(IdName);
			OptimizedAttributes[1] = other.OptimizedAttributeGet(IdName);
			ssJobTitle = (string) other.AttributeGet(IdJobTitle);
			ChangedAttributes[2] = other.ChangedAttributeGet(IdJobTitle);
			OptimizedAttributes[2] = other.OptimizedAttributeGet(IdJobTitle);
			ssPhone = (string) other.AttributeGet(IdPhone);
			ChangedAttributes[3] = other.ChangedAttributeGet(IdPhone);
			OptimizedAttributes[3] = other.OptimizedAttributeGet(IdPhone);
			ssEmail = (string) other.AttributeGet(IdEmail);
			ChangedAttributes[4] = other.ChangedAttributeGet(IdEmail);
			OptimizedAttributes[4] = other.OptimizedAttributeGet(IdEmail);
			ssNotes = (string) other.AttributeGet(IdNotes);
			ChangedAttributes[5] = other.ChangedAttributeGet(IdNotes);
			OptimizedAttributes[5] = other.OptimizedAttributeGet(IdNotes);
		}
	} // ENContactEntityRecord
	/// <summary>
	/// Structure <code>RCContactRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCContactRecord: ISerializable, ITypedRecord<RCContactRecord> {
		private static readonly GlobalObjectKey IdContact = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*aza2YeSaqv1P7Ms5Z_9uqA");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Contact")]
		public ENContactEntityRecord ssENContact;


		public static implicit operator ENContactEntityRecord(RCContactRecord r) {
			return r.ssENContact;
		}

		public static implicit operator RCContactRecord(ENContactEntityRecord r) {
			RCContactRecord res = new RCContactRecord(null);
			res.ssENContact = r;
			return res;
		}

		public BitArray ChangedAttributes {
			set {
				ssENContact.ChangedAttributes = value;
			}
			get {
				return ssENContact.ChangedAttributes;
			}
		}
		public BitArray OptimizedAttributes;

		public RCContactRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssENContact = new ENContactEntityRecord(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = new BitArray(6, false);
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
					ssENContact.OptimizedAttributes = GetDefaultOptimizedValues()[0];
				} else {
					ssENContact.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = ssENContact.OptimizedAttributes;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssENContact.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCContactRecord r) {
			this = r;
		}


		public static bool operator == (RCContactRecord a, RCContactRecord b) {
			if (a.ssENContact != b.ssENContact) return false;
			return true;
		}

		public static bool operator != (RCContactRecord a, RCContactRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCContactRecord)) return false;
			return (this == (RCContactRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssENContact.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCContactRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssENContact = new ENContactEntityRecord(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssENContact", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssENContact' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssENContact = (ENContactEntityRecord) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssENContact.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssENContact.InternalRecursiveSave();
		}


		public RCContactRecord Duplicate() {
			RCContactRecord t;
			t.ssENContact = (ENContactEntityRecord) this.ssENContact.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssENContact.ToXml(this, recordElem, "Contact", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "contact") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Contact")) variable.Value = ssENContact; else variable.Optimized = true;
				variable.SetFieldName("contact");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			return ssENContact.ChangedAttributeGet(key);
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			return ssENContact.OptimizedAttributeGet(key);
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdContact) {
				return ssENContact;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssENContact.FillFromOther((IRecord) other.AttributeGet(IdContact));
		}
	} // RCContactRecord
	/// <summary>
	/// RecordList type <code>RLContactRecordList</code> that represents a record list of
	///  <code>Contact</code>
	/// </summary>
	[Serializable()]
	public partial class RLContactRecordList: GenericRecordList<RCContactRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCContactRecord GetElementDefaultValue() {
			return new RCContactRecord("");
		}

		public T[] ToArray<T>(Func<RCContactRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLContactRecordList recordlist, Func<RCContactRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLContactRecordList(RCContactRecord[] array) {
			RLContactRecordList result = new RLContactRecordList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLContactRecordList ToList<T>(T[] array, Func <T, RCContactRecord> converter) {
			RLContactRecordList result = new RLContactRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLContactRecordList FromRestList<T>(RestList<T> restList, Func <T, RCContactRecord> converter) {
			RLContactRecordList result = new RLContactRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLContactRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLContactRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLContactRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLContactRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = new BitArray(6, false);
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCContactRecord> NewList() {
			return new RLContactRecordList();
		}


	} // RLContactRecordList

	/// <summary>
	/// RecordList type <code>RLContactList</code> that represents a record list of <code>Contact</code>
	/// </summary>
	[Serializable()]
	public partial class RLContactList: GenericRecordList<ENContactEntityRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override ENContactEntityRecord GetElementDefaultValue() {
			return new ENContactEntityRecord("");
		}

		public T[] ToArray<T>(Func<ENContactEntityRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLContactList recordlist, Func<ENContactEntityRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLContactList(ENContactEntityRecord[] array) {
			RLContactList result = new RLContactList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLContactList ToList<T>(T[] array, Func <T, ENContactEntityRecord> converter) {
			RLContactList result = new RLContactList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLContactList FromRestList<T>(RestList<T> restList, Func <T, ENContactEntityRecord> converter) {
			RLContactList result = new RLContactList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLContactList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLContactList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLContactList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLContactList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<ENContactEntityRecord> NewList() {
			return new RLContactList();
		}


	} // RLContactList
	public partial class ExtendedActions {
		/// <summary>
		/// Action: CreateContact
		/// </summary>

		public static void CreateContact(HeContext heContext, RCContactRecord inParamSource, out int outParamId) {
			outParamId = 0;

			ENContactEntityRecord ssENContact = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string insertSql =
				 "SET NOCOUNT ON; INSERT INTO " + ENContactEntity.LocalViewName(null, null) + " (" +
				 " [NAME]" +
				 ", [JOBTITLE]" +
				 ", [PHONE]" +
				 ", [EMAIL]" +
				 ", [NOTES]" +
				 " ) VALUES (" +
				 " @ssName" +
				 ", @ssJobTitle" +
				 ", @ssPhone" +
				 ", @ssEmail" +
				 ", @ssNotes" +
				 " ) ; SELECT SCOPE_IDENTITY();";
				Command insertSqlCmd = trans.CreateCommand(insertSql);
				insertSqlCmd.CreateParameter("@ssName", DbType.String, ssENContact.ssName);
				insertSqlCmd.CreateParameter("@ssJobTitle", DbType.String, ssENContact.ssJobTitle);
				insertSqlCmd.CreateParameter("@ssPhone", DbType.String, ssENContact.ssPhone);
				insertSqlCmd.CreateParameter("@ssEmail", DbType.String, ssENContact.ssEmail);
				insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENContact.ssNotes);
				outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateContact", true), typeof(int));
			}
		}

		/// <summary>
		/// Action: CreateOrUpdateContact
		/// </summary>

		public static void CreateOrUpdateContact(HeContext heContext, BitArray usedFields, RCContactRecord inParamSource, out int outParamId) {
			outParamId = 0;

			ENContactEntityRecord ssENContact = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(6, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENContactEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NAME] = @ssName"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[JOBTITLE] = @ssJobTitle"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PHONE] = @ssPhone"): parameters);
				parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMAIL] = @ssEmail"): parameters);
				parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
				string whereCondition = " WHERE [ID] = @ssENContactssId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					sqlCmd.CreateParameter("@ssName", DbType.String, ssENContact.ssName);
					counter++;
				}
				if (usedFields[2]) {
					sqlCmd.CreateParameter("@ssJobTitle", DbType.String, ssENContact.ssJobTitle);
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssPhone", DbType.String, ssENContact.ssPhone);
					counter++;
				}
				if (usedFields[4]) {
					sqlCmd.CreateParameter("@ssEmail", DbType.String, ssENContact.ssEmail);
					counter++;
				}
				if (usedFields[5]) {
					sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENContact.ssNotes);
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[NAME] = [NAME]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENContactssId", DbType.Int32, ssENContact.ssId);
				counter = sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action CreateOrUpdateContact (update)", true);
				if (counter == 0) {
					string insertSql =
					 "SET NOCOUNT ON; INSERT INTO " + ENContactEntity.LocalViewName(null, null) + " (" +
					 " [NAME]" +
					 ", [JOBTITLE]" +
					 ", [PHONE]" +
					 ", [EMAIL]" +
					 ", [NOTES]" +
					 " ) VALUES (" +
					 " @ssName" +
					 ", @ssJobTitle" +
					 ", @ssPhone" +
					 ", @ssEmail" +
					 ", @ssNotes" +
					 " ) ; SELECT SCOPE_IDENTITY();";
					Command insertSqlCmd = trans.CreateCommand(insertSql);
					insertSqlCmd.CreateParameter("@ssName", DbType.String, ssENContact.ssName);
					insertSqlCmd.CreateParameter("@ssJobTitle", DbType.String, ssENContact.ssJobTitle);
					insertSqlCmd.CreateParameter("@ssPhone", DbType.String, ssENContact.ssPhone);
					insertSqlCmd.CreateParameter("@ssEmail", DbType.String, ssENContact.ssEmail);
					insertSqlCmd.CreateParameter("@ssNotes", DbType.String, ssENContact.ssNotes);
					outParamId = (int) Convert.ChangeType(insertSqlCmd.ExecuteScalar("Entity Action CreateOrUpdateContact", true), typeof(int));
				} else {
					outParamId = ssENContact.ssId;
				}
			}
		}

		/// <summary>
		/// Action: DeleteContact
		/// </summary>

		public static void DeleteContact(HeContext heContext, int inParamId) {
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "DELETE " +
				 "FROM " + ENContactEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action DeleteContact", true);
			}
		}

		/// <summary>
		/// Action: GetContact
		/// </summary>

		public static void GetContact(HeContext heContext, int inParamId, out RCContactRecord outParamRecord) {
			outParamRecord = new RCContactRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [NAME]" +
				 ", [JOBTITLE]" +
				 ", [PHONE]" +
				 ", [EMAIL]" +
				 ", [NOTES]" +
				 " FROM " + ENContactEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " " +
				 "WHERE [ID] = @inParamId";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetContact", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(6, false)
						};
					} else
					throw new DataBaseException(ENContactEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: GetContactForUpdate
		/// </summary>

		public static void GetContactForUpdate(HeContext heContext, int inParamId, out RCContactRecord outParamRecord) {
			outParamRecord = new RCContactRecord(null);

			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				string sql =
				 "SELECT " +
				 " [ID]" +
				 ", [NAME]" +
				 ", [JOBTITLE]" +
				 ", [PHONE]" +
				 ", [EMAIL]" +
				 ", [NOTES]" +
				 "FROM " + ENContactEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " WITH ( UPDLOCK ) " +
				 "WHERE [ID] = @inParamId ";
				Command sqlCmd = trans.CreateCommand(sql);
				sqlCmd.CreateParameter("@inParamId", DbType.Int32, inParamId);
				using(IDataReader reader = sqlCmd.ExecuteReader("Entity Action GetContactForUpdate", true, false, false)) {
					if (reader.Read()) {
						outParamRecord.ReadDB(reader);
						outParamRecord.AllOptimizedAttributes = new BitArray[] {
							new BitArray(6, false)
						};
					} else
					throw new DataBaseException(ENContactEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + inParamId + " was not found");
				}
			}
		}

		/// <summary>
		/// Action: UpdateContact
		/// </summary>

		public static void UpdateContact(HeContext heContext, BitArray usedFields, RCContactRecord inParamSource) {
			ENContactEntityRecord ssENContact = inParamSource;
			using(Transaction trans = DatabaseAccess.ForCurrentDatabase.GetRequestTransaction()) {
				if (usedFields == null) {
					usedFields = new BitArray(6, true);
				}
				string updateSet = "SET NOCOUNT OFF; UPDATE " + ENContactEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " SET ";
				string parameters = "";
				parameters = (usedFields[1] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NAME] = @ssName"): parameters);
				parameters = (usedFields[2] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[JOBTITLE] = @ssJobTitle"): parameters);
				parameters = (usedFields[3] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[PHONE] = @ssPhone"): parameters);
				parameters = (usedFields[4] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[EMAIL] = @ssEmail"): parameters);
				parameters = (usedFields[5] ?(StringUtils.SuffixIfNotEmpty(parameters, ", ") + "[NOTES] = @ssNotes"): parameters);
				string whereCondition = " WHERE [ID] = @ssENContactssId";
				string sql = updateSet + parameters + whereCondition;
				Command sqlCmd = trans.CreateCommand(sql);
				int counter = 0;
				if (usedFields[1]) {
					sqlCmd.CreateParameter("@ssName", DbType.String, ssENContact.ssName);
					counter++;
				}
				if (usedFields[2]) {
					sqlCmd.CreateParameter("@ssJobTitle", DbType.String, ssENContact.ssJobTitle);
					counter++;
				}
				if (usedFields[3]) {
					sqlCmd.CreateParameter("@ssPhone", DbType.String, ssENContact.ssPhone);
					counter++;
				}
				if (usedFields[4]) {
					sqlCmd.CreateParameter("@ssEmail", DbType.String, ssENContact.ssEmail);
					counter++;
				}
				if (usedFields[5]) {
					sqlCmd.CreateParameter("@ssNotes", DbType.String, ssENContact.ssNotes);
					counter++;
				}
				if (counter == 0) {
					string dummyUpdate = "[NAME] = [NAME]";
					string noUpdate = updateSet + dummyUpdate + whereCondition;
					sqlCmd = trans.CreateCommand(noUpdate);
				}
				sqlCmd.CreateParameter("@ssENContactssId", DbType.Int32, ssENContact.ssId);
				if (sqlCmd.ExecuteNonQueryWithoutTransformParametersSyntax("Entity Action UpdateContact", true) <= 0)
				throw new DataBaseException(ENContactEntity.LocalViewName(heContext.AppInfo.Tenant.Id, BuiltInFunction.GetCurrentLocale()) + " with key " + ssENContact.ssId + " was not updated");
			}
		}

	}
}

namespace ssContactManager {
	[XmlType("Contact")]
	public class WORCContactRecord {
		[System.Xml.Serialization.XmlElement("Id")]
		public int varWSId;

		[System.Xml.Serialization.XmlElement("Name")]
		public string varWSName;

		[System.Xml.Serialization.XmlElement("JobTitle")]
		public string varWSJobTitle;

		[System.Xml.Serialization.XmlElement("Phone")]
		public string varWSPhone;

		[System.Xml.Serialization.XmlElement("Email")]
		public string varWSEmail;

		[System.Xml.Serialization.XmlElement("Notes")]
		public string varWSNotes;

		public WORCContactRecord() {
			varWSId = (int) 0;
			varWSName = (string) "";
			varWSJobTitle = (string) "";
			varWSPhone = (string) "";
			varWSEmail = (string) "";
			varWSNotes = (string) "";
		}

		public WORCContactRecord(ENContactEntityRecord r) {
			varWSId = (int) r.ssId;
			varWSName = BaseAppUtils.RemoveControlChars(r.ssName);
			varWSJobTitle = BaseAppUtils.RemoveControlChars(r.ssJobTitle);
			varWSPhone = BaseAppUtils.RemoveControlChars(r.ssPhone);
			varWSEmail = BaseAppUtils.RemoveControlChars(r.ssEmail);
			varWSNotes = BaseAppUtils.RemoveControlChars(r.ssNotes);
		}

		public static RLContactList ToRecordList(WORCContactRecord[] array) {
			RLContactList rl = new RLContactList();
			if (array != null) {
				foreach(WORCContactRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCContactRecord[] FromRecordList(RLContactList rl) {
			WORCContactRecord[] array = new WORCContactRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial struct RCContactRecord {
		public static implicit operator WORCContactRecord(RCContactRecord r) {
			return new WORCContactRecord(r.ssENContact);
		}

		public static implicit operator RCContactRecord(WORCContactRecord w) {
			RCContactRecord r = new RCContactRecord("");
			if (w != null) {
				r.ssENContact = w;
			}
			return r;
		}

	}

	partial struct ENContactEntityRecord {
		public static implicit operator WORCContactRecord(ENContactEntityRecord r) {
			return new WORCContactRecord(r);
		}

		public static implicit operator ENContactEntityRecord(WORCContactRecord w) {
			ENContactEntityRecord r = new ENContactEntityRecord("");
			if (w != null) {
				r.ssId = (int) w.varWSId;
				r.ssName = ((string) w.varWSName ?? "");
				r.ssJobTitle = ((string) w.varWSJobTitle ?? "");
				r.ssPhone = ((string) w.varWSPhone ?? "");
				r.ssEmail = ((string) w.varWSEmail ?? "");
				r.ssNotes = ((string) w.varWSNotes ?? "");
			}
			return r;
		}

	}
}


namespace ssContactManager {
	[Serializable()]
	public partial class WORLContactRecordList {
		public WORCContactRecord[] Array;


		public WORLContactRecordList(WORCContactRecord[] r) {
			if (r == null)
			Array = new WORCContactRecord[0];
			else
			Array = r;
		}
		public WORLContactRecordList() {
			Array = new WORCContactRecord[0];
		}

		public WORLContactRecordList(RLContactRecordList rl) {
			rl=(RLContactRecordList) rl.Duplicate();
			Array = new WORCContactRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCContactRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLContactRecordList {
		public static implicit operator RLContactRecordList(WORCContactRecord[] array) {
			RLContactRecordList rl = new RLContactRecordList();
			if (array != null) {
				foreach(WORCContactRecord val in array) {
					rl.Append((RCContactRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCContactRecord[](RLContactRecordList rl) {
			WORCContactRecord[] array = new WORCContactRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCContactRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLContactRecordList {
		public static implicit operator RLContactRecordList(WORLContactRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLContactRecordList(RLContactRecordList rl) {
			return new WORLContactRecordList(rl);
		}
		public static implicit operator WORCContactRecord[](WORLContactRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLContactRecordList(WORCContactRecord[] array) {
			return new WORLContactRecordList(array);
		}
	}
}

