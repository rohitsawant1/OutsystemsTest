/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssContactManager.Flows.FlowMainFlow {

	public class ScrnContact_List: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnContact_List(): base(ContactManager_Properties.QuirksMode) {
		}


		/// <summary>
		/// Variable <code>varLcGetContacts_SearchKeyword_IsEmpty</code> that represents the Service Studio
		///  local variable <code>GetContacts_SearchKeyword_IsEmpty</code> <p>Description: Created by th
		/// e upgrade of 'GetContacts' to an Aggregate. Required to ensure the "search parameter" behavior of
		///  the old query parameter 'SearchKeyword' in Oracle databases.</p>
		/// </summary>
		bool varLcGetContacts_SearchKeyword_IsEmpty = false;

		/// <summary>
		/// Variable wt_WebBlockInstance24
		/// </summary>
		protected ssContactManager.Flows.FlowCommon.WBlkLayout_Normal wt_WebBlockInstance24;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container2;
		/// <summary>
		/// Variable (wt_Link35) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link35;
		protected OutSystems.HubEdition.WebWidgets.Container wtFilters_Wrapper;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtSearchInputValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtSearchInputValidatorType;
		/// <summary>
		/// Variable (wt_Button25) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button25;
		/// <summary>
		/// Variable (wt_Button3) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button3;
		protected OutSystems.HubEdition.WebWidgets.Container wtContactTable_Wrapper;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container44;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container28;
		private RLContactRecordList _ssContactTableList = new RLContactRecordList();
		public RLContactRecordList ssContactTableList {
			get {
				return _ssContactTableList; 
			}
			set {
				_ssContactTableList = value;
				wtContactTable.DataSource = value;
				ssContactTableListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.OSDataGrid wtContactTable;
		public ArrayList wtContactTable_storage = new ArrayList();
		protected bool ssContactTableList_notUsedYet = true;
		protected bool ssContactTableListDoDataBind;
		protected bool ssContactTableListDataBound;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container9;
		/// <summary>
		/// Variable (wt_Link27) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link27;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container48;
		/// <summary>
		/// Variable (wt_Link6) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link6;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container46;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container41;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container7;


		List<object> explicitChangedVariables = new List<object>();

		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssContactManager.Flows.FlowCommon.WBlkLayout_Normal.GetCss(writer, inline, visited);
			ssContactManager.Flows.FlowCommon.WBlkMenu.GetCss(writer, inline, visited);
			ssContactManager.Flows.FlowRichWidgets.WBlkList_Counter.GetCss(writer, inline, visited);
			ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn.GetCss(writer, inline, visited);
			ssContactManager.Flows.FlowRichWidgets.WBlkList_Navigation.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("ZOHdDILdyE2OWbJJAj5CPg", "Contact_List");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/ContactManager/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == RuntimePlatformSettings.Misc.CallbackDebugInformationKey.GetValue()) {
					return AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "ZOHdDILdyE2OWbJJAj5CPg", "Contact_List");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "ZOHdDILdyE2OWbJJAj5CPg", "Contact_List");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "ZOHdDILdyE2OWbJJAj5CPg", "Contact_List");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "ZOHdDILdyE2OWbJJAj5CPg", "Contact_List");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnContact_List() {
		}


		RLContactRecordList queryResGetContacts_outParamList = new RLContactRecordList();
		long queryResGetContacts_outParamCount = 0L;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; perfTracer.RegisterAction("0cdde164-dd82-4dc8-8e59-b249023e423e.#Preparation", "Preparation");
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("ZOHdDILdyE2OWbJJAj5CPg.#Preparation", "Preparation", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				// Created by the upgrade of 'GetContacts' to an Aggregate.
				// GetContacts_SearchKeyword_IsEmpty = Contact_List_SearchKeyword = ""
				varLcGetContacts_SearchKeyword_IsEmpty = (((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"]) == "");
				// Query datasetGetContacts
				int datasetGetContacts_maxRecords = Math.Max(wtContactTable.StartIndex + wtContactTable.LineCount + 1, 0);
				queryResGetContacts_outParamList = FuncssPreparation.datasetGetContacts(heContext, datasetGetContacts_maxRecords, IterationMultiplicity.Single, out queryResGetContacts_outParamCount, varLcGetContacts_SearchKeyword_IsEmpty
				, Functions.ActionList_SortColumn_GetOrderBy(heContext, wtContactTable.ClientID, "{Contact}.[Name]")
				, ((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"])
				);

			} catch (System.Threading.ThreadAbortException) {
				throw;
			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssUrl {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssFile {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return "Theme.ContactManager.css"; 
			}
		}

		protected override string ThemeCssCacheInvalidationSuffix {
			get {
				return AppUtils.Instance.CacheInvalidationSuffix; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "Theme.ContactManager.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return ""; 
			}
		}

		protected override string ThemeExtraCssCacheInvalidationSuffix {
			get {
				return ""; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return ""; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsHttps(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Contact_List", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Contact_List", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent(heContext);
			base.OnInit(e);
		}
		private void InitializeComponent(HeContext heContext) {
			wt_WebBlockInstance24 = (ssContactManager.Flows.FlowCommon.WBlkLayout_Normal) FindControl("wt_WebBlockInstance24");
			wt_Container2 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container2");
			wt_Link35 = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wt_Link35");
			wtFilters_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtFilters_Wrapper");
			wt_Button25 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button25");
			if (this.wt_Button25 != null) {
				this.wt_Button25.Click += new System.EventHandler(this.wt_Button25_Click);
			}
			wt_Button3 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button3");
			if (this.wt_Button3 != null) {
				this.wt_Button3.Click += new System.EventHandler(this.wt_Button3_Click);
			}
			wtContactTable_Wrapper = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wtContactTable_Wrapper");
			wt_Container44 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container44");
			wt_Container28 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container28");
			wtContactTable = (OutSystems.HubEdition.WebWidgets.OSDataGrid) FindControl("wtContactTable");
			wtContactTable.StartIndexExpression = () => Functions.ActionList_Navigation_GetStartIndex(heContext, wtContactTable.ClientID, true, (-1));
			wtContactTable.LineCountExpression = () => 50;
			wtContactTable.EmptyMessageExpression = () => "No contacts to show...";
			wt_Container41 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container41");
			wt_Container7 = (OutSystems.HubEdition.WebWidgets.Container) FindControl("wt_Container7");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance38") {
				return wt_WebBlockInstance24.wtMenu.FindControl("wt_WebBlockInstance38");
			}
			if (id == "wt_Text13") {
				return wt_WebBlockInstance24.wtTitle.FindControl("wt_Text13");
			}
			if (id == "wt_Container2") {
				return wt_WebBlockInstance24.wtTitle.FindControl("wt_Container2");
			}
			if (id == "wt_Link35") {
				return wt_WebBlockInstance24.wtTitle.FindControl("wt_Link35");
			}
			if (id == "wt_Text36") {
				return wt_WebBlockInstance24.wtTitle.FindControl("wt_Text36");
			}
			if (id == "wtFilters_Wrapper") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wtFilters_Wrapper");
			}
			if (id == "wt_Table18") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_Table18");
			}
			if (id == "wt_TableRow47") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRow47");
			}
			if (id == "wt_TableCell37") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell37");
			}
			if (id == "wtSearchInput") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wtSearchInput");
			}
			if (id == "wt_TableCell26") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell26");
			}
			if (id == "wt_Button25") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_Button25");
			}
			if (id == "wt_Button3") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_Button3");
			}
			if (id == "wt_TableCell1") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableCell1");
			}
			if (id == "wtContactTable_Wrapper") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wtContactTable_Wrapper");
			}
			if (id == "wt_Container44") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_Container44");
			}
			if (id == "wt_Container28") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_Container28");
			}
			if (id == "wt_WebBlockInstance45") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_WebBlockInstance45");
			}
			if (id == "wtContactTable") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wtContactTable");
			}
			if (id == "wt_TableRecordsHeaderRow49") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_TableRecordsHeaderRow49");
			}
			if (id == "wt_Container41") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_Container41");
			}
			if (id == "wt_Container7") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_Container7");
			}
			if (id == "wt_WebBlockInstance10") {
				return wt_WebBlockInstance24.wtMainContent.FindControl("wt_WebBlockInstance10");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;

			// No session SessionFixationValidation because screen is accessible by anonymous users or uses a readonly session.

			if (appInfo != null) {
				heContext = appInfo.OsContext; heContext.RequestTracer.MainEventType = RequestTracerEventType.WebScreenServerExecuted; heContext.RequestTracer.RegisterEndpoint("0cdde164-dd82-4dc8-8e59-b249023e423e", "Contact_List"); 
			}
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["ContactManager._ScreenParameters_Contact_List"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["ContactManager._ScreenParameters_Contact_List"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
				}
				else if (Request.HttpMethod == "POST") {
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(message: "eSpace " + appInfo.eSpaceName + " is disabled", stackTrace: Environment.StackTrace, context: heContext, moduleName: "Global");
				String contact = RuntimePlatformUtils.GetAdministrationEmail();
				try {
					Context.Items[Constants.AppOfflineCustomHandler.ContactKey] = contact;
					Context.Items[Constants.AppOfflineCustomHandler.ErrorCodeKey] = "APPLICATION_OFFLINE";
					Server.Transfer("/ContactManager/CustomHandlers/app_offline.aspx");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/ContactManager/CustomHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (appInfo.IsForcingSecurityForScreens() && !RuntimePlatformUtils.RequestIsSecure(Request)) {
				Response.Redirect("https://" + Request.Url.Host + "" + AppUtils.Instance.getImagePath() + "Contact_List.aspx" + Request.Url.Query);
				HttpContext.Current.ApplicationInstance.CompleteRequest();
			}
			if (!IsPostBack) {
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				ssContactTableListDoDataBind = true;
				Title = "Contacts"; Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.AppInfo, heContext.Session, heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Contact_List", (string) heContext.Session["MSISDN"], "WEB", "Screen", RuntimeEnvironment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (heContext.AppInfo.IsForcingSecurityForScreens() && !RuntimePlatformUtils.RequestIsSecure(Request)) {
					Response.Redirect("https://" + Request.Url.Host + "" + AppUtils.Instance.getImagePath() + "Contact_List.aspx" + Request.Url.Query);
					HttpContext.Current.ApplicationInstance.CompleteRequest();
				}
				FetchViewState();
			}

		}
		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");

			NegotiateTabIndexes();

			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, false);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button25 = wt_Button25 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button25");
			} catch {}
			string defButtonKeyDownJs = (wt_Button25 != null) ? "return OsEnterKey('" +wt_Button25.ClientID + "', arguments[0] || window.event);": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"] ?? "";
						if (!onkeydown.Contains(defButtonKeyDownJs)) {
							ctrl.Attributes.Add("onkeydown", onkeydown + defButtonKeyDownJs);
						}

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short settedTabIndex = 0;
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, Convert.ToInt16(htTabIndexGroupsTI[groupid]), out settedTabIndex);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, tabindex, out settedTabIndex);
							// Increase tabindex if it was not overiden
							if (tabindex == settedTabIndex) {
								tabindex++;
							}
						}
					}
					tabindex = Math.Max(tabindex, ++settedTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssContactManager.Flows.FlowMainFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			return;
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("ZOHdDILdyE2OWbJJAj5CPg"); 
			}
		}

		public bool isSecure {
			get {
				return Global.App.IsForcingSecurityForScreens();
			}
		}


		public class lcvRefreshContactTable: VarsBag {
			public bool inParamResetFilters;
			public bool inParamResetPagination;
			public lcvRefreshContactTable(bool inParamResetFilters, bool inParamResetPagination) {
				this.inParamResetFilters = inParamResetFilters;
				this.inParamResetPagination = inParamResetPagination;
			}
		}
		/// <summary>
		/// Action <code>CommandRefreshContactTable</code> that represents the Service Studio screen action
		///  <code>RefreshContactTable</code> <p> Description: Refreshes the contacts table after changing th
		/// e filters or order</p>
		/// </summary>
		private bool CommandRefreshContactTable(HeContext heContext, bool inParamResetFilters, bool inParamResetPagination) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("d3c6c0c2-63a0-46e1-8353-2e0b6b9b1829", "RefreshContactTable"); 
			}
			lcvRefreshContactTable localVars = new lcvRefreshContactTable(inParamResetFilters, inParamResetPagination);
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("wsDG06Bj4UaDUy4La5sYKQ", "RefreshContactTable", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				try {
					if ((localVars.inParamResetFilters)) {
						// ClearFilters
						// Contact_List_SearchKeyword = ""
						Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"] = "";
						explicitChangedVariables.Add(((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"]));

						// Refresh Widget (wtFilters_Wrapper)
						((OSPageViewState) Page).AjaxRefresh(wtFilters_Wrapper, "None", StoreViewState);

					}

					if ((localVars.inParamResetPagination)) {
						// ResetStartIndex
						Actions.ActionList_Navigation_ResetStartIndex(heContext, wtContactTable.ClientID);

					}

					// Created by the upgrade of 'GetContacts' to an Aggregate.
					// GetContacts_SearchKeyword_IsEmpty = Contact_List_SearchKeyword = ""
					varLcGetContacts_SearchKeyword_IsEmpty = (((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"]) == "");
					explicitChangedVariables.Add(varLcGetContacts_SearchKeyword_IsEmpty);

					// Query datasetGetContacts
					{
						int datasetGetContacts_maxRecords = Math.Max(wtContactTable.StartIndex + wtContactTable.LineCount + 1, 0);
						queryResGetContacts_outParamList = FuncssPreparation.datasetGetContacts(heContext, datasetGetContacts_maxRecords, IterationMultiplicity.Single, out queryResGetContacts_outParamCount, varLcGetContacts_SearchKeyword_IsEmpty
						, Functions.ActionList_SortColumn_GetOrderBy(heContext, wtContactTable.ClientID, "{Contact}.[Name]")
						, ((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"])
						);
					}

					// Refresh Widget (wtContactTable_Wrapper)
					ssContactTableListDoDataBind = true;
					((OSPageViewState) Page).AjaxRefresh(wtContactTable_Wrapper, "None", StoreViewState);

					// Update Screen
					return true;

				} // try

				catch (System.Threading.ThreadAbortException) {
					return false;
				}
				catch (Exception ex) {
					ErrorLog.LogApplicationError(ex, heContext, "");
					Global.App.OsContext.Session["ExceptionMessage"] = ex.Message;
					heContext.LastException = ex;
					// Error Handler
					DatabaseAccess.RollbackAllTransactions();

					// ExceptionFeedbackMessage
					Actions.ActionFeedback_Message(heContext, ex.Message, ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("3a5cuVOamEu9KnDBSWLcbA")).ssId);

					// Update Screen
					return true;

				} // Catch
			} catch (System.Threading.ThreadAbortException) {
				return false;
			}
		}
		/// <summary>
		/// wt_WebBlockInstance24 Functions
		/// </summary>
		public void webBlck_WebBlockInstance24_onDataBinding(object sender, System.EventArgs e) {
			ssContactManager.Flows.FlowCommon.WBlkLayout_Normal widget = (ssContactManager.Flows.FlowCommon.WBlkLayout_Normal) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance38 Functions
		/// </summary>
		public void webBlck_WebBlockInstance38_onDataBinding(object sender, System.EventArgs e) {
			ssContactManager.Flows.FlowCommon.WBlkMenu widget = (ssContactManager.Flows.FlowCommon.WBlkMenu) sender;
			widget.inParamActiveMenuItemId = ENMenuItemEntity.GetRecordByKey(ObjectKey.Parse("bQMfrwAt5UaQWFeNE2K7bg")).ssId;
		}
		/// <summary>
		/// wt_Container2 Functions
		/// </summary>
		public void cnt_Container2_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container2_setInlineAttributes(sender, e);
		}
		public string cnt_Container2_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container2_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container2)
		/// </summary>
		/// <returns>The Visible State of wt_Container2</returns>
		public bool cnt_Container2_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link35 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link35)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link35)</returns>
		public string lnk_Link35_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if ((heContext.AppInfo.eSpaceId != Global.eSpaceId)) {
				navUrl = GetClientRedirectionUrlBasePath(Global.App.IsForcingSecurityForScreens(), AppUtils.Instance.getImagePath(), "", "");
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Contact_Edit", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link35)
		/// </summary>
		/// <returns>title of the Link (wt_Link35)</returns>
		public string
		lnk_Link35_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link35)
		/// </summary>
		/// <returns>The Visible State of wt_Link35</returns>
		public bool lnk_Link35_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link35)
		/// </summary>
		/// <returns>The Enabled State of wt_Link35</returns>
		public bool lnk_Link35_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtFilters_Wrapper Functions
		/// </summary>
		public void cntFilters_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntFilters_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntFilters_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntFilters_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtFilters_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtFilters_Wrapper</returns>
		public bool cntFilters_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wtSearchInput Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtSearchInput_input_value() {
			if (("" != ((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"]))) {
				return ((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"]);
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtSearchInput");

				if (explicitChangedVariables.Contains(((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"])) || ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ((string) Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"]);
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtSearchInput_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"] = ""; 
				} else {
					Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"] = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				Global.App.OsContext.Session["ContactManager.Contact_List_SearchKeyword"] = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtSearchInput)
		/// </summary>
		/// <returns>The Visible State of wtSearchInput</returns>
		public bool inputwtSearchInput_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtSearchInput)
		/// </summary>
		/// <returns>The Enabled State of wtSearchInput</returns>
		public bool inputwtSearchInput_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtSearchInput)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtSearchInput</returns>
		public bool inputwtSearchInput_isMandatory() {
			return false;
		}

		/// <summary>
		/// Gets the prompt of the input (wtSearchInput)
		/// </summary>
		/// <returns>Prompt of the Input (wtSearchInput)</returns>
		public string inputwtSearchInput_getPrompt() {
			return "Type the Name, Job Title, Phone or Email";
		}
		/// <summary>
		/// wt_Button25 Functions
		/// </summary>
		public void btn_Button25_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button25_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandRefreshContactTable(heContext, false, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button25)
		/// </summary>
		/// <returns>Label of the Button (wt_Button25)</returns>
		public string
		btn_Button25_getLabel() {
			return "Search";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button25)
		/// </summary>
		/// <returns>The Visible State of wt_Button25</returns>
		public bool btn_Button25_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button25)
		/// </summary>
		/// <returns>The Enabled State of wt_Button25</returns>
		public bool btn_Button25_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Button3 Functions
		/// </summary>
		public void btn_Button3_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button3_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
			if (CommandRefreshContactTable(heContext, true, true)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button3)
		/// </summary>
		/// <returns>Label of the Button (wt_Button3)</returns>
		public string
		btn_Button3_getLabel() {
			return "Reset";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button3)
		/// </summary>
		/// <returns>The Visible State of wt_Button3</returns>
		public bool btn_Button3_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button3)
		/// </summary>
		/// <returns>The Enabled State of wt_Button3</returns>
		public bool btn_Button3_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wtContactTable_Wrapper Functions
		/// </summary>
		public void cntContactTable_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			cntContactTable_Wrapper_setInlineAttributes(sender, e);
		}
		public string cntContactTable_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cntContactTable_Wrapper_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtContactTable_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtContactTable_Wrapper</returns>
		public bool cntContactTable_Wrapper_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container44 Functions
		/// </summary>
		public void cnt_Container44_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container44_setInlineAttributes(sender, e);
		}
		public string cnt_Container44_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container44_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container44)
		/// </summary>
		/// <returns>The Visible State of wt_Container44</returns>
		public bool cnt_Container44_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container28 Functions
		/// </summary>
		public void cnt_Container28_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container28_setInlineAttributes(sender, e);
		}
		public string cnt_Container28_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container28_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container28)
		/// </summary>
		/// <returns>The Visible State of wt_Container28</returns>
		public bool cnt_Container28_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance45 Functions
		/// </summary>
		public void webBlck_WebBlockInstance45_onDataBinding(object sender, System.EventArgs e) {
			ssContactManager.Flows.FlowRichWidgets.WBlkList_Counter widget = (ssContactManager.Flows.FlowRichWidgets.WBlkList_Counter) sender;
			widget.inParamStartIndex = Functions.ActionList_Navigation_GetStartIndex(heContext, wtContactTable.ClientID, true, (-1));
			widget.inParamTotalRowCount = Convert.ToInt32(queryResGetContacts_outParamCount);
			widget.inParamLineCount = wtContactTable.RtWidget.LineCount;
		}
		/// <summary>
		/// wtContactTable Functions
		/// </summary>
		public void recTableContactTable_onDataBinding(object sender, System.EventArgs e) {
			// widget wtContactTable
			ssContactTableList = queryResGetContacts_outParamList;
			ssContactTableListDoDataBind = false;
			ssContactTableListDataBound = true;
			wtContactTable.ShowHeader = true;
		}
		public void recTableContactTable_Select(object sender, DataGridCommandEventArgs e) {
			if (e.Item.DataSetIndex != -1) {
				if (ssContactTableList.Length > 0) {
					ssContactTableList.CurrentRec = ssContactTableList[ssContactTableList.CurrentRowNumber];
				}
				if (ssContactTableList.Length > e.Item.DataSetIndex) {
					ssContactTableList.CurrentRec = ssContactTableList[e.Item.DataSetIndex];
					ssContactTableList.CurrentRowNumber = e.Item.DataSetIndex;
				}
			}
			if (e is DataGridCommandAjaxEventArgs) {
				((DataGridCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)});
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recTableContactTable_Store(object dataItem, int index) {
			return "";
		}
		public void recTableContactTable_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recTableContactTable_Clear(object sender, EventArgs e) {
			wtContactTable_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recTableContactTable_Rebuild(int startIndex, int lineCount) {
			if (ssContactTableList.Length != -1) {
				wtContactTable_storage.Clear();
				for (int i=startIndex; i<ssContactTableList.Data.Count && i<startIndex+lineCount; i++) {
					recTableContactTable_Store(ssContactTableList.Data[i], wtContactTable_storage.Count);
				}
			}
		}
		public void recTableContactTable_ListRefreshDataBind(object sender, EventArgs e) {
			wtContactTable.ShowHeader = true;
		}
		/// <summary>
		/// Function that returns the list of the wtContactTable widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLContactRecordList getWtContactTableList() {
			if (ssContactTableListDoDataBind) {
				recTableContactTable_onDataBinding(this.FindControl("wtContactTable"), null);
			}

			return ssContactTableList;
		}
		/// <summary>
		/// wt_WebBlockInstance11 Functions
		/// </summary>
		public void webBlck_WebBlockInstance11_BindDelegates(object sender, BindDelegatesEventArgs e) {
			ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn webBlock = (ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn) e.UserControl;
			webBlock.NotifyTriggered += webBlck_WebBlockInstance11_AjaxNotifyTriggered;
		}
		public void webBlck_WebBlockInstance11_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Contact}.[Name]";
		}
		private void webBlck_WebBlockInstance11_AjaxNotifyTriggered(object sender, EventArgs e) {
			AppInfo.GetAppInfo().OsContext.AjaxEventContextInfo.NotifyMessage = ((MsgEventArgs) e).msg;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				CommandRefreshContactTable(heContext, false, true);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			AddStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance11
		/// </summary>
		public void webBlck_WebBlockInstance11_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshContactTable(heContext
			, false, true)
			) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_WebBlockInstance30 Functions
		/// </summary>
		public void webBlck_WebBlockInstance30_BindDelegates(object sender, BindDelegatesEventArgs e) {
			ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn webBlock = (ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn) e.UserControl;
			webBlock.NotifyTriggered += webBlck_WebBlockInstance30_AjaxNotifyTriggered;
		}
		public void webBlck_WebBlockInstance30_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Contact}.[JobTitle]";
		}
		private void webBlck_WebBlockInstance30_AjaxNotifyTriggered(object sender, EventArgs e) {
			AppInfo.GetAppInfo().OsContext.AjaxEventContextInfo.NotifyMessage = ((MsgEventArgs) e).msg;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				CommandRefreshContactTable(heContext, false, true);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			AddStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance30
		/// </summary>
		public void webBlck_WebBlockInstance30_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshContactTable(heContext
			, false, true)
			) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Container9 Functions
		/// </summary>
		public void cnt_Container9_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container9_setInlineAttributes(sender, e);
		}
		public string cnt_Container9_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container9_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container9)
		/// </summary>
		/// <returns>The Visible State of wt_Container9</returns>
		public bool cnt_Container9_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance21 Functions
		/// </summary>
		public void webBlck_WebBlockInstance21_BindDelegates(object sender, BindDelegatesEventArgs e) {
			ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn webBlock = (ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn) e.UserControl;
			webBlock.NotifyTriggered += webBlck_WebBlockInstance21_AjaxNotifyTriggered;
		}
		public void webBlck_WebBlockInstance21_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn widget = (ssContactManager.Flows.FlowRichWidgets.WBlkList_SortColumn) sender;
			widget.inParamColumn = "{Contact}.[Phone]";
		}
		private void webBlck_WebBlockInstance21_AjaxNotifyTriggered(object sender, EventArgs e) {
			AppInfo.GetAppInfo().OsContext.AjaxEventContextInfo.NotifyMessage = ((MsgEventArgs) e).msg;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				CommandRefreshContactTable(heContext, false, true);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			AddStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance21
		/// </summary>
		public void webBlck_WebBlockInstance21_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshContactTable(heContext
			, false, true)
			) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// wt_Link27 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link27)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link27)</returns>
		public string lnk_Link27_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if ((heContext.AppInfo.eSpaceId != Global.eSpaceId)) {
				navUrl = GetClientRedirectionUrlBasePath(Global.App.IsForcingSecurityForScreens(), AppUtils.Instance.getImagePath(), "", "");
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>("ContactId", System.Web.HttpUtility.UrlEncode(Convert.ToString(getWtContactTableList().CurrentRec.ssENContact.ssId), Request.ContentEncoding)));
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Contact_Edit", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link27)
		/// </summary>
		/// <returns>title of the Link (wt_Link27)</returns>
		public string
		lnk_Link27_getTitle() {
			return (("Edit \'" +getWtContactTableList().CurrentRec.ssENContact.ssName) + "\'");
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link27)
		/// </summary>
		/// <returns>The Visible State of wt_Link27</returns>
		public bool lnk_Link27_isVisible() {
			return (getWtContactTableList().CurrentRec.ssENContact.ssId!=BuiltInFunction.NullIdentifier());
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link27)
		/// </summary>
		/// <returns>The Enabled State of wt_Link27</returns>
		public bool lnk_Link27_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression20 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Vg2dbN7LS0K4Fb3G6qVuyw) Expression:
		///  ContactTable.List.Current.Contact.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression20() {
			return getWtContactTableList().CurrentRec.ssENContact.ssName;
		}
		/// <summary>
		/// wt_Container48 Functions
		/// </summary>
		public void cnt_Container48_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container48_setInlineAttributes(sender, e);
		}
		public string cnt_Container48_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container48_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container48)
		/// </summary>
		/// <returns>The Visible State of wt_Container48</returns>
		public bool cnt_Container48_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Link6 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link6)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link6)</returns>
		public string lnk_Link6_NavigateUrl() {
			String varLcinParamURL = "";
			varLcinParamURL = ("mailto:" +getWtContactTableList().CurrentRec.ssENContact.ssEmail);
			string sURL = varLcinParamURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link6)
		/// </summary>
		/// <returns>title of the Link (wt_Link6)</returns>
		public string
		lnk_Link6_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link6)
		/// </summary>
		/// <returns>The Visible State of wt_Link6</returns>
		public bool lnk_Link6_isVisible() {
			return (getWtContactTableList().CurrentRec.ssENContact.ssEmail!= "");
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link6)
		/// </summary>
		/// <returns>The Enabled State of wt_Link6</returns>
		public bool lnk_Link6_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_InlineExpression42 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 5a5r4qjbc0mtCHiqm38o2A) Expression:
		///  ContactTable.List.Current.Contact.Email
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression42() {
			return getWtContactTableList().CurrentRec.ssENContact.ssEmail;
		}
		/// <summary>
		/// wt_InlineExpression34 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = 0bGxt5Vpzkqm_7BLWpvTxA) Expression:
		///  ContactTable.List.Current.Contact.JobTitle
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression34() {
			return getWtContactTableList().CurrentRec.ssENContact.ssJobTitle;
		}
		/// <summary>
		/// wt_Container46 Functions
		/// </summary>
		public void cnt_Container46_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container46_setInlineAttributes(sender, e);
		}
		public string cnt_Container46_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container46_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container46)
		/// </summary>
		/// <returns>The Visible State of wt_Container46</returns>
		public bool cnt_Container46_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_InlineExpression17 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = Vh68aEpjrE+77n6bYfm4Kg) Expression:
		///  ContactTable.List.Current.Contact.Phone
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression17() {
			return getWtContactTableList().CurrentRec.ssENContact.ssPhone;
		}
		/// <summary>
		/// wt_Container41 Functions
		/// </summary>
		public void cnt_Container41_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container41_setInlineAttributes(sender, e);
		}
		public string cnt_Container41_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container41_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container41)
		/// </summary>
		/// <returns>The Visible State of wt_Container41</returns>
		public bool cnt_Container41_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_Container7 Functions
		/// </summary>
		public void cnt_Container7_onDataBinding(object sender, System.EventArgs e) {
			cnt_Container7_setInlineAttributes(sender, e);
		}
		public string cnt_Container7_setInlineAttributes(object sender, System.EventArgs e) {
			if (!cnt_Container7_isVisible()) {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				{
					string newstyledef;
					string oldstyledef;
					newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
					oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
					if (oldstyledef != null) {
						if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
						if (!oldstyledef.EndsWith(newstyledef)) {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
						}
					} else {
						((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
					}
				}
			} else {
				string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
				if (stylevalue != null) {
					((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
				}
			}
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container7)
		/// </summary>
		/// <returns>The Visible State of wt_Container7</returns>
		public bool cnt_Container7_isVisible() {
			return true;
		}

		/// <summary>
		/// wt_WebBlockInstance10 Functions
		/// </summary>
		public void webBlck_WebBlockInstance10_BindDelegates(object sender, BindDelegatesEventArgs e) {
			ssContactManager.Flows.FlowRichWidgets.WBlkList_Navigation webBlock = (ssContactManager.Flows.FlowRichWidgets.WBlkList_Navigation) e.UserControl;
			webBlock.NotifyTriggered += webBlck_WebBlockInstance10_AjaxNotifyTriggered;
		}
		public void webBlck_WebBlockInstance10_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
			ssContactManager.Flows.FlowRichWidgets.WBlkList_Navigation widget = (ssContactManager.Flows.FlowRichWidgets.WBlkList_Navigation) sender;
			widget.inParamListWidgetId = wtContactTable.ClientID;
			widget.inParamLineCount = wtContactTable.RtWidget.LineCount;
			widget.inParamTotalRowCount = Convert.ToInt32(queryResGetContacts_outParamCount);
			widget.inParamMaxPageNumbers = 5;
		}
		private void webBlck_WebBlockInstance10_AjaxNotifyTriggered(object sender, EventArgs e) {
			AppInfo.GetAppInfo().OsContext.AjaxEventContextInfo.NotifyMessage = ((MsgEventArgs) e).msg;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				CommandRefreshContactTable(heContext, false, false);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			AddStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// AjaxNotify event handler for widget wt_WebBlockInstance10
		/// </summary>
		public void webBlck_WebBlockInstance10_AjaxNotify(object sender, System.EventArgs e) {
			if (CommandRefreshContactTable(heContext
			, false, false)
			) {
				doAJAXRefreshScreen(heContext);
			}
		}


		public static class FuncCommandRefreshContactTable {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetContacts" of Action "Preparation"
			/// </summary>
			public static RLContactRecordList datasetGetContacts(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out long outParamCount, bool qpboSearchKeyword_IsEmpty, string qpstList_SortColumn_GetOrderBy, string qpstContact_List_SearchKeyword) {
				// Query Iterations: Single {ContactTable}
				// Refresh Query gXCotmMwZ0Co48SKHhfyzw Iterations: Single {ContactTable}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				Command sqlCountCmd = trans.CreateCommand();
				string sql = "";
				string sqlCount = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENContact.[ID] o0, ENContact.[NAME] o1, ENContact.[JOBTITLE] o2, ENContact.[PHONE] o3, ENContact.[EMAIL] o4, NULL o5");
				fromBuilder.Append(" FROM {Contact} ENContact");
				if (!qpboSearchKeyword_IsEmpty || qpstContact_List_SearchKeyword != "") {
					whereBuilder.Append(" WHERE ");
					if (!qpboSearchKeyword_IsEmpty && qpstContact_List_SearchKeyword != "") {
						whereBuilder.Append("((((ENContact.[NAME] LIKE ((N'%' + @qpstContact_List_SearchKeyword) + N'%')) OR (ENContact.[JOBTITLE] LIKE ((N'%' + @qpstContact_List_SearchKeyword) + N'%'))) OR (ENContact.[PHONE] LIKE ((N'%' + @qpstContact_List_SearchKeyword) + N'%'))) OR (ENContact.[EMAIL] LIKE ((N'%' + @qpstContact_List_SearchKeyword) + N'%')))");
						sqlCmd.CreateParameterWithoutReplacements("@qpstContact_List_SearchKeyword", DbType.String, qpstContact_List_SearchKeyword);
						sqlCountCmd.CreateParameterWithoutReplacements("@qpstContact_List_SearchKeyword", DbType.String, qpstContact_List_SearchKeyword);
					}
				}
				string whereBuilderString = whereBuilder.ToString();
				if (whereBuilderString.EndsWith(" WHERE ")) {
					whereBuilder.Remove(whereBuilderString.Length - 7, 7);
				}
				if ((qpstList_SortColumn_GetOrderBy.Trim() != "")) {
					orderByBuilder.Append(" ORDER BY ");
					List<string> orderByColumns = new List<string>();
					orderByColumns.AddRange(BaseAppUtils.ReplaceEntityReferencesAndAttributesInOrderBy(DatabaseAccess.ForEspaceDatabase("794c445f-f27d-4f61-b47a-0da71440df68").DatabaseServices.DMLService.Identifiers, qpstList_SortColumn_GetOrderBy, new string[] { "Contact"
					}
					, new string[] { "ENContact"
					}
					, new System.Collections.Generic.Dictionary<string, string>[] {
						ENContactEntity.AttributesToDatabaseNamesMap()}).Split(','));
					orderByBuilder.Append(BaseAppUtils.GetOrderByColumnsWithoutDuplicates(orderByColumns));
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCount = "SELECT COUNT(1) " + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString();
				sqlCount = AppUtils.Instance.ReplaceEntityReferences(heContext, sqlCount);
				sqlCmd.CommandText = sql;
				sqlCountCmd.CommandText = sqlCount;
				try {
					RLContactRecordList outParamList = new RLContactRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, true});
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLContactRecordList _tmp = new RLContactRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query MainFlow.Contact_List.Preparation.GetContacts.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("25b542cc-2624-8a38-6015-791e23e8421a", "MainFlow.Contact_List.Preparation.GetContacts", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
							}
							outParamList = (RLContactRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							if (maxRecords > 0 && outParamList.Length == maxRecords)
							outParamCount = Convert.ToInt64(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query MainFlow.Contact_List.Preparation.GetContacts.Count", false).ToString());
							else
							outParamCount = outParamList.Length;
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							outParamCount = Convert.ToInt64(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query MainFlow.Contact_List.Preparation.GetContacts.Count", false).ToString());
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query MainFlow.Contact_List.Preparation.GetContacts.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("25b542cc-2624-8a38-6015-791e23e8421a", "MainFlow.Contact_List.Preparation.GetContacts", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
							}
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						if (maxRecords > 0 && maxRecords <= 150) {
							RLContactRecordList _tmp = new RLContactRecordList();
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							try {
								DateTime startTime = DateTime.Now;
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query MainFlow.Contact_List.Preparation.GetContacts.List");
								int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
								);
								RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
								if (reqTracer != null) {
									reqTracer.RegisterQueryExecuted("25b542cc-2624-8a38-6015-791e23e8421a", "MainFlow.Contact_List.Preparation.GetContacts", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
								}
								outParamList = (RLContactRecordList) _tmp.Duplicate();
								outParamList.AllOptimizedAttributes = opt;
								_tmp.CloseDataReader();
								if (maxRecords > 0 && outParamList.Length == maxRecords)
								outParamCount = Convert.ToInt64(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query MainFlow.Contact_List.Preparation.GetContacts.Count", false).ToString());
								else
								outParamCount = outParamList.Length;
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else {
							try {
								outParamCount = Convert.ToInt64(sqlCountCmd.ExecuteScalarWithoutTransformParametersSyntax("Query MainFlow.Contact_List.Preparation.GetContacts.Count", false).ToString());
								DateTime startTime = DateTime.Now;
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query MainFlow.Contact_List.Preparation.GetContacts.List");
								int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
								);
								RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
								if (reqTracer != null) {
									reqTracer.RegisterQueryExecuted("25b542cc-2624-8a38-6015-791e23e8421a", "MainFlow.Contact_List.Preparation.GetContacts", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
								}
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					}
				} catch (Exception e) {
					throw new DataBaseException("Error executing query.", e);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				Preparation(heContext);

				Title = "Contacts"; ssContactTableListDoDataBind = true;
				Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.AppInfo, heContext.Session, heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Contact_List", (string) heContext.Session["MSISDN"], "WEB", "Screen", RuntimeEnvironment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				// Perform the partial databind
				Page.DataBind();
				RequestTracer perfTracer = RuntimePlatformUtils.GetRequestTracer(); if (perfTracer != null) {
					perfTracer.RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.AppInfo, heContext.Session, heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Contact_List", (string) heContext.Session["MSISDN"], "WEB", "Ajax", RuntimeEnvironment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			StoreWebScreenStackViewState();

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		public override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("wtSearchInput_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtSearchInput")).Mandatory, false);
			if (IsAjaxRequest) {
				recTableContactTable_Rebuild((ssContactTableListDataBound ? wtContactTable.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtContactTable.LineCount);
			}
			RemoveStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {
				((IWidgetRuntimeProperties) this.FindControl("wtSearchInput")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtSearchInput_Mandatory", false);
				recTableContactTable_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtSearchInput", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}

}
