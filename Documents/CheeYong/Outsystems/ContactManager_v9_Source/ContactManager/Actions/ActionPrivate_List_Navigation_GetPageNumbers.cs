/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssContactManager {

	public partial class Actions {
		public class lcvPrivate_List_Navigation_GetPageNumbers: VarsBag {
			public int inParamStartIndex;
			public int inParamLineCount;
			public int inParamTotalRowCount;
			public int inParamMaxPageNumbers;
			/// <summary>
			/// Variable <code>varLcCurrentPageNumberMinus1</code> that represents the Service Studio local
			///  variable <code>CurrentPageNumberMinus1</code> <p>Description: </p>
			/// </summary>
			public int varLcCurrentPageNumberMinus1 = 0;

			/// <summary>
			/// Variable <code>varLcLastPageNumber</code> that represents the Service Studio local variable
			///  <code>LastPageNumber</code> <p>Description: </p>
			/// </summary>
			public int varLcLastPageNumber = 0;

			/// <summary>
			/// Variable <code>varLcCurrentPageFirstShownRowIndex</code> that represents the Service Studio local
			///  variable <code>CurrentPageFirstShownRowIndex</code> <p>Description: </p>
			/// </summary>
			public int varLcCurrentPageFirstShownRowIndex = 0;

			/// <summary>
			/// Variable <code>varLcLastShownPageNumber</code> that represents the Service Studio local variable
			///  <code>LastShownPageNumber</code> <p>Description: </p>
			/// </summary>
			public int varLcLastShownPageNumber = 0;

			/// <summary>
			/// Variable <code>varLcPageNumber</code> that represents the Service Studio local variable
			///  <code>PageNumber</code> <p>Description: </p>
			/// </summary>
			public RCListNavigation_PageNumberRecord varLcPageNumber = new RCListNavigation_PageNumberRecord(null);

			/// <summary>
			/// Variable <code>varLcMorePageNumber</code> that represents the Service Studio local variable
			///  <code>MorePageNumber</code> <p>Description: </p>
			/// </summary>
			public RCListNavigation_PageNumberRecord varLcMorePageNumber = new RCListNavigation_PageNumberRecord(null);

			public lcvPrivate_List_Navigation_GetPageNumbers(int inParamStartIndex, int inParamLineCount, int inParamTotalRowCount, int inParamMaxPageNumbers) {
				this.inParamStartIndex = inParamStartIndex;
				this.inParamLineCount = inParamLineCount;
				this.inParamTotalRowCount = inParamTotalRowCount;
				this.inParamMaxPageNumbers = inParamMaxPageNumbers;
			}
		}
		public class lcoPrivate_List_Navigation_GetPageNumbers: VarsBag {
			public RLListNavigation_PageNumberRecordList outParamPageNumbers = new RLListNavigation_PageNumberRecordList();

			public lcoPrivate_List_Navigation_GetPageNumbers() {
			}
		}
		/// <summary>
		/// Action <code>ActionPrivate_List_Navigation_GetPageNumbers</code> that represents the Service Studio
		///  user action <code>Private_List_Navigation_GetPageNumbers</code> <p> Description: </p>
		/// </summary>
		public static void ActionPrivate_List_Navigation_GetPageNumbers(HeContext heContext, int inParamStartIndex, int inParamLineCount, int inParamTotalRowCount, int inParamMaxPageNumbers, out RLListNavigation_PageNumberRecordList outParamPageNumbers) {
			lcoPrivate_List_Navigation_GetPageNumbers result = new lcoPrivate_List_Navigation_GetPageNumbers();
			lcvPrivate_List_Navigation_GetPageNumbers localVars = new lcvPrivate_List_Navigation_GetPageNumbers(inParamStartIndex, inParamLineCount, inParamTotalRowCount, inParamMaxPageNumbers);
			if (heContext != null && heContext.RequestTracer != null) {
				heContext.RequestTracer.RegisterInternalCall("NU0efdNzk06AYlO38KWVbg", "Private_List_Navigation_GetPageNumbers", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
			}
			try {
				if ((((localVars.inParamMaxPageNumbers>0) && (localVars.inParamLineCount>0)))) {
					// Init
					// CurrentPageNumberMinus1 = Trunc
					localVars.varLcCurrentPageNumberMinus1 = (((int) BuiltInFunction.Trunc(((decimal) (((decimal) localVars.inParamStartIndex)) /
					(decimal) (((decimal) localVars.inParamLineCount))))));
					// LastPageNumber = Trunc + TextToInteger
					localVars.varLcLastPageNumber = (((int) (BuiltInFunction.Trunc(((decimal) (((decimal) localVars.inParamTotalRowCount)) /
					(decimal) (((decimal) localVars.inParamLineCount)))) + (((decimal) BuiltInFunction.TextToInteger(Convert.ToString(((((((decimal) 0)) ==BuiltInFunction.Mod((((decimal) localVars.inParamTotalRowCount)), (((decimal) localVars.inParamLineCount))))) ?(0):(1)))))))));
					// MorePageNumber.ListNavigation_PageNumber.Number = "..."
					localVars.varLcMorePageNumber.ssSTListNavigation_PageNumber.ssNumber = "...";
					// Not enough page numbers?
					if (((localVars.inParamMaxPageNumbers<localVars.varLcLastPageNumber))) {
						// Start at Current - MaxPageNumbers/2
						// CurrentPageNumberMinus1 = Max
						localVars.varLcCurrentPageNumberMinus1 = (((int) BuiltInFunction.Max((((decimal) 0)), ((((decimal) localVars.varLcCurrentPageNumberMinus1)) -BuiltInFunction.Trunc(((decimal) (((decimal) localVars.inParamMaxPageNumbers)) /
						(decimal) (((decimal) 2))))))));
						// AppendMoreAtBeginning?
						if (((localVars.varLcCurrentPageNumberMinus1!=0))) {
							// AppendMoreAtBeginning
							ExtendedActions.ListAppend(heContext, result.outParamPageNumbers, localVars.varLcMorePageNumber);

						}

					} else {
						// Start at beginning
						// CurrentPageNumberMinus1 = 0
						localVars.varLcCurrentPageNumberMinus1 = 0;
					}

					// CurrentPageFirstShownRowIndex = CurrentPageNumberMinus1 * LineCount
					localVars.varLcCurrentPageFirstShownRowIndex = (localVars.varLcCurrentPageNumberMinus1*localVars.inParamLineCount);
					// LastShownPageNumber = Min
					localVars.varLcLastShownPageNumber = (((int) BuiltInFunction.Min((((decimal) (localVars.varLcCurrentPageNumberMinus1+localVars.inParamMaxPageNumbers))), (((decimal) localVars.varLcLastPageNumber)))));
					// All numbers done?
					while ((!(((localVars.varLcCurrentPageNumberMinus1+1) >localVars.varLcLastShownPageNumber)))) {
						// PageNumber
						// PageNumber.ListNavigation_PageNumber.Number = CurrentPageNumberMinus1 + 1
						localVars.varLcPageNumber.ssSTListNavigation_PageNumber.ssNumber = Convert.ToString((localVars.varLcCurrentPageNumberMinus1+1));
						// PageNumber.ListNavigation_PageNumber.Index = CurrentPageFirstShownRowIndex
						localVars.varLcPageNumber.ssSTListNavigation_PageNumber.ssIndex = localVars.varLcCurrentPageFirstShownRowIndex;
						// PageNumber.ListNavigation_PageNumber.IsCurrent = StartIndex = CurrentPageFirstShownRowIndex
						localVars.varLcPageNumber.ssSTListNavigation_PageNumber.ssIsCurrent = (localVars.inParamStartIndex==localVars.varLcCurrentPageFirstShownRowIndex);
						// CurrentPageFirstShownRowIndex = CurrentPageFirstShownRowIndex + LineCount
						localVars.varLcCurrentPageFirstShownRowIndex = (localVars.varLcCurrentPageFirstShownRowIndex+localVars.inParamLineCount);
						// CurrentPageNumberMinus1 = CurrentPageNumberMinus1 + 1
						localVars.varLcCurrentPageNumberMinus1 = (localVars.varLcCurrentPageNumberMinus1+1);
						// AppendPage
						ExtendedActions.ListAppend(heContext, result.outParamPageNumbers, localVars.varLcPageNumber);

					}

					// AppendMoreAtEnd?
					if (((localVars.varLcCurrentPageNumberMinus1<localVars.varLcLastPageNumber))) {
						// AppendMoreAtEnd
						ExtendedActions.ListAppend(heContext, result.outParamPageNumbers, localVars.varLcMorePageNumber);

					}

				}

			} // try

			finally {
				outParamPageNumbers = result.outParamPageNumbers;
			}
		}

		public static class FuncActionPrivate_List_Navigation_GetPageNumbers {



		}


	}

}