/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Runtime.Serialization;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;
using OutSystems.ObjectKeys;
using System.Resources;

namespace ssContactManager {

	public partial class Actions {
		public class lcvBootstrapContacts: VarsBag {
			/// <summary>
			/// Variable <code>varLcContactRecord</code> that represents the Service Studio local variable
			///  <code>ContactRecord</code> <p>Description: </p>
			/// </summary>
			public RCContactRecord varLcContactRecord = new RCContactRecord(null);

			public int resCreateContact_outParamId = 0;

			public RLContactRecordList queryResGetContacts_outParamList = new RLContactRecordList();
			public long queryResGetContacts_outParamCount = 0L;

			public RLExcel_ContactsRecordList resConvertFromExcel_outParamOut = new RLExcel_ContactsRecordList();
			public lcvBootstrapContacts() {
			}
		}
		/// <summary>
		/// Action <code>ActionBootstrapContacts</code> that represents the Service Studio user action
		///  <code>BootstrapContacts</code> <p> Description: Populates the database with the contacts from th
		/// e excel file if the corresponding database table is still empty</p>
		/// </summary>
		public static void ActionBootstrapContacts(HeContext heContext) {
			lcvBootstrapContacts localVars = new lcvBootstrapContacts();
			if (heContext != null && heContext.RequestTracer != null) {
				heContext.RequestTracer.RegisterInternalCall("K1bGnfsi2kam_D7_C_yQqA", "BootstrapContacts", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
			}
			// Query datasetGetContacts
			int datasetGetContacts_maxRecords = 0;
			localVars.queryResGetContacts_outParamList = FuncActionBootstrapContacts.datasetGetContacts(heContext, datasetGetContacts_maxRecords, IterationMultiplicity.Never, out localVars.queryResGetContacts_outParamCount);

			if ((localVars.queryResGetContacts_outParamList.Empty)) {
				// ExcelToRecordList ExcelToRLBootstrapContactsConvertFromExcel
				FuncActionBootstrapContacts.ExcelToRLBootstrapContactsConvertFromExcel(heContext, RuntimePlatformUtils.GetResourceBinary("bin2\\hidden_resources\\ContactManager\\Contacts.xlsx", "bin2\\hidden_resources\\ContactManager\\Contacts.xlsx"), "Contacts", out localVars.resConvertFromExcel_outParamOut);
				// Foreach ConvertFromExcel
				localVars.resConvertFromExcel_outParamOut.StartIteration();
				try {
					while (!((localVars.resConvertFromExcel_outParamOut.Eof))) {
						// Assign ContactRecord
						// ContactRecord.Contact.Name = ConvertFromExcel.Current.Excel_Contacts.Name
						localVars.varLcContactRecord.ssENContact.ssName = localVars.resConvertFromExcel_outParamOut.CurrentRec.ssSTExcel_Contacts.ssName;
						// ContactRecord.Contact.JobTitle = ConvertFromExcel.Current.Excel_Contacts.JobTitle
						localVars.varLcContactRecord.ssENContact.ssJobTitle = localVars.resConvertFromExcel_outParamOut.CurrentRec.ssSTExcel_Contacts.ssJobTitle;
						// ContactRecord.Contact.Phone = ConvertFromExcel.Current.Excel_Contacts.Phone
						localVars.varLcContactRecord.ssENContact.ssPhone = localVars.resConvertFromExcel_outParamOut.CurrentRec.ssSTExcel_Contacts.ssPhone;
						// ContactRecord.Contact.Email = ConvertFromExcel.Current.Excel_Contacts.Email
						localVars.varLcContactRecord.ssENContact.ssEmail = localVars.resConvertFromExcel_outParamOut.CurrentRec.ssSTExcel_Contacts.ssEmail;
						// CreateContact
						ExtendedActions.CreateContact(heContext, localVars.varLcContactRecord, out localVars.resCreateContact_outParamId);

						localVars.resConvertFromExcel_outParamOut.Advance();
					}

				} finally {
					localVars.resConvertFromExcel_outParamOut.EndIteration();
				}

			}

		}

		public static class FuncActionBootstrapContacts {

			/// <summary>
			/// Query Function "GetContacts" of Action "BootstrapContacts"
			/// </summary>
			public static RLContactRecordList datasetGetContacts(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out long outParamCount) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o0, NULL o1, NULL o2, NULL o3, NULL o4, NULL o5");
				fromBuilder.Append(" FROM {Contact} ENContact");

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				try {
					RLContactRecordList outParamList = new RLContactRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						true, true, true, true, true, true});
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLContactRecordList _tmp = new RLContactRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BootstrapContacts.GetContacts.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("4739eddd-b487-c2b7-5dec-e0d4a6541fb7", "BootstrapContacts.GetContacts", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
							}
							outParamList = (RLContactRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BootstrapContacts.GetContacts.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("4739eddd-b487-c2b7-5dec-e0d4a6541fb7", "BootstrapContacts.GetContacts", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
							}
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						if (maxRecords > 0 && maxRecords <= 150) {
							RLContactRecordList _tmp = new RLContactRecordList();
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							try {
								DateTime startTime = DateTime.Now;
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query BootstrapContacts.GetContacts.List");
								int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
								);
								RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
								if (reqTracer != null) {
									reqTracer.RegisterQueryExecuted("4739eddd-b487-c2b7-5dec-e0d4a6541fb7", "BootstrapContacts.GetContacts", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
								}
								outParamList = (RLContactRecordList) _tmp.Duplicate();
								outParamList.AllOptimizedAttributes = opt;
								_tmp.CloseDataReader();
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else {
							try {
								DateTime startTime = DateTime.Now;
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query BootstrapContacts.GetContacts.List");
								int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
								);
								RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
								if (reqTracer != null) {
									reqTracer.RegisterQueryExecuted("4739eddd-b487-c2b7-5dec-e0d4a6541fb7", "BootstrapContacts.GetContacts", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
								}
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					}
				} catch (Exception e) {
					throw new DataBaseException("Error executing query.", e);
				}
			}


			/// <summary>
			/// Excel To RecordList : ExcelToRLBootstrapContactsConvertFromExcel of Action "BootstrapContacts"
			/// </summary>
			public static void ExcelToRLBootstrapContactsConvertFromExcel(HeContext heContext, byte[] excelContent, string tableName, out RLExcel_ContactsRecordList outParamOut) {
				int totalColumns = 4;
				if (excelContent.GetLength(0) == 0) {
					throw new Exception("Error - Empty (0 bytes) excel file received.");
				}
				string userTableName = tableName; // for error msg
				ExcelResultSet reader = new ExcelResultSet(
				excelContent,
				tableName,
				totalColumns,
				new string[] {
					typeof(string).Name,
					typeof(string).Name,
					typeof(string).Name,
					typeof(string).Name
				}
				,
				new string[] {
					 "Name",
					 "JobTitle",
					 "Phone",
					 "Email"
				}
				,
				new string[] {
					 "Name",
					 "Job Title",
					 "Phone",
					 "Email"
				}
				,
				new string[] {
					 "Name",
					 "JobTitle",
					 "Phone",
					 "Email"
				}
				,
				new string[] {
					 "Name",
					 "Job Title",
					 "Phone",
					 "Email"
				});

				string errorMsg;
				if (!reader.DataTypesValid(out errorMsg)) {
					throw new Exception(errorMsg);
				}

				RLExcel_ContactsRecordList tmp = new RLExcel_ContactsRecordList();
				tmp.Reader = reader;

				outParamOut = (RLExcel_ContactsRecordList) tmp;
			}


		}


	}

}