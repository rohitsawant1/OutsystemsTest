/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.IO;
using System.Configuration;
using System.Web;
using System.Web.UI.WebControls;
using System.Text.RegularExpressions;
using OutSystems.RuntimeCommon;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.Sql;
using OutSystems.HubEdition.WebWidgets;

namespace ssContactManager {

	public delegate void SimpleTimerCallback();

	public sealed class AppUtils: BaseAppUtils {


		public static readonly int CurrentEspaceId = Global.eSpaceId;


		public static readonly AppUtils Instance = new AppUtils();

		protected override int GetTenantId(HeContext heContext) {
			return heContext.AppInfo.Tenant.Id;
		}

		public override string getImagePath(bool forInternalAccess = false, bool includeSessionIdIfNeeded = false, string nameOverride = null, bool skipSeo = false) {
			HttpRequest request = HttpContext.Current.Request;
			try {
				HeContext heContext = Global.App.OsContext;
				string path = heContext.OsISAPIFilter.GetHostSuffix(request, "");
				bool keepPTA = AppInfo.GetAppInfo().eSpaceId == Global.eSpaceId && nameOverride == null;
				if (!keepPTA || forInternalAccess) {
					path += skipSeo ? "/ContactManager/": RuntimePlatformUtils.GetEspacePrettyNamePath(nameOverride ?? "ContactManager", heContext);
				} else {
					path += (heContext.OsISAPIFilter.IsActiveInRequest(request) && !skipSeo ? heContext.OsISAPIFilter.GetPath(request, "") + "/": "/ContactManager/");
				}
				if (keepPTA) {
					path += AppInfo.GetAppInfo().PtaPath;
				}
				return RuntimePlatformUtils.CheckUriSecurity(request, path);
			} catch {
				return "";
			}

		}

		protected override string EntityToTablename(string entity, int tenantId) {
			string entityLC = entity.ToLowerInvariant();
			switch (entityLC) {
				case "recentitem":
					return ENRecentItemEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				case "messagetype":
					return ENMessageTypeEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				case "menuitem":
					return ENMenuItemEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				case "contact":
					return ENContactEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				case "application":
					return ENApplicationEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				case "user":
					return ENUserEntity.LocalViewName(AppInfo.GetAppInfo().Tenant.Id, BuiltInFunction.GetCurrentLocale());
				}

				throw new DataBaseException("'" + entity + "' found in 'Expand Inline' parameter is an unknown Entity");
			}

			protected override string EntityAttributeToColumnName(string entityName, string attributeName) {
				string entityNameLC = entityName.ToLowerInvariant();
				string columnName = null;
				switch (entityNameLC) {
					case "recentitem":
						ENRecentItemEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
					case "messagetype":
						ENMessageTypeEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
					case "menuitem":
						ENMenuItemEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
					case "contact":
						ENContactEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
					case "application":
						ENApplicationEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
					case "user":
						ENUserEntity.AttributesToDatabaseNamesMap().TryGetValue(attributeName, out columnName); break;
				}

				if (string.IsNullOrEmpty(columnName)) {
					throw new DataBaseException("'" + attributeName + "' attribute of entity '" + entityName + "' found in 'Expand Inline' parameter is unknown");
				}

				return columnName;
			}

			protected override bool CheckReadOnlyInvalidOperations(string entity) {
				string entityLC = entity.ToLowerInvariant();
				if (entityLC == "messagetype")
				return true;
				if (entityLC == "menuitem")
				return true;
				if (entityLC == "runtimekind")
				return true;
				if (entityLC == "application")
				return true;

				return false;
			}

			public override string[] GetAjaxJQueryFileNames() {
				string prefix = "";
				string osPageHeader = OsISAPIFilter.Instance.GetPage();
				if (osPageHeader != null && osPageHeader.IndexOf('/', 1) != -1) {
					prefix = AppUtils.Instance.getImagePath();
				}
				return new string[] {
					prefix + "_osjs.js", prefix + "_jquery-1-4-2.js"
				};

			}

			public override string GetGlobalJavaScriptInclude() {
				return "";
			}

			public override string CacheInvalidationPlatformSuffix {
				get {
					return "?11_0_212_0"; 
				}
			}

			public override string CacheInvalidationSuffix {
				get {
					return ConfigurationManager.AppSettings["OutSystems.HubEdition.CacheInvalidationSuffix.794c445f-f27d-4f61-b47a-0da71440df68"]; 
				}
			}


		}
	}
