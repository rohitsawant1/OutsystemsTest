/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssContactManager {
	/// <summary>
	/// Structure <code>STListNavigation_PageNumberStructure</code> that represents the Service Studio
	///  structure <code>ListNavigation_PageNumber</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STListNavigation_PageNumberStructure: ISerializable, ITypedRecord<STListNavigation_PageNumberStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdNumber = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*HKOxNf7SH0ysJ81Yw0xkmQ");
		private static readonly GlobalObjectKey IdIndex = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*FzwQqslR3ECTfXmBdq6JbQ");
		private static readonly GlobalObjectKey IdIsCurrent = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*dGIHB8YO00OTdqLdxhy25g");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Number")]
		public string ssNumber;

		[System.Xml.Serialization.XmlElement("Index")]
		public int ssIndex;

		[System.Xml.Serialization.XmlElement("IsCurrent")]
		public bool ssIsCurrent;


		public BitArray OptimizedAttributes;

		public STListNavigation_PageNumberStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssNumber = "";
			ssIndex = 0;
			ssIsCurrent = false;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssNumber = r.ReadText(index++, "ListNavigation_PageNumber.Number", "");
			ssIndex = r.ReadInteger(index++, "ListNavigation_PageNumber.Index", 0);
			ssIsCurrent = r.ReadBoolean(index++, "ListNavigation_PageNumber.IsCurrent", false);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STListNavigation_PageNumberStructure r) {
			this = r;
		}


		public static bool operator == (STListNavigation_PageNumberStructure a, STListNavigation_PageNumberStructure b) {
			if (a.ssNumber != b.ssNumber) return false;
			if (a.ssIndex != b.ssIndex) return false;
			if (a.ssIsCurrent != b.ssIsCurrent) return false;
			return true;
		}

		public static bool operator != (STListNavigation_PageNumberStructure a, STListNavigation_PageNumberStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STListNavigation_PageNumberStructure)) return false;
			return (this == (STListNavigation_PageNumberStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssNumber.GetHashCode()
				^ ssIndex.GetHashCode()
				^ ssIsCurrent.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STListNavigation_PageNumberStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssNumber = "";
			ssIndex = 0;
			ssIsCurrent = false;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssNumber", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssNumber' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssNumber = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIndex", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIndex' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIndex = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssIsCurrent", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssIsCurrent' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssIsCurrent = (bool) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STListNavigation_PageNumberStructure Duplicate() {
			STListNavigation_PageNumberStructure t;
			t.ssNumber = this.ssNumber;
			t.ssIndex = this.ssIndex;
			t.ssIsCurrent = this.ssIsCurrent;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Number")) VarValue.AppendAttribute(recordElem, "Number", ssNumber, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "Number");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".Index")) VarValue.AppendAttribute(recordElem, "Index", ssIndex, detailLevel, TypeKind.Integer); else VarValue.AppendOptimizedAttribute(recordElem, "Index");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".IsCurrent")) VarValue.AppendAttribute(recordElem, "IsCurrent", ssIsCurrent, detailLevel, TypeKind.Boolean); else VarValue.AppendOptimizedAttribute(recordElem, "IsCurrent");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "number") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Number")) variable.Value = ssNumber; else variable.Optimized = true;
			} else if (head == "index") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Index")) variable.Value = ssIndex; else variable.Optimized = true;
			} else if (head == "iscurrent") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".IsCurrent")) variable.Value = ssIsCurrent; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdNumber) {
				return ssNumber;
			} else if (key == IdIndex) {
				return ssIndex;
			} else if (key == IdIsCurrent) {
				return ssIsCurrent;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssNumber = (string) other.AttributeGet(IdNumber);
			ssIndex = (int) other.AttributeGet(IdIndex);
			ssIsCurrent = (bool) other.AttributeGet(IdIsCurrent);
		}
	} // STListNavigation_PageNumberStructure
	/// <summary>
	/// Structure <code>RCListNavigation_PageNumberRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCListNavigation_PageNumberRecord: ISerializable, ITypedRecord<RCListNavigation_PageNumberRecord> {
		private static readonly GlobalObjectKey IdListNavigation_PageNumber = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*1k5UtbxAhdvRLfo0gXQdDw");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("ListNavigation_PageNumber")]
		public STListNavigation_PageNumberStructure ssSTListNavigation_PageNumber;


		public static implicit operator STListNavigation_PageNumberStructure(RCListNavigation_PageNumberRecord r) {
			return r.ssSTListNavigation_PageNumber;
		}

		public static implicit operator RCListNavigation_PageNumberRecord(STListNavigation_PageNumberStructure r) {
			RCListNavigation_PageNumberRecord res = new RCListNavigation_PageNumberRecord(null);
			res.ssSTListNavigation_PageNumber = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCListNavigation_PageNumberRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTListNavigation_PageNumber = new STListNavigation_PageNumberStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTListNavigation_PageNumber.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTListNavigation_PageNumber.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCListNavigation_PageNumberRecord r) {
			this = r;
		}


		public static bool operator == (RCListNavigation_PageNumberRecord a, RCListNavigation_PageNumberRecord b) {
			if (a.ssSTListNavigation_PageNumber != b.ssSTListNavigation_PageNumber) return false;
			return true;
		}

		public static bool operator != (RCListNavigation_PageNumberRecord a, RCListNavigation_PageNumberRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCListNavigation_PageNumberRecord)) return false;
			return (this == (RCListNavigation_PageNumberRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTListNavigation_PageNumber.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCListNavigation_PageNumberRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTListNavigation_PageNumber = new STListNavigation_PageNumberStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTListNavigation_PageNumber", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTListNavigation_PageNumber' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTListNavigation_PageNumber = (STListNavigation_PageNumberStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTListNavigation_PageNumber.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTListNavigation_PageNumber.InternalRecursiveSave();
		}


		public RCListNavigation_PageNumberRecord Duplicate() {
			RCListNavigation_PageNumberRecord t;
			t.ssSTListNavigation_PageNumber = (STListNavigation_PageNumberStructure) this.ssSTListNavigation_PageNumber.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTListNavigation_PageNumber.ToXml(this, recordElem, "ListNavigation_PageNumber", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "listnavigation_pagenumber") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".ListNavigation_PageNumber")) variable.Value = ssSTListNavigation_PageNumber; else variable.Optimized = true;
				variable.SetFieldName("listnavigation_pagenumber");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdListNavigation_PageNumber) {
				return ssSTListNavigation_PageNumber;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTListNavigation_PageNumber.FillFromOther((IRecord) other.AttributeGet(IdListNavigation_PageNumber));
		}
	} // RCListNavigation_PageNumberRecord
	/// <summary>
	/// RecordList type <code>RLListNavigation_PageNumberRecordList</code> that represents a record list of
	///  <code>ListNavigation_PageNumber</code>
	/// </summary>
	[Serializable()]
	public partial class RLListNavigation_PageNumberRecordList: GenericRecordList<RCListNavigation_PageNumberRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCListNavigation_PageNumberRecord GetElementDefaultValue() {
			return new RCListNavigation_PageNumberRecord("");
		}

		public T[] ToArray<T>(Func<RCListNavigation_PageNumberRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLListNavigation_PageNumberRecordList recordlist, Func<RCListNavigation_PageNumberRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLListNavigation_PageNumberRecordList(RCListNavigation_PageNumberRecord[] array) {
			RLListNavigation_PageNumberRecordList result = new RLListNavigation_PageNumberRecordList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLListNavigation_PageNumberRecordList ToList<T>(T[] array, Func <T, RCListNavigation_PageNumberRecord> converter) {
			RLListNavigation_PageNumberRecordList result = new RLListNavigation_PageNumberRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLListNavigation_PageNumberRecordList FromRestList<T>(RestList<T> restList, Func <T, RCListNavigation_PageNumberRecord> converter) {
			RLListNavigation_PageNumberRecordList result = new RLListNavigation_PageNumberRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLListNavigation_PageNumberRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLListNavigation_PageNumberRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLListNavigation_PageNumberRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLListNavigation_PageNumberRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCListNavigation_PageNumberRecord> NewList() {
			return new RLListNavigation_PageNumberRecordList();
		}


	} // RLListNavigation_PageNumberRecordList
	/// <summary>
	/// RecordList type <code>RLListNavigation_PageNumberList</code> that represents a record list of
	///  <code>ListNavigation_PageNumber</code>
	/// </summary>
	[Serializable()]
	public partial class RLListNavigation_PageNumberList: GenericRecordList<STListNavigation_PageNumberStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STListNavigation_PageNumberStructure GetElementDefaultValue() {
			return new STListNavigation_PageNumberStructure("");
		}

		public T[] ToArray<T>(Func<STListNavigation_PageNumberStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLListNavigation_PageNumberList recordlist, Func<STListNavigation_PageNumberStructure, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLListNavigation_PageNumberList(STListNavigation_PageNumberStructure[] array) {
			RLListNavigation_PageNumberList result = new RLListNavigation_PageNumberList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLListNavigation_PageNumberList ToList<T>(T[] array, Func <T, STListNavigation_PageNumberStructure> converter) {
			RLListNavigation_PageNumberList result = new RLListNavigation_PageNumberList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLListNavigation_PageNumberList FromRestList<T>(RestList<T> restList, Func <T, STListNavigation_PageNumberStructure> converter) {
			RLListNavigation_PageNumberList result = new RLListNavigation_PageNumberList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLListNavigation_PageNumberList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLListNavigation_PageNumberList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLListNavigation_PageNumberList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLListNavigation_PageNumberList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STListNavigation_PageNumberStructure> NewList() {
			return new RLListNavigation_PageNumberList();
		}


	} // RLListNavigation_PageNumberList
}

namespace ssContactManager {
	[XmlType("ListNavigation_PageNumber")]
	public class WORCListNavigation_PageNumberRecord {
		[System.Xml.Serialization.XmlElement("Number")]
		public string varWSNumber;

		[System.Xml.Serialization.XmlElement("Index")]
		public int varWSIndex;

		[System.Xml.Serialization.XmlElement("IsCurrent")]
		public bool varWSIsCurrent;

		public WORCListNavigation_PageNumberRecord() {
			varWSNumber = (string) "";
			varWSIndex = (int) 0;
			varWSIsCurrent = (bool) false;
		}

		public WORCListNavigation_PageNumberRecord(STListNavigation_PageNumberStructure r) {
			varWSNumber = BaseAppUtils.RemoveControlChars(r.ssNumber);
			varWSIndex = (int) r.ssIndex;
			varWSIsCurrent = (bool) r.ssIsCurrent;
		}

		public static RLListNavigation_PageNumberList ToRecordList(WORCListNavigation_PageNumberRecord[] array) {
			RLListNavigation_PageNumberList rl = new RLListNavigation_PageNumberList();
			if (array != null) {
				foreach(WORCListNavigation_PageNumberRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCListNavigation_PageNumberRecord[] FromRecordList(RLListNavigation_PageNumberList rl) {
			WORCListNavigation_PageNumberRecord[] array = new WORCListNavigation_PageNumberRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial struct RCListNavigation_PageNumberRecord {
		public static implicit operator WORCListNavigation_PageNumberRecord(RCListNavigation_PageNumberRecord r) {
			return new WORCListNavigation_PageNumberRecord(r.ssSTListNavigation_PageNumber);
		}

		public static implicit operator RCListNavigation_PageNumberRecord(WORCListNavigation_PageNumberRecord w) {
			RCListNavigation_PageNumberRecord r = new RCListNavigation_PageNumberRecord("");
			if (w != null) {
				r.ssSTListNavigation_PageNumber = w;
			}
			return r;
		}

	}

	partial struct STListNavigation_PageNumberStructure {
		public static implicit operator WORCListNavigation_PageNumberRecord(STListNavigation_PageNumberStructure r) {
			return new WORCListNavigation_PageNumberRecord(r);
		}

		public static implicit operator STListNavigation_PageNumberStructure(WORCListNavigation_PageNumberRecord w) {
			STListNavigation_PageNumberStructure r = new STListNavigation_PageNumberStructure("");
			if (w != null) {
				r.ssNumber = ((string) w.varWSNumber ?? "");
				r.ssIndex = (int) w.varWSIndex;
				r.ssIsCurrent = (bool) w.varWSIsCurrent;
			}
			return r;
		}

	}
}


namespace ssContactManager {
	[Serializable()]
	public partial class WORLListNavigation_PageNumberRecordList {
		public WORCListNavigation_PageNumberRecord[] Array;


		public WORLListNavigation_PageNumberRecordList(WORCListNavigation_PageNumberRecord[] r) {
			if (r == null)
			Array = new WORCListNavigation_PageNumberRecord[0];
			else
			Array = r;
		}
		public WORLListNavigation_PageNumberRecordList() {
			Array = new WORCListNavigation_PageNumberRecord[0];
		}

		public WORLListNavigation_PageNumberRecordList(RLListNavigation_PageNumberRecordList rl) {
			rl=(RLListNavigation_PageNumberRecordList) rl.Duplicate();
			Array = new WORCListNavigation_PageNumberRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCListNavigation_PageNumberRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLListNavigation_PageNumberRecordList {
		public static implicit operator RLListNavigation_PageNumberRecordList(WORCListNavigation_PageNumberRecord[] array) {
			RLListNavigation_PageNumberRecordList rl = new RLListNavigation_PageNumberRecordList();
			if (array != null) {
				foreach(WORCListNavigation_PageNumberRecord val in array) {
					rl.Append((RCListNavigation_PageNumberRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCListNavigation_PageNumberRecord[](RLListNavigation_PageNumberRecordList rl) {
			WORCListNavigation_PageNumberRecord[] array = new WORCListNavigation_PageNumberRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCListNavigation_PageNumberRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLListNavigation_PageNumberRecordList {
		public static implicit operator RLListNavigation_PageNumberRecordList(WORLListNavigation_PageNumberRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLListNavigation_PageNumberRecordList(RLListNavigation_PageNumberRecordList rl) {
			return new WORLListNavigation_PageNumberRecordList(rl);
		}
		public static implicit operator WORCListNavigation_PageNumberRecord[](WORLListNavigation_PageNumberRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLListNavigation_PageNumberRecordList(WORCListNavigation_PageNumberRecord[] array) {
			return new WORLListNavigation_PageNumberRecordList(array);
		}
	}
}

namespace ssContactManager {
	[Serializable()]
	public partial class WORLListNavigation_PageNumberList {
		public WORCListNavigation_PageNumberRecord[] Array;


		public WORLListNavigation_PageNumberList(WORCListNavigation_PageNumberRecord[] r) {
			if (r == null)
			Array = new WORCListNavigation_PageNumberRecord[0];
			else
			Array = r;
		}
		public WORLListNavigation_PageNumberList() {
			Array = new WORCListNavigation_PageNumberRecord[0];
		}

		public WORLListNavigation_PageNumberList(RLListNavigation_PageNumberList rl) {
			rl=(RLListNavigation_PageNumberList) rl.Duplicate();
			Array = new WORCListNavigation_PageNumberRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLListNavigation_PageNumberList {
		public static implicit operator RLListNavigation_PageNumberList(WORCListNavigation_PageNumberRecord[] array) {
			RLListNavigation_PageNumberList rl = new RLListNavigation_PageNumberList();
			if (array != null) {
				foreach(WORCListNavigation_PageNumberRecord val in array) {
					rl.Append((STListNavigation_PageNumberStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCListNavigation_PageNumberRecord[](RLListNavigation_PageNumberList rl) {
			WORCListNavigation_PageNumberRecord[] array = new WORCListNavigation_PageNumberRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STListNavigation_PageNumberStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLListNavigation_PageNumberList {
		public static implicit operator RLListNavigation_PageNumberList(WORLListNavigation_PageNumberList w) {
			return w.Array;
		}
		public static implicit operator WORLListNavigation_PageNumberList(RLListNavigation_PageNumberList rl) {
			return new WORLListNavigation_PageNumberList(rl);
		}
		public static implicit operator WORCListNavigation_PageNumberRecord[](WORLListNavigation_PageNumberList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLListNavigation_PageNumberList(WORCListNavigation_PageNumberRecord[] array) {
			return new WORLListNavigation_PageNumberList(array);
		}
	}
}

