/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using System.Xml.Serialization;
using System.Collections;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;

namespace ssContactManager {
	/// <summary>
	/// Structure <code>STFeedback_MessageStructure</code> that represents the Service Studio structure
	///  <code>Feedback_Message</code> <p> Description: </p>
	/// </summary>
	[Serializable()]
	public partial struct STFeedback_MessageStructure: ISerializable, ITypedRecord<STFeedback_MessageStructure>, ISimpleRecord {
		private static readonly GlobalObjectKey IdMessageText = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*O6IcIP3qJEWFkpggfvtpiw");
		private static readonly GlobalObjectKey IdMessageType = GlobalObjectKey.Parse("X0RMeX3yYU+0eg2nFEDfaA*iAChiHt8HkiyPsQ1aK+Lug");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("MessageText")]
		public string ssMessageText;

		[System.Xml.Serialization.XmlElement("MessageType")]
		public int ssMessageType;


		public BitArray OptimizedAttributes;

		public STFeedback_MessageStructure(params string[] dummy) {
			OptimizedAttributes = null;
			ssMessageText = "";
			ssMessageType = 0;
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[0];
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
				}
			}
			get {
				BitArray[] all = new BitArray[0];
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssMessageText = r.ReadText(index++, "Feedback_Message.MessageText", "");
			ssMessageType = r.ReadEntityReference(index++, "Feedback_Message.MessageType", 0);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(STFeedback_MessageStructure r) {
			this = r;
		}


		public static bool operator == (STFeedback_MessageStructure a, STFeedback_MessageStructure b) {
			if (a.ssMessageText != b.ssMessageText) return false;
			if (a.ssMessageType != b.ssMessageType) return false;
			return true;
		}

		public static bool operator != (STFeedback_MessageStructure a, STFeedback_MessageStructure b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(STFeedback_MessageStructure)) return false;
			return (this == (STFeedback_MessageStructure) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssMessageText.GetHashCode()
				^ ssMessageType.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public STFeedback_MessageStructure(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssMessageText = "";
			ssMessageType = 0;
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssMessageText", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessageText' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessageText = (string) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
			fieldInfo = objInfo.GetField("ssMessageType", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssMessageType' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssMessageType = (int) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
		}

		public void InternalRecursiveSave() {
		}


		public STFeedback_MessageStructure Duplicate() {
			STFeedback_MessageStructure t;
			t.ssMessageText = this.ssMessageText;
			t.ssMessageType = this.ssMessageType;
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Structure");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
				fieldName = fieldName.ToLowerInvariant();
			}
			if (detailLevel > 0) {
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MessageText")) VarValue.AppendAttribute(recordElem, "MessageText", ssMessageText, detailLevel, TypeKind.Text); else VarValue.AppendOptimizedAttribute(recordElem, "MessageText");
				if (!VarValue.FieldIsOptimized(parent, fieldName + ".MessageType")) VarValue.AppendAttribute(recordElem, "MessageType", ssMessageType, detailLevel, TypeKind.EntityReference); else VarValue.AppendOptimizedAttribute(recordElem, "MessageType");
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "messagetext") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MessageText")) variable.Value = ssMessageText; else variable.Optimized = true;
			} else if (head == "messagetype") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".MessageType")) variable.Value = ssMessageType; else variable.Optimized = true;
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdMessageText) {
				return ssMessageText;
			} else if (key == IdMessageType) {
				return ssMessageType;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssMessageText = (string) other.AttributeGet(IdMessageText);
			ssMessageType = (int) other.AttributeGet(IdMessageType);
		}
	} // STFeedback_MessageStructure
	/// <summary>
	/// Structure <code>RCFeedback_MessageRecord</code>
	/// </summary>
	[Serializable()]
	public partial struct RCFeedback_MessageRecord: ISerializable, ITypedRecord<RCFeedback_MessageRecord> {
		private static readonly GlobalObjectKey IdFeedback_Message = GlobalObjectKey.Parse("2UmDmepsh0WSfJ_D1JexCA*el4mp+VMhhTgVzRxv3bpDQ");

		public static void EnsureInitialized() {}
		[System.Xml.Serialization.XmlElement("Feedback_Message")]
		public STFeedback_MessageStructure ssSTFeedback_Message;


		public static implicit operator STFeedback_MessageStructure(RCFeedback_MessageRecord r) {
			return r.ssSTFeedback_Message;
		}

		public static implicit operator RCFeedback_MessageRecord(STFeedback_MessageStructure r) {
			RCFeedback_MessageRecord res = new RCFeedback_MessageRecord(null);
			res.ssSTFeedback_Message = r;
			return res;
		}

		public BitArray OptimizedAttributes;

		public RCFeedback_MessageRecord(params string[] dummy) {
			OptimizedAttributes = null;
			ssSTFeedback_Message = new STFeedback_MessageStructure(null);
		}

		public BitArray[] GetDefaultOptimizedValues() {
			BitArray[] all = new BitArray[1];
			all[0] = null;
			return all;
		}

		public BitArray[] AllOptimizedAttributes {
			set {
				if (value == null) {
				} else {
					ssSTFeedback_Message.OptimizedAttributes = value[0];
				}
			}
			get {
				BitArray[] all = new BitArray[1];
				all[0] = null;
				return all;
			}
		}

		/// <summary>
		/// Read a record from database
		/// </summary>
		/// <param name="r"> Data base reader</param>
		/// <param name="index"> index</param>
		public void Read(IDataReader r, ref int index) {
			ssSTFeedback_Message.Read(r, ref index);
		}
		/// <summary>
		/// Read from database
		/// </summary>
		/// <param name="r"> Data reader</param>
		public void ReadDB(IDataReader r) {
			int index = 0;
			Read(r, ref index);
		}

		/// <summary>
		/// Read from record
		/// </summary>
		/// <param name="r"> Record</param>
		public void ReadIM(RCFeedback_MessageRecord r) {
			this = r;
		}


		public static bool operator == (RCFeedback_MessageRecord a, RCFeedback_MessageRecord b) {
			if (a.ssSTFeedback_Message != b.ssSTFeedback_Message) return false;
			return true;
		}

		public static bool operator != (RCFeedback_MessageRecord a, RCFeedback_MessageRecord b) {
			return !(a==b);
		}

		public override bool Equals(object o) {
			if (o.GetType() != typeof(RCFeedback_MessageRecord)) return false;
			return (this == (RCFeedback_MessageRecord) o);
		}

		public override int GetHashCode() {
			try {
				return base.GetHashCode()
				^ ssSTFeedback_Message.GetHashCode()
				;
			} catch {
				return base.GetHashCode();
			}
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context) {
			Type objInfo = this.GetType();
			FieldInfo[] fields;
			fields = objInfo.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			for (int i = 0; i < fields.Length; i++)
			if (fields[i] .FieldType.IsSerializable)
			info.AddValue(fields[i] .Name, fields[i] .GetValue(this));
		}

		public RCFeedback_MessageRecord(SerializationInfo info, StreamingContext context) {
			OptimizedAttributes = null;
			ssSTFeedback_Message = new STFeedback_MessageStructure(null);
			Type objInfo = this.GetType();
			FieldInfo fieldInfo = null;
			fieldInfo = objInfo.GetField("ssSTFeedback_Message", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Public);
			if (fieldInfo == null) {
				throw new Exception("The field named 'ssSTFeedback_Message' was not found.");
			}
			if (fieldInfo.FieldType.IsSerializable) {
				ssSTFeedback_Message = (STFeedback_MessageStructure) info.GetValue(fieldInfo.Name, fieldInfo.FieldType);
			}
		}

		public void RecursiveReset() {
			ssSTFeedback_Message.RecursiveReset();
		}

		public void InternalRecursiveSave() {
			ssSTFeedback_Message.InternalRecursiveSave();
		}


		public RCFeedback_MessageRecord Duplicate() {
			RCFeedback_MessageRecord t;
			t.ssSTFeedback_Message = (STFeedback_MessageStructure) this.ssSTFeedback_Message.Duplicate();
			t.OptimizedAttributes = null;
			return t;
		}

		IRecord IRecord.Duplicate() {
			return Duplicate();
		}

		public void ToXml(Object parent, System.Xml.XmlElement baseElem, String fieldName, int detailLevel) {
			System.Xml.XmlElement recordElem = VarValue.AppendChild(baseElem, "Record");
			if (fieldName != null) {
				VarValue.AppendAttribute(recordElem, "debug.field", fieldName);
			}
			if (detailLevel > 0) {
				ssSTFeedback_Message.ToXml(this, recordElem, "Feedback_Message", detailLevel - 1);
			} else {
				VarValue.AppendDeferredEvaluationElement(recordElem);
			}
		}

		public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
			String head = VarValue.GetHead(fields);
			String tail = VarValue.GetTail(fields);
			variable.Found = false;
			if (head == "feedback_message") {
				if (!VarValue.FieldIsOptimized(parent, baseName + ".Feedback_Message")) variable.Value = ssSTFeedback_Message; else variable.Optimized = true;
				variable.SetFieldName("feedback_message");
			}
			if (variable.Found && tail != null) variable.EvaluateFields(this, head, tail);
		}

		public bool ChangedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public bool OptimizedAttributeGet(GlobalObjectKey key) {
			throw new Exception("Method not Supported");
		}

		public object AttributeGet(GlobalObjectKey key) {
			if (key == IdFeedback_Message) {
				return ssSTFeedback_Message;
			} else {
				throw new Exception("Invalid key");
			}
		}
		public void FillFromOther(IRecord other) {
			if (other == null) return;
			ssSTFeedback_Message.FillFromOther((IRecord) other.AttributeGet(IdFeedback_Message));
		}
	} // RCFeedback_MessageRecord
	/// <summary>
	/// RecordList type <code>RLFeedback_MessageRecordList</code> that represents a record list of
	///  <code>Feedback_Message</code>
	/// </summary>
	[Serializable()]
	public partial class RLFeedback_MessageRecordList: GenericRecordList<RCFeedback_MessageRecord>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override RCFeedback_MessageRecord GetElementDefaultValue() {
			return new RCFeedback_MessageRecord("");
		}

		public T[] ToArray<T>(Func<RCFeedback_MessageRecord, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLFeedback_MessageRecordList recordlist, Func<RCFeedback_MessageRecord, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLFeedback_MessageRecordList(RCFeedback_MessageRecord[] array) {
			RLFeedback_MessageRecordList result = new RLFeedback_MessageRecordList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLFeedback_MessageRecordList ToList<T>(T[] array, Func <T, RCFeedback_MessageRecord> converter) {
			RLFeedback_MessageRecordList result = new RLFeedback_MessageRecordList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLFeedback_MessageRecordList FromRestList<T>(RestList<T> restList, Func <T, RCFeedback_MessageRecord> converter) {
			RLFeedback_MessageRecordList result = new RLFeedback_MessageRecordList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLFeedback_MessageRecordList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLFeedback_MessageRecordList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLFeedback_MessageRecordList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLFeedback_MessageRecordList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[1];
			def[0] = null;
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<RCFeedback_MessageRecord> NewList() {
			return new RLFeedback_MessageRecordList();
		}


	} // RLFeedback_MessageRecordList
	/// <summary>
	/// RecordList type <code>RLFeedback_MessageList</code> that represents a record list of
	///  <code>Feedback_Message</code>
	/// </summary>
	[Serializable()]
	public partial class RLFeedback_MessageList: GenericRecordList<STFeedback_MessageStructure>, IEnumerable, IEnumerator, ISerializable {
		public static void EnsureInitialized() {}

		protected override STFeedback_MessageStructure GetElementDefaultValue() {
			return new STFeedback_MessageStructure("");
		}

		public T[] ToArray<T>(Func<STFeedback_MessageStructure, T> converter) {
			return ToArray(this, converter);
		}

		public static T[] ToArray<T>(RLFeedback_MessageList recordlist, Func<STFeedback_MessageStructure, T> converter) {
			return InnerToArray(recordlist, converter);
		}
		public static implicit operator RLFeedback_MessageList(STFeedback_MessageStructure[] array) {
			RLFeedback_MessageList result = new RLFeedback_MessageList();
			result.InnerFromArray(array);
			return result;
		}

		public static RLFeedback_MessageList ToList<T>(T[] array, Func <T, STFeedback_MessageStructure> converter) {
			RLFeedback_MessageList result = new RLFeedback_MessageList();
			result.InnerFromArray(array, converter);
			return result;
		}

		public static RLFeedback_MessageList FromRestList<T>(RestList<T> restList, Func <T, STFeedback_MessageStructure> converter) {
			RLFeedback_MessageList result = new RLFeedback_MessageList();
			result.InnerFromRestList(restList, converter);
			return result;
		}
		/// <summary>
		/// Default Constructor
		/// </summary>
		public RLFeedback_MessageList(): base() {
		}

		/// <summary>
		/// Constructor with transaction parameter
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLFeedback_MessageList(IDbTransaction trans): base(trans) {
		}

		/// <summary>
		/// Constructor with transaction parameter and alternate read method
		/// </summary>
		/// <param name="trans"> IDbTransaction Parameter</param>
		/// <param name="alternateReadDBMethod"> Alternate Read Method</param>
		[Obsolete("Use the Default Constructor and set the Transaction afterwards.")]
		public RLFeedback_MessageList(IDbTransaction trans, ReadDBMethodDelegate alternateReadDBMethod): this(trans) {
			this.alternateReadDBMethod = alternateReadDBMethod;
		}

		/// <summary>
		/// Constructor declaration for serialization
		/// </summary>
		/// <param name="info"> SerializationInfo</param>
		/// <param name="context"> StreamingContext</param>
		public RLFeedback_MessageList(SerializationInfo info, StreamingContext context): base(info, context) {
		}

		public override BitArray[] GetDefaultOptimizedValues() {
			BitArray[] def = new BitArray[0];
			return def;
		}
		/// <summary>
		/// Create as new list
		/// </summary>
		/// <returns>The new record list</returns>
		protected override OSList<STFeedback_MessageStructure> NewList() {
			return new RLFeedback_MessageList();
		}


	} // RLFeedback_MessageList
}

namespace ssContactManager {
	[XmlType("Feedback_Message")]
	public class WORCFeedback_MessageRecord {
		[System.Xml.Serialization.XmlElement("MessageText")]
		public string varWSMessageText;

		[System.Xml.Serialization.XmlElement("MessageType")]
		public int varWSMessageType;

		public WORCFeedback_MessageRecord() {
			varWSMessageText = (string) "";
			varWSMessageType = (int) 0;
		}

		public WORCFeedback_MessageRecord(STFeedback_MessageStructure r) {
			varWSMessageText = BaseAppUtils.RemoveControlChars(r.ssMessageText);
			varWSMessageType = (int) r.ssMessageType;
		}

		public static RLFeedback_MessageList ToRecordList(WORCFeedback_MessageRecord[] array) {
			RLFeedback_MessageList rl = new RLFeedback_MessageList();
			if (array != null) {
				foreach(WORCFeedback_MessageRecord val in array) {
					rl.Append(val);
				}
			}
			return rl;
		}

		public static WORCFeedback_MessageRecord[] FromRecordList(RLFeedback_MessageList rl) {
			WORCFeedback_MessageRecord[] array = new WORCFeedback_MessageRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial struct RCFeedback_MessageRecord {
		public static implicit operator WORCFeedback_MessageRecord(RCFeedback_MessageRecord r) {
			return new WORCFeedback_MessageRecord(r.ssSTFeedback_Message);
		}

		public static implicit operator RCFeedback_MessageRecord(WORCFeedback_MessageRecord w) {
			RCFeedback_MessageRecord r = new RCFeedback_MessageRecord("");
			if (w != null) {
				r.ssSTFeedback_Message = w;
			}
			return r;
		}

	}

	partial struct STFeedback_MessageStructure {
		public static implicit operator WORCFeedback_MessageRecord(STFeedback_MessageStructure r) {
			return new WORCFeedback_MessageRecord(r);
		}

		public static implicit operator STFeedback_MessageStructure(WORCFeedback_MessageRecord w) {
			STFeedback_MessageStructure r = new STFeedback_MessageStructure("");
			if (w != null) {
				r.ssMessageText = ((string) w.varWSMessageText ?? "");
				r.ssMessageType = (int) w.varWSMessageType;
			}
			return r;
		}

	}
}


namespace ssContactManager {
	[Serializable()]
	public partial class WORLFeedback_MessageRecordList {
		public WORCFeedback_MessageRecord[] Array;


		public WORLFeedback_MessageRecordList(WORCFeedback_MessageRecord[] r) {
			if (r == null)
			Array = new WORCFeedback_MessageRecord[0];
			else
			Array = r;
		}
		public WORLFeedback_MessageRecordList() {
			Array = new WORCFeedback_MessageRecord[0];
		}

		public WORLFeedback_MessageRecordList(RLFeedback_MessageRecordList rl) {
			rl=(RLFeedback_MessageRecordList) rl.Duplicate();
			Array = new WORCFeedback_MessageRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = new WORCFeedback_MessageRecord(rl.CurrentRec);
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLFeedback_MessageRecordList {
		public static implicit operator RLFeedback_MessageRecordList(WORCFeedback_MessageRecord[] array) {
			RLFeedback_MessageRecordList rl = new RLFeedback_MessageRecordList();
			if (array != null) {
				foreach(WORCFeedback_MessageRecord val in array) {
					rl.Append((RCFeedback_MessageRecord) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCFeedback_MessageRecord[](RLFeedback_MessageRecordList rl) {
			WORCFeedback_MessageRecord[] array = new WORCFeedback_MessageRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (RCFeedback_MessageRecord) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLFeedback_MessageRecordList {
		public static implicit operator RLFeedback_MessageRecordList(WORLFeedback_MessageRecordList w) {
			return w.Array;
		}
		public static implicit operator WORLFeedback_MessageRecordList(RLFeedback_MessageRecordList rl) {
			return new WORLFeedback_MessageRecordList(rl);
		}
		public static implicit operator WORCFeedback_MessageRecord[](WORLFeedback_MessageRecordList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLFeedback_MessageRecordList(WORCFeedback_MessageRecord[] array) {
			return new WORLFeedback_MessageRecordList(array);
		}
	}
}

namespace ssContactManager {
	[Serializable()]
	public partial class WORLFeedback_MessageList {
		public WORCFeedback_MessageRecord[] Array;


		public WORLFeedback_MessageList(WORCFeedback_MessageRecord[] r) {
			if (r == null)
			Array = new WORCFeedback_MessageRecord[0];
			else
			Array = r;
		}
		public WORLFeedback_MessageList() {
			Array = new WORCFeedback_MessageRecord[0];
		}

		public WORLFeedback_MessageList(RLFeedback_MessageList rl) {
			rl=(RLFeedback_MessageList) rl.Duplicate();
			Array = new WORCFeedback_MessageRecord[rl.Length];
			while (!rl.Eof) {
				Array[rl.CurrentRowNumber] = rl.CurrentRec.Duplicate();
				rl.Advance();
			}
		}

	}
}

namespace ssContactManager {
	partial class RLFeedback_MessageList {
		public static implicit operator RLFeedback_MessageList(WORCFeedback_MessageRecord[] array) {
			RLFeedback_MessageList rl = new RLFeedback_MessageList();
			if (array != null) {
				foreach(WORCFeedback_MessageRecord val in array) {
					rl.Append((STFeedback_MessageStructure) val);
				}
			}
			return rl;
		}
		public static implicit operator WORCFeedback_MessageRecord[](RLFeedback_MessageList rl) {
			WORCFeedback_MessageRecord[] array = new WORCFeedback_MessageRecord[rl == null ? 0: rl.Length];
			for (int i = 0; i < array.Length; i++) {
				array[i] = (STFeedback_MessageStructure) rl.Data[i];
			}
			return array;
		}
	}
}

namespace ssContactManager {
	partial class WORLFeedback_MessageList {
		public static implicit operator RLFeedback_MessageList(WORLFeedback_MessageList w) {
			return w.Array;
		}
		public static implicit operator WORLFeedback_MessageList(RLFeedback_MessageList rl) {
			return new WORLFeedback_MessageList(rl);
		}
		public static implicit operator WORCFeedback_MessageRecord[](WORLFeedback_MessageList w) {
			if (w != null) {
				return w.Array;
			}
			return null;
		}
		public static implicit operator WORLFeedback_MessageList(WORCFeedback_MessageRecord[] array) {
			return new WORLFeedback_MessageList(array);
		}
	}
}

