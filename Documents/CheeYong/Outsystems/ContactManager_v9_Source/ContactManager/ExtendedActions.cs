/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.SessionState;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Processes;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using Pair = OutSystems.RuntimeCommon.Pair;

namespace ssContactManager {
	public partial class ExtendedActions {
		public static readonly ObjectKey rAnonymousKey = ObjectKey.Parse("0bApVE2NqE+q8EOBtnom8Q");
		public static readonly ObjectKey rRegisteredKey = ObjectKey.Parse("I1Fm79oZdUu8QBe+dLY9Cg");
		public static void AutoLogin(AppInfo info, SessionInfo session) {
			GenericExtendedActions.AutoLogin(info, session);
		} /// <summary>
		/// Action: CheckAnonymousRole
		/// </summary>

		public static void CheckAnonymousRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			outParamHasRole = true;
		}

		/// <summary>
		/// Action: CheckRegisteredRole
		/// </summary>

		public static void CheckRegisteredRole(HeContext heContext, int inParamUserId, out bool outParamHasRole) {
			outParamHasRole = false;

			int userId = heContext.Session.UserId;
			outParamHasRole = (userId != 0); 
		}

		/// <summary>
		/// Action: AbortTransaction
		/// </summary>

		public static void AbortTransaction(HeContext heContext) {
			DatabaseAccess.RollbackAllTransactions();
		}

		/// <summary>
		/// Action: LogMessage
		/// </summary>

		public static void LogMessage(HeContext heContext, string inParamMessage, string inParamModuleName) {
			GenericExtendedActions.LogMessage(heContext, inParamMessage, inParamModuleName);
		}

		/// <summary>
		/// Action: Deprecated_NotifyGetMessage
		/// </summary>

		public static void Deprecated_NotifyGetMessage(HeContext heContext, out string outParamMessage) {
			outParamMessage = "";

			GenericExtendedActions.NotifyWidgetGetMessage(heContext, out outParamMessage);
		}

		/// <summary>
		/// Action: ListRemove
		/// </summary>

		public static void ListRemove<T>(HeContext heContext, OSList<T> inParamList, int inParamPosition) {
			inParamList.Remove(inParamPosition);
		}

		/// <summary>
		/// Action: ListInsert
		/// </summary>

		public static void ListInsert<T>(HeContext heContext, OSList<T> inParamList, T inParamElement, int inParamPosition) {
			inParamList.Insert(inParamElement, inParamPosition);
		}

		/// <summary>
		/// Action: SetCurrentLocale
		/// </summary>

		public static void SetCurrentLocale(HeContext heContext, string inParamLocale) {
			GenericExtendedActions.SetCurrentLocale(heContext, inParamLocale);
		}

		/// <summary>
		/// Action: Deprecated_NotifyWidget
		/// </summary>

		public static void Deprecated_NotifyWidget(HeContext heContext, string inParamWidgetId, string inParamMessage) {
			GenericExtendedActions.NotifyWidget_Deprecated(heContext, inParamWidgetId, inParamMessage);
		}

		/// <summary>
		/// Action: Deprecated_Notify
		/// </summary>

		public static void Deprecated_Notify(HeContext heContext, object inParamWebblock, string inParamMessage) {
			GenericExtendedActions.Notify(heContext, inParamWebblock, inParamMessage);
		}

		/// <summary>
		/// Action: CommitTransaction
		/// </summary>

		public static void CommitTransaction(HeContext heContext) {
			DatabaseAccess.CommitAllTransactions();
		}

		/// <summary>
		/// Action: ListAppend
		/// </summary>

		public static void ListAppend<T>(HeContext heContext, OSList<T> inParamList, T inParamElement) {
			inParamList.Append(inParamElement);
		}

		/// <summary>
		/// Action: ListClear
		/// </summary>

		public static void ListClear<T>(HeContext heContext, OSList<T> inParamList) {
			inParamList.Clear();
		}

		/// <summary>
		/// Action: ListAppendAll
		/// </summary>

		public static void ListAppendAll<T>(HeContext heContext, OSList<T> inParamList, OSList<T> inParamSourceList) {
			inParamList.AppendAll(inParamSourceList);
		}


	}
}
