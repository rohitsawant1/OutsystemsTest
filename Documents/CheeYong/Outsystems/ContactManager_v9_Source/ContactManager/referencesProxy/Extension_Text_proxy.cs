/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

// Proxy for reference Extension with name Text and key wrcq9EastkebtA4dXC1Riw
using System;
using System.Data;
using System.Reflection;
using System.Collections;
using System.Runtime.Serialization;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform;
using System.Collections.Generic;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using System.Web.UI;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.RuntimePlatform.Web;
using ssContactManager;
namespace ssContactManager {
	/// <summary>
	/// Class: RssExtensionText
	/// </summary>
	public partial class RssExtensionText {
		/// <summary>
		/// Extension Variable: issText
		/// </summary>
		protected static OutSystems.NssText.IssText issText = (OutSystems.NssText.IssText) new OutSystems.NssText.CssText();
		protected static int _maxExtensionLogsPerRequest = OutSystems.HubEdition.RuntimePlatform.RuntimePlatformSettings.Misc.MaxLogsPerRequestExtension.GetValue();
		public static void MssStringBuilder_ToString(HeContext heContext, object inParamStringBuilder, out string outParamString) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issText.MssStringBuilder_ToString(inParamStringBuilder, out outParamString);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Text.StringBuilder_ToString");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging("b69aa077-acf4-4bdc-bcd5-9def81d7ddcd") && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						DateTime instant = DateTime.Now;
						int executionDuration = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds);
						ExtensionLog.StaticWrite(heContext.AppInfo, heContext.Session,
						instant, executionDuration, "StringBuilder_ToString", errorLogId, 20, "Text");
						heContext.ExtensionLogCount = extLogCount + 1;
						RequestTracer reqTracer = heContext.RequestTracer;
						if (reqTracer != null) {
							reqTracer.RegisterExtensionExecuted("a2e4d122-f03f-4612-adb7-daadf70a1a19", "StringBuilder_ToString", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", executionDuration, instant); 
						}
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Text.StringBuilder_ToString");
			}
		}


		public static void MssStringBuilder_Create(HeContext heContext, int inParamInitialCapacity, out object outParamStringBuilder) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issText.MssStringBuilder_Create(inParamInitialCapacity, out outParamStringBuilder);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Text.StringBuilder_Create");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging("b69aa077-acf4-4bdc-bcd5-9def81d7ddcd") && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						DateTime instant = DateTime.Now;
						int executionDuration = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds);
						ExtensionLog.StaticWrite(heContext.AppInfo, heContext.Session,
						instant, executionDuration, "StringBuilder_Create", errorLogId, 20, "Text");
						heContext.ExtensionLogCount = extLogCount + 1;
						RequestTracer reqTracer = heContext.RequestTracer;
						if (reqTracer != null) {
							reqTracer.RegisterExtensionExecuted("f13768e4-0fbe-4be7-a870-51b5c8362fed", "StringBuilder_Create", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", executionDuration, instant); 
						}
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Text.StringBuilder_Create");
			}
		}


		public static void MssRegex_Search(HeContext heContext, string inParamText, string inParamPattern, bool inParamIgnoreCase, bool inParamMultiLine, bool inParamSingleLine, out bool outParamFound, out string outParamPatternResult, out int outParamFirstIndex) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issText.MssRegex_Search(inParamText, inParamPattern, inParamIgnoreCase, inParamMultiLine, inParamSingleLine, out outParamFound, out outParamPatternResult, out outParamFirstIndex);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Text.Regex_Search");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging("b69aa077-acf4-4bdc-bcd5-9def81d7ddcd") && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						DateTime instant = DateTime.Now;
						int executionDuration = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds);
						ExtensionLog.StaticWrite(heContext.AppInfo, heContext.Session,
						instant, executionDuration, "Regex_Search", errorLogId, 20, "Text");
						heContext.ExtensionLogCount = extLogCount + 1;
						RequestTracer reqTracer = heContext.RequestTracer;
						if (reqTracer != null) {
							reqTracer.RegisterExtensionExecuted("5c204ebc-821d-48a8-aa5f-b3412dcd2696", "Regex_Search", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", executionDuration, instant); 
						}
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Text.Regex_Search");
			}
		}


		public static void MssStringBuilder_Append(HeContext heContext, object inParamStringBuilder, string inParamString) {
			DateTime startTime = DateTime.Now;
			String errorLogId = "";
			try {
				issText.MssStringBuilder_Append(inParamStringBuilder, inParamString);
			} catch (Exception ex) {
				errorLogId = ErrorLog.LogApplicationError(ex, heContext, "Extension method execution: Text.StringBuilder_Append");
				throw ex;
			} finally {
				if (errorLogId != string.Empty || (!heContext.AppInfo.SelectiveLoggingEnabled ||
				(heContext.AppInfo.ExtensionProperties.AllowLogging("b69aa077-acf4-4bdc-bcd5-9def81d7ddcd") && heContext.AppInfo.Properties.AllowLogging))) {

					int extLogCount = heContext.ExtensionLogCount;
					if (extLogCount == _maxExtensionLogsPerRequest) {
						// issue warning
						GeneralLog.StaticWrite(
						DateTime.Now, heContext.Session.SessionID, heContext.AppInfo.eSpaceId, heContext.AppInfo.Tenant.Id,
						heContext.Session.UserId, "The maximum number (" + _maxExtensionLogsPerRequest + ") of allowed Extension Log entries per request has been exceeded. No more entries will be logged in this request.",
						 "WARNING", "SLOWEXTENSION", "");
						heContext.ExtensionLogCount = extLogCount + 1;
					} else if (extLogCount < _maxExtensionLogsPerRequest) {
						DateTime instant = DateTime.Now;
						int executionDuration = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds);
						ExtensionLog.StaticWrite(heContext.AppInfo, heContext.Session,
						instant, executionDuration, "StringBuilder_Append", errorLogId, 20, "Text");
						heContext.ExtensionLogCount = extLogCount + 1;
						RequestTracer reqTracer = heContext.RequestTracer;
						if (reqTracer != null) {
							reqTracer.RegisterExtensionExecuted("c1fafe09-0ff3-4fe3-9d16-18fb4d1506ea", "StringBuilder_Append", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", executionDuration, instant); 
						}
					}
				}
				RuntimePlatformUtils.LogSlowExtensionCall(startTime, "Text.StringBuilder_Append");
			}
		}




		public class Factory {
		}
		public class DefaultValues {
		}
	}
}
