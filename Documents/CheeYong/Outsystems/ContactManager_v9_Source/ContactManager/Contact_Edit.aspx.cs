/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Runtime.Serialization;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using System.Collections.Generic;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Web.Caching;
using System.Text;
using System.Resources;

namespace ssContactManager.Flows.FlowMainFlow {

	public class ScrnContact_Edit: OSPageViewStateCompressed, IWebScreen, INegotiateTabIndexes, IBookmarkableURL {


		public ScrnContact_Edit(): base(ContactManager_Properties.QuirksMode) {
		}


		/// <summary>
		/// Screen Input Parameter inParamContactId. Description: Contact to edit
		/// </summary>
		public int inParamContactId = 0;
		/// <summary>
		/// Variable wt_WebBlockInstance20
		/// </summary>
		protected ssContactManager.Flows.FlowCommon.WBlkLayout_Normal wt_WebBlockInstance20;
		/// <summary>
		/// Variable "True" if the Widget wt_If34
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If34T;

		/// <summary>
		/// Variable "True" if the Widget wt_If34
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If34F;
		/// <summary>
		/// Auxiliar Edit Record record variable
		/// </summary>
		RCContactRecord ssContactEditRecord = new RCContactRecord(null);

		/// <summary>
		/// Edit Record Valid Runtime Property
		/// </summary>
		public bool wtContactEdit_Valid() {
			bool res = true &&
			ValidationUtils.IsValid(this, "wtContact_Name") &&
			ValidationUtils.IsValid(this, "wtContact_JobTitle") &&
			ValidationUtils.IsValid(this, "wtContact_Phone") &&
			ValidationUtils.IsValid(this, "wtContact_Email") &&
			ValidationUtils.IsValid(this, "wtContact_Notes");
			return res;
		}


		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtContact_NameValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtContact_NameValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtContact_JobTitleValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtContact_JobTitleValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtContact_PhoneValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtContact_PhoneValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtContact_EmailValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtContact_EmailValidatorType;

		protected OutSystems.HubEdition.WebWidgets.RequiredFieldTextValidator wtContact_NotesValidatorRequired;
		protected OutSystems.HubEdition.WebWidgets.TextValidator wtContact_NotesValidatorType;
		/// <summary>
		/// Variable (wt_Button26) with Button component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.Button wt_Button26;
		/// <summary>
		/// Variable (wt_Link32) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link32;


		List<object> explicitChangedVariables = new List<object>();

		protected override void GetBlocksCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssContactManager.Flows.FlowCommon.WBlkLayout_Normal.GetCss(writer, inline, visited);
			ssContactManager.Flows.FlowCommon.WBlkMenu.GetCss(writer, inline, visited);

		}

		protected override void GetWidgetsCss(TextWriter writer, bool inline, HashSet<string> visited) {

		}







		protected override string GetInlineStyleSheetInclude() {
			throw new InvalidOperationException();
		}





		protected override bool PageAllowsCallbacks() {
			return true;
		}


		protected string GetRequestInfoJavaScript() {
			return GetRequestInfoJavaScript("xrlRSnhtdUiLQ+yWNtNtZw", "Contact_Edit");
		}

		protected string GetVisitCode() {
			SessionInfo session = AppInfo.GetAppInfo().OsContext.Session;
			if (session["osIsNewVisit"] != null && ((bool) session["osIsNewVisit"])
			// && !NetworkInterfaceUtils.IsLoopbackAddress(Request.UserHostAddress)
			&& RuntimePlatformUtils.IsValidRequestForVisit()) {
				return "<script type=\"text/javascript\">outsystems.internal.$.get(\"/ContactManager/_status.aspx\")</script>";
			}
			return "";
		}

		public string GetCallbackDebug() {
			if (Request.HttpMethod == "GET" && Request.QueryString["__CALLBACK_DEBUG"] != null && Request.QueryString["__CALLBACK_DEBUG"] != "") {
				if (Request.QueryString["__CALLBACK_DEBUG"] == RuntimePlatformSettings.Misc.CallbackDebugInformationKey.GetValue()) {
					return AppInfo.GetAppInfo().GetCallbackDebugInformation();
				}
			}
			return "";
		}

		protected string GetHeadTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadTop, "xrlRSnhtdUiLQ+yWNtNtZw", "Contact_Edit");
		}

		protected string GetHeadBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.HeadBottom, "xrlRSnhtdUiLQ+yWNtNtZw", "Contact_Edit");
		}

		protected string GetBodyTopJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyTop, "xrlRSnhtdUiLQ+yWNtNtZw", "Contact_Edit");
		}

		protected string GetBodyBottomJavaScript() {
			return GetInjectedCode(CodeInjectionFactory.Locations.BodyBottom, "xrlRSnhtdUiLQ+yWNtNtZw", "Contact_Edit");
		}

		HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();



		static ScrnContact_Edit() {
			htTabIndexGroups["wt_Text44"] = "wtContactEdit-1";
			htTabIndexGroups["wtContact_Name"] = "wtContactEdit-1";
			htTabIndexGroups["wt_Text14"] = "wtContactEdit-1";
			htTabIndexGroups["wtContact_JobTitle"] = "wtContactEdit-1";
			htTabIndexGroups["wt_Text37"] = "wtContactEdit-1";
			htTabIndexGroups["wtContact_Phone"] = "wtContactEdit-1";
			htTabIndexGroups["wt_Text46"] = "wtContactEdit-1";
			htTabIndexGroups["wtContact_Email"] = "wtContactEdit-1";
			htTabIndexGroups["wt_Text36"] = "wtContactEdit-1";
			htTabIndexGroups["wtContact_Notes"] = "wtContactEdit-1";
			htTabIndexGroups["wt_Button26"] = "wtContactEdit-1";
			htTabIndexGroups["wt_Text6"] = "wtContactEdit-1";
			htTabIndexGroups["wt_Link32"] = "wtContactEdit-1";
			htTabIndexGroups["wt_Text39"] = "wtContactEdit-1";
		}


		RLContactRecordList queryResGetContactById_outParamList = new RLContactRecordList();
		long queryResGetContactById_outParamCount = 0L;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; perfTracer.RegisterAction("4a51b9c6-6d78-4875-8b43-ec9636d36d67.#Preparation", "Preparation");
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("xrlRSnhtdUiLQ+yWNtNtZw.#Preparation", "Preparation", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				// Query datasetGetContactById
				int datasetGetContactById_maxRecords = 1;
				if (datasetGetContactById_maxRecords < 1) datasetGetContactById_maxRecords = 1;
				queryResGetContactById_outParamList = FuncssPreparation.datasetGetContactById(heContext, datasetGetContactById_maxRecords, IterationMultiplicity.Never, out queryResGetContactById_outParamCount, inParamContactId
				);

			} catch (System.Threading.ThreadAbortException) {
				throw;
			}
		}


		protected override BaseAppUtils GetAppUtils() {
			return AppUtils.Instance;
		}

		protected override string OwnCssUrl {
			get {
				return ""; 
			}
		}

		protected override string OwnCssFile {
			get {
				return ""; 
			}
		}

		protected override string BasicCssUrl {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string BasicCssFile {
			get {
				return "_Basic.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssUrl {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string ServiceCenterBrandingCssFile {
			get {
				return "_ServiceCenterBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssUrl {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimeCoreBrandingCssFile {
			get {
				return "_LifeTimeCoreBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssUrl {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string LifeTimePerformanceMonitorBrandingCssFile {
			get {
				return "_LifeTimePerformanceMonitorBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssUrl {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string PerformanceThemeBrandingCssFile {
			get {
				return "_PerformanceThemeBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssUrl {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string LifeTimeStyleBrandingCssFile {
			get {
				return "_LifeTimeStyleBrandingCss.css"; 
			}
		}

		protected override string ThemeCssUrl {
			get {
				return "Theme.ContactManager.css"; 
			}
		}

		protected override string ThemeCssCacheInvalidationSuffix {
			get {
				return AppUtils.Instance.CacheInvalidationSuffix; 
			}
		}

		protected override string ThemeCssFile {
			get {
				return "Theme.ContactManager.css"; 
			}
		}

		protected override string ThemeExtraCssUrl {
			get {
				return ""; 
			}
		}

		protected override string ThemeExtraCssCacheInvalidationSuffix {
			get {
				return ""; 
			}
		}

		protected override string ThemeExtraCssFile {
			get {
				return ""; 
			}
		}

		public override bool IsUsingMobileTheme {
			get {
				return false; 
			}
		}

		protected override string OwnJavascriptInclude {
			get {
				return ""; 
			}
		}

		public override string XUACompatibleOverride {
			get {
				return null; 
			}
		}

		protected void InitializeUrls() {
			Uri uri = new Uri((RuntimePlatformUtils.RequestIsHttps(Request) ? "https": "http") + Request.Url.ToString().Substring(Request.Url.Scheme.Length));
			string applicationUrl = AppUtils.Instance.getImagePath(/*internalAccess*/false,/*includeSessionIdIfNeeded*/ false);
			actionUrl = "";
			bookmarkableUrl = uri.GetLeftPart(UriPartial.Authority) + applicationUrl;
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			if ((inParamContactId!=0)) {
				parameters.Add(new Pair<string, string>("ContactId", HttpUtility.UrlEncode(Convert.ToString(inParamContactId), Request.ContentEncoding)));
			}
			if (Request.AppRelativeCurrentExecutionFilePath.IndexOf('/', 2) == -1) {
				AppInfo appInfo = AppInfo.GetAppInfo();
				if (appInfo != null) {
					string pageHeader = appInfo.OsContext.OsISAPIFilter.GetPage(Request);
					if (appInfo.OsContext.IsCookielessSession || (pageHeader != null && pageHeader.IndexOf('/', 1) != -1)) {
						actionUrl = applicationUrl;
					}
				}
				actionUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Contact_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ true);
			}
			bookmarkableUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Contact_Edit", parameters,/*useParamsOnlyIfNeededForRule*/ false);

		}

		protected override void OnInit(EventArgs e) {
			HeContext heContext = AppInfo.GetAppInfo().OsContext;
			heContext.CurrentScreen = this;
			try {
				heContext.CurrentExecutionFileName = Path.GetFileName(Request.CurrentExecutionFilePath);
			} catch {}
			InitializeComponent(heContext);
			base.OnInit(e);
		}
		private void InitializeComponent(HeContext heContext) {
			wt_WebBlockInstance20 = (ssContactManager.Flows.FlowCommon.WBlkLayout_Normal) FindControl("wt_WebBlockInstance20");
			wt_Button26 = (OutSystems.HubEdition.WebWidgets.Button) FindControl("wt_Button26");
			if (this.wt_Button26 != null) {
				this.wt_Button26.Click += new System.EventHandler(this.wt_Button26_Click);
			}
			wt_Link32 = (OutSystems.HubEdition.WebWidgets.HyperLink) FindControl("wt_Link32");
			Page.Error += new EventHandler(Page_Error);
			this.Load += new System.EventHandler(this.Page_Load);
			this.PreRender += new System.EventHandler(this.Page_PreRender);
		}

		public override Control FindControl(string id) {
			if (id == "wt_WebBlockInstance19") {
				return wt_WebBlockInstance20.wtMenu.FindControl("wt_WebBlockInstance19");
			}
			if (id == "wt_If34") {
				return wt_WebBlockInstance20.wtTitle.FindControl("wt_If34");
			}
			if (id == "wt_If34T") {
				return wt_WebBlockInstance20.wtTitle.FindControl("wt_If34T");
			}
			if (id == "wt_Text29") {
				return wt_WebBlockInstance20.wtTitle.FindControl("wt_Text29");
			}
			if (id == "wt_If34F") {
				return wt_WebBlockInstance20.wtTitle.FindControl("wt_If34F");
			}
			if (id == "wt_Text5") {
				return wt_WebBlockInstance20.wtTitle.FindControl("wt_Text5");
			}
			if (id == "wt_InlineExpression11") {
				return wt_WebBlockInstance20.wtTitle.FindControl("wt_InlineExpression11");
			}
			if (id == "wt_Text27") {
				return wt_WebBlockInstance20.wtTitle.FindControl("wt_Text27");
			}
			if (id == "wtContactEdit") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wtContactEdit");
			}
			if (id == "wt_EditRecordRow43") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordRow43");
			}
			if (id == "wt_EditRecordCell33") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell33");
			}
			if (id == "wt_Text44") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Text44");
			}
			if (id == "wt_EditRecordCell25") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell25");
			}
			if (id == "wtContact_Name") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wtContact_Name");
			}
			if (id == "wt_EditRecordRow13") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordRow13");
			}
			if (id == "wt_EditRecordCell28") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell28");
			}
			if (id == "wt_Text14") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Text14");
			}
			if (id == "wt_EditRecordCell1") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell1");
			}
			if (id == "wtContact_JobTitle") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wtContact_JobTitle");
			}
			if (id == "wt_EditRecordRow18") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordRow18");
			}
			if (id == "wt_EditRecordCell21") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell21");
			}
			if (id == "wt_Text37") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Text37");
			}
			if (id == "wt_EditRecordCell7") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell7");
			}
			if (id == "wtContact_Phone") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wtContact_Phone");
			}
			if (id == "wt_EditRecordRow42") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordRow42");
			}
			if (id == "wt_EditRecordCell40") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell40");
			}
			if (id == "wt_Text46") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Text46");
			}
			if (id == "wt_EditRecordCell38") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell38");
			}
			if (id == "wtContact_Email") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wtContact_Email");
			}
			if (id == "wt_EditRecordRow2") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordRow2");
			}
			if (id == "wt_EditRecordCell12") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell12");
			}
			if (id == "wt_Text36") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Text36");
			}
			if (id == "wt_EditRecordCell45") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell45");
			}
			if (id == "wtContact_Notes") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wtContact_Notes");
			}
			if (id == "wt_EditRecordRow4") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordRow4");
			}
			if (id == "wt_EditRecordCell22") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell22");
			}
			if (id == "wt_EditRecordCell17") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_EditRecordCell17");
			}
			if (id == "wt_Button26") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Button26");
			}
			if (id == "wt_Text6") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Text6");
			}
			if (id == "wt_Link32") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Link32");
			}
			if (id == "wt_Text39") {
				return wt_WebBlockInstance20.wtMainContent.FindControl("wt_Text39");
			}

			return base.FindControl(id);
		}


		private void Page_Load(object sender, System.EventArgs e) {
			// init vars
			AppInfo appInfo = Global.App;
			if (appInfo != null) {
				heContext = appInfo.OsContext;
			}
			Response.ContentType = "text/html; charset=" + Response.ContentEncoding.WebName;

			// No session SessionFixationValidation because screen is accessible by anonymous users or uses a readonly session.

			if (appInfo != null) {
				heContext = appInfo.OsContext; heContext.RequestTracer.MainEventType = RequestTracerEventType.WebScreenServerExecuted; heContext.RequestTracer.RegisterEndpoint("4a51b9c6-6d78-4875-8b43-ec9636d36d67", "Contact_Edit"); 
			}
			OutSystems.HubEdition.RuntimePlatform.Web.JavaScriptManager.CheckRelativeJavaScriptPrefix(AppUtils.Instance.getImagePath());
			appInfo.IsLoadingScreen = !IsPostBack;
			((OSPageViewState) Page).EnableResetViewState();
			if (!IsPostBack) {
				ArrayList screenParameters = (ArrayList) Global.App.OsContext.Session["ContactManager._ScreenParameters_Contact_Edit"];
				bool screenParametersInSession = false;
				object screenParametersKey = heContext.Session["_ScreenParametersKey"];
				if ((screenParametersKey == null || this.Key.Equals(ObjectKey.Parse(Convert.ToString(screenParametersKey)))) && screenParameters != null) {
					try {
						if (screenParameters.Count > 0) {
							object paramValue = screenParameters[0];
							if (paramValue != null) {
								inParamContactId = (((int) paramValue));
							}
						}
						screenParametersInSession = true;
					} catch (Exception parametersException) {
						ErrorLog.LogApplicationError("Failed to load Screen Input Parameters from session.", "ScreenParametersKey = " + screenParametersKey + ", Count = " + screenParameters.Count + "\r\n" + parametersException.StackTrace, heContext, "Global");
					} finally {
						Global.App.OsContext.Session["ContactManager._ScreenParameters_Contact_Edit"] = null;
						heContext.Session["_ScreenParametersKey"] = null;
					}
				}
				else if (Request.HttpMethod == "GET") {
					if (Request.QueryString["ContactId"] != null) {
						inParamContactId = Convert.ToInt32(Request.QueryString["ContactId"]);
					}
				}
				else if (Request.HttpMethod == "POST") {
					if (Request.Form["ContactId"] != null) {
						inParamContactId = Convert.ToInt32(Request.Form["ContactId"]);
					}
				}
			}
			if (!appInfo.IsApplicationEnabled) {
				ErrorLog.LogApplicationError(message: "eSpace " + appInfo.eSpaceName + " is disabled", stackTrace: Environment.StackTrace, context: heContext, moduleName: "Global");
				String contact = RuntimePlatformUtils.GetAdministrationEmail();
				try {
					Context.Items[Constants.AppOfflineCustomHandler.ContactKey] = contact;
					Context.Items[Constants.AppOfflineCustomHandler.ErrorCodeKey] = "APPLICATION_OFFLINE";
					Server.Transfer("/ContactManager/CustomHandlers/app_offline.aspx");
				}
				catch (System.Threading.ThreadAbortException) {}
				catch {
					Response.Redirect("/ContactManager/CustomHandlers/internalerror.aspx");
				}
			}
			InitializeUrls();
			Actions.ActionOnBeginWebRequest(heContext);
			if (appInfo.IsForcingSecurityForScreens() && !RuntimePlatformUtils.RequestIsSecure(Request)) {
				Response.Redirect("https://" + Request.Url.Host + "" + AppUtils.Instance.getImagePath() + "Contact_Edit.aspx" + Request.Url.Query);
				HttpContext.Current.ApplicationInstance.CompleteRequest();
			}
			if (!IsPostBack) {
				Preparation(heContext);
				bool bindEditRecords = !IsPostBack;
				if (bindEditRecords) {
					wtContactEdit_onDataBindingDataSource(this.FindControl("wtContactEdit"), null);
				}
				Title = (((queryResGetContactById_outParamList.CurrentRec.ssENContact.ssId==BuiltInFunction.NullIdentifier())) ?("New Contact"):((("Edit \'" +queryResGetContactById_outParamList.CurrentRec.ssENContact.ssName) + "\'"))); Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.AppInfo, heContext.Session, heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Contact_Edit", (string) heContext.Session["MSISDN"], "WEB", "Screen", RuntimeEnvironment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} else {
				if (heContext.AppInfo.IsForcingSecurityForScreens() && !RuntimePlatformUtils.RequestIsSecure(Request)) {
					Response.Redirect("https://" + Request.Url.Host + "" + AppUtils.Instance.getImagePath() + "Contact_Edit.aspx" + Request.Url.Query);
					HttpContext.Current.ApplicationInstance.CompleteRequest();
				}
				FetchViewState();
			}

		}
		private void Page_PreRender(object sender, System.EventArgs e) {
			ClientScript.RegisterArrayDeclaration("OsPage_Validators", "{}");

			NegotiateTabIndexes();

			foreach(Control child in this.Controls) {
				DisableViewState(child);
			}
		}

		private void NegotiateTabIndexes() {
			short tabindex=1;
			tabindex = NegotiateTabIndexes(tabindex, false);
		}

		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {
			try {
				wt_Button26 = wt_Button26 ??(OutSystems.HubEdition.WebWidgets.Button) rootCtrl.FindControl("wt_Button26");
			} catch {}
			string defButtonKeyDownJs = (wt_Button26 != null) ? "return OsEnterKey('" +wt_Button26.ClientID + "', arguments[0] || window.event);": "";

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {
						string onkeydown = ctrl.Attributes["onkeydown"] ?? "";
						if (!onkeydown.Contains(defButtonKeyDownJs)) {
							ctrl.Attributes.Add("onkeydown", onkeydown + defButtonKeyDownJs);
						}

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short settedTabIndex = 0;
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, Convert.ToInt16(htTabIndexGroupsTI[groupid]), out settedTabIndex);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, tabindex, out settedTabIndex);
							// Increase tabindex if it was not overiden
							if (tabindex == settedTabIndex) {
								tabindex++;
							}
						}
					}
					tabindex = Math.Max(tabindex, ++settedTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}



		private void Page_Error(object sender, System.EventArgs e) {
			if (! new ssContactManager.Flows.FlowMainFlow.ExceptionHandler(this, false).HandleException()) {
				DatabaseAccess.FreeupResources(false);
				Server.Transfer("_WebErrorPage.aspx");
			}
		}

		public override void ClearErrorHandler() {
			Error -= Page_Error;
		}

		public void CheckPermissions(HeContext heContext) {
			return;
		}


		public ObjectKey Key {
			get {
				return ObjectKey.Parse("xrlRSnhtdUiLQ+yWNtNtZw"); 
			}
		}

		public bool isSecure {
			get {
				return Global.App.IsForcingSecurityForScreens();
			}
		}


		public class lcvSave: VarsBag {
			public int resCreateOrUpdateContact_outParamId = 0;

			public lcvSave() {
			}
		}
		/// <summary>
		/// Action <code>CommandSave</code> that represents the Service Studio screen action <code>Save</code>
		///  <p> Description: Validates and saves the contact to the database</p>
		/// </summary>
		private bool CommandSave(HeContext heContext) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("f4883cf9-fe65-416a-8a67-41226bbeb976", "Save"); 
			}
			lcvSave localVars = new lcvSave();
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("+TyI9GX+akGKZ0Eia765dg", "Save", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				try {
					// Valid Email
					if ((!(((ssContactEditRecord.ssENContact.ssEmail== "") ||BuiltInFunction.EmailAddressValidate(ssContactEditRecord.ssENContact.ssEmail))))) {
						// Invalid Email
						// Contact_Email.Valid = False
						((IWidgetRuntimeProperties) this.FindControl("wtContact_Email")).Valid = false;
						explicitChangedVariables.Add(((IWidgetRuntimeProperties) this.FindControl("wtContact_Email")).Valid);

						// Contact_Email.ValidationMessage = "Invalid Email Address"
						((IWidgetRuntimeProperties) this.FindControl("wtContact_Email")).ValidationMessage = "Invalid Email Address";
						explicitChangedVariables.Add(((IWidgetRuntimeProperties) this.FindControl("wtContact_Email")).ValidationMessage);

					}

					// Valid
					if ((wtContactEdit_Valid())) {
						// CreateOrUpdateContact
						ExtendedActions.CreateOrUpdateContact(heContext, ssContactEditRecord.ssENContact.ChangedAttributes, (((RCContactRecord) ssContactEditRecord.ssENContact)), out localVars.resCreateOrUpdateContact_outParamId);

						// Feedback_Message
						Actions.ActionFeedback_Message(heContext, ((("Contact \'" +ssContactEditRecord.ssENContact.ssName) + "\' was successfully ") + (((ssContactEditRecord.ssENContact.ssId==BuiltInFunction.NullIdentifier())) ?("created."):("updated."))), ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("G4pjYRSiMk6Ozp038Nv6jw")).ssId);

						// Destination = Contact_List

						if (OSPage.IsAjaxRequest) {
							// go to target page
							{

								((OSPage) Page).ClearErrorHandler();
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "ZOHdDILdyE2OWbJJAj5CPg";
								ArrayList screenParameters = new ArrayList();
								Global.App.OsContext.Session["ContactManager._ScreenParameters_Contact_List"] = screenParameters;
								string sURLQuery = null;
								sURLQuery = (sURLQuery == null ? "": "?" + sURLQuery);
								string sURL = GetClientRedirectionUrlBasePath(Global.App.IsForcingSecurityForScreens(), AppUtils.Instance.getImagePath(), "", "") + "Contact_List.aspx" + sURLQuery;
								DatabaseAccess.FreeupResources(true);
								((OSPage) Page).Redirect(sURL);
								return false;

							}
						} else {
							// go to target page
							{

								((OSPage) Page).ClearErrorHandler();
								// get parameters
								heContext.Session["_ScreenParametersKey"] = "ZOHdDILdyE2OWbJJAj5CPg";
								ArrayList screenParameters = new ArrayList();
								Global.App.OsContext.Session["ContactManager._ScreenParameters_Contact_List"] = screenParameters;
								DatabaseAccess.FreeupResources(true);
								Server.Transfer("Contact_List.aspx");
								return false;

							}
						}

					} else {
						// Refresh Widget (wtContactEdit)
						((OSPageViewState) Page).AjaxRefresh(this.FindControl("wtContactEdit"), "None", StoreViewState);

						// Input_FocusFirstInvalid
						Actions.ActionInput_FocusFirstInvalid(heContext);

						// Update Screen
						return true;

					}

				} // try

				catch (System.Threading.ThreadAbortException) {
					return false;
				}
				catch (Exception ex) {
					ErrorLog.LogApplicationError(ex, heContext, "");
					Global.App.OsContext.Session["ExceptionMessage"] = ex.Message;
					heContext.LastException = ex;
					// Error Handler
					DatabaseAccess.RollbackAllTransactions();

					// ExceptionFeedbackMessage
					Actions.ActionFeedback_Message(heContext, ex.Message, ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("3a5cuVOamEu9KnDBSWLcbA")).ssId);

					// Update Screen
					return true;

				} // Catch
			} catch (System.Threading.ThreadAbortException) {
				return false;
			}
		}
		/// <summary>
		/// wt_WebBlockInstance20 Functions
		/// </summary>
		public void webBlck_WebBlockInstance20_onDataBinding(object sender, System.EventArgs e) {
			ssContactManager.Flows.FlowCommon.WBlkLayout_Normal widget = (ssContactManager.Flows.FlowCommon.WBlkLayout_Normal) sender;
		}
		/// <summary>
		/// wt_WebBlockInstance19 Functions
		/// </summary>
		public void webBlck_WebBlockInstance19_onDataBinding(object sender, System.EventArgs e) {
			ssContactManager.Flows.FlowCommon.WBlkMenu widget = (ssContactManager.Flows.FlowCommon.WBlkMenu) sender;
			widget.inParamActiveMenuItemId = ENMenuItemEntity.GetRecordByKey(ObjectKey.Parse("bQMfrwAt5UaQWFeNE2K7bg")).ssId;
		}
		/// <summary>
		/// wt_If34 Functions
		/// </summary>
		bool if_wt_If34_hasRun=false;
		bool if_wt_If34_evalResult;
		public bool if_wt_If34() {
			if (if_wt_If34_hasRun) {
				if_wt_If34_hasRun = false;
				return if_wt_If34_evalResult;
			}
			if_wt_If34_hasRun = true;
			if_wt_If34_evalResult = (queryResGetContactById_outParamList.CurrentRec.ssENContact.ssId==BuiltInFunction.NullIdentifier());
			return if_wt_If34_evalResult;
		}

		/// <summary>
		/// wt_InlineExpression11 Functions
		/// </summary>
		/// <summary>
		/// Function to dump expression (Key = vb1FJQA_WkG4eeRn6pm44g) Expression:
		///  GetContactById.List.Current.Contact.Name
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression11() {
			return queryResGetContactById_outParamList.CurrentRec.ssENContact.ssName;
		}
		/// <summary>
		/// wtContactEdit Functions
		/// </summary>
		public void wtContactEdit_onDataBindingDataSource(object sender, System.EventArgs e) {
			if (!IsPostBack) {
				ssContactEditRecord = queryResGetContactById_outParamList.CurrentRec;
			}
		}
		/// <summary>
		/// wtContact_Name Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtContact_Name_input_value() {
			if (("" !=ssContactEditRecord.ssENContact.ssName)) {
				return ssContactEditRecord.ssENContact.ssName;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtContact_Name");

				if (explicitChangedVariables.Contains(ssContactEditRecord.ssENContact.ssName) || ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssContactEditRecord.ssENContact.ssName;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtContact_Name_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssContactEditRecord.ssENContact.ssName = ""; 
				} else {
					ssContactEditRecord.ssENContact.ssName = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssContactEditRecord.ssENContact.ssName = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtContact_Name)
		/// </summary>
		/// <returns>The Visible State of wtContact_Name</returns>
		public bool inputwtContact_Name_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtContact_Name)
		/// </summary>
		/// <returns>The Enabled State of wtContact_Name</returns>
		public bool inputwtContact_Name_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtContact_Name)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtContact_Name</returns>
		public bool inputwtContact_Name_isMandatory() {
			return true;
		}

		/// <summary>
		/// wtContact_JobTitle Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtContact_JobTitle_input_value() {
			if (("" !=ssContactEditRecord.ssENContact.ssJobTitle)) {
				return ssContactEditRecord.ssENContact.ssJobTitle;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtContact_JobTitle");

				if (explicitChangedVariables.Contains(ssContactEditRecord.ssENContact.ssJobTitle) || ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssContactEditRecord.ssENContact.ssJobTitle;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtContact_JobTitle_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssContactEditRecord.ssENContact.ssJobTitle = ""; 
				} else {
					ssContactEditRecord.ssENContact.ssJobTitle = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssContactEditRecord.ssENContact.ssJobTitle = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtContact_JobTitle)
		/// </summary>
		/// <returns>The Visible State of wtContact_JobTitle</returns>
		public bool inputwtContact_JobTitle_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtContact_JobTitle)
		/// </summary>
		/// <returns>The Enabled State of wtContact_JobTitle</returns>
		public bool inputwtContact_JobTitle_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtContact_JobTitle)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtContact_JobTitle</returns>
		public bool inputwtContact_JobTitle_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtContact_Phone Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtContact_Phone_input_value() {
			if (("" !=ssContactEditRecord.ssENContact.ssPhone)) {
				return ssContactEditRecord.ssENContact.ssPhone;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtContact_Phone");

				if (explicitChangedVariables.Contains(ssContactEditRecord.ssENContact.ssPhone) || ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssContactEditRecord.ssENContact.ssPhone;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtContact_Phone_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssContactEditRecord.ssENContact.ssPhone = ""; 
				} else {
					ssContactEditRecord.ssENContact.ssPhone = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssContactEditRecord.ssENContact.ssPhone = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtContact_Phone)
		/// </summary>
		/// <returns>The Visible State of wtContact_Phone</returns>
		public bool inputwtContact_Phone_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtContact_Phone)
		/// </summary>
		/// <returns>The Enabled State of wtContact_Phone</returns>
		public bool inputwtContact_Phone_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtContact_Phone)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtContact_Phone</returns>
		public bool inputwtContact_Phone_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtContact_Email Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtContact_Email_input_value() {
			if (("" !=ssContactEditRecord.ssENContact.ssEmail)) {
				return ssContactEditRecord.ssENContact.ssEmail;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtContact_Email");

				if (explicitChangedVariables.Contains(ssContactEditRecord.ssENContact.ssEmail) || ValidationUtils.ValidateInput(widget, parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.EmailAddressValidate, validate)) {
					return ssContactEditRecord.ssENContact.ssEmail;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtContact_Email_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssContactEditRecord.ssENContact.ssEmail = ""; 
				} else {
					ssContactEditRecord.ssENContact.ssEmail = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssContactEditRecord.ssENContact.ssEmail = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtContact_Email)
		/// </summary>
		/// <returns>The Visible State of wtContact_Email</returns>
		public bool inputwtContact_Email_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtContact_Email)
		/// </summary>
		/// <returns>The Enabled State of wtContact_Email</returns>
		public bool inputwtContact_Email_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtContact_Email)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtContact_Email</returns>
		public bool inputwtContact_Email_isMandatory() {
			return false;
		}

		/// <summary>
		/// wtContact_Notes Functions
		/// </summary>
		/// <summary>
		/// Function to calculate the value to be displayed
		/// </summary>
		/// <returns>The string value to be displayed</returns>
		public string inputwtContact_Notes_input_value() {
			if (("" !=ssContactEditRecord.ssENContact.ssNotes)) {
				return ssContactEditRecord.ssENContact.ssNotes;
			} else {
				string parentEditRecord= "";
				bool validate = false;
				OutSystems.HubEdition.WebWidgets.TextBox widget = (OutSystems.HubEdition.WebWidgets.TextBox) this.FindControl("wtContact_Notes");

				if (explicitChangedVariables.Contains(ssContactEditRecord.ssENContact.ssNotes) || ValidationUtils.ValidateInput(widget, parentEditRecord, ValidationUtils.validateTrue, validate)) {
					return ssContactEditRecord.ssENContact.ssNotes;
				} else {
					return widget.TypedValue;
				}
			}
		}
		/// <summary>
		/// Function Called on Input widget value change
		/// </summary>
		/// <param name="sender"> Widget with the value changed</param>
		/// <param name="e"> Event Arguments</param>
		public void inputwtContact_Notes_input_onTextChanged(object sender, EventArgs e) {
			try {
				if ("" == ((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text) {
					ssContactEditRecord.ssENContact.ssNotes = ""; 
				} else {
					ssContactEditRecord.ssENContact.ssNotes = Convert.ToString(((OutSystems.HubEdition.WebWidgets.TextBox) sender).Text); 
				}

			} catch (Exception) {
				ssContactEditRecord.ssENContact.ssNotes = ""; 
			}

		}
		/// <summary>
		/// Gets the visible state of component (wtContact_Notes)
		/// </summary>
		/// <returns>The Visible State of wtContact_Notes</returns>
		public bool inputwtContact_Notes_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wtContact_Notes)
		/// </summary>
		/// <returns>The Enabled State of wtContact_Notes</returns>
		public bool inputwtContact_Notes_isEnabled() {
			return true; 
		}

		/// <summary>
		/// Gets the mandatory value of component (inputwtContact_Notes)
		/// </summary>
		/// <returns>The Mandatory Value of inputwtContact_Notes</returns>
		public bool inputwtContact_Notes_isMandatory() {
			return false;
		}

		/// <summary>
		/// wt_Button26 Functions
		/// </summary>
		public void btn_Button26_onDataBinding(object sender, System.EventArgs e) {
			((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
		}
		/// <summary>
		/// Action to be taken at a Button submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Button26_Click(object sender, System.EventArgs e) {
			((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), true);
			if (CommandSave(heContext)) {
				doAJAXRefreshScreen(heContext);
			}
		}
		/// <summary>
		/// Gets the label of the button (wt_Button26)
		/// </summary>
		/// <returns>Label of the Button (wt_Button26)</returns>
		public string
		btn_Button26_getLabel() {
			return "Save";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Button26)
		/// </summary>
		/// <returns>The Visible State of wt_Button26</returns>
		public bool btn_Button26_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Button26)
		/// </summary>
		/// <returns>The Enabled State of wt_Button26</returns>
		public bool btn_Button26_isEnabled() {
			return true; 
		}
		/// <summary>
		/// wt_Link32 Functions
		/// </summary>
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link32)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link32)</returns>
		public string lnk_Link32_NavigateUrl() {
			string navUrl = "";
			string urlParameter = AppInfo.GetAppInfo().GetURLParameter();

			if ((heContext.AppInfo.eSpaceId != Global.eSpaceId)) {
				navUrl = GetClientRedirectionUrlBasePath(Global.App.IsForcingSecurityForScreens(), AppUtils.Instance.getImagePath(), "", "");
			} else {
				string pageHeader = heContext.OsISAPIFilter.GetPage(Request);
				if (pageHeader != null && pageHeader.IndexOf('/', 1) != -1) {
					navUrl = AppUtils.Instance.getImagePath(/*forInternalUse*/false,/*includeSessionIdIfNeeded*/ false);
				}
			}
			List<Pair<string, string>> parameters = new List<Pair<string, string>>();
			parameters.Add(new Pair<string, string>(urlParameter, (string) null));
			navUrl += AppUtils.GetPageName(heContext, Global.eSpaceId, "Contact_List", parameters);

			return navUrl;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link32)
		/// </summary>
		/// <returns>title of the Link (wt_Link32)</returns>
		public string
		lnk_Link32_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link32)
		/// </summary>
		/// <returns>The Visible State of wt_Link32</returns>
		public bool lnk_Link32_isVisible() {
			return true;
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link32)
		/// </summary>
		/// <returns>The Enabled State of wt_Link32</returns>
		public bool lnk_Link32_isEnabled() {
			return true; 
		}


		public static class FuncCommandSave {
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetContactById" of Action "Preparation"
			/// </summary>
			public static RLContactRecordList datasetGetContactById(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out long outParamCount, int qpinId) {
				// Query Iterations: Never {-unbound-}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("ENContact.[ID] o0, ENContact.[NAME] o1, ENContact.[JOBTITLE] o2, ENContact.[PHONE] o3, ENContact.[EMAIL] o4, ENContact.[NOTES] o5");
				fromBuilder.Append(" FROM {Contact} ENContact");
				whereBuilder.Append(" WHERE ");
				if (qpinId != 0) {
					whereBuilder.Append("((ENContact.[ID] = @qpinId) AND (ENContact.[ID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinId", DbType.Int32, qpinId);
				} else {
					whereBuilder.Append("(ENContact.[ID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				try {
					RLContactRecordList outParamList = new RLContactRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						false, false, false, false, false, false});
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLContactRecordList _tmp = new RLContactRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query MainFlow.Contact_Edit.Preparation.GetContactById.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("368e471d-eca1-ff22-cefc-f1cc3fc86e5b", "MainFlow.Contact_Edit.Preparation.GetContactById", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
							}
							outParamList = (RLContactRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query MainFlow.Contact_Edit.Preparation.GetContactById.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("368e471d-eca1-ff22-cefc-f1cc3fc86e5b", "MainFlow.Contact_Edit.Preparation.GetContactById", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
							}
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						if (maxRecords > 0 && maxRecords <= 150) {
							RLContactRecordList _tmp = new RLContactRecordList();
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							try {
								DateTime startTime = DateTime.Now;
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query MainFlow.Contact_Edit.Preparation.GetContactById.List");
								int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
								);
								RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
								if (reqTracer != null) {
									reqTracer.RegisterQueryExecuted("368e471d-eca1-ff22-cefc-f1cc3fc86e5b", "MainFlow.Contact_Edit.Preparation.GetContactById", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
								}
								outParamList = (RLContactRecordList) _tmp.Duplicate();
								outParamList.AllOptimizedAttributes = opt;
								_tmp.CloseDataReader();
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else {
							try {
								DateTime startTime = DateTime.Now;
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query MainFlow.Contact_Edit.Preparation.GetContactById.List");
								int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
								);
								RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
								if (reqTracer != null) {
									reqTracer.RegisterQueryExecuted("368e471d-eca1-ff22-cefc-f1cc3fc86e5b", "MainFlow.Contact_Edit.Preparation.GetContactById", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
								}
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					}
				} catch (Exception e) {
					throw new DataBaseException("Error executing query.", e);
				}
			}
		}



		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}


		public LocalState PushStack() {
			return null;
		}

		public void doRefreshScreen(HeContext heContext) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				Preparation(heContext);

				Title = (((queryResGetContactById_outParamList.CurrentRec.ssENContact.ssId==BuiltInFunction.NullIdentifier())) ?("New Contact"):((("Edit \'" +queryResGetContactById_outParamList.CurrentRec.ssENContact.ssName) + "\'"))); Page.DataBind();
				if (RuntimePlatformUtils.GetRequestTracer() != null) {
					RuntimePlatformUtils.GetRequestTracer().RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.AppInfo, heContext.Session, heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Contact_Edit", (string) heContext.Session["MSISDN"], "WEB", "Screen", RuntimeEnvironment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}

		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				// Perform the partial databind
				Page.DataBind();
				RequestTracer perfTracer = RuntimePlatformUtils.GetRequestTracer(); if (perfTracer != null) {
					perfTracer.RegisterSessionSize(); if (heContext.Session != null) {
						RuntimePlatformUtils.GetRequestTracer().RegisterUserId(heContext.Session.UserId); 
					}
				}
				if (!heContext.AppInfo.SelectiveLoggingEnabled || heContext.AppInfo.Properties.AllowLogging) {
					ScreenLog.StaticWrite(heContext.AppInfo, heContext.Session, heContext.StartInstant, (int) ((TimeSpan) (DateTime.Now-heContext.StartInstant)).TotalMilliseconds, "Contact_Edit", (string) heContext.Session["MSISDN"], "WEB", "Ajax", RuntimeEnvironment.MachineName, RuntimePlatformUtils.GetViewstateSize(), RuntimePlatformUtils.GetRetrievedSessionSize(), RuntimePlatformUtils.GetRetrievedSessionRequests());
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			StoreWebScreenStackViewState();

		}



		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		public override void StoreViewState() {
			base.StoreViewState();

			#region store queryResGetContactById_outParamList.

			int tmpcurrentrownumberqueryResGetContactById_outParamList = queryResGetContactById_outParamList.CurrentRowNumber;
			bool tmpeofqueryResGetContactById_outParamList = queryResGetContactById_outParamList.Eof;
			ArrayList storequeryResGetContactById_outParamList = new ArrayList();

			// Write the needed fields of queryResGetContactById_outParamList to the storequeryResGetContactById_outParamList
			if (!queryResGetContactById_outParamList.Empty) {
				try {
					queryResGetContactById_outParamList.StartIteration();

					while (!queryResGetContactById_outParamList.Eof) {
						if (queryResGetContactById_outParamList.HasHiddenRow && queryResGetContactById_outParamList.CurrentRowNumber == queryResGetContactById_outParamList.Length - 1) {
							break;
						}
						ArrayList tmpFieldsqueryResGetContactById_outParamList = new ArrayList();
						tmpFieldsqueryResGetContactById_outParamList.Add(queryResGetContactById_outParamList.CurrentRec.ssENContact.ssId == 0?(object) null: queryResGetContactById_outParamList.CurrentRec.ssENContact.ssId);
						tmpFieldsqueryResGetContactById_outParamList.Add(queryResGetContactById_outParamList.CurrentRec.ssENContact.ssName == "" ?(object) null: queryResGetContactById_outParamList.CurrentRec.ssENContact.ssName);
						tmpFieldsqueryResGetContactById_outParamList.Add(queryResGetContactById_outParamList.CurrentRec.ssENContact.ssJobTitle == "" ?(object) null: queryResGetContactById_outParamList.CurrentRec.ssENContact.ssJobTitle);
						tmpFieldsqueryResGetContactById_outParamList.Add(queryResGetContactById_outParamList.CurrentRec.ssENContact.ssPhone == "" ?(object) null: queryResGetContactById_outParamList.CurrentRec.ssENContact.ssPhone);
						tmpFieldsqueryResGetContactById_outParamList.Add(queryResGetContactById_outParamList.CurrentRec.ssENContact.ssEmail == "" ?(object) null: queryResGetContactById_outParamList.CurrentRec.ssENContact.ssEmail);
						tmpFieldsqueryResGetContactById_outParamList.Add(queryResGetContactById_outParamList.CurrentRec.ssENContact.ssNotes == "" ?(object) null: queryResGetContactById_outParamList.CurrentRec.ssENContact.ssNotes);
						tmpFieldsqueryResGetContactById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeAnd(queryResGetContactById_outParamList.CurrentRec.ssENContact.ChangedAttributes, new BitArray(new bool[] {
							true, true, true, true, true, true
						}
						))));
						tmpFieldsqueryResGetContactById_outParamList.Add(BitArrayUtils.EncodeBitArray(BitArrayUtils.SafeOr(queryResGetContactById_outParamList.CurrentRec.ssENContact.OptimizedAttributes, new BitArray(new bool[] {
							false, false, false, false, false, false}))));
						storequeryResGetContactById_outParamList.Add(tmpFieldsqueryResGetContactById_outParamList);
						queryResGetContactById_outParamList.Advance();
					}
				} finally {
					queryResGetContactById_outParamList.EndIteration();
				}
			}

			ViewStateAttributes.SetInViewState("queryResGetContactById_outParamList", storequeryResGetContactById_outParamList, null);

			#endregion


			#region store queryResGetContactById_outParamList runtime properties state.

			ViewStateAttributes.SetInViewState("queryResGetContactById_outParamList_currentrownumber", tmpcurrentrownumberqueryResGetContactById_outParamList, 0);
			ViewStateAttributes.SetInViewState("queryResGetContactById_outParamList_eof", tmpeofqueryResGetContactById_outParamList, false);
			queryResGetContactById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetContactById_outParamList, tmpeofqueryResGetContactById_outParamList);

			#endregion

			ViewStateAttributes.SetInViewState("wtContactEdit_record_ssENContact_ssId", ssContactEditRecord.ssENContact.ssId, 0);
			ViewStateAttributes.SetInViewState("wtContactEdit_record_ssENContact_ssName", ssContactEditRecord.ssENContact.ssName, "");
			ViewStateAttributes.SetInViewState("wtContactEdit_record_ssENContact_ssJobTitle", ssContactEditRecord.ssENContact.ssJobTitle, "");
			ViewStateAttributes.SetInViewState("wtContactEdit_record_ssENContact_ssPhone", ssContactEditRecord.ssENContact.ssPhone, "");
			ViewStateAttributes.SetInViewState("wtContactEdit_record_ssENContact_ssEmail", ssContactEditRecord.ssENContact.ssEmail, "");
			ViewStateAttributes.SetInViewState("wtContactEdit_record_ssENContact_ssNotes", ssContactEditRecord.ssENContact.ssNotes, "");
			ViewStateAttributes.SetInViewState("wtContactEdit_record_ssENContact_ChangedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeAnd(ssContactEditRecord.ssENContact.ChangedAttributes, new BitArray(new bool[] {
				true, true, true, true, true, true
			}
			)))), null);
			ViewStateAttributes.SetInViewState("wtContactEdit_record_ssENContact_OptimizedAttributes", BitArrayUtils.EncodeBitArray((BitArray) (BitArrayUtils.SafeOr(ssContactEditRecord.ssENContact.OptimizedAttributes, new BitArray(new bool[] {
				false, false, false, false, false, false})))), null);
			ViewStateAttributes.SetInViewState("wtContact_Name_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtContact_Name")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtContact_JobTitle_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtContact_JobTitle")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtContact_Phone_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtContact_Phone")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtContact_Email_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtContact_Email")).Mandatory, false);
			ViewStateAttributes.SetInViewState("wtContact_Notes_Mandatory", ((IWidgetRuntimeProperties) this.FindControl("wtContact_Notes")).Mandatory, false);
			RemoveStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			try {

				#region fetch queryResGetContactById_outParamList.

				// Read the needed fields of queryResGetContactById_outParamList from storequeryResGetContactById_outParamList
				queryResGetContactById_outParamList = new RLContactRecordList();
				ArrayList storequeryResGetContactById_outParamList;
				storequeryResGetContactById_outParamList = (ArrayList) ViewStateAttributes.GetFromViewState("queryResGetContactById_outParamList", null);
				if (storequeryResGetContactById_outParamList == null) {
					return;
				} else {

					foreach(ArrayList tmpFieldsqueryResGetContactById_outParamList in storequeryResGetContactById_outParamList) {
						if (tmpFieldsqueryResGetContactById_outParamList != null) {
							// Aux current record variable
							RCContactRecord tmpAuxCurrentRecordqueryResGetContactById_outParamList = new RCContactRecord(null);
							tmpAuxCurrentRecordqueryResGetContactById_outParamList.ssENContact.ssId = (int) (tmpFieldsqueryResGetContactById_outParamList[0] == null ? 0: tmpFieldsqueryResGetContactById_outParamList[0]);

							tmpAuxCurrentRecordqueryResGetContactById_outParamList.ssENContact.ssName = (string) (tmpFieldsqueryResGetContactById_outParamList[1] == null ? "": tmpFieldsqueryResGetContactById_outParamList[1]);

							tmpAuxCurrentRecordqueryResGetContactById_outParamList.ssENContact.ssJobTitle = (string) (tmpFieldsqueryResGetContactById_outParamList[2] == null ? "": tmpFieldsqueryResGetContactById_outParamList[2]);

							tmpAuxCurrentRecordqueryResGetContactById_outParamList.ssENContact.ssPhone = (string) (tmpFieldsqueryResGetContactById_outParamList[3] == null ? "": tmpFieldsqueryResGetContactById_outParamList[3]);

							tmpAuxCurrentRecordqueryResGetContactById_outParamList.ssENContact.ssEmail = (string) (tmpFieldsqueryResGetContactById_outParamList[4] == null ? "": tmpFieldsqueryResGetContactById_outParamList[4]);

							tmpAuxCurrentRecordqueryResGetContactById_outParamList.ssENContact.ssNotes = (string) (tmpFieldsqueryResGetContactById_outParamList[5] == null ? "": tmpFieldsqueryResGetContactById_outParamList[5]);

							tmpAuxCurrentRecordqueryResGetContactById_outParamList.ssENContact.ChangedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetContactById_outParamList[6]);

							tmpAuxCurrentRecordqueryResGetContactById_outParamList.ssENContact.OptimizedAttributes = BitArrayUtils.DecodeBitArray(tmpFieldsqueryResGetContactById_outParamList[7]);

							queryResGetContactById_outParamList.Append(tmpAuxCurrentRecordqueryResGetContactById_outParamList);
						}
					}
				}
				queryResGetContactById_outParamList.CurrentRowNumber = -1;
				#endregion


				#region fetch queryResGetContactById_outParamList runtime properties state.

				int tmpcurrentrownumberqueryResGetContactById_outParamList;
				tmpcurrentrownumberqueryResGetContactById_outParamList = (int) ViewStateAttributes.GetFromViewState("queryResGetContactById_outParamList_currentrownumber", 0);
				bool tmpeofqueryResGetContactById_outParamList;
				tmpeofqueryResGetContactById_outParamList = (bool) ViewStateAttributes.GetFromViewState("queryResGetContactById_outParamList_eof", false);
				queryResGetContactById_outParamList.RestoreRecordListState(tmpcurrentrownumberqueryResGetContactById_outParamList, tmpeofqueryResGetContactById_outParamList);

				#endregion

				ssContactEditRecord.ssENContact.ssId = (int) ViewStateAttributes.GetFromViewState("wtContactEdit_record_ssENContact_ssId", 0);
				ssContactEditRecord.ssENContact.ssName = (string) ViewStateAttributes.GetFromViewState("wtContactEdit_record_ssENContact_ssName", "");
				ssContactEditRecord.ssENContact.ssJobTitle = (string) ViewStateAttributes.GetFromViewState("wtContactEdit_record_ssENContact_ssJobTitle", "");
				ssContactEditRecord.ssENContact.ssPhone = (string) ViewStateAttributes.GetFromViewState("wtContactEdit_record_ssENContact_ssPhone", "");
				ssContactEditRecord.ssENContact.ssEmail = (string) ViewStateAttributes.GetFromViewState("wtContactEdit_record_ssENContact_ssEmail", "");
				ssContactEditRecord.ssENContact.ssNotes = (string) ViewStateAttributes.GetFromViewState("wtContactEdit_record_ssENContact_ssNotes", "");
				ssContactEditRecord.ssENContact.ChangedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtContactEdit_record_ssENContact_ChangedAttributes", null));
				ssContactEditRecord.ssENContact.OptimizedAttributes = BitArrayUtils.DecodeBitArray(ViewStateAttributes.GetFromViewState("wtContactEdit_record_ssENContact_OptimizedAttributes", null));
				((IWidgetRuntimeProperties) this.FindControl("wtContact_Name")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtContact_Name_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtContact_JobTitle")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtContact_JobTitle_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtContact_Phone")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtContact_Phone_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtContact_Email")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtContact_Email_Mandatory", false);
				((IWidgetRuntimeProperties) this.FindControl("wtContact_Notes")).Mandatory = (bool) ViewStateAttributes.GetFromViewState("wtContact_Notes_Mandatory", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}


		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			ValidationUtils.ValidateInput(this, "wtContact_Name", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtContact_JobTitle", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtContact_Phone", parentEditRecord, ValidationUtils.validateTrue, validate);
			ValidationUtils.ValidateInput(this, "wtContact_Email", parentEditRecord, OutSystems.HubEdition.RuntimePlatform.BuiltInFunction.EmailAddressValidate, validate);
			ValidationUtils.ValidateInput(this, "wtContact_Notes", parentEditRecord, ValidationUtils.validateTrue, validate);
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}


		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}

		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			Page_Load(null, null); this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}


		public override void DataBind() {
			base.DataBind();
			StoreViewState();
			OutSystems.HubEdition.WebWidgets.Utils.addValidationScriptsToPage(this);
		}



	}

}
