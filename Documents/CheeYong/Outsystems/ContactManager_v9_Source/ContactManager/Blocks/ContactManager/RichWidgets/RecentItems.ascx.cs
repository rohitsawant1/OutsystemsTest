/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;


namespace ssContactManager.Flows.FlowRichWidgets {
	public abstract class WBlkRecentItems: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent, INotifyTriggers, INotifySender {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Variable <code>varLcMaxLabelLength</code> that represents the Service Studio local variable
		///  <code>MaxLabelLength</code> <p>Description: </p>
		/// </summary>
		int varLcMaxLabelLength = 50;

		/// <summary>
		/// Variable <code>varLcMaxTagLength</code> that represents the Service Studio local variable
		///  <code>MaxTagLength</code> <p>Description: </p>
		/// </summary>
		int varLcMaxTagLength = 20;

		/// <summary>
		/// Variable "True" if the Widget wt_If20
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If20T;

		/// <summary>
		/// Variable "True" if the Widget wt_If20
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If20F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container3;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container21;
		private RLRecentItemRecordList _ssRecentItemsListList = new RLRecentItemRecordList();
		public RLRecentItemRecordList ssRecentItemsListList {
			get {
				return _ssRecentItemsListList; 
			}
			set {
				_ssRecentItemsListList = value;
				wtRecentItemsList.DataSource = value;
				ssRecentItemsListListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtRecentItemsList;
		public ArrayList wtRecentItemsList_storage = new ArrayList();
		protected bool ssRecentItemsListList_notUsedYet = true;
		protected bool ssRecentItemsListListDoDataBind;
		protected bool ssRecentItemsListListDataBound;
		/// <summary>
		/// Variable "True" if the Widget wt_If8
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If8T;

		/// <summary>
		/// Variable "True" if the Widget wt_If8
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If8F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container12;
		/// <summary>
		/// Variable (wt_Link13) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link13;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container5;
		/// <summary>
		/// Variable (wt_Link4) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link4;
		/// <summary>
		/// Variable "True" if the Widget wt_If16
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If16T;

		/// <summary>
		/// Variable "True" if the Widget wt_If16
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If16F;
		private List<object> explicitChangedVariables = new List<object>();
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		public event EventHandler NotifyTriggered;
		private BlocksJavascript.JavascriptNode _javascriptNode;
		RLRecentItemRecordList queryResGetRecentItemsByUserId_outParamList = new RLRecentItemRecordList();
		long queryResGetRecentItemsByUserId_outParamCount = 0L;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; perfTracer.RegisterAction("e346bb4a-98ba-455e-846c-210af262aa73.#Preparation", "RecentItems.Preparation");
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("SrtG47qYXkWEbCEK8mKqcw.#Preparation", "Preparation", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				// Query datasetGetRecentItemsByUserId
				int datasetGetRecentItemsByUserId_maxRecords = Math.Max(wtRecentItemsList.StartIndex + wtRecentItemsList.LineCount + 1, 0);
				queryResGetRecentItemsByUserId_outParamList = FuncssPreparation.datasetGetRecentItemsByUserId(heContext, datasetGetRecentItemsByUserId_maxRecords, IterationMultiplicity.Single, out queryResGetRecentItemsByUserId_outParamCount, BuiltInFunction.GetUserId()
				, (Global.App.OsContext.Session.TenantId)
				);

			} catch (System.Threading.ThreadAbortException) {
				throw;
			}
		}
		static WBlkRecentItems() {
		}

		public void OnNotifyCalled(string message) {
			BindDelegatesIfNeeded();
			if (NotifyTriggered != null) {
				NotifyTriggered(this, new MsgEventArgs(message));
			}
		}

		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private T HandleCurrentEspaceKey<T>(Func<T> action) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return action();
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		private void InitializeComponent() {
			wtRecentItemsList.StartIndexExpression = () => 0;
			wtRecentItemsList.LineCountExpression = () => 100;
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this, out _javascriptNode);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssRecentItemsListListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short settedTabIndex = 0;
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, Convert.ToInt16(htTabIndexGroupsTI[groupid]), out settedTabIndex);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, tabindex, out settedTabIndex);
							// Increase tabindex if it was not overiden
							if (tabindex == settedTabIndex) {
								tabindex++;
							}
						}
					}
					tabindex = Math.Max(tabindex, ++settedTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		public override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcMaxLabelLength", varLcMaxLabelLength, 0);
			ViewStateAttributes.SetInViewState("varLcMaxTagLength", varLcMaxTagLength, 0);
			if (IsAjaxRequest) {
				recListRecentItemsList_Rebuild((ssRecentItemsListListDataBound ? wtRecentItemsList.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtRecentItemsList.LineCount);
			}
			ViewStateAttributes.EnsureNotEmpty();
			RemoveStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				varLcMaxLabelLength = (int) ViewStateAttributes.GetFromViewState("varLcMaxLabelLength", 0);
				varLcMaxTagLength = (int) ViewStateAttributes.GetFromViewState("varLcMaxTagLength", 0);
				recListRecentItemsList_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "ContactManager.KSrtG47qYXkWEbCEK8mKqcw";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/ContactManager/RichWidgets/RecentItems.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\ContactManager\\RichWidgets\\RecentItems.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\ContactManager\\RichWidgets\\RecentItems.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("SrtG47qYXkWEbCEK8mKqcw"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		bool if_wt_If20_hasRun=false;
		bool if_wt_If20_evalResult;
		public bool if_wt_If20() {
			if (if_wt_If20_hasRun) {
				if_wt_If20_hasRun = false;
				return if_wt_If20_evalResult;
			}
			if_wt_If20_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If20_evalResult = (!queryResGetRecentItemsByUserId_outParamList.Empty);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If20_evalResult;
		}

		public void cnt_Container3_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container3_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container3_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container3_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container3)
		/// </summary>
		/// <returns>The Visible State of wt_Container3</returns>
		public bool cnt_Container3_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		public void cnt_Container21_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container21_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container21_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container21_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container21)
		/// </summary>
		/// <returns>The Visible State of wt_Container21</returns>
		public bool cnt_Container21_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		public void recListRecentItemsList_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				// widget wtRecentItemsList
				ssRecentItemsListList = queryResGetRecentItemsByUserId_outParamList;
				ssRecentItemsListListDoDataBind = false;
				ssRecentItemsListListDataBound = true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public void recListRecentItemsList_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssRecentItemsListList.Length > 0) {
					ssRecentItemsListList.CurrentRec = ssRecentItemsListList[ssRecentItemsListList.CurrentRowNumber];
				}
				if (ssRecentItemsListList.Length > e.SelectedIndex) {
					ssRecentItemsListList.CurrentRec = ssRecentItemsListList[e.SelectedIndex];
					ssRecentItemsListList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)});
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListRecentItemsList_Store(object dataItem, int index) {
			return "";
		}
		public void recListRecentItemsList_Restore() {
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListRecentItemsList_Clear(object sender, EventArgs e) {
			wtRecentItemsList_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListRecentItemsList_Rebuild(int startIndex, int lineCount) {
			if (ssRecentItemsListList.Length != -1) {
				wtRecentItemsList_storage.Clear();
				for (int i=startIndex; i<ssRecentItemsListList.Data.Count && i<startIndex+lineCount; i++) {
					recListRecentItemsList_Store(ssRecentItemsListList.Data[i], wtRecentItemsList_storage.Count);
				}
			}
		}
		public void recListRecentItemsList_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtRecentItemsList widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLRecentItemRecordList getWtRecentItemsListList() {
			if (ssRecentItemsListListDoDataBind) {
				recListRecentItemsList_onDataBinding(this.FindControl("wtRecentItemsList"), null);
			}

			return ssRecentItemsListList;
		}
		bool if_wt_If8_hasRun=false;
		bool if_wt_If8_evalResult;
		public bool if_wt_If8() {
			if (if_wt_If8_hasRun) {
				if_wt_If8_hasRun = false;
				return if_wt_If8_evalResult;
			}
			if_wt_If8_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If8_evalResult = BuiltInFunction.CurrentThemeIsMobile();
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If8_evalResult;
		}

		public void cnt_Container12_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container12_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container12_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container12_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container12)
		/// </summary>
		/// <returns>The Visible State of wt_Container12</returns>
		public bool cnt_Container12_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link13)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link13)</returns>
		public string lnk_Link13_NavigateUrl() {
			String varLcinParamURL = "";
			varLcinParamURL = BuiltInFunction.AddPersonalAreaToURLPath(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssURL);
			string sURL = varLcinParamURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link13)
		/// </summary>
		/// <returns>title of the Link (wt_Link13)</returns>
		public string
		lnk_Link13_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link13)
		/// </summary>
		/// <returns>The Visible State of wt_Link13</returns>
		public bool lnk_Link13_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link13)
		/// </summary>
		/// <returns>The Enabled State of wt_Link13</returns>
		public bool lnk_Link13_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public void expression_InlineExpression9_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				expression_InlineExpression9_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string expression_InlineExpression9_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IAttributeAccessor) sender).SetAttribute("title", ((((((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag== "") && (BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel) >varLcMaxLabelLength)) || ((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag!= "") && (BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel) >(varLcMaxLabelLength-varLcMaxTagLength)))) || (BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag) >varLcMaxTagLength))) ?((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel+(((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag== "")) ?(""):((" - " +getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag))))):("")).ToString());
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = ricaaGKKukC4jvqEtK4SUg) Expression: If
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression9() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return (((BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel) >(((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag== "")) ?(varLcMaxLabelLength):((varLcMaxLabelLength-varLcMaxTagLength))))) ?((BuiltInFunction.SubstrSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel, 0, (((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag== "")) ?((varLcMaxLabelLength-3)):(((varLcMaxLabelLength-varLcMaxTagLength) -3)))) + "...")):(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel));
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 887oXFhIeEKG7qjilCncKQ) Expression: If
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression7() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return (((BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag) >20)) ?((BuiltInFunction.SubstrSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag, 0, 17) + "...")):(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag));
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public void cnt_Container5_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container5_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container5_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container5_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container5)
		/// </summary>
		/// <returns>The Visible State of wt_Container5</returns>
		public bool cnt_Container5_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link4)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link4)</returns>
		public string lnk_Link4_NavigateUrl() {
			String varLcinParamURL = "";
			varLcinParamURL = BuiltInFunction.AddPersonalAreaToURLPath(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssURL);
			string sURL = varLcinParamURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link4)
		/// </summary>
		/// <returns>title of the Link (wt_Link4)</returns>
		public string
		lnk_Link4_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link4)
		/// </summary>
		/// <returns>The Visible State of wt_Link4</returns>
		public bool lnk_Link4_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link4)
		/// </summary>
		/// <returns>The Enabled State of wt_Link4</returns>
		public bool lnk_Link4_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public void expression_InlineExpression19_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				expression_InlineExpression19_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string expression_InlineExpression19_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IAttributeAccessor) sender).SetAttribute("title", ((((((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag== "") && (BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel) >varLcMaxLabelLength)) || ((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag!= "") && (BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel) >(varLcMaxLabelLength-varLcMaxTagLength)))) || (BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag) >varLcMaxTagLength))) ?((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel+(((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag== "")) ?(""):((" - " +getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag))))):("")).ToString());
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = pPS61V3IGUSRGqV2rxbvqw) Expression: If
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression19() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return (((BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel) >(((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag== "")) ?(varLcMaxLabelLength):((varLcMaxLabelLength-varLcMaxTagLength))))) ?((BuiltInFunction.SubstrSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel, 0, (((getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag== "")) ?((varLcMaxLabelLength-3)):(((varLcMaxLabelLength-varLcMaxTagLength) -3)))) + "...")):(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssLabel));
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		bool if_wt_If16_hasRun=false;
		bool if_wt_If16_evalResult;
		public bool if_wt_If16() {
			if (if_wt_If16_hasRun) {
				if_wt_If16_hasRun = false;
				return if_wt_If16_evalResult;
			}
			if_wt_If16_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If16_evalResult = (getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag!= "");
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If16_evalResult;
		}

		/// <summary>
		/// Function to dump expression (Key = IfKkfuMjjUqdcx7si8Doww) Expression: If
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression10() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return (((BuiltInFunction.LengthSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag) >20)) ?((BuiltInFunction.SubstrSC(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag, 0, 17) + "...")):(getWtRecentItemsListList().CurrentRec.ssENRecentItem.ssTag));
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public static class FuncssPreparation {

			/// <summary>
			/// Query Function "GetRecentItemsByUserId" of Action "Preparation"
			/// </summary>
			public static RLRecentItemRecordList datasetGetRecentItemsByUserId(HeContext heContext, int maxRecords, IterationMultiplicity multiplicity, out long outParamCount, int qpinUserId, int qpinTenantId) {
				// Query Iterations: Single {RecentItemsList}
				// Uses binary data: False
				if (multiplicity == IterationMultiplicity.Never) {
					maxRecords = 1;
				}
				outParamCount = -1;
				bool useMainTransaction = (multiplicity != IterationMultiplicity.Single || (maxRecords > 0 && maxRecords <= 150));
				Transaction trans = useMainTransaction? DatabaseAccess.ForCurrentDatabase.GetRequestTransaction(): DatabaseAccess.ForCurrentDatabase.GetReadOnlyTransaction();
				Command sqlCmd = trans.CreateCommand();
				string sql = "";
				StringBuilder selectBuilder = new StringBuilder();
				StringBuilder fromBuilder = new StringBuilder();
				StringBuilder whereBuilder = new StringBuilder();
				StringBuilder orderByBuilder = new StringBuilder();
				StringBuilder groupByBuilder = new StringBuilder();
				StringBuilder havingBuilder = new StringBuilder();
				selectBuilder.Append("SELECT ");
				if (maxRecords > 0) {
					selectBuilder.Append("TOP (");
					selectBuilder.Append(maxRecords);
					selectBuilder.Append(") ");
				}
				selectBuilder.Append("NULL o0, NULL o1, NULL o2, ENRecentItem.[LABEL] o3, ENRecentItem.[TAG] o4, ENRecentItem.[URL] o5, NULL o6");
				fromBuilder.Append(" FROM {RecentItem} ENRecentItem");
				whereBuilder.Append(" WHERE ");
				if (qpinUserId != 0) {
					whereBuilder.Append("((ENRecentItem.[USERID] = @qpinUserId) AND (ENRecentItem.[USERID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinUserId", DbType.Int32, qpinUserId);
				} else {
					whereBuilder.Append("(ENRecentItem.[USERID] IS NULL)");
				}
				whereBuilder.Append(" AND ");
				if (qpinTenantId != 0) {
					whereBuilder.Append("((ENRecentItem.[TENANTID] = @qpinTenantId) AND (ENRecentItem.[TENANTID] IS NOT NULL))");
					sqlCmd.CreateParameterWithoutReplacements("@qpinTenantId", DbType.Int32, qpinTenantId);
				} else {
					whereBuilder.Append("(ENRecentItem.[TENANTID] IS NULL)");
				}

				sql = selectBuilder.ToString() + fromBuilder.ToString() + whereBuilder.ToString() + groupByBuilder.ToString() + havingBuilder.ToString() + orderByBuilder.ToString();
				string advSql = sql;
				sql = AppUtils.Instance.ReplaceEntityReferences(heContext, advSql);
				sqlCmd.CommandText = sql;
				try {
					RLRecentItemRecordList outParamList = new RLRecentItemRecordList();
					outParamList.Transaction = trans;
					BitArray[] opt = new BitArray[1];
					opt[0] = new BitArray(new bool[] {
						true, true, true, false, false, false, true});
					outParamList.AllOptimizedAttributes = opt;
					if (multiplicity == IterationMultiplicity.Multiple) {
						RLRecentItemRecordList _tmp = new RLRecentItemRecordList();
						_tmp.Transaction = trans;
						_tmp.AllOptimizedAttributes = opt;
						_tmp.MaxRecords = maxRecords;
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query RichWidgets.RecentItems.Preparation.GetRecentItemsByUserId.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("15bb81d8-0c8e-b2ad-18d7-83aec1b275b2", "RichWidgets.RecentItems.Preparation.GetRecentItemsByUserId", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
							}
							outParamList = (RLRecentItemRecordList) _tmp.Duplicate();
							_tmp.CloseDataReader();
							return outParamList;
						} finally {
							_tmp.CloseDataReader();
						}
					} else if (multiplicity == IterationMultiplicity.Never) {
						try {
							DateTime startTime = DateTime.Now;
							DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query RichWidgets.RecentItems.Preparation.GetRecentItemsByUserId.List");
							int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
							);
							RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
							if (reqTracer != null) {
								reqTracer.RegisterQueryExecuted("15bb81d8-0c8e-b2ad-18d7-83aec1b275b2", "RichWidgets.RecentItems.Preparation.GetRecentItemsByUserId", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
							}
							outParamList.MaxRecords = maxRecords;
							return outParamList;
						} finally {
							outParamList.CloseDataReader();
						}
					} else {
						if (maxRecords > 0 && maxRecords <= 150) {
							RLRecentItemRecordList _tmp = new RLRecentItemRecordList();
							_tmp.Transaction = trans;
							_tmp.AllOptimizedAttributes = opt;
							try {
								DateTime startTime = DateTime.Now;
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, _tmp, "Query RichWidgets.RecentItems.Preparation.GetRecentItemsByUserId.List");
								int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
								);
								RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
								if (reqTracer != null) {
									reqTracer.RegisterQueryExecuted("15bb81d8-0c8e-b2ad-18d7-83aec1b275b2", "RichWidgets.RecentItems.Preparation.GetRecentItemsByUserId", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
								}
								outParamList = (RLRecentItemRecordList) _tmp.Duplicate();
								outParamList.AllOptimizedAttributes = opt;
								_tmp.CloseDataReader();
								return outParamList;
							} finally {
								_tmp.CloseDataReader();
							}
						} else {
							try {
								DateTime startTime = DateTime.Now;
								DatabaseAccess.ForCurrentDatabase.ExecuteQuery(sqlCmd, outParamList, "Query RichWidgets.RecentItems.Preparation.GetRecentItemsByUserId.List");
								int queryExecutionTime = Convert.ToInt32(DateTime.Now.Subtract(startTime).TotalMilliseconds
								);
								RequestTracer reqTracer = RuntimePlatformUtils.GetRequestTracer();
								if (reqTracer != null) {
									reqTracer.RegisterQueryExecuted("15bb81d8-0c8e-b2ad-18d7-83aec1b275b2", "RichWidgets.RecentItems.Preparation.GetRecentItemsByUserId", "794c445f-f27d-4f61-b47a-0da71440df68", "ContactManager", queryExecutionTime, DateTime.Now);
								}
								outParamList.MaxRecords = maxRecords;
								return outParamList;
							} finally {
								if (maxRecords == 1) {
									outParamList.CloseDataReader();
								}
							}
						}
					}
				} catch (Exception e) {
					throw new DataBaseException("Error executing query.", e);
				}
			}
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "ContactManager.KSrtG47qYXkWEbCEK8mKqcw";
			}
		}
	}
}
