/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;


namespace ssContactManager.Flows.FlowRichWidgets {
	public abstract class WBlkList_Navigation: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent, INotifyTriggers, INotifySender {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Screen Input Parameter inParamListWidgetId. Description: The 'Id' runtime property of the
		///  TableRecords or ListRecords widget.
		/// </summary>
		public string inParamListWidgetId = "";
		/// <summary>
		/// Screen Input Parameter inParamLineCount. Description: The 'LineCount' runtime property of the
		///  TableRecords or ListRecords widget.
		/// </summary>
		public int inParamLineCount = 0;
		/// <summary>
		/// Screen Input Parameter inParamTotalRowCount. Description: The 'Length' runtime property of the
		///  TableRecords or ListRecords widget.
		/// </summary>
		public int inParamTotalRowCount = 0;
		/// <summary>
		/// Screen Input Parameter inParamMaxPageNumbers. Description: The maximum number of displayed page
		///  numbers (the default is 5). When set to 0 (zero) no page numbers are displayed, only the Next an
		/// d Previous links.
		/// </summary>
		public int inParamMaxPageNumbers = 5;
		/// <summary>
		/// Variable <code>varLcStartIndex</code> that represents the Service Studio local variable
		///  <code>StartIndex</code> <p>Description: </p>
		/// </summary>
		int varLcStartIndex = 0;

		/// <summary>
		/// Variable <code>varLcPageNumbers</code> that represents the Service Studio local variable
		///  <code>PageNumbers</code> <p>Description: </p>
		/// </summary>
		RLListNavigation_PageNumberRecordList varLcPageNumbers = new RLListNavigation_PageNumberRecordList();

		protected OutSystems.HubEdition.WebWidgets.Container wt_Container4;
		/// <summary>
		/// Variable "True" if the Widget wt_If19
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If19T;

		/// <summary>
		/// Variable "True" if the Widget wt_If19
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If19F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container31;
		/// <summary>
		/// Variable (wt_Link2) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link2;
		/// <summary>
		/// Variable (wt_Link34) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link34;
		/// <summary>
		/// Variable (wt_Link42) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link42;
		/// <summary>
		/// Variable (wt_Link25) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link25;
		/// <summary>
		/// Variable (wt_Link13) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link13;
		/// <summary>
		/// Variable "True" if the Widget wt_If15
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If15T;

		/// <summary>
		/// Variable "True" if the Widget wt_If15
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If15F;
		/// <summary>
		/// Variable "True" if the Widget wt_If47
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If47T;

		/// <summary>
		/// Variable "True" if the Widget wt_If47
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If47F;
		/// <summary>
		/// Variable (wt_Link8) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link8;
		/// <summary>
		/// Variable "True" if the Widget wt_If39
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If39T;

		/// <summary>
		/// Variable "True" if the Widget wt_If39
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If39F;
		private RLListNavigation_PageNumberRecordList _ssPageNavigatorList = new RLListNavigation_PageNumberRecordList();
		public RLListNavigation_PageNumberRecordList ssPageNavigatorList {
			get {
				return _ssPageNavigatorList; 
			}
			set {
				_ssPageNavigatorList = value;
				wtPageNavigator.DataSource = value;
				ssPageNavigatorListDataBound = false;
			}
		}
		protected OutSystems.HubEdition.WebWidgets.Iterator wtPageNavigator;
		public ArrayList wtPageNavigator_storage = new ArrayList();
		protected bool ssPageNavigatorList_notUsedYet = true;
		protected bool ssPageNavigatorListDoDataBind;
		protected bool ssPageNavigatorListDataBound;
		/// <summary>
		/// Variable "True" if the Widget wt_If11
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If11T;

		/// <summary>
		/// Variable "True" if the Widget wt_If11
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If11F;
		/// <summary>
		/// Variable "True" if the Widget wt_If17
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If17T;

		/// <summary>
		/// Variable "True" if the Widget wt_If17
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If17F;
		/// <summary>
		/// Variable (wtLink8) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wtLink8;
		/// <summary>
		/// Variable "True" if the Widget wt_If46
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If46T;

		/// <summary>
		/// Variable "True" if the Widget wt_If46
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If46F;
		/// <summary>
		/// Variable (wt_Link16) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.LinkButton wt_Link16;
		private List<object> explicitChangedVariables = new List<object>();
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		public event EventHandler NotifyTriggered;
		private BlocksJavascript.JavascriptNode _javascriptNode;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; perfTracer.RegisterAction("957c1072-cc9c-4aa5-b35b-ee814ed7bf6d.#Preparation", "List_Navigation.Preparation");
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("chB8lZzMpUqzW+6BTte_bQ.#Preparation", "Preparation", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				// Init
				// StartIndex = List_Navigation_GetStartIndex(ListWidgetId, Index <> -1, (-1))
				varLcStartIndex = Functions.ActionList_Navigation_GetStartIndex(heContext, inParamListWidgetId, (BuiltInFunction.IndexSC(((string) Global.App.OsContext.Session["ContactManager.ListNavigation_RememberStartIndices"]), ((Functions.rssextensionhttprequesthandler_ActionGetPageName(heContext) + ":") +inParamListWidgetId), 0, false, false) != (-1)), (-1));
				// PageNumbers = Private_List_Navigation_GetPageNumbers(StartIndex, LineCount, TotalRowCount, MaxPageNumbers)
				varLcPageNumbers = Functions.ActionPrivate_List_Navigation_GetPageNumbers(heContext, varLcStartIndex, inParamLineCount, inParamTotalRowCount, inParamMaxPageNumbers);
			} catch (System.Threading.ThreadAbortException) {
				throw;
			}
		}
		static WBlkList_Navigation() {
		}

		public void OnNotifyCalled(string message) {
			BindDelegatesIfNeeded();
			if (NotifyTriggered != null) {
				NotifyTriggered(this, new MsgEventArgs(message));
			}
		}

		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private T HandleCurrentEspaceKey<T>(Func<T> action) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return action();
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		private void InitializeComponent() {
			if (this.wt_Link2 != null) {
				this.wt_Link2.Click += new System.EventHandler(this.wt_Link2_Click);
			}
			if (this.wt_Link34 != null) {
				this.wt_Link34.Click += new System.EventHandler(this.wt_Link34_Click);
			}
			if (this.wt_Link42 != null) {
				this.wt_Link42.Click += new System.EventHandler(this.wt_Link42_Click);
			}
			if (this.wt_Link25 != null) {
				this.wt_Link25.Click += new System.EventHandler(this.wt_Link25_Click);
			}
			if (this.wt_Link13 != null) {
				this.wt_Link13.Click += new System.EventHandler(this.wt_Link13_Click);
			}
			if (this.wt_Link8 != null) {
				this.wt_Link8.Click += new System.EventHandler(this.wt_Link8_Click);
			}
			wtPageNavigator.StartIndexExpression = () => 0;
			wtPageNavigator.LineCountExpression = () => 100;
			if (this.wtLink8 != null) {
				this.wtLink8.Click += new System.EventHandler(this.wtLink8_Click);
			}
			if (this.wt_Link16 != null) {
				this.wt_Link16.Click += new System.EventHandler(this.wt_Link16_Click);
			}
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			if (!Visible) return;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this, out _javascriptNode);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
					ssPageNavigatorListDoDataBind = true;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short settedTabIndex = 0;
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, Convert.ToInt16(htTabIndexGroupsTI[groupid]), out settedTabIndex);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, tabindex, out settedTabIndex);
							// Increase tabindex if it was not overiden
							if (tabindex == settedTabIndex) {
								tabindex++;
							}
						}
					}
					tabindex = Math.Max(tabindex, ++settedTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		public override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("inParamListWidgetId", inParamListWidgetId, "");
			ViewStateAttributes.SetInViewState("inParamLineCount", inParamLineCount, 0);
			ViewStateAttributes.SetInViewState("varLcStartIndex", varLcStartIndex, 0);
			if (IsAjaxRequest) {
				recListPageNavigator_Rebuild((ssPageNavigatorListDataBound ? wtPageNavigator.StartIndexLastEvaluation.GetValueOrDefault(): 0), wtPageNavigator.LineCount);
			}
			ViewStateAttributes.SetInViewState("wtPageNavigator_list", wtPageNavigator_storage, null);
			ViewStateAttributes.EnsureNotEmpty();
			RemoveStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				inParamListWidgetId = (string) ViewStateAttributes.GetFromViewState("inParamListWidgetId", "");
				inParamLineCount = (int) ViewStateAttributes.GetFromViewState("inParamLineCount", 0);
				varLcStartIndex = (int) ViewStateAttributes.GetFromViewState("varLcStartIndex", 0);
				recListPageNavigator_Restore();
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "ContactManager.KchB8lZzMpUqzW_6BTte_bQ";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/ContactManager/RichWidgets/List_Navigation.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\ContactManager\\RichWidgets\\List_Navigation.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\ContactManager\\RichWidgets\\List_Navigation.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("chB8lZzMpUqzW+6BTte_bQ"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandNext</code> that represents the Service Studio screen action <code>Next</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandNext(HeContext heContext) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("34f6b95b-42bf-4506-aa03-33f34a16670b", "List_Navigation.Next"); 
			}
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("W7n2NL9CBkWqAzPzShZnCw", "Next", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				// Private_List_Navigation_SaveStartIndex
				Actions.ActionPrivate_List_Navigation_SaveStartIndex(heContext, inParamListWidgetId, Convert.ToString((varLcStartIndex+inParamLineCount)));

				// Deprecated_NotifyWidget
				ExtendedActions.Deprecated_NotifyWidget(heContext, RuntimeID, "");

				// Update Screen
				return true;

			} catch (System.Threading.ThreadAbortException) {
				return false;
			}
		}
		public class lcvPage: VarsBag {
			public string inParamNextPageStartIndex;
			public lcvPage(string inParamNextPageStartIndex) {
				this.inParamNextPageStartIndex = inParamNextPageStartIndex;
			}
		}
		/// <summary>
		/// Action <code>CommandPage</code> that represents the Service Studio screen action <code>Page</code>
		///  <p> Description: </p>
		/// </summary>
		private bool CommandPage(HeContext heContext, string inParamNextPageStartIndex) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("c4e94442-410f-4708-b3ab-febbc15b82e6", "List_Navigation.Page"); 
			}
			lcvPage localVars = new lcvPage(inParamNextPageStartIndex);
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("QkTpxA9BCEezq_67wVuC5g", "Page", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				// Private_List_Navigation_SaveStartIndex
				Actions.ActionPrivate_List_Navigation_SaveStartIndex(heContext, inParamListWidgetId, localVars.inParamNextPageStartIndex);

				// Deprecated_NotifyWidget
				ExtendedActions.Deprecated_NotifyWidget(heContext, RuntimeID, "");

				// Update Screen
				return true;

			} catch (System.Threading.ThreadAbortException) {
				return false;
			}
		}
		/// <summary>
		/// Action <code>CommandPrevious</code> that represents the Service Studio screen action
		///  <code>Previous</code> <p> Description: </p>
		/// </summary>
		private bool CommandPrevious(HeContext heContext) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("fdee7ee7-c50c-45bc-94fb-869f7bfb084d", "List_Navigation.Previous"); 
			}
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("537u_QzFvEWU+4afe_sITQ", "Previous", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				// Private_List_Navigation_SaveStartIndex
				Actions.ActionPrivate_List_Navigation_SaveStartIndex(heContext, inParamListWidgetId, Convert.ToString((varLcStartIndex-inParamLineCount)));

				// Deprecated_NotifyWidget
				ExtendedActions.Deprecated_NotifyWidget(heContext, RuntimeID, "");

				// Update Screen
				return true;

			} catch (System.Threading.ThreadAbortException) {
				return false;
			}
		}
		public void cnt_Container4_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container4_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container4_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container4_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container4)
		/// </summary>
		/// <returns>The Visible State of wt_Container4</returns>
		public bool cnt_Container4_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		bool if_wt_If19_hasRun=false;
		bool if_wt_If19_evalResult;
		public bool if_wt_If19() {
			if (if_wt_If19_hasRun) {
				if_wt_If19_hasRun = false;
				return if_wt_If19_evalResult;
			}
			if_wt_If19_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If19_evalResult = ("InWebBlockPreview" == "True");
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If19_evalResult;
		}

		public void cnt_Container31_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container31_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container31_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container31_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container31)
		/// </summary>
		/// <returns>The Visible State of wt_Container31</returns>
		public bool cnt_Container31_isVisible() {
			return true;
		}

		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link2_Click(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandPrevious(heContext)) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link2)
		/// </summary>
		/// <returns>title of the Link (wt_Link2)</returns>
		public string
		lnk_Link2_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link2)
		/// </summary>
		/// <returns>The Visible State of wt_Link2</returns>
		public bool lnk_Link2_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link2)
		/// </summary>
		/// <returns>The Enabled State of wt_Link2</returns>
		public bool lnk_Link2_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = YPlFuV_C40ua3dC13eM+2Q) Expression: ""
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression36() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link34_Click(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandPage(heContext, Convert.ToString(0))) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link34)
		/// </summary>
		/// <returns>title of the Link (wt_Link34)</returns>
		public string
		lnk_Link34_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link34)
		/// </summary>
		/// <returns>The Visible State of wt_Link34</returns>
		public bool lnk_Link34_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link34)
		/// </summary>
		/// <returns>The Enabled State of wt_Link34</returns>
		public bool lnk_Link34_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link42_Click(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandPage(heContext, Convert.ToString(0))) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link42)
		/// </summary>
		/// <returns>title of the Link (wt_Link42)</returns>
		public string
		lnk_Link42_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link42)
		/// </summary>
		/// <returns>The Visible State of wt_Link42</returns>
		public bool lnk_Link42_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link42)
		/// </summary>
		/// <returns>The Enabled State of wt_Link42</returns>
		public bool lnk_Link42_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link25_Click(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandPage(heContext, Convert.ToString(0))) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link25)
		/// </summary>
		/// <returns>title of the Link (wt_Link25)</returns>
		public string
		lnk_Link25_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link25)
		/// </summary>
		/// <returns>The Visible State of wt_Link25</returns>
		public bool lnk_Link25_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link25)
		/// </summary>
		/// <returns>The Enabled State of wt_Link25</returns>
		public bool lnk_Link25_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link13_Click(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandPage(heContext, Convert.ToString(0))) {
					doRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link13)
		/// </summary>
		/// <returns>title of the Link (wt_Link13)</returns>
		public string
		lnk_Link13_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link13)
		/// </summary>
		/// <returns>The Visible State of wt_Link13</returns>
		public bool lnk_Link13_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link13)
		/// </summary>
		/// <returns>The Enabled State of wt_Link13</returns>
		public bool lnk_Link13_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = wp2Qzu5Li0+f61dILvDvrg) Expression: ""
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression41() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = 7DTk6OBYAkGDf9sYFm45Tg) Expression: ""
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression45() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		bool if_wt_If15_hasRun=false;
		bool if_wt_If15_evalResult;
		public bool if_wt_If15() {
			if (if_wt_If15_hasRun) {
				if_wt_If15_hasRun = false;
				return if_wt_If15_evalResult;
			}
			if_wt_If15_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If15_evalResult = ((varLcStartIndex==0) && (inParamTotalRowCount<inParamLineCount));
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If15_evalResult;
		}

		bool if_wt_If47_hasRun=false;
		bool if_wt_If47_evalResult;
		public bool if_wt_If47() {
			if (if_wt_If47_hasRun) {
				if_wt_If47_hasRun = false;
				return if_wt_If47_evalResult;
			}
			if_wt_If47_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If47_evalResult = (varLcStartIndex>0);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If47_evalResult;
		}

		public void lnk_Link8_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link8_Click(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandPrevious(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link8)
		/// </summary>
		/// <returns>title of the Link (wt_Link8)</returns>
		public string
		lnk_Link8_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link8)
		/// </summary>
		/// <returns>The Visible State of wt_Link8</returns>
		public bool lnk_Link8_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link8)
		/// </summary>
		/// <returns>The Enabled State of wt_Link8</returns>
		public bool lnk_Link8_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = ynxvWv491EOnzkqAoFLGhg) Expression: "previous"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression21() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return "previous";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		bool if_wt_If39_hasRun=false;
		bool if_wt_If39_evalResult;
		public bool if_wt_If39() {
			if (if_wt_If39_hasRun) {
				if_wt_If39_hasRun = false;
				return if_wt_If39_evalResult;
			}
			if_wt_If39_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If39_evalResult = (!varLcPageNumbers.Empty);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If39_evalResult;
		}

		public void recListPageNavigator_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				// widget wtPageNavigator
				ssPageNavigatorList = varLcPageNumbers;
				ssPageNavigatorListDoDataBind = false;
				ssPageNavigatorListDataBound = true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public void recListPageNavigator_Select(object sender, IteratorCommandEventArgs e) {
			if (e.SelectedIndex != -1) {
				if (ssPageNavigatorList.Length > 0) {
					ssPageNavigatorList.CurrentRec = ssPageNavigatorList[ssPageNavigatorList.CurrentRowNumber];
				}
				if (ssPageNavigatorList.Length > e.SelectedIndex) {
					ssPageNavigatorList.CurrentRec = ssPageNavigatorList[e.SelectedIndex];
					ssPageNavigatorList.CurrentRowNumber = e.SelectedIndex;
				}
			}
			if (e is IteratorCommandAjaxEventArgs) {
				((IteratorCommandAjaxEventArgs) e).InvokeHandler();
			} else {
				var owner = Utils.GetOwnerOfControl((Control) e.CommandSource);
				owner.GetType().GetMethod(((WebControl) e.CommandSource).ID + "_Click").Invoke(owner, new Object[2] {
					e.CommandSource, new CommandEventArgs("", this)});
			}
		}
		/// <summary>
		/// Function to Prepare Widget information to be stored in view State
		/// </summary>
		/// <param name="dataItem"> Item to be stored in view state</param>
		/// <param name="index"> Record list index of the item to be stored</param>
		public string recListPageNavigator_Store(object dataItem, int index) {
			RCListNavigation_PageNumberRecord tmprec = (RCListNavigation_PageNumberRecord) dataItem;
			ArrayList tmpFields = new ArrayList();
			tmpFields.Add(tmprec.ssSTListNavigation_PageNumber.ssIndex == 0?(object) null: tmprec.ssSTListNavigation_PageNumber.ssIndex);
			if (index < wtPageNavigator_storage.Count) {
				wtPageNavigator_storage[index] = tmpFields;
			} else {
				wtPageNavigator_storage.Add(tmpFields);
			}
			return "";
		}
		public void recListPageNavigator_Restore() {

			#region fetch ssPageNavigatorList.

			// Read the needed fields of ssPageNavigatorList from storewtPageNavigator_list
			ssPageNavigatorList = new RLListNavigation_PageNumberRecordList();
			ArrayList storewtPageNavigator_list;
			storewtPageNavigator_list = (ArrayList) ViewStateAttributes.GetFromViewState("wtPageNavigator_list", null);
			if (storewtPageNavigator_list == null) {
				return;
			} else {

				foreach(ArrayList tmpFieldswtPageNavigator_list in storewtPageNavigator_list) {
					if (tmpFieldswtPageNavigator_list != null) {
						// Aux current record variable
						RCListNavigation_PageNumberRecord tmpAuxCurrentRecordwtPageNavigator_list = new RCListNavigation_PageNumberRecord(null);
						tmpAuxCurrentRecordwtPageNavigator_list.ssSTListNavigation_PageNumber.ssIndex = (int) (tmpFieldswtPageNavigator_list[0] == null ? 0: tmpFieldswtPageNavigator_list[0]);

						ssPageNavigatorList.Append(tmpAuxCurrentRecordwtPageNavigator_list);
					}
				}
			}
			ssPageNavigatorList.CurrentRowNumber = -1;
			#endregion


			#region fetch ssPageNavigatorList runtime properties state.


			if (storewtPageNavigator_list.Count > 0) {
				ssPageNavigatorList.RestoreRecordListState(storewtPageNavigator_list.Count - 1, false);
			} else {
				ssPageNavigatorList.CurrentRowNumber = 0;
			}

			#endregion

			wtPageNavigator_storage = storewtPageNavigator_list;
		}
		/// <summary>
		/// Function to clear current widget information to be stored in view state
		/// </summary>
		public void recListPageNavigator_Clear(object sender, EventArgs e) {
			wtPageNavigator_storage.Clear();
		}
		/// <summary>
		/// Function to rebuild storage widget information from a list in the viewstate
		/// </summary>
		public void recListPageNavigator_Rebuild(int startIndex, int lineCount) {
			if (ssPageNavigatorList.Length != -1) {
				wtPageNavigator_storage.Clear();
				for (int i=startIndex; i<ssPageNavigatorList.Data.Count && i<startIndex+lineCount; i++) {
					recListPageNavigator_Store(ssPageNavigatorList.Data[i], wtPageNavigator_storage.Count);
				}
			}
		}
		public void recListPageNavigator_ListRefreshDataBind(object sender, EventArgs e) {
		}
		/// <summary>
		/// Function that returns the list of the wtPageNavigator widget
		/// </summary>
		/// <returns>The list associated with the widget</returns>
		public RLListNavigation_PageNumberRecordList getWtPageNavigatorList() {
			if (ssPageNavigatorListDoDataBind) {
				recListPageNavigator_onDataBinding(this.FindControl("wtPageNavigator"), null);
			}

			return ssPageNavigatorList;
		}
		bool if_wt_If11_hasRun=false;
		bool if_wt_If11_evalResult;
		public bool if_wt_If11() {
			if (if_wt_If11_hasRun) {
				if_wt_If11_hasRun = false;
				return if_wt_If11_evalResult;
			}
			if_wt_If11_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If11_evalResult = (getWtPageNavigatorList().CurrentRec.ssSTListNavigation_PageNumber.ssNumber!= "...");
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If11_evalResult;
		}

		bool if_wt_If17_hasRun=false;
		bool if_wt_If17_evalResult;
		public bool if_wt_If17() {
			if (if_wt_If17_hasRun) {
				if_wt_If17_hasRun = false;
				return if_wt_If17_evalResult;
			}
			if_wt_If17_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If17_evalResult = getWtPageNavigatorList().CurrentRec.ssSTListNavigation_PageNumber.ssIsCurrent;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If17_evalResult;
		}

		/// <summary>
		/// Function to dump expression (Key = XQBRzk0QmES3seHTLcgsnw) Expression:
		///  PageNavigator.List.Current.ListNavigation_PageNumber.Number
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression40() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return getWtPageNavigatorList().CurrentRec.ssSTListNavigation_PageNumber.ssNumber;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public void lnkLink8_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wtLink8_Click(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandPage(heContext, Convert.ToString(getWtPageNavigatorList().CurrentRec.ssSTListNavigation_PageNumber.ssIndex))) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the title of the link (wtLink8)
		/// </summary>
		/// <returns>title of the Link (wtLink8)</returns>
		public string
		lnkLink8_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wtLink8)
		/// </summary>
		/// <returns>The Visible State of wtLink8</returns>
		public bool lnkLink8_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wtLink8)
		/// </summary>
		/// <returns>The Enabled State of wtLink8</returns>
		public bool lnkLink8_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = CAjsF05TX0i8XLI8kFvrVA) Expression:
		///  PageNavigator.List.Current.ListNavigation_PageNumber.Number
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression7() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return getWtPageNavigatorList().CurrentRec.ssSTListNavigation_PageNumber.ssNumber;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = HNk+QSGWeUa0M73BJpcxWA) Expression: "..."
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression14() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return "...";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		bool if_wt_If46_hasRun=false;
		bool if_wt_If46_evalResult;
		public bool if_wt_If46() {
			if (if_wt_If46_hasRun) {
				if_wt_If46_hasRun = false;
				return if_wt_If46_evalResult;
			}
			if_wt_If46_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If46_evalResult = (inParamTotalRowCount>(varLcStartIndex+inParamLineCount));
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If46_evalResult;
		}

		public void lnk_Link16_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxClick, null);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Action to be taken at a Link submit action)
		/// </summary>
		/// <param name="sender"> The associated sender components</param>
		/// <param name="e"> The associated event arguments</param>
		public void wt_Link16_Click(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (IsAjaxRequest && e.Equals(EventArgs.Empty) && ((OSPage) Page).TriggersBubbleUpEvents((Control) sender)) {
					return;
				}
				((IWebScreen) ((System.Web.UI.Control) sender).Page).OnSubmit(((IParentEditRecordProp) sender).GetParentEditRecordClientId(), false);
				if (CommandNext(heContext)) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the title of the link (wt_Link16)
		/// </summary>
		/// <returns>title of the Link (wt_Link16)</returns>
		public string
		lnk_Link16_getTitle() {
			return "";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link16)
		/// </summary>
		/// <returns>The Visible State of wt_Link16</returns>
		public bool lnk_Link16_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link16)
		/// </summary>
		/// <returns>The Enabled State of wt_Link16</returns>
		public bool lnk_Link16_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = KWPcoSpekEG_JhE8oyPApQ) Expression: "next"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression33() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return "next";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public static class FuncCommandNext {
		}
		public static class FuncCommandPage {
		}
		public static class FuncCommandPrevious {
		}
		public static class FuncssPreparation {
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "ContactManager.KchB8lZzMpUqzW_6BTte_bQ";
			}
		}
	}
}
