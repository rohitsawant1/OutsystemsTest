/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Web.SessionState;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.Internal.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.HubEdition.RuntimePlatform.Email;
using OutSystems.HubEdition.RuntimePlatform.NewRuntime;
using OutSystems.HubEdition.WebWidgets;
using OutSystems.HubEdition.WebWidgets.Behaviors;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Caching;
using OutSystems.ObjectKeys;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;


namespace ssContactManager.Flows.FlowRichWidgets {
	public abstract class WBlkFeedback_Message: OSUserControl, IWebScreen, INegotiateTabIndexes, IAjaxNotifyEvent, INotifyTriggers, INotifySender {

		/// <summary>
		/// Delegate Definitions
		/// </summary>
		/// <summary>
		/// Parameters and Local Variables Definitions
		/// </summary>
		/// <summary>
		/// Variable <code>varLcMessageText</code> that represents the Service Studio local variable
		///  <code>MessageText</code> <p>Description: </p>
		/// </summary>
		string varLcMessageText = "";

		/// <summary>
		/// Variable <code>varLcMessageType</code> that represents the Service Studio local variable
		///  <code>MessageType</code> <p>Description: </p>
		/// </summary>
		int varLcMessageType = 0;

		/// <summary>
		/// Variable <code>varLcCleanNext</code> that represents the Service Studio local variable
		///  <code>CleanNext</code> <p>Description: </p>
		/// </summary>
		bool varLcCleanNext = false;

		/// <summary>
		/// Variable "True" if the Widget wt_If11
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If11T;

		/// <summary>
		/// Variable "True" if the Widget wt_If11
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If11F;
		/// <summary>
		/// Variable "True" if the Widget wt_If14
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If14T;

		/// <summary>
		/// Variable "True" if the Widget wt_If14
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If14F;
		protected OutSystems.HubEdition.WebWidgets.Container wtFeedback_Wrapper;
		/// <summary>
		/// Variable "True" if the Widget wt_If21
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If21T;

		/// <summary>
		/// Variable "True" if the Widget wt_If21
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If21F;
		/// <summary>
		/// Variable "True" if the Widget wt_If6
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If6T;

		/// <summary>
		/// Variable "True" if the Widget wt_If6
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If6F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container32;
		/// <summary>
		/// Variable (wt_Link41) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link41;
		/// <summary>
		/// Variable "True" if the Widget wt_If42
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If42T;

		/// <summary>
		/// Variable "True" if the Widget wt_If42
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If42F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container30;
		/// <summary>
		/// Variable (wt_Link39) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link39;
		/// <summary>
		/// Variable "True" if the Widget wt_If16
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If16T;

		/// <summary>
		/// Variable "True" if the Widget wt_If16
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If16F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container29;
		/// <summary>
		/// Variable (wt_Link24) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link24;
		/// <summary>
		/// Variable "True" if the Widget wt_If49
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If49T;

		/// <summary>
		/// Variable "True" if the Widget wt_If49
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.If wt_If49F;
		protected OutSystems.HubEdition.WebWidgets.Container wt_Container23;
		/// <summary>
		/// Variable (wt_Link10) with Link component
		/// </summary>
		protected OutSystems.HubEdition.WebWidgets.HyperLink wt_Link10;
		private List<object> explicitChangedVariables = new List<object>();
		private bool _isRendering = false;
		public HeContext heContext;
		private static Hashtable htTabIndexGroups = new Hashtable();
		private Hashtable htTabIndexGroupsTI = new Hashtable();
		public string InstanceID;
		public string RuntimeID= "";
		public event EventHandler NotifyTriggered;
		private BlocksJavascript.JavascriptNode _javascriptNode;
		/// <summary>
		/// Action <code>Preparation</code> that represents the Service Studio preparation
		///  <code>Preparation</code> <p> Description: </p>
		/// </summary>
		public void Preparation(HeContext heContext) {
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; perfTracer.RegisterAction("0643ba59-4499-45ab-95f5-c2ed8e8f4336.#Preparation", "Feedback_Message.Preparation");
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("WbpDBplEq0WV9cLtjo9DNg.#Preparation", "Preparation", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				do {
					if ((BuiltInFunction.IsLoadingScreen())) {
						// Fill Local and Clean
						// MessageText = Feedback_Message.Feedback_Message.MessageText
						varLcMessageText = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]).ssSTFeedback_Message.ssMessageText;
						// MessageType = Feedback_Message.Feedback_Message.MessageType
						varLcMessageType = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]).ssSTFeedback_Message.ssMessageType;
						// Feedback_Message.Feedback_Message.MessageText = ""
						RCFeedback_MessageRecord CompID_Aux_2 = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]);
						CompID_Aux_2.ssSTFeedback_Message.ssMessageText = "";
						Global.App.OsContext.Session["ContactManager.Feedback_Message"] = CompID_Aux_2;
						// Feedback_Message.Feedback_Message.MessageType = NullIdentifier
						RCFeedback_MessageRecord CompID_Aux_3 = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]);
						CompID_Aux_3.ssSTFeedback_Message.ssMessageType = BuiltInFunction.NullIdentifier();
						Global.App.OsContext.Session["ContactManager.Feedback_Message"] = CompID_Aux_3;
					} else {
						if ((!(((Functions.rssextensionhttprequesthandler_ActionGetURLMethod(heContext) == "POST") && (!Functions.rssextensionhttprequesthandler_ActionIsAjaxRequest(heContext)))))) {
							break;
						}

					}

					// SetCookiepageLoadedFromBrowserCache
					Actions.ActionSetCookie(heContext, "pageLoadedFromBrowserCache", "false", 0, "/", "");

				}
				while (false)
				;
				if ((((varLcMessageText!= "") && (varLcMessageType!=BuiltInFunction.NullIdentifier())))) {
					if ((varLcCleanNext)) {
						// Clean
						// MessageText = ""
						varLcMessageText = "";
						// MessageType = NullIdentifier
						varLcMessageType = BuiltInFunction.NullIdentifier();
						// CleanNext = False
						varLcCleanNext = false;
					} else {
						// JSSlide
						Actions.ActionRunJavaScript(heContext, ((((("RichWidgets_Feedback_Message_feedbackSlideDown(" + "\'") +wtFeedback_Wrapper.ClientID) + "\',") + ((((varLcMessageType==ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("th1d9oYiCkyMvUH17pFfng")).ssId) || (varLcMessageType==ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("G4pjYRSiMk6Ozp038Nv6jw")).ssId))) ?("true"):("false"))) + ");"));

						// CleanNext
						// CleanNext = IsLoadingScreen
						varLcCleanNext = BuiltInFunction.IsLoadingScreen();
					}

				}

			} catch (System.Threading.ThreadAbortException) {
				throw;
			}
		}
		static WBlkFeedback_Message() {
		}

		public void OnNotifyCalled(string message) {
			BindDelegatesIfNeeded();
			if (NotifyTriggered != null) {
				NotifyTriggered(this, new MsgEventArgs(message));
			}
		}

		override protected void OnInit(EventArgs e) {
			InitializeComponent();
			base.OnInit(e);
		}
		private T HandleCurrentEspaceKey<T>(Func<T> action) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return action();
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		private void InitializeComponent() {
			this.Load += new System.EventHandler(this.Page_Load);
			this.Unload += new System.EventHandler(this.Page_Unload);
		}
		private void Page_Load(object sender, System.EventArgs e) {
			((OSPageViewState) Page).EnableResetViewState();
			heContext = Global.App.OsContext;
			RuntimeID = ClientID;
			IncludeSpan = true;
			if (!Visible) return;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!IsPostBack || _isRendering) {
					// register this block in the page so for later outputting the block javascript includes in their correct order
					((OSPage) Page).RegisterBlock(this, out _javascriptNode);
					if (_isRendering) {
						Preparation(heContext);
					}
					bool bindEditRecords = IsViewStateEmpty;
				} else {
					FetchViewState();
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}

		}
		/// <summary>
		/// This method is called when there is a submit. So it should validate input values and call the
		///  correct system event user action if needed
		/// </summary>
		public void OnSubmit(string parentEditRecord, bool validate) {
			if (!WasRendered) {
				return;
			}
			CallOnSubmitOnChildren(Controls, parentEditRecord, validate);
		}
		public void CallOnSubmitOnChildren(ControlCollection children, string parentEditRecord, bool validate) {
			foreach(Control ctrl in children) {
				IWebScreen screen = ctrl as IWebScreen;

				if (screen != null) {
					screen.OnSubmit(parentEditRecord, validate);
				} else {
					CallOnSubmitOnChildren(ctrl.Controls, parentEditRecord, validate);
				}
			}
		}
		public short NegotiateTabIndexes(short tabindex, bool setTabIndex) {
			Control rootCtrl = this;
			if ((this.Controls.Count == 1) && (typeof(HtmlForm).IsInstanceOfType(this.Controls[0]))) {
				rootCtrl = this.Controls[0];
			} else {
				rootCtrl = this;
			}
			tabindex = NegotiateTabIndexesRecursively(tabindex, rootCtrl, setTabIndex);
			return tabindex;
		}

		public short NegotiateTabIndexesRecursively(short tabindex, Control rootCtrl, bool setTabIndex) {

			bool bAssignTabIndex = false;
			WebControl ctrl = null;
			HtmlControl htmlCtrl = null;
			foreach(Control child in rootCtrl.Controls) {
				if (child is INegotiateTabIndexes) {
					tabindex = ((INegotiateTabIndexes) child).NegotiateTabIndexes(tabindex, setTabIndex);
					continue;
				}
				if (typeof(WebControl).IsInstanceOfType(child)) {
					ctrl = (WebControl) child;
					bAssignTabIndex = false;
					if (ctrl is OutSystems.HubEdition.WebWidgets.TextBox | ctrl is OutSystems.HubEdition.WebWidgets.CheckBox | ctrl is OutSystems.HubEdition.WebWidgets.RadioButton | ctrl is OutSystems.HubEdition.WebWidgets.DropDownList) {

						bAssignTabIndex = true;
					} else if (ctrl is System.Web.UI.WebControls.LinkButton | ctrl is System.Web.UI.WebControls.Button | ctrl is System.Web.UI.WebControls.HyperLink | ctrl is System.Web.UI.WebControls.ListBox) {
						bAssignTabIndex = true;
					}
					else if (ctrl is PlaceholderContainer)
					{
						INegotiateTabIndexes placeholderOwner = (INegotiateTabIndexes) Utils.GetOwnerOfControl(ctrl);
						tabindex = placeholderOwner.NegotiateTabIndexesRecursively(tabindex, ctrl, setTabIndex);
						continue;
					}

					short settedTabIndex = 0;
					if (bAssignTabIndex && setTabIndex) {
						object b = htTabIndexGroups[ctrl.ID];
						if (b != null) {
							string groupid = b.ToString();
							if (htTabIndexGroupsTI[groupid] == null) {
								htTabIndexGroupsTI[groupid] = tabindex++;
							}
							ViewStateAttributes.SetTabIndex(ctrl, Convert.ToInt16(htTabIndexGroupsTI[groupid]), out settedTabIndex);
						} else {
							ViewStateAttributes.SetTabIndex(ctrl, tabindex, out settedTabIndex);
							// Increase tabindex if it was not overiden
							if (tabindex == settedTabIndex) {
								tabindex++;
							}
						}
					}
					tabindex = Math.Max(tabindex, ++settedTabIndex);
				} else if (child is HtmlControl && setTabIndex) {
					htmlCtrl = (HtmlControl) child;
					if (htmlCtrl is System.Web.UI.HtmlControls.HtmlInputFile) {
						htmlCtrl.Attributes.Add("tabIndex", Convert.ToString(tabindex++));
					}
				}
				if (child.Controls.Count > 0) {
					tabindex = NegotiateTabIndexesRecursively(tabindex, child, setTabIndex);
				}
			}
			return tabindex;
		}


		/// <summary>
		/// Store widget and variable data in the viewstate
		/// </summary>
		public override void StoreViewState() {
			base.StoreViewState();
			ViewStateAttributes.SetInViewState("varLcMessageText", varLcMessageText, "");
			ViewStateAttributes.SetInViewState("varLcMessageType", varLcMessageType, 0);
			ViewStateAttributes.SetInViewState("varLcCleanNext", varLcCleanNext, false);
			ViewStateAttributes.EnsureNotEmpty();
			RemoveStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// Restore widget and variable data from the viewstate
		/// </summary>
		protected override void FetchViewState() {
			base.FetchViewState();
			if (IsViewStateEmpty) return;
			try {
				varLcMessageText = (string) ViewStateAttributes.GetFromViewState("varLcMessageText", "");
				varLcMessageType = (int) ViewStateAttributes.GetFromViewState("varLcMessageType", 0);
				varLcCleanNext = (bool) ViewStateAttributes.GetFromViewState("varLcCleanNext", false);
			} catch (Exception e) {
				throw new Exception("Error Deserializing ViewState", e); 
			}
		}

		/// <summary>
		/// Store visibility information of the web block and input widgets in the viewstate
		/// </summary>
		protected override void StoreInputsAndWebBlockVisibility() {
			ViewStateAttributes.EnsureNotEmpty();
		}
		/// <summary>
		/// Restore visibility information of the web block and input widgets from the viewstate
		/// </summary>
		protected override void RestoreInputsAndWebBlockVisibility() {
			WasRendered = true;
		}

		private void Page_Unload(object sender, System.EventArgs e) {
		}

		public LocalState PushStack() {
			throw new NotImplementedException();
		}

		public void doRefreshScreen(HeContext heContext) {
			((IWebScreen) this.Page).doRefreshScreen(heContext);
		}

		public void doAJAXRefreshScreen(HeContext heContext) {
			StoreViewState();
			((IWebScreen) this.Page).doAJAXRefreshScreen(heContext);
		}

		public static void GetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			string blockId = "ContactManager.KWbpDBplEq0WV9cLtjo9DNg";
			if (visited.Contains(blockId)) {
				return; 
			}
			visited.Add(blockId);
			if (!inline) {
				GetCssIncludes(writer, visited);
			} else {
				GetInlineCss(writer, visited);
			}
		}

		private static void GetCssIncludes(TextWriter writer, HashSet<string> visited) {
			InnerGetCss(writer, false, visited);
			CssHelper.WriteCssInclude(writer, AppUtils.Instance.getImagePath() + "Blocks/ContactManager/RichWidgets/Feedback_Message.css" + AppUtils.Instance.CacheInvalidationSuffix);
		}

		private static void GetInlineCss(TextWriter writer, HashSet<string> visited) {
			StringWriter localCssWriter = new StringWriter();
			localCssWriter.NewLine = writer.NewLine;
			string localCss = Environment.NewLine;
			InnerGetCss(localCssWriter, true, visited);
			localCss += localCssWriter.ToString();
			HashSet<string> cssVisited = new HashSet<string>();
			string read;
			AppUtils.getResourceFileContent(out read, "Blocks\\ContactManager\\RichWidgets\\Feedback_Message.css");
			localCss += OutSystems.HubEdition.RuntimePlatform.Email.EmailHelper.FlattenCSSFile(read, "Blocks\\ContactManager\\RichWidgets\\Feedback_Message.css", cssVisited);
			writer.Write(localCss);
		}

		private static void InnerGetCss(TextWriter writer, bool inline, HashSet<string> visited) {
			ssContactManager.Flows.FlowPrivate.WBlkjQueryUI.GetCss(writer, inline, visited);
			ssContactManager.Flows.FlowRichWidgets.WBlkContainer_Round.GetCss(writer, inline, visited);
			ssContactManager.Flows.FlowPrivate.WBlkNotifyWidget.GetCss(writer, inline, visited);
		}

		private void Page_Error(object sender, System.EventArgs e) {
		}
		public void CheckPermissions(HeContext heContext) {
			((IWebScreen) this.Page).CheckPermissions(heContext);
		}
		protected static string GetString(string key, string defaultValue) {
			return Global.GetStringResource(key, defaultValue);
		}

		public ObjectKey Key {
			get {
				return ObjectKey.Parse("WbpDBplEq0WV9cLtjo9DNg"); 
			}
		}
		public bool isSecure {
			get {
				return ((IWebScreen) Page).isSecure; 
			}
		}
		/// <summary>
		/// Action <code>CommandRefresh</code> that represents the Service Studio screen action
		///  <code>Refresh</code> <p> Description: </p>
		/// </summary>
		private bool CommandRefresh(HeContext heContext) {
			Global.App.Context.Items["osPassedOnAction"] = true;
			CheckPermissions(heContext);
			RequestTracer perfTracer = heContext.RequestTracer; if (perfTracer != null) {
				perfTracer.RegisterAction("aed927ef-f430-49cc-a914-49448912b7a2", "Feedback_Message.Refresh"); 
			}
			try {
				if (heContext != null && heContext.RequestTracer != null) {
					heContext.RequestTracer.RegisterInternalCall("7yfZrjD0zEmpFElEiRK3og", "Refresh", "X0RMeX3yYU+0eg2nFEDfaA", "ContactManager");
				}
				// GetNotifyMessage
				if (((Functions.rssespaceservicecenter_Deprecated_NotifyGetMessage(heContext) != ""))) {
					// From GetNotifyMessage
					// MessageText = Substr
					varLcMessageText = BuiltInFunction.SubstrSC(Functions.rssespaceservicecenter_Deprecated_NotifyGetMessage(heContext), 2, 10000);
					explicitChangedVariables.Add(varLcMessageText);

					// MessageType = IntegerToIdentifier
					varLcMessageType = BuiltInFunction.IntegerToIdentifier(BuiltInFunction.TextToInteger(BuiltInFunction.SubstrSC(Functions.rssespaceservicecenter_Deprecated_NotifyGetMessage(heContext), 0, 1)));
					explicitChangedVariables.Add(varLcMessageType);

					// Feedback_Message.Feedback_Message.MessageType = NullIdentifier
					RCFeedback_MessageRecord CompID_Aux_4 = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]);
					CompID_Aux_4.ssSTFeedback_Message.ssMessageType = BuiltInFunction.NullIdentifier();
					Global.App.OsContext.Session["ContactManager.Feedback_Message"] = CompID_Aux_4;
					explicitChangedVariables.Add(((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]).ssSTFeedback_Message.ssMessageType);

					// Feedback_Message.Feedback_Message.MessageText = ""
					RCFeedback_MessageRecord CompID_Aux_5 = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]);
					CompID_Aux_5.ssSTFeedback_Message.ssMessageText = "";
					Global.App.OsContext.Session["ContactManager.Feedback_Message"] = CompID_Aux_5;
					explicitChangedVariables.Add(((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]).ssSTFeedback_Message.ssMessageText);

					// CleanNext = False
					varLcCleanNext = false;
					explicitChangedVariables.Add(varLcCleanNext);

				} else {
					// Fill Local and Clean
					// MessageText = Feedback_Message.Feedback_Message.MessageText
					varLcMessageText = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]).ssSTFeedback_Message.ssMessageText;
					explicitChangedVariables.Add(varLcMessageText);

					// MessageType = Feedback_Message.Feedback_Message.MessageType
					varLcMessageType = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]).ssSTFeedback_Message.ssMessageType;
					explicitChangedVariables.Add(varLcMessageType);

					// Feedback_Message.Feedback_Message.MessageText = ""
					RCFeedback_MessageRecord CompID_Aux_6 = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]);
					CompID_Aux_6.ssSTFeedback_Message.ssMessageText = "";
					Global.App.OsContext.Session["ContactManager.Feedback_Message"] = CompID_Aux_6;
					explicitChangedVariables.Add(((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]).ssSTFeedback_Message.ssMessageText);

					// Feedback_Message.Feedback_Message.MessageType = NullIdentifier
					RCFeedback_MessageRecord CompID_Aux_7 = ((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]);
					CompID_Aux_7.ssSTFeedback_Message.ssMessageType = BuiltInFunction.NullIdentifier();
					Global.App.OsContext.Session["ContactManager.Feedback_Message"] = CompID_Aux_7;
					explicitChangedVariables.Add(((RCFeedback_MessageRecord) Global.App.OsContext.Session["ContactManager.Feedback_Message"]).ssSTFeedback_Message.ssMessageType);

					// CleanNext = False
					varLcCleanNext = false;
					explicitChangedVariables.Add(varLcCleanNext);

				}

				// Refresh Me
				((OSPageViewState) Page).AjaxRefresh(GetBlockSelfRefreshControl(), "None", StoreViewState);

				// Fill Local and Clean
				// MessageText = ""
				varLcMessageText = "";
				explicitChangedVariables.Add(varLcMessageText);

				// MessageType = NullIdentifier
				varLcMessageType = BuiltInFunction.NullIdentifier();
				explicitChangedVariables.Add(varLcMessageType);

				// Update Screen
				return true;

			} catch (System.Threading.ThreadAbortException) {
				return false;
			}
		}
		bool if_wt_If11_hasRun=false;
		bool if_wt_If11_evalResult;
		public bool if_wt_If11() {
			if (if_wt_If11_hasRun) {
				if_wt_If11_hasRun = false;
				return if_wt_If11_evalResult;
			}
			if_wt_If11_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If11_evalResult = false;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If11_evalResult;
		}

		public void webBlck_WebBlockInstance18_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				ssContactManager.Flows.FlowPrivate.WBlkjQueryUI widget = (ssContactManager.Flows.FlowPrivate.WBlkjQueryUI) sender;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public void webBlck_WebBlockInstance26_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				ssContactManager.Flows.FlowRichWidgets.WBlkContainer_Round widget = (ssContactManager.Flows.FlowRichWidgets.WBlkContainer_Round) sender;
				widget.inParamIdOfContainerToCompletelyRound = "";
				widget.inParamStyleOfContainersToRoundTops = "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Function to dump expression (Key = PuVQojNe00emLKTkgDoP4A) Expression: "<script
		///  type='text/javascript'> osjs(function($){
		///   OsRegisterExceptionHandler(RichWidgets_Feedback_Message_ErrorHandler) }); </script>"
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression34() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return "<script type=\'text/javascript\'>\r\nosjs(function($){\r\n  OsRegisterExceptionHandler(RichWidgets_Feedback_Message_ErrorHandler)\r\n});\r\n</script>";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		bool if_wt_If14_hasRun=false;
		bool if_wt_If14_evalResult;
		public bool if_wt_If14() {
			if (if_wt_If14_hasRun) {
				if_wt_If14_hasRun = false;
				return if_wt_If14_evalResult;
			}
			if_wt_If14_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If14_evalResult = ("InWebBlockPreview" == "True");
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If14_evalResult;
		}

		public void cntFeedback_Wrapper_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cntFeedback_Wrapper_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cntFeedback_Wrapper_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cntFeedback_Wrapper_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wtFeedback_Wrapper)
		/// </summary>
		/// <returns>The Visible State of wtFeedback_Wrapper</returns>
		public bool cntFeedback_Wrapper_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		public void webBlcknotify_BindDelegates(object sender, BindDelegatesEventArgs e) {
			ssContactManager.Flows.FlowPrivate.WBlkNotifyWidget webBlock = (ssContactManager.Flows.FlowPrivate.WBlkNotifyWidget) e.UserControl;
			webBlock.NotifyTriggered += webBlcknotify_AjaxNotifyTriggered;
		}
		public void webBlcknotify_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				((IAjaxHandler) sender).RegisterAjaxEvent(AjaxEventType.onAjaxNotify, null);
				ssContactManager.Flows.FlowPrivate.WBlkNotifyWidget widget = (ssContactManager.Flows.FlowPrivate.WBlkNotifyWidget) sender;
				widget.inParamjavascriptVariableName = "RichWidgets_Feedback_Message_notifyWidget";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		private void webBlcknotify_AjaxNotifyTriggered(object sender, EventArgs e) {
			AppInfo.GetAppInfo().OsContext.AjaxEventContextInfo.NotifyMessage = ((MsgEventArgs) e).msg;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				CommandRefresh(heContext);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			AddStoreViewStateWebScreenStack(this);
		}
		/// <summary>
		/// AjaxNotify event handler for widget wtnotify
		/// </summary>
		public void webBlcknotify_AjaxNotify(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (CommandRefresh(heContext
				)
				) {
					doAJAXRefreshScreen(heContext);
				}
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		bool if_wt_If21_hasRun=false;
		bool if_wt_If21_evalResult;
		public bool if_wt_If21() {
			if (if_wt_If21_hasRun) {
				if_wt_If21_hasRun = false;
				return if_wt_If21_evalResult;
			}
			if_wt_If21_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If21_evalResult = (varLcMessageText!= "");
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If21_evalResult;
		}

		bool if_wt_If6_hasRun=false;
		bool if_wt_If6_evalResult;
		public bool if_wt_If6() {
			if (if_wt_If6_hasRun) {
				if_wt_If6_hasRun = false;
				return if_wt_If6_evalResult;
			}
			if_wt_If6_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If6_evalResult = (varLcMessageType==ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("th1d9oYiCkyMvUH17pFfng")).ssId);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If6_evalResult;
		}

		public void cnt_Container32_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container32_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container32_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container32_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container32)
		/// </summary>
		/// <returns>The Visible State of wt_Container32</returns>
		public bool cnt_Container32_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the Height of the image (wt_Image51)
		/// </summary>
		/// <returns>Height of the Image (wt_Image51)</returns>
		public string img_Image51_actualHeight() {
			return HttpUtility.HtmlEncode(Convert.ToString(24));
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image51)
		/// </summary>
		/// <returns>Width of the Image (wt_Image51)</returns>
		public string img_Image51_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(24));
		}
		/// <summary>
		/// Function to dump expression (Key = ftE+OOBHjEOKcFQ+wV8zOQ) Expression: MessageText
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression17() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return varLcMessageText;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link41)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link41)</returns>
		public string lnk_Link41_NavigateUrl() {
			string sURL = Private_WebExternalSite4_Properties.FixedURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link41)
		/// </summary>
		/// <returns>title of the Link (wt_Link41)</returns>
		public string
		lnk_Link41_getTitle() {
			return "Hide Message";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link41)
		/// </summary>
		/// <returns>The Visible State of wt_Link41</returns>
		public bool lnk_Link41_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link41)
		/// </summary>
		/// <returns>The Enabled State of wt_Link41</returns>
		public bool lnk_Link41_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the label of the image (wt_Image22)
		/// </summary>
		/// <returns>Label of the Image (wt_Image22)</returns>
		public string img_Image22_getLabel() {
			return "Hide Message";
		}
		/// <summary>
		/// Gets the Height of the image (wt_Image22)
		/// </summary>
		/// <returns>Height of the Image (wt_Image22)</returns>
		public string img_Image22_actualHeight() {
			return HttpUtility.HtmlEncode(Convert.ToString(10));
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image22)
		/// </summary>
		/// <returns>Width of the Image (wt_Image22)</returns>
		public string img_Image22_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(10));
		}
		bool if_wt_If42_hasRun=false;
		bool if_wt_If42_evalResult;
		public bool if_wt_If42() {
			if (if_wt_If42_hasRun) {
				if_wt_If42_hasRun = false;
				return if_wt_If42_evalResult;
			}
			if_wt_If42_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If42_evalResult = (varLcMessageType==ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("G4pjYRSiMk6Ozp038Nv6jw")).ssId);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If42_evalResult;
		}

		public void cnt_Container30_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container30_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container30_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container30_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container30)
		/// </summary>
		/// <returns>The Visible State of wt_Container30</returns>
		public bool cnt_Container30_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the Height of the image (wt_Image31)
		/// </summary>
		/// <returns>Height of the Image (wt_Image31)</returns>
		public string img_Image31_actualHeight() {
			return HttpUtility.HtmlEncode(Convert.ToString(24));
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image31)
		/// </summary>
		/// <returns>Width of the Image (wt_Image31)</returns>
		public string img_Image31_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(24));
		}
		/// <summary>
		/// Function to dump expression (Key = s1yTwH2pW0Kertfi6q__Kw) Expression: MessageText
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression43() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return varLcMessageText;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link39)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link39)</returns>
		public string lnk_Link39_NavigateUrl() {
			string sURL = Private_WebExternalSite4_Properties.FixedURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link39)
		/// </summary>
		/// <returns>title of the Link (wt_Link39)</returns>
		public string
		lnk_Link39_getTitle() {
			return "Hide Message";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link39)
		/// </summary>
		/// <returns>The Visible State of wt_Link39</returns>
		public bool lnk_Link39_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link39)
		/// </summary>
		/// <returns>The Enabled State of wt_Link39</returns>
		public bool lnk_Link39_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the label of the image (wt_Image8)
		/// </summary>
		/// <returns>Label of the Image (wt_Image8)</returns>
		public string img_Image8_getLabel() {
			return "Hide Message";
		}
		/// <summary>
		/// Gets the Height of the image (wt_Image8)
		/// </summary>
		/// <returns>Height of the Image (wt_Image8)</returns>
		public string img_Image8_actualHeight() {
			return HttpUtility.HtmlEncode(Convert.ToString(10));
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image8)
		/// </summary>
		/// <returns>Width of the Image (wt_Image8)</returns>
		public string img_Image8_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(10));
		}
		bool if_wt_If16_hasRun=false;
		bool if_wt_If16_evalResult;
		public bool if_wt_If16() {
			if (if_wt_If16_hasRun) {
				if_wt_If16_hasRun = false;
				return if_wt_If16_evalResult;
			}
			if_wt_If16_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If16_evalResult = (varLcMessageType==ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("3a5cuVOamEu9KnDBSWLcbA")).ssId);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If16_evalResult;
		}

		public void cnt_Container29_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container29_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container29_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container29_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container29)
		/// </summary>
		/// <returns>The Visible State of wt_Container29</returns>
		public bool cnt_Container29_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the Height of the image (wt_Image28)
		/// </summary>
		/// <returns>Height of the Image (wt_Image28)</returns>
		public string img_Image28_actualHeight() {
			return HttpUtility.HtmlEncode(Convert.ToString(24));
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image28)
		/// </summary>
		/// <returns>Width of the Image (wt_Image28)</returns>
		public string img_Image28_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(24));
		}
		/// <summary>
		/// Function to dump expression (Key = OCgqUR2BakG+aDWexelLZA) Expression: MessageText
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression20() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return varLcMessageText;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link24)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link24)</returns>
		public string lnk_Link24_NavigateUrl() {
			string sURL = Private_WebExternalSite4_Properties.FixedURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link24)
		/// </summary>
		/// <returns>title of the Link (wt_Link24)</returns>
		public string
		lnk_Link24_getTitle() {
			return "Hide Message";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link24)
		/// </summary>
		/// <returns>The Visible State of wt_Link24</returns>
		public bool lnk_Link24_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link24)
		/// </summary>
		/// <returns>The Enabled State of wt_Link24</returns>
		public bool lnk_Link24_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the label of the image (wt_Image38)
		/// </summary>
		/// <returns>Label of the Image (wt_Image38)</returns>
		public string img_Image38_getLabel() {
			return "Hide Message";
		}
		/// <summary>
		/// Gets the Height of the image (wt_Image38)
		/// </summary>
		/// <returns>Height of the Image (wt_Image38)</returns>
		public string img_Image38_actualHeight() {
			return HttpUtility.HtmlEncode(Convert.ToString(10));
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image38)
		/// </summary>
		/// <returns>Width of the Image (wt_Image38)</returns>
		public string img_Image38_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(10));
		}
		bool if_wt_If49_hasRun=false;
		bool if_wt_If49_evalResult;
		public bool if_wt_If49() {
			if (if_wt_If49_hasRun) {
				if_wt_If49_hasRun = false;
				return if_wt_If49_evalResult;
			}
			if_wt_If49_hasRun = true;
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if_wt_If49_evalResult = (varLcMessageType==ENMessageTypeEntity.GetRecordByKey(ObjectKey.Parse("itO+Hg6BZUaMBJ99JElOXg")).ssId);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
			return if_wt_If49_evalResult;
		}

		public void cnt_Container23_onDataBinding(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				cnt_Container23_setInlineAttributes(sender, e);
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		public string cnt_Container23_setInlineAttributes(object sender, System.EventArgs e) {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				if (!cnt_Container23_isVisible()) {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					{
						string newstyledef;
						string oldstyledef;
						newstyledef = stylevalue + ((stylevalue!=null && !stylevalue.TrimEnd().EndsWith(";")) ? ";": "") + "display:none";
						oldstyledef = ((IAttributeAccessor) sender).GetAttribute("style");
						if (oldstyledef != null) {
							if (!oldstyledef.TrimEnd().EndsWith(";")) newstyledef = ";" + newstyledef;
							if (!oldstyledef.EndsWith(newstyledef)) {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef + newstyledef.ToString());
							} else {
								((IAttributeAccessor) sender).SetAttribute("style", oldstyledef.ToString());
							}
						} else {
							((IAttributeAccessor) sender).SetAttribute("style", newstyledef.ToString());
						}
					}
				} else {
					string stylevalue = ((IAttributeAccessor) sender).GetAttribute("style");
					if (stylevalue != null) {
						((IAttributeAccessor) sender).SetAttribute("style", stylevalue.Replace("display:none;", "").Replace("display:none", "").ToString());
					}
				}
				return "";
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the visible state of component (wt_Container23)
		/// </summary>
		/// <returns>The Visible State of wt_Container23</returns>
		public bool cnt_Container23_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the Height of the image (wt_Image2)
		/// </summary>
		/// <returns>Height of the Image (wt_Image2)</returns>
		public string img_Image2_actualHeight() {
			return HttpUtility.HtmlEncode(Convert.ToString(24));
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image2)
		/// </summary>
		/// <returns>Width of the Image (wt_Image2)</returns>
		public string img_Image2_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(24));
		}
		/// <summary>
		/// Function to dump expression (Key = H_32H3lZ1kKJeY5LvMrqMg) Expression: MessageText
		/// </summary>
		/// <returns>Returns the value of the Expression</returns>
		public string expression_InlineExpression9() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return varLcMessageText;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the Navigate URL for the link of variable (wt_Link10)
		/// </summary>
		/// <returns>The Navigate URL of the link variable (wt_Link10)</returns>
		public string lnk_Link10_NavigateUrl() {
			string sURL = Private_WebExternalSite4_Properties.FixedURL;
			sURL = sURL.Replace("&amp;", "&");
			if (AppUtils.UrlAttributeMustBeEncoded(Request)) {
				sURL = sURL.Replace("&", "&amp;");
			}
			return sURL;
		}
		/// <summary>
		/// Gets the title of the link (wt_Link10)
		/// </summary>
		/// <returns>title of the Link (wt_Link10)</returns>
		public string
		lnk_Link10_getTitle() {
			return "Hide Message";
		}
		/// <summary>
		/// Gets the visible state of component (wt_Link10)
		/// </summary>
		/// <returns>The Visible State of wt_Link10</returns>
		public bool lnk_Link10_isVisible() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true;
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}

		/// <summary>
		/// Gets the enabled state of component (wt_Link10)
		/// </summary>
		/// <returns>The Enabled State of wt_Link10</returns>
		public bool lnk_Link10_isEnabled() {
			ObjectKey oldCurrentESpaceKey = heContext.CurrentESpaceKey;
			try {
				heContext.CurrentESpaceKey = ssContactManager.Global.eSpaceKey;
				return true; 
			} finally {
				heContext.CurrentESpaceKey = oldCurrentESpaceKey;
			}
		}
		/// <summary>
		/// Gets the label of the image (wt_Image48)
		/// </summary>
		/// <returns>Label of the Image (wt_Image48)</returns>
		public string img_Image48_getLabel() {
			return "Hide Message";
		}
		/// <summary>
		/// Gets the Height of the image (wt_Image48)
		/// </summary>
		/// <returns>Height of the Image (wt_Image48)</returns>
		public string img_Image48_actualHeight() {
			return HttpUtility.HtmlEncode(Convert.ToString(10));
		}
		/// <summary>
		/// Gets the Width of the image (wt_Image48)
		/// </summary>
		/// <returns>Width of the Image (wt_Image48)</returns>
		public string img_Image48_actualWidth() {
			return HttpUtility.HtmlEncode(Convert.ToString(10));
		}
		public static class FuncCommandRefresh {
		}
		public static class FuncssPreparation {
		}

		public override Control FindControl(string id) {
			return base.FindControl(id);
		}
		public String BreakpointHook(String breakpointId) {
			return "";
		}

		public String BreakpointHook(String breakpointId, bool isExpressionlessWidget) {
			return "";
		}

		public String PageStartHook() {
			_isRendering = true;
			Page_Load(null, null); _isRendering = false;
			this.Load -= new System.EventHandler(this.Page_Load);
			return "";
		}
		public String PageEndHook() {
			return "";
		}
		public override string WebBlockIdentifier {
			get {
				return "ContactManager.KWbpDBplEq0WV9cLtjo9DNg";
			}
		}
		public override string JavaScriptFileName {
			get {
				return AppRelativeVirtualPath.Replace(".ascx", string.Empty) + ".js" + AppUtils.Instance.CacheInvalidationSuffix;
			}
		}
	}
}
