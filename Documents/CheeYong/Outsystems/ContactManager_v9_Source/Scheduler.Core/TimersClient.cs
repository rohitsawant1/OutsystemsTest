/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.0.3705.0.
// 
namespace OutSystems.Scheduler.Core {
	using System.Diagnostics;
	using System;
	using System.Web.Services.Protocols;
	using System.ComponentModel;
	using System.Web.Services;
	using System.Net;

	/// <remarks/>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "TimerHandlerSoap", Namespace = "http://tempuri.org/")]
	public class TimerHandler : System.Web.Services.Protocols.SoapHttpClientProtocol {

		/// <remarks/>
		public TimerHandler(string url) {
            this.Url = url;
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteTimer", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public int ExecuteTimer( string ssKey, int timeout, int tenantId) {
			object[] results = this.Invoke("ExecuteTimer", new object[] {
                        ssKey, timeout, tenantId});
			return ((int)(results[0]));
		}

		/// <remarks/>
        public System.IAsyncResult BeginExecuteTimer(string ssKey, int timeout, int tenantId, System.AsyncCallback callback, object asyncState) {
			return this.BeginInvoke("ExecuteTimer", new object[] {
                        ssKey, timeout, tenantId}, callback, asyncState);
		}

		/// <remarks/>
		public int EndExecuteTimer( System.IAsyncResult asyncResult ) {
			object[] results = this.EndInvoke(asyncResult);
			return ((int)(results[0]));
		}
	}
}
