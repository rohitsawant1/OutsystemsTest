/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Threading;
using OutSystems.RuntimeCommon;

namespace OutSystems.Scheduler.Core.Jobs {
    public class SingleJobFactory : JobFactory {

        public SingleJobFactory(RunningContext context) : base(context) { }

        public override List<TimerJob> GetPendingTimers(string instanceKey = "") {
            List<TimerJob> pendingList = new List<TimerJob>();
            try {
                pendingList = base.GetPendingTimers();
            } catch (Exception e) {
                SchedulerUtils.LogError("Scheduler Service: Error getting timers ", e, instanceKey);
            }
            return pendingList;
        }

        public override List<ActivityJob> GetPendingActivities(int batch, string instanceKey = "") {
            List<ActivityJob> pendingList = new List<ActivityJob>();
            try {
                pendingList = base.GetPendingActivities(batch);
            } catch (Exception e) {
                SchedulerUtils.LogError("Scheduler Service: Error getting pending activities ", e, instanceKey);
            }
            return pendingList;
        }


        public override List<EmailJob> FetchEmails(int batch, string instanceKey = "") {
            List<EmailJob> result = new List<EmailJob>();
            try {
                result = base.FetchEmails(batch);
            } catch (Exception e) {
                SchedulerUtils.LogError("Scheduler Service: Error fetching emails ", e, instanceKey);
            }
            return result;
        }

        public override List<EventJob> DequeueEvents(int batch, Func<int, bool> sleep, string instanceKey = "") {
            var pendingList = new List<EventJob>();
            try {
                pendingList = base.DequeueEvents(batch, sleep);
            } catch (Exception e) {
                SchedulerUtils.LogError("Scheduler Service: Error dequeuing events ", e, instanceKey);
            }
            
            if (pendingList.Count > 0) {
                OSTrace.Debug(String.Format("EVENT SCHEDULER DEBUG: Successfully dequeued {0} events (batch size {1}) to be processed, Thread: {2}",
                    pendingList.Count.ToString(), batch.ToString(), Thread.CurrentThread.ManagedThreadId));
            }

            return pendingList;
        }

        public override List<LightEventJob> DequeueLightEvents(int batch, Func<int, bool> sleep, string instanceKey = "") {
            var pendingList = new List<LightEventJob>();

            try {
                pendingList = base.DequeueLightEvents(batch, sleep);
            } catch (Exception e) {
                SchedulerUtils.LogError("Scheduler Service: Error dequeuing events ", e, instanceKey);
            }

            if (pendingList.Count > 0) {
                OSTrace.Debug(String.Format("EVENT SCHEDULER DEBUG: Successfully dequeued {0} light events (batch size {1}) to be processed, Thread: {2}",
                    pendingList.Count.ToString(), batch.ToString(), Thread.CurrentThread.ManagedThreadId));
            }

            return pendingList;
        }
    }
}
