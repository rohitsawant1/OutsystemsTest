/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;
using OutSystems.Scheduler.Core.Configuration;

namespace OutSystems.Scheduler.Core {
    
    public abstract class AbstractEventJob : IJob {
        
        private int NumberOfRetriesForErrorHandling {
            get { return context.SettingsProvider.Get(SchedulerSettings.Events.NumberOfRetriesForEventsErrorHandling); }
        }
        
        private int RetryDelayAfterErrorsMs {
            get { return context.SettingsProvider.Get(SchedulerSettings.Misc.DelayAfterErrorsMs); }
        }
        
        protected readonly RunningContext context;

        protected readonly Func<int, bool> sleep;
        public AbstractEventJob(int id, string sandboxKey, RunningContext context, Func<int, bool> sleep) : base(id, sandboxKey) {
            this.context = context ?? throw new ArgumentException("No context provided for AbstractJob");
            this.sleep = sleep;
        }

        protected void RetryOnError(string operationDesc, Action action) {
            var numberOfRetries = 0;

            while (numberOfRetries <= NumberOfRetriesForErrorHandling) {
                try {
                    action();
                    return;
                } catch (Exception e) {
                    numberOfRetries++;

                    var errorMessage = "Scheduler Service: Error {0}.".F(operationDesc);                    
                    if (numberOfRetries <= NumberOfRetriesForErrorHandling) {
                        errorMessage += " Retrying in {0} ms ({1})".F(RetryDelayAfterErrorsMs, numberOfRetries);
                    }

                    SchedulerUtils.LogError(errorMessage, e, SandboxKey, logToEventViewer: true);

                    sleep(RetryDelayAfterErrorsMs);
                }
            }
        }

    }
}