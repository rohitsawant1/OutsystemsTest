/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;

namespace OutSystems.Scheduler.Core {

	/// <summary>
	/// Represents a queue where elements have a corresponding key
	/// A mix between a Queue and a Hashtable
	/// </summary>
    public class QueueKey<TKey, TValue>
        where TValue : class {
		
        private Queue<KeyValuePair<TKey, TValue>> _queue;
        private Dictionary<TKey, TValue> _ht;
        

		public QueueKey (){
            _queue = new Queue<KeyValuePair<TKey, TValue>>();
            _ht = new Dictionary<TKey, TValue>();
		}

        public int dummyTotalWorkers;

		/// <summary>
		/// Adds an object to the end of the Queue
		/// </summary>
		/// <param name="key"></param>
		/// <param name="v"></param>
        public void Enqueue(TKey key, TValue v) {
			_ht.Add(key, null);
            _queue.Enqueue(new KeyValuePair<TKey, TValue>(key, v));
		}
		
		/// <summary>
		/// Removes and returns the object at the beginning of the Queue
		/// </summary>
		/// <returns></returns>
        public TValue Dequeue() {
            KeyValuePair<TKey, TValue> kv = _queue.Dequeue();
			_ht.Remove(kv.Key);
            return kv.Value;
		}


		/// <summary>
		/// Determines whether there is an element in the queue with a corresponding key
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
        public bool ContainsKey(TKey key) {
			return _ht.ContainsKey(key);
		}

		/// <summary>
		/// Gets the number of elements contained in the Queue
		/// </summary>
		public int Count {
			get {return _queue.Count;}
		}
	}
}