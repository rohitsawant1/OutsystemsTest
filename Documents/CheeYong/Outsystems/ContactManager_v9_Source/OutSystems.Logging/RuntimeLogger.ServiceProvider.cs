/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon.Settings;

namespace OutSystems.Logging {

    public partial class RuntimeLogger {

        /// <summary>
        ///  Local implementation of a IServiceProvider to encapsulate the current needs of the Loggers.
        /// </summary>
        private class LoggerServiceProvider : IServiceProvider {

            private readonly ISettingsProvider settingsProvider = null;
            private readonly LoggingPluginProvider pluginProvider = null;
            private readonly ILoggingDatabaseService loggingDatabaseService = null;

            //
            // Summary:
            //     Gets the service object of the specified type.
            //
            // Parameters:
            //   serviceType:
            //     An object that specifies the type of service object to get.
            //
            // Returns:
            //     A service object of type serviceType.-or- null if there is no service object
            //     of type serviceType.
            public object GetService(Type serviceType) {

                if (serviceType == typeof(ISettingsProvider)) {
                    return settingsProvider;
                }

                if (serviceType == typeof(LoggingPluginProvider)) {
                    return pluginProvider;
                }

                if (serviceType == typeof(ILoggingDatabaseService)) {
                    return loggingDatabaseService;
                }

                return null;
            }

            public LoggerServiceProvider(ISettingsProvider settingsProvider, LoggingPluginProvider pluginProvider, ILoggingDatabaseService loggingDatabaseService) {
                this.settingsProvider = settingsProvider;
                this.pluginProvider = pluginProvider;
                this.loggingDatabaseService = loggingDatabaseService;
            }
        }
    }

    // TODO jmr support for .NET Standard
    /// <summary>
    /// Extension methods for getting services from an <see cref="T:System.IServiceProvider" />.
    /// This class is only temporary until we can reference the Microsoft.Extensions.DependencyInjection.Abstractions
    /// </summary>
    internal static class ServiceProviderServiceExtensions {

        /// <summary>
        /// Get service of type <typeparamref name="T" /> from the <see cref="T:System.IServiceProvider" />.
        /// </summary>
        /// <typeparam name="T">The type of service object to get.</typeparam>
        /// <param name="provider">The <see cref="T:System.IServiceProvider" /> to retrieve the service object from.</param>
        /// <returns>A service object of type <typeparamref name="T" />.</returns>
        /// <exception cref="T:System.InvalidOperationException">There is no service of type <typeparamref name="T" />.</exception>
        public static T GetRequiredService<T>(this IServiceProvider provider) {
            if (provider == null)
                throw new ArgumentNullException(nameof(provider));
            return (T)GetRequiredService(provider, typeof(T));
        }

        /// <summary>
        /// Get service of type <paramref name="serviceType" /> from the <see cref="T:System.IServiceProvider" />.
        /// </summary>
        /// <param name="provider">The <see cref="T:System.IServiceProvider" /> to retrieve the service object from.</param>
        /// <param name="serviceType">An object that specifies the type of service object to get.</param>
        /// <returns>A service object of type <paramref name="serviceType" />.</returns>
        /// <exception cref="T:System.InvalidOperationException">There is no service of type <paramref name="serviceType" />.</exception>
        private static object GetRequiredService(IServiceProvider provider, Type serviceType) {
            if (provider == null)
                throw new ArgumentNullException(nameof(provider));
            if (serviceType == (Type)null)
                throw new ArgumentNullException(nameof(serviceType));
            object service = provider.GetService(serviceType);
            if (service != null)
                return service;
            throw new InvalidOperationException($"No service for type '{serviceType.ToString()}' has been registered.");
        }
    }
}
