/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.ObjectKeys;

namespace OutSystems.Logging.LogDefinition {
    [Serializable]
    public class ScreenLogDefinition : AbstractLogDefinition {

        public DateTime Instant;
        public int Duration;
        public string Screen;
        public string SessionId;
        public int EspaceId;
        public int TenantId;
        public int UserId;
        public string Msisdn;
        public string ScreenType;
        public string AccessMode;
        public string ExecutedBy;
        public int SessionBytes;
        public int SessionRequests;
        public int ViewstateBytes;
        public string RequestKey;
        public string ActionName;
        public string ClientIP;
        public string EspaceName;
        public string ApplicationName;
        public ObjectKey ApplicationKey;
        public string Username;

        public const int MAX_SESSION_ID_SIZE = 50;
        public const int MAX_SCREEN_SIZE = 50;
        public const int MAX_MSISDN_SIZE = 20;
        public const int MAX_SCREEN_TYPE_SIZE = 10;
        public const int MAX_ACCESS_MODE_SIZE = 10;
        public const int MAX_EXECUTED_BY_SIZE = 50;
        public const int MAX_ACTION_NAME = 60;
        public const int MAX_CLIENT_IP_SIZE = 1000;

        public ScreenLogDefinition() {
        }

        public ScreenLogDefinition(ScreenLogDefinition obj) {
            Instant = obj.Instant;
            Duration = obj.Duration;
            Screen = obj.Screen;
            SessionId = obj.SessionId;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            UserId = obj.UserId;
            Msisdn = obj.Msisdn;
            ScreenType = obj.ScreenType;
            AccessMode = obj.AccessMode;
            ExecutedBy = obj.ExecutedBy;
            SessionBytes = obj.SessionBytes;
            ViewstateBytes = obj.ViewstateBytes;
            SessionRequests = obj.SessionRequests;
            RequestKey = obj.RequestKey;
            ActionName = obj.ActionName;
            ClientIP = obj.ClientIP;
            EspaceName = obj.EspaceName;
            ApplicationName = obj.ApplicationName;
            ApplicationKey = obj.ApplicationKey;
            Username = obj.Username;
        }

        public ScreenLogDefinition(DateTime instant, int duration, string screen, string sessionId, int espaceId, int tenantId, int userId,
            string msisdn, string screenType, string accessMode, string executedBy, int sessionBytes, int viewstateBytes, int sessionRequests,
            string requestKey, string entryActionName, string clientIp, string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {
            Instant = instant;
            Duration = duration;
            Screen = screen;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Msisdn = msisdn;
            ScreenType = screenType;
            AccessMode = NotNullAccessMode(accessMode);
            ExecutedBy = executedBy;
            SessionBytes = sessionBytes;
            ViewstateBytes = viewstateBytes;
            SessionRequests = sessionRequests;
            RequestKey = requestKey;
            ActionName = entryActionName;
            ClientIP = clientIp;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;
        }

        public override object Clone() {
            return new ScreenLogDefinition(this);
        }

        public static void StaticWrite(DateTime instant, int duration, string screen, string sessionId, int espaceId, int tenantId, int userId,
            string msisdn, string screenType, string accessMode, string executedBy, int viewstateBytes, int sessionBytes, int sessionRequests,
            string requestKey, string entryActionName, string clientIp, string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {

            ScreenLogDefinition log = new ScreenLogDefinition();
            log.Write(instant, duration, screen, sessionId, espaceId, tenantId, userId, msisdn, screenType, accessMode, executedBy, 
                viewstateBytes, sessionBytes, sessionRequests, requestKey, entryActionName, clientIp, eSpaceName, applicationName, applicationKey, username);
        }
        
        private void Write(DateTime instant, int duration, string screen, string sessionId, int espaceId, int tenantId, int userId, string msisdn,
            string screenType, string accessMode, string executedBy, int viewstateBytes, int sessionBytes, int sessionRequests,
            string requestKey, string entryActionName, string clientIp, string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {
            Instant = instant;
            Duration = duration;
            Screen = screen;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Msisdn = msisdn;
            ScreenType = screenType;
            AccessMode = NotNullAccessMode(accessMode);
            ExecutedBy = executedBy;
            ViewstateBytes = viewstateBytes;
            SessionBytes = sessionBytes;
            SessionRequests = sessionRequests;
            RequestKey = requestKey;
            ActionName = entryActionName;
            ClientIP = clientIp;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;

            Write();
        }

        public void Write() {
            RuntimeLogger.Log(this);
        }

        public static string NotNullAccessMode(string accessMode) {
            // eSpaces that were not recompiled may send screen logs with log.AccessMode == null
            // In these cases set the mode to Screen
            if (accessMode == null) {
                return "Screen";
            } else {
                return accessMode;
            }
        }
    }
}
