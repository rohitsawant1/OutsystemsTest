/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Diagnostics;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Web;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;

namespace OutSystems.Logging.LogDefinition {
    [Serializable]
    public class ErrorLogDefinition : AbstractLogDefinition {

        public const int MAX_STACK_SIZE = 500000;
        public const int MAX_ENVIRONMENT_INFORMATION_SIZE = 2000;
        public const int MAX_INNER_EXCEPTION_DEPTH = 10;
        public const int MAX_ID_SIZE = 50;
        public const int MAX_SESSION_ID_SIZE = 50;
        public const int MAX_MESSAGE_SIZE = 2000;
        public const int MAX_MODULE_NAME_SIZE = 15;
        public const int MAX_SERVER_SIZE = 50;
        public const int MAX_ENTRYPOINT_NAME = 50;
        public const int MAX_ACTION_NAME = 50;
        public const int MAX_ESPACE_NAME = 50;
        public const int MAX_APPLICATION_NAME = 50;
        public const int MAX_USERNAME = 250;
        public const int THRESHOLD_STACK_SIZE_FLUSH = 100000;
        public const int MAX_STACK_SMALL_STORAGE_SIZE = 2000;
        public const int MAX_STACK_LARGE_STORAGE_SIZE = 500000;

        private string id = Guid.NewGuid().ToString();
        public string Id {
            get { return id; }
            set { id = NormalizeLogField(value, MAX_ID_SIZE); }
        }

        private DateTime instant;
        public DateTime Instant {
            get { return instant; }
            set { instant = NormalizeLogField(value); }
        }

        private string sessionId;
        public string SessionId {
            get { return sessionId ?? string.Empty; }
            set { sessionId = NormalizeLogField(value, MAX_SESSION_ID_SIZE); }
        }

        private int espaceId;
        public int EspaceId {
            get { return espaceId; }
            set { espaceId = NormalizeLogField(value); }
        }

        private int tenantId;
        public int TenantId {
            get { return tenantId; }
            set { tenantId = NormalizeLogField(value); }
        }

        private int userId;
        public int UserId {
            get { return userId; }
            set { userId = NormalizeLogField(value); }
        }

        private string message;
        public string Message {
            get { return message ?? string.Empty; }
            set { message = NormalizeLogField(value, MAX_MESSAGE_SIZE); }
        }

        private string stack;
        public string Stack {
            get { return stack ?? string.Empty; }
            set { stack = NormalizeLogField(value, MAX_STACK_SIZE); }
        }

        private string moduleName;
        public string ModuleName {
            get { return moduleName ?? string.Empty; }
            set { moduleName = NormalizeLogField(value, MAX_MODULE_NAME_SIZE); }
        }

        private string server;
        public string Server {
            get { return server ?? string.Empty; }
            set { server = NormalizeLogField(value, MAX_SERVER_SIZE); }
        }

        private string environmentInformation;
        public string EnvironmentInformation {
            get { return environmentInformation ?? string.Empty; }
            set { environmentInformation = NormalizeLogField(value, MAX_ENVIRONMENT_INFORMATION_SIZE); }
        }

        private string requestKey;
        public string RequestKey {
            get { return requestKey ?? string.Empty; }
            set { requestKey = NormalizeLogField(value, RequestEventDefinition.KEY_MAXSIZE); }
        }

        private string entrypointName;
        public string EntrypointName {
            get { return entrypointName ?? string.Empty; }
            set { entrypointName = NormalizeLogField(value, MAX_ENTRYPOINT_NAME); }
        }

        private string actionName;
        public string ActionName {
            get { return actionName ?? string.Empty; }
            set { actionName = NormalizeLogField(value, MAX_ACTION_NAME); }
        }

        private string eSpaceName;
        public string EspaceName {
            get { return eSpaceName ?? string.Empty; }
            set { eSpaceName = NormalizeLogField(value, MAX_ESPACE_NAME); }
        }

        private string applicationName;
        public string ApplicationName {
            get { return applicationName ?? string.Empty; }
            set { applicationName = NormalizeLogField(value, MAX_APPLICATION_NAME); }
        }

        private ObjectKey applicationKey;
        public ObjectKey ApplicationKey {
            get { return applicationKey; }
            set { applicationKey = value; }
        }

        private string username;
        public string Username {
            get { return username ?? string.Empty; }
            set { username = NormalizeLogField(value, MAX_USERNAME); }
        }

        public static string EnvironmentInformationOverride;

        public ErrorLogDefinition() { }

        public ErrorLogDefinition(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
                                    string stack, string environmentInformation, string moduleName, string server, string requestKey, string actionName, string entryPointName,
                                    string eSpaceName,  string applicationName, ObjectKey applicationKey, string username) : this() {
            Instant = instant;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Message = message;
            Stack = stack;
            EnvironmentInformation = environmentInformation;
            ModuleName = moduleName;
            Server = server;
            RequestKey = requestKey;
            ActionName = actionName;
            EntrypointName = entryPointName;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;
        }

        public ErrorLogDefinition(ErrorLogDefinition obj) :
            this(obj.Instant, obj.SessionId, obj.EspaceId, obj.TenantId, obj.UserId, obj.Message,
                obj.Stack, obj.ModuleName, obj.EnvironmentInformation, obj.Server, obj.RequestKey, obj.ActionName, obj.EntrypointName,
                obj.EspaceName, obj.ApplicationName, obj.ApplicationKey, obj.Username) {
        }

        public override object Clone() {
            return new ErrorLogDefinition(this);
        }

        public void Write(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message, string stack, string environmentInformation,
                            string moduleName, string requestKey, string entrypointName, string actionName,
                            string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {
            Instant = instant;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Message = message;
            Stack = stack;
            ModuleName = moduleName;
            Server = RuntimeEnvironment.MachineName;
            EnvironmentInformation = environmentInformation;
            RequestKey = requestKey;
            EntrypointName = entrypointName;
            ActionName = actionName;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;

            Write();
        }

        private void Write() {
            RuntimeLogger.Log(this);
        }

        public static string StaticWrite(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
            string stack, string environmentInformation, string moduleName,
            string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {
            return StaticWrite(instant, sessionId, espaceId, tenantId, userId, message, stack, environmentInformation, moduleName, "", "", "",
                eSpaceName, applicationName, applicationKey, username);
        }

        public static string StaticWrite(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
                string stack, string moduleName,
                string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {

            return StaticWrite(instant, sessionId, espaceId, tenantId, userId, message, stack, null,
                moduleName, "", "", "", eSpaceName, applicationName, applicationKey, username);
        }

        public static string StaticWrite(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message, string stack,
                                                string environmentInformation, string moduleName, string requestKey, string entrypointName, string actionName,
                                                string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {
            ErrorLogDefinition log = new ErrorLogDefinition(instant, sessionId, espaceId, tenantId, userId, message, stack, environmentInformation, moduleName,
                                                                Environment.MachineName, requestKey, actionName, entrypointName,
                                                                eSpaceName, applicationName, applicationKey, username);
            log.Write();
            return log.Id;
        }

        public static string GetStackEnvironmentInfo(AppInfoForStack info, ContextInfoForStack context) {

            // safely get all environment parameters
            string requestUrl = "", requestMethod = "", requestQuery = "", applicationPath = "", processName = "", processStartTime = "", currentLocale = "", filePath = "", dateFormat = "", dotNetVersion = "", appDomain = "", compiledWithVersion = "", clientIp = "", deviceUuid = "";
            int espaceVersionId = 0, espaceVersion = 0, espaceVersionPublishingId = 0, processId = 0;
            long privateMBytes = 0, virtualMBytes = 0, threadId = 0;
            string threadName = "";

            espaceVersionId = info.espaceVersionId;
            espaceVersion = info.espaceVersion;

            requestUrl = context.requestUrl;
            requestMethod = context.requestMethod;
            requestQuery = context.requestQuery;
            currentLocale = context.currentLocale;
            clientIp = context.clientIp;
            deviceUuid = context.deviceUuid;

            try {
                applicationPath = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
                applicationPath = applicationPath.Replace("Program Files\\OutSystems\\Service Center", "...\\SC")
                                                 .Replace("Program Files\\OutSystems\\Platform Server", "...\\PS")
                                                 .Replace("Program Files\\OutSystems\\Hub Server", "...\\HS");
            } catch { }

            try { privateMBytes = Process.GetCurrentProcess().PrivateMemorySize64 / 1024 / 1024; } catch { }

            try { virtualMBytes = Process.GetCurrentProcess().VirtualMemorySize64 / 1024 / 1024; } catch { }

            try { processId = Process.GetCurrentProcess().Id; } catch { }

            try { processName = Process.GetCurrentProcess().ProcessName; } catch { }

            try { processStartTime = Process.GetCurrentProcess().StartTime.ToUniversalTime().ToString(); } catch { }
            try { threadId = Thread.CurrentThread.ManagedThreadId; } catch { }

            try { threadName = Thread.CurrentThread.Name; } catch { }

            if (context.CurrentExecutionFileName != null) {
                filePath = ScriptableBuiltInFunction.NewLine() + "FilePath: " + applicationPath + context.CurrentExecutionFileName;
            }

            try { dateFormat = FormatInfoLogic.GetOutputDateFormatString(); } catch { }

            try { dotNetVersion = Environment.Version.ToString(); } catch { }

            try { appDomain = AppDomain.CurrentDomain.FriendlyName; } catch { }

            try { compiledWithVersion = Assembly.GetExecutingAssembly().GetName().Version.ToString(); } catch { }

            string environmentInformation;
            if (EnvironmentInformationOverride != null) {
                environmentInformation = EnvironmentInformationOverride; // ScriptableBuiltInFunction.NewLine() + EnvironmentInformationOverride;
            } else {
                environmentInformation =
                    "eSpaceVer: " + espaceVersion + " (Id=" + espaceVersionId + ", PubId=" + espaceVersionPublishingId + ", CompiledWith=" + compiledWithVersion + ")" +
                    ScriptableBuiltInFunction.NewLine() + "RequestUrl: " + requestUrl + " (Method: " + requestMethod + ")" +
                    ScriptableBuiltInFunction.NewLine() + "AppDomain: " + appDomain +
                    ((filePath.IsNullOrEmpty()) ? ScriptableBuiltInFunction.NewLine() + "Path: " + applicationPath : filePath) +
                    ((clientIp.IsNullOrEmpty()) ? "" : (ScriptableBuiltInFunction.NewLine() + "ClientIp: " + clientIp)) +
                    ((deviceUuid.IsNullOrEmpty()) ? "" : (ScriptableBuiltInFunction.NewLine() + deviceUuid)) +
                    ScriptableBuiltInFunction.NewLine() + "Locale: " + currentLocale +
                    ScriptableBuiltInFunction.NewLine() + "DateFormat: " + dateFormat +
                    ScriptableBuiltInFunction.NewLine() + "PID: " + processId + " ('" + processName + "', Started='" + processStartTime + "', Priv=" + privateMBytes + "Mb, Virt=" + virtualMBytes + "Mb)" +
                    ScriptableBuiltInFunction.NewLine() + "TID: " + threadId +
                    ScriptableBuiltInFunction.NewLine() + "Thread Name: " + threadName +
                    ScriptableBuiltInFunction.NewLine() + ".NET: " + dotNetVersion;
            }

            return environmentInformation;
        }

        public static string LogApplicationError(Exception excep, string moduleName) {
            return LogApplicationError(DateTime.Now, excep.Message, excep, moduleName, null, new AppInfoForStack(), new ContextInfoForStack());
        }

        public static string LogApplicationError(string message, string stackTrace, string moduleName) {
            return LogApplicationError(DateTime.Now, message, null, moduleName, stackTrace, new AppInfoForStack(), new ContextInfoForStack());
        }

        public static string LogApplicationError(int espaceId, int tenantId, string message, Exception excep, string moduleName) {
            var infoForStack = new AppInfoForStack {
                espaceId = espaceId,
                tenantId = tenantId
            };
            return LogApplicationError(DateTime.Now, message, excep, moduleName, excep.StackTrace, infoForStack, new ContextInfoForStack());
        }

        public static string LogApplicationError(DateTime instant, string message, Exception excep, string moduleName, string stackTrace, AppInfoForStack info, ContextInfoForStack context) {
            try {
                if ((excep is HttpException) && ((excep.Message != null) && excep.Message.StartsWith("Error executing child request")) && (excep.InnerException != null)) {
                    excep = excep.InnerException;
                }

                if (stackTrace != null) {
                    stackTrace = stackTrace.Replace(Environment.NewLine, ScriptableBuiltInFunction.NewLine());
                }

                string environmentInformation = GetStackEnvironmentInfo(info, context);
                string extraDetailMessage = "";

                // try to generate full stack of the exception to see if we can fit all inner exceptions in a single error entry
                int countExceptions = 1;
                if (excep != null && excep.InnerException != null) {
                    stackTrace = GenerateFullStack(excep, out countExceptions);
                }

                StringBuilder stack = new StringBuilder();

                // create an error message dumping MAX_INNER_EXCEPTION_DEPTH inner exceptions if no stactTrace is provided
                int maxretries = (stackTrace != null) ? 1 : MAX_INNER_EXCEPTION_DEPTH;
                while ((excep != null && maxretries-- > 0) || stackTrace != null) {
                    extraDetailMessage = string.Empty;
                    if (stackTrace != null) {
                        stack.Append(stackTrace); // if we are given the stacktrace as a whole, assume the message is also set or included
                        stackTrace = null;
                    } else if (excep.StackTrace != null) {
                        if (message.IsEmpty()) {
                            message = excep.Message ?? string.Empty;
                        } else if (excep != null && excep.Message != null && !message.Contains(excep.Message)) {
                            extraDetailMessage = excep.Message + ScriptableBuiltInFunction.NewLine();
                        }

                        if (!message.IsEmpty()) {
                            stack.AppendLine(message);
                        }

                        if (!extraDetailMessage.IsEmpty()) {
                            stack.AppendLine(extraDetailMessage);
                        }

                        stack.Append(excep.StackTrace.Replace(Environment.NewLine, ScriptableBuiltInFunction.NewLine()));
                    }

                    // advance to the next inner exception    
                    if (excep != null) {
                        excep = excep.InnerException;
                    }
                }

                // log dumped inner exceptions stack trace
                return ErrorLogDefinition.StaticWrite(instant, context.sessionId, info.espaceId, info.tenantId, context.userId, message, stack.ToString(),
                    environmentInformation, moduleName, context.requestKey, context.entryPointName, context.actionName,
                    info.eSpaceName, info.applicationName, info.applicationKey, context.username);
            } catch (Exception writeErrorException) {
                try {
                    ErrorLogDefinition.StaticWrite(DateTime.Now, context.sessionId, info.espaceId, info.tenantId, context.userId,
                            "Exception in Global.LogError:" + ScriptableBuiltInFunction.NewLine() + writeErrorException.Message,
                            writeErrorException.StackTrace, "Global", info.eSpaceName, info.applicationName, info.applicationKey, context.username);
                } catch { }
            }
            return String.Empty;
        }

        public static string GenerateFullStack(Exception excep, out int countExceptions) {
            string result = "";
            countExceptions = 0;
            bool hasInnerException = (excep.InnerException != null);

            int maxretries = MAX_INNER_EXCEPTION_DEPTH;
            while (excep != null && maxretries-- > 0) {
                result += (result.Length > 0 ? ScriptableBuiltInFunction.NewLine() : "") +
                    (hasInnerException ? "[" + (countExceptions + 1) + "] " : "") + ExceptionMessageNormalized(excep) +
                    ScriptableBuiltInFunction.NewLine() + (!excep.StackTrace.IsNullOrEmpty() ? excep.StackTrace.Replace(Environment.NewLine, ScriptableBuiltInFunction.NewLine()) : "") + ScriptableBuiltInFunction.NewLine();
                excep = excep.InnerException;
                countExceptions++;
            }
            return result;
        }

        private static string ExceptionMessageNormalized(Exception excep) {
            return (excep.Message ?? "");
        }


        public struct AppInfoForStack {
            public int espaceId;
            public int tenantId;
            public int espaceVersion;
            public int espaceVersionId;
            public string eSpaceName;
            public string applicationName;
            public ObjectKey applicationKey;
            public string username;
        }


        public struct ContextInfoForStack {
            //Session
            public int userId;
            public string username;
            public string sessionId;

            // RequestTrace
            public string requestKey;
            public string actionName;
            public string entryPointName;
            public string requestUrl;
            public string requestMethod;
            public string requestQuery;
            public string currentLocale;
            public string clientIp;
            public string deviceUuid;

            public string CurrentExecutionFileName { get; set; }
        }
    }
}
