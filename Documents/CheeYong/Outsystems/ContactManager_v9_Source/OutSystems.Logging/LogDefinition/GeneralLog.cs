/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;

namespace OutSystems.Logging.LogDefinition {
    //THIS IS DUPLICATED FROM RuntimePlatform
    public enum GeneralLogType {
        DUMMY,
        INFO,
        ERROR,
        WARNING,
        USER
    }


    [Serializable]
    public class GeneralLogDefinition : AbstractLogDefinition {

        private DateTime instant;
        public DateTime Instant {
            get { return instant; }
            set { instant = NormalizeLogField(value); }
        }


        private string sessionId;
        public string SessionId {
            get { return sessionId ?? string.Empty; }
            set { sessionId = NormalizeLogField(value, MAX_SESSION_ID_SIZE); }
        }

        private int espaceId;
        public int EspaceId {
            get { return espaceId; }
            set { espaceId = NormalizeLogField(value); }
        }

        private int tenantId;
        public int TenantId {
            get { return tenantId; }
            set { tenantId = NormalizeLogField(value); }
        }

        private int userId;
        public int UserId {
            get { return userId; }
            set { userId = NormalizeLogField(value); }
        }

        private string message;
        public string Message {
            get { return message ?? string.Empty; }
            set { message = NormalizeLogField(value, MAX_MESSAGE_SIZE); }
        }

        private string messageType;
        public string MessageType {
            get { return messageType ?? GeneralLogType.DUMMY.ToString(); }
            set { messageType = NormalizeLogField(value, MAX_MESSAGE_SIZE); }
        }

        private string moduleName;
        public string ModuleName {
            get { return moduleName ?? string.Empty; }
            set { moduleName = NormalizeLogField(value, MAX_MODULE_NAME_SIZE); }
        }

        private string errorId;
        public string ErrorId {
            get { return errorId ?? string.Empty; }
            set { errorId = NormalizeLogField(value, MAX_ERROR_ID_SIZE); }
        }

        private string requestKey;
        public string RequestKey {
            get { return requestKey ?? Guid.Empty.ToString(); }
            set { requestKey = NormalizeLogField(value, MAX_REQUEST_KEY_SIZE); }
        }

        private string entrypointName;
        public string EntrypointName {
            get { return entrypointName ?? string.Empty; }
            set { entrypointName = NormalizeLogField(value, MAX_ENTRYPOINT_NAME); }
        }

        private string actionName;
        public string ActionName {
            get { return actionName ?? string.Empty; }
            set { actionName = NormalizeLogField(value, MAX_ACTION_NAME); }
        }

        private string clientIP;
        public string ClientIP {
            get { return clientIP ?? string.Empty; }
            set { clientIP = NormalizeLogField(value, MAX_CLIENT_IP_SIZE); }
        }

        private string eSpaceName;
        public string EspaceName {
            get { return eSpaceName ?? string.Empty; }
            set { eSpaceName = NormalizeLogField(value, MAX_ESPACE_NAME); }
        }

        private string applicationName;
        public string ApplicationName {
            get { return applicationName ?? string.Empty; }
            set { applicationName = NormalizeLogField(value, MAX_APPLICATION_NAME); }
        }

        private ObjectKey applicationKey;
        public ObjectKey ApplicationKey {
            get { return applicationKey; }
            set { applicationKey = value; }
        }

        private string username;
        public string Username {
            get { return username ?? string.Empty; }
            set { username = NormalizeLogField(value, MAX_USERNAME); }
        }



        public const int MAX_ACTION_NAME = 50;
        public const int MAX_ENTRYPOINT_NAME = 50;
        public const int MAX_SESSION_ID_SIZE = 50;
        public const int MAX_MESSAGE_SIZE = 2000;
        public const int MAX_MESSAGE_TYPE_SIZE = 10;
        public const int MAX_MODULE_NAME_SIZE = 15;
        public const int MAX_ERROR_ID_SIZE = 50;
        public const int MAX_CLIENT_IP_SIZE = 1000;
        public const int MAX_ESPACE_NAME = 50;
        public const int MAX_APPLICATION_NAME = 50;
        public const int MAX_USERNAME = 250;


        public GeneralLogDefinition() {
        }

        public GeneralLogDefinition(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message,
                                    string messageType, string moduleName, string errorId, string requestKey, string actionName, 
                                    string entryPointName, string clientIp, string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {
            Instant = instant;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Message = message;
            MessageType = messageType;
            ModuleName = moduleName;
            ErrorId = errorId;
            RequestKey = requestKey;
            ActionName = actionName;
            EntrypointName = entryPointName;
            ClientIP = clientIp;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;
        }


        public GeneralLogDefinition(GeneralLogDefinition obj) :
            this(obj.Instant, obj.SessionId, obj.EspaceId, obj.TenantId, obj.UserId, obj.Message, obj.MessageType, 
                obj.ModuleName, obj.ErrorId, obj.RequestKey, obj.ActionName, obj.EntrypointName, obj.ClientIP,
                obj.EspaceName, obj.ApplicationName, obj.ApplicationKey, obj.Username) { 
        }

        public override object Clone() {
            return new GeneralLogDefinition(this);
        }

        public void Write(DateTime instant, string sessionId, int espaceId, int tenantId, int userId, string message, string messageType, 
            string moduleName, string errorId, string requestKey, string actionName, string entryEndpointName, string clientIp,
            string eSpaceName, string applicationName, ObjectKey applicationKey, string username) {

            Instant = instant;
            SessionId = sessionId;
            EspaceId = espaceId;
            TenantId = tenantId;
            UserId = userId;
            Message = message;
            MessageType = messageType;
            ModuleName = moduleName;
            ErrorId = errorId;
            RequestKey = requestKey;
            ActionName = actionName;
            EntrypointName = entryEndpointName;
            ClientIP = clientIp;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;

            Write();
        }

        public void Write() {
            RuntimeLogger.Log(this);
        }

        public static void StaticWrite(DateTime instant, string message, string messageType, string moduleName, string errorId = "") {
            StaticWrite(instant, sessionId: "", espaceId: 0, tenantId: 0, userId: 0, message: message, messageType: messageType, moduleName: moduleName, errorId: errorId);
        }

        public static void StaticWrite(DateTime instant, string sessionId, int espaceId, int tenantId, int userId,
            string message, string messageType, string moduleName, string errorId = "") {

            GeneralLogDefinition log = new GeneralLogDefinition();
            log.Write(instant, sessionId, espaceId, tenantId, userId, message, messageType, moduleName, errorId, "", "", "", "",
                "", "", ObjectKey.Dummy, "");
        }
    }
}
