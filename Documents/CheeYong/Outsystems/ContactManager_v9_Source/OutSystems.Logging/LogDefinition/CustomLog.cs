/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;

namespace OutSystems.Logging.LogDefinition {
    [Serializable]
    public class CustomLogDefinition : AbstractLogDefinition {

        [Serializable()]
        public class CustomLogFieldDefinition {
            public object Value;
            public bool IsEntityReference;
            public bool IsMandatory;

            public CustomLogFieldDefinition(object value, bool isEntityReference, bool isMandatory) {
                Value = value;
                IsEntityReference = isEntityReference;
                IsMandatory = isMandatory;
            }
        }

        public string PhysicalTableName { get; private set; }
        public string EntityName { get; private set; }
        public int EntityGeneration { get; private set; }
        public string DBConnection { get; private set; }
        public string DbCatalog { get; private set; }
        public IDictionary<string, CustomLogFieldDefinition> Fields { get; private set; }

        public CustomLogDefinition() {

        }

        public CustomLogDefinition(string entityName, string physicalTableName, int entityGeneration, string dbConnection, string dbCatalog) {
            this.EntityName = entityName;
            this.PhysicalTableName = physicalTableName;
            this.EntityGeneration = entityGeneration;
            this.DBConnection = dbConnection;
            this.DbCatalog = dbCatalog;
            this.Fields = new Dictionary<string, CustomLogFieldDefinition>(50);
        }

        public override object Clone() {
            return new CustomLogDefinition() {
                PhysicalTableName = this.PhysicalTableName,
                EntityName = this.EntityName,
                EntityGeneration = this.EntityGeneration,
                DBConnection = this.DBConnection,
                DbCatalog = this.DbCatalog,
                Fields = new Dictionary<string, CustomLogFieldDefinition>(this.Fields)
            };
        }

        public void Write() {
            RuntimeLogger.Log(this);
        }
    }
}
