/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;

namespace OutSystems.Logging.LogDefinition {
    [Serializable]
    public class RequestEventDefinition : AbstractLogDefinition {
        public const int KEY_MAXSIZE = 36;
        public const int NAME_MAXSIZE = 50;
        public const int DETAILS_MAXSIZE = 2000;

        public DateTime Instant { get; private set; }
        public string ModuleKey { get; private set; }
        public string ModuleName { get; private set; }
        public string ApplicationKey { get; private set; }
        public string ApplicationName { get; private set; }
        public string RequestKey { get; set; }
        public string RequestEventName { get; set; }

        private string _eventDetails;
        public string EventDetails {
            get {
                return _eventDetails.IsEmpty() ? "{}" : _eventDetails;
            }
            private set {
                _eventDetails = value;
            }
        }

        public bool Contains(string name, string value) {
            return EventDetails.IndexOf("\"" + name + "\":\"" + value + "\"") != -1;
        }

        public bool ExistsInEventDetails(string name) {
            return EventDetails.IndexOf("\"" + name + "\":\"") != -1;
        }

        public RequestEventDefinition() { }

        public RequestEventDefinition(DateTime Instant, string RequestKey, string RequestEventDefinitionName, string ModuleKey, string ModuleName, string ApplicationKey, string ApplicationName, string EventDetails) {
            this.Instant = Instant;
            this.RequestKey = RequestKey;
            this.RequestEventName = RequestEventDefinitionName;
            this.ModuleKey = ModuleKey;
            this.ModuleName = ModuleName;
            this.ApplicationKey = ApplicationKey;
            this.ApplicationName = ApplicationName;
            this.EventDetails = EventDetails;
        }

        public RequestEventDefinition(RequestEventDefinition obj) : 
            this(obj.Instant, obj.RequestKey, obj.RequestEventName, obj.ModuleKey, obj.ModuleName, 
                obj.ApplicationKey, obj.ApplicationName, obj.EventDetails) {
        }

        public override object Clone() {
            return new RequestEventDefinition(this);
        }

        public static void StaticWrite(DateTime Instant, string RequestKey, string RequestEventDefinitionName, string ModuleKey, string ModuleName, string ApplicationKey, string ApplicationName, string EventDetails) {
            RequestEventDefinition log = new RequestEventDefinition(Instant, RequestKey, RequestEventDefinitionName, ModuleKey, ModuleName, ApplicationKey, ApplicationName, EventDetails);
            log.Write();
        }

        public void Write() {
            RuntimeLogger.Log(this);
        }
    }
}
