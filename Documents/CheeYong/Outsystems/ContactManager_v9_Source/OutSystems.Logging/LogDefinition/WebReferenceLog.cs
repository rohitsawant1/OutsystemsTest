/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;

namespace OutSystems.Logging.LogDefinition {
    [Serializable]
    public class WebReferenceLogDefinition : AbstractLogDefinition {

        public DateTime Instant;
        public int Duration;
        public string URL;
        public string Method;
        public int EspaceId;
        public int TenantId;
        public string Executed_By;
        public string ErrorId;
        public string IntegrationLogId;

        public WebReferenceLogDefinition() {
        }


        public WebReferenceLogDefinition(DateTime instant, int duration, string url, string method, int espaceId, int tenantId, string executed_by, string errorId, string integrationLogId) {
            Instant = instant;
            Duration = duration;
            URL = url;
            Method = method;
            EspaceId = espaceId;
            TenantId = tenantId;
            Executed_By = executed_by;
            ErrorId = errorId;
            IntegrationLogId = integrationLogId;
        }

        public WebReferenceLogDefinition(DateTime instant, int duration, string url, string method, int espaceId, int tenantId, string executed_by, string errorId) {
            Instant = instant;
            Duration = duration;
            URL = url;
            Method = method;
            EspaceId = espaceId;
            TenantId = tenantId;
            Executed_By = executed_by;
            ErrorId = errorId;
            IntegrationLogId = string.Empty;
        }

        public WebReferenceLogDefinition(WebReferenceLogDefinition obj) {
            Instant = obj.Instant;
            Duration = obj.Duration;
            URL = obj.URL;
            Method = obj.Method;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            Executed_By = obj.Executed_By;
            ErrorId = obj.ErrorId;
            IntegrationLogId = obj.IntegrationLogId;
        }

        public override object Clone() {
            return new WebReferenceLogDefinition(this);
        }


        public static void StaticWrite(DateTime instant, int duration, string url, string method, int espaceId, int tenantId,
                                        string executed_by, string errorId) {
            StaticWrite(instant, duration, url, method, espaceId, tenantId, executed_by, errorId, string.Empty);
        }


        public static void StaticWrite(DateTime instant, int duration, string url, string method, int espaceId, int tenantId,
            string executed_by, string errorId, string integrationLogId) {

            WebReferenceLogDefinition log = new WebReferenceLogDefinition();
            log.Write(instant, duration, url, method, espaceId, tenantId, executed_by, errorId, integrationLogId);
        }

        public void Write(DateTime instant, int duration, string url, string method, int espaceId, int tenantId, string executed_by,
                            string errorId, string integrationLogId) {
            Instant = instant;
            Duration = duration;
            URL = url;
            Method = method;
            EspaceId = espaceId;
            TenantId = tenantId;
            Executed_By = executed_by;
            ErrorId = errorId;
            IntegrationLogId = integrationLogId;
            Write();
        }


        public void Write(DateTime instant, int duration, string url, string method, int espaceId, int tenantId,
            string executed_by, string errorId) {
            Instant = instant;
            Duration = duration;
            URL = url;
            Method = method;
            EspaceId = espaceId;
            TenantId = tenantId;
            Executed_By = executed_by;
            ErrorId = errorId;
            IntegrationLogId = string.Empty;
            Write();
        }

        public void Write() {
        }

    }
}
