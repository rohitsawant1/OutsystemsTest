/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;

namespace OutSystems.Logging.LogDefinition {

    [Serializable]
    public class ExtensionLogDefinition : AbstractLogDefinition {

        public DateTime Instant;
        public int Duration;
        public string Action_Name;
        public string SessionId;
        public int UserId;
        public int EspaceId;
        public int TenantId;
        public int Extension_Id;
        public string ExecutedBy;
        public string ErrorId;
        public string RequestKey;
        public string EspaceName;
        public string ExtensionName;
        public string ApplicationName;
        public ObjectKey ApplicationKey;
        public string Username;

        public const int MAX_ACTION_NAME_SIZE = 50;
        public const int MAX_SESSION_ID_SIZE = 50;
        public const int MAX_EXECUTED_BY_SIZE = 50;
        public const int MAX_ERROR_ID_SIZE = 50;


        public ExtensionLogDefinition() { }

        public ExtensionLogDefinition(ExtensionLogDefinition obj) : 
            this(obj.Instant, obj.Duration, obj.Action_Name, obj.SessionId, obj.UserId, obj.EspaceId, 
                obj.TenantId, obj.Extension_Id, obj.ExecutedBy, obj.ErrorId, obj.RequestKey,
                obj.EspaceName, obj.ExtensionName, obj.ApplicationName, obj.ApplicationKey, obj.Username) { 
        }

        public ExtensionLogDefinition(DateTime instant, int duration, string action_name, string sessionId, int espaceId, int tenantId,
                                        int userId, int extensionId, string executedBy, string errorId, string requestKey,
                                        string eSpaceName, string extensionName, string applicationName, ObjectKey applicationKey, string username) {
            Instant = instant;
            Duration = duration;
            Action_Name = action_name?.Left(MAX_ACTION_NAME_SIZE) ?? string.Empty;
            SessionId = sessionId?.Left(MAX_SESSION_ID_SIZE) ?? string.Empty;
            UserId = userId;
            EspaceId = espaceId;
            TenantId = tenantId;
            Extension_Id = extensionId;
            ExecutedBy = executedBy?.Left(MAX_EXECUTED_BY_SIZE) ?? string.Empty;
            ErrorId = errorId?.Left(MAX_ERROR_ID_SIZE) ?? string.Empty;
            RequestKey = requestKey;
            EspaceName = eSpaceName;
            ExtensionName = extensionName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;
        }

        public override object Clone() {
            return new ExtensionLogDefinition(this);
        }

        public void Write(DateTime instant, int duration, string action_name, string sessionId, int espaceId,
                            int tenantId, int userId, int extensionId, string executedBy, string errorId, string requestKey,
                            string eSpaceName, string extensionName, string applicationName, ObjectKey applicationKey, string username) {
            Instant = instant;
            Duration = duration;
            Action_Name = action_name?.Left(MAX_ACTION_NAME_SIZE) ?? string.Empty;
            SessionId = sessionId?.Left(MAX_SESSION_ID_SIZE) ?? string.Empty;
            UserId = userId;
            EspaceId = espaceId;
            TenantId = tenantId;
            Extension_Id = extensionId;
            ExecutedBy = executedBy?.Left(MAX_EXECUTED_BY_SIZE) ?? string.Empty;
            ErrorId = errorId?.Left(MAX_ERROR_ID_SIZE) ?? string.Empty;
            RequestKey = requestKey;
            EspaceName = eSpaceName;
            ExtensionName = extensionName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
            Username = username;

            Write();
        }

        public void Write() {
            RuntimeLogger.Log(this);
        }
        
        public static void StaticWrite(DateTime instant, int duration, string action_name, string sessionId, int espaceId, int tenantId,
            int userId, int extensionId, string executedBy, string errorId, string requestKey,
            string eSpaceName, string extensionName, string applicationName, ObjectKey applicationKey, string username) {

            ExtensionLogDefinition log = new ExtensionLogDefinition(instant, duration, action_name, sessionId, espaceId, tenantId, userId, 
                extensionId, executedBy, errorId, requestKey, eSpaceName, extensionName, applicationName, applicationKey, username);
            log.Write();
        }
    }
}
