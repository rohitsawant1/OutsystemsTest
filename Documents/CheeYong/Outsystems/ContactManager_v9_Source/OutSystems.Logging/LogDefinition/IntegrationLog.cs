/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OutSystems.ObjectKeys;

namespace OutSystems.Logging.LogDefinition {
    [Serializable]
    public class IntegrationLogDefinition : AbstractLogDefinition {
        public string Id;
        public DateTime Instant;
        public int Duration;
        public string Source;
        public string Endpoint;
        public string Action;
        public string Type;
        public int EspaceId;
        public int TenantId;
        public string ErrorId;
        public string ExecutedBy;
        public bool IsExpose;
        public string RequestKey;
        public string EspaceName;
        public string ApplicationName;
        public ObjectKey ApplicationKey;

        public const int MAX_ID_SIZE = 50;
        public const int MAX_SOURCE_SIZE = 1000;
        public const int MAX_ENDPOINT_SIZE = 1000;
        public const int MAX_ACTION_SIZE = 100;
        public const int MAX_TYPE_SIZE = 50;
        public const int MAX_ERROR_ID_SIZE = 50;


        public IntegrationLogDefinition() {
        }

        public IntegrationLogDefinition(string id, DateTime instant, int duration, string source, string endpoint, string action, string type,
            int espaceId, int tenantId, string errorId, string executedBy, bool isExpose, string requestKey,
            string eSpaceName, string applicationName, ObjectKey applicationKey) {
            Id = id;
            Instant = instant;
            Duration = duration;
            Source = source;
            Endpoint = endpoint;
            Action = action;
            Type = type;
            EspaceId = espaceId;
            TenantId = tenantId;
            ErrorId = errorId;
            ExecutedBy = executedBy;
            IsExpose = isExpose;
            RequestKey = requestKey;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;
        }



        public IntegrationLogDefinition(IntegrationLogDefinition obj) {
            Id = GenerateLogId();
            Instant = obj.Instant;
            Duration = obj.Duration;
            Source = obj.Source;
            Endpoint = obj.Endpoint;
            Action = obj.Action;
            Type = obj.Type;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            ErrorId = obj.ErrorId;
            ExecutedBy = obj.ExecutedBy;
            IsExpose = obj.IsExpose;
            RequestKey = obj.RequestKey;
        }

        public IntegrationLogDefinition(WebServiceLogDefinition obj) {
            Id = GenerateLogId();
            Instant = obj.Instant;
            Duration = obj.Duration;
            Source = obj.Client_IP;
            Endpoint = String.Empty;
            Action = obj.Method;
            Type = String.Empty;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            ErrorId = obj.ErrorId;
            ExecutedBy = obj.ExecutedBy;
            IsExpose = true;
        }

        public IntegrationLogDefinition(WebReferenceLogDefinition obj) {
            Id = GenerateLogId();
            Instant = obj.Instant;
            Duration = obj.Duration;
            Source = String.Empty;
            Endpoint = obj.URL;
            Action = obj.Method;
            Type = String.Empty;
            EspaceId = obj.EspaceId;
            TenantId = obj.TenantId;
            ErrorId = obj.ErrorId;
            ExecutedBy = obj.Executed_By;
            IsExpose = false;
        }

        public override object Clone() {
            return new IntegrationLogDefinition(this);
        }

        public void Write(string id, DateTime instant, int duration, string source, string endpoint, string action, string type,
            int espaceId, int tenantId, string errorId, string executedBy, bool isExpose, string requestKey,
            string eSpaceName, string applicationName, ObjectKey applicationKey) {

            Id = id;
            Instant = instant;
            Duration = duration;
            Source = source;
            Endpoint = endpoint;
            Action = action;
            Type = type;
            EspaceId = espaceId;
            TenantId = tenantId;
            ErrorId = errorId;
            ExecutedBy = executedBy;
            IsExpose = isExpose;
            RequestKey = requestKey;
            EspaceName = eSpaceName;
            ApplicationName = applicationName;
            ApplicationKey = applicationKey;

            Write();
        }

        public void Write() {
            RuntimeLogger.Log(this);
        }

        public static string StaticWrite(DateTime instant, int duration, string source, string endpoint, string action, string type,
            int espaceId, int tenantId, string errorId, string executedBy, bool isExpose, string requestKey,
            string eSpaceName, string applicationName, ObjectKey applicationKey) {

            IntegrationLogDefinition log = new IntegrationLogDefinition();
            log.Write(GenerateLogId(), instant, duration, source, endpoint, action, type, espaceId, tenantId, errorId, executedBy, isExpose, requestKey,
                eSpaceName, applicationName, applicationKey);
            return log.Id;
        }

        public static string GenerateLogId() {
            return Guid.NewGuid().ToString();
        }
    }
}
