/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using OutSystems.Internal.REST;

namespace OutSystems.RuntimePublic.REST {


    /// <summary>
    /// Provides access to the HTTP response object received when consuming a REST API method.
    /// </summary>
    public class RestResponse {

        private ResponseContext responseContext;
        private RestResponse(ResponseContext responseContext) {
            this.responseContext = responseContext;
        }

        /// <summary>
        /// Returns the response object used by a REST API.
        /// This method should only be used inside the OnBeforeResponseAdvanced callback of a REST API.
        /// </summary>
        /// <returns>The REST API response, or null when used outside the OnBeforeResponseAdvanced callback.</returns>
        public static RestResponse GetCurrent() {
            var responseContext = ResponseContext.GetCurrent();
            if (responseContext != null) {
                return new RestResponse(responseContext);
            } else {
                return null; // not inside of an OnBeforeResponseAdvanced callback.
            }            
        }


        /// <summary>
        /// Returns the name of the REST API Method that invoked the extension.
        /// </summary>
        public string GetActionName() {
            return responseContext.GetActionName();
        }


        /// <summary>
        /// Returns the native HttpWebResponse object that resulted from the web request.
        /// </summary>
        public HttpWebResponse GetHttpWebResponse() {
            return responseContext.GetHttpWebResponse();
        }


        /// <summary>
        /// Returns the message body of the web response as binary content.
        /// </summary>
        public byte[] GetResponseBodyAsBinary() {
            return responseContext.GetBinary();
        }


        /// <summary>
        /// Returns the message body of the web response as a string, respecting the encoding specified in the Content-Type header.
        /// </summary>
        public string GetResponseBodyAsText() {
            return responseContext.GetText();
        }


        /// <summary>
        /// Sets the message body of the web response.
        /// </summary>
        /// <param name="bytes">The body of the web request.</param>        
        public void SetResponseBody(byte[] bytes) {
            responseContext.SetBinary(bytes);
        }


        /// <summary>
        /// Sets the message body of the web response.
        /// If the REST API Method has its 'Request Format' property set to 'Binary', no changes are made
        /// to the message body.
        /// </summary>
        /// <param name="text">The body of the web request.</param>
        public void SetResponseBody(string text) {
            responseContext.SetText(text);
        }

        /// <summary>
        /// Returns the status code of the web response.
        /// </summary>
        public int GetResponseStatusCode() {
            return responseContext.GetStatusCode();
        }

        /// <summary>
        /// Sets the status code of the web response with statusCode.
        /// </summary>
        /// <param name="statusCode">The status code of the web response.</param>
        public void SetResponseStatusCode(int statusCode) {
            responseContext.SetStatusCode(statusCode);
        }

        /// <summary>
        /// Returns the status line of the web response.
        /// </summary>
        public string GetResponseStatusLine() {
            return responseContext.GetStatusLine();
        }

        /// <summary>
        /// Sets the status line of the web response with statusLine.
        /// </summary>
        /// <param name="statusLine">The status line of the web response.</param>
        public void SetResponseStatusLine(string statusLine) {
            responseContext.SetStatusLine(statusLine);
        }

        /// <summary>
        /// Returns the headers of the web response. It's possible to add, change or remove headers.
        /// </summary>
        public IDictionary<string, string> GetResponseHeaders() {
            return responseContext.GetHeaders();
        }
    }
}
