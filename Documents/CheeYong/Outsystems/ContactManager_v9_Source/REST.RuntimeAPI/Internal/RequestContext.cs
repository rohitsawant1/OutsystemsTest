/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Net;
using System.Text;
using System.Linq;

namespace OutSystems.Internal.REST {

    /// <summary>
    /// Internal class used to store the context of a Rest Request.
    /// Should never be used directly. Use the OutSystems.RuntimePublic.REST.RestRequest class instead.
    /// </summary>
    public class RequestContext : IDisposable {

        [ThreadStatic]
        private static RequestContext currentContext;
        private RequestContext previousContext = null;

        private readonly string actionName;
        private HttpWebRequest httpRequest = null;
        private string requestBodyAsText = null;
        private byte[] requestBodyAsBinary = null;
        private string requestURL = null;
        private IDictionary<string, string> requestHeaders = null;
        private string requestMethod = null;
        private int requestTimeout;

        /// <summary>
        /// Constructor for RequestContext.
        /// This class is for internal use only. Use the OutSystems.RuntimePublic.REST.RestRequest class instead.
        /// </summary>
        /// <param name="actionName"></param>
        /// <param name="url"></param>
        /// <param name="requestMethod"></param>
        /// <param name="requestTimeout"></param>
        public RequestContext(string actionName, string url, string requestMethod, int requestTimeout) {
            this.previousContext = RequestContext.currentContext;
            RequestContext.currentContext = this;

            this.actionName = actionName;
            this.requestURL = url;
            this.requestMethod = requestMethod;
            this.requestTimeout = requestTimeout;
			this.requestHeaders = new Dictionary<string, string>();
            
            // create request
            this.httpRequest = BuildHttpWebRequest(url);
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose() {
            RequestContext.currentContext = previousContext;
        }

        internal static RequestContext GetCurrent() {
            return RequestContext.currentContext;
        }

        /// <summary>
        /// Returns the name of the REST API Method that invoked the extension.
        /// </summary>
        public string GetActionName() {
            return actionName;
        }

        /// <summary>
        /// Returns the HttpWebRequest object with the currently parameters.
        /// </summary>
        public HttpWebRequest GetHttpWebRequest() {
            foreach (var header in requestHeaders) {
                OutSystems.REST.HttpHelper.SetRequestHeader(httpRequest, header.Key, header.Value);
            }

            return httpRequest;
        }

        private static readonly Encoding DefaultRequestEncoding = System.Text.Encoding.UTF8;

        private Encoding GetRequestEncoding() {
            return DefaultRequestEncoding;
        }

        /// <summary>
        /// Returns the message body of the web request as a UTF-8 string.
        /// </summary>
        public string GetText() {
            if (requestBodyAsText == null && requestBodyAsBinary != null) {
                try {
                    requestBodyAsText = GetRequestEncoding().GetString(requestBodyAsBinary);
                } catch {
                    // Unable to c.onvert the byte[] into a string from UTF8, leave it null
                }
            }
            return requestBodyAsText;
        }

        /// <summary>
        /// Sets the message body of the web request.
        /// If the REST API Method has its 'Request Format' property set to 'Binary', no changes are made
        /// to the message body.
        /// </summary>
        /// <param name="text">The body of the web request.</param>
        public void SetText(string text) {
            this.requestBodyAsText = text;
            this.requestBodyAsBinary = null;
        }

        /// <summary>
        /// Returns the message body of the web request as binary content.
        /// </summary>
        public byte[] GetBinary() {
            if (requestBodyAsBinary == null && requestBodyAsText != null) {
                requestBodyAsBinary = GetRequestEncoding().GetBytes(requestBodyAsText);
            }
            return requestBodyAsBinary;
        }

        /// <summary>
        /// Sets the message body of the web request with binary content.
        /// </summary>
        /// <param name="bytes">The body of the web request.</param>
        public void SetBinary(byte[] bytes) {
            requestBodyAsBinary = bytes;
            requestBodyAsText = null;
        }

        /// <summary>
        /// Gets the request url of web request.
        /// </summary>
        public string GetRequestURL() {
            return requestURL;
        }

        /// <summary>
        /// Sets the request url and rebuild the HttpWebRequest object with the new URL.
        /// </summary>
        public void SetRequestURL(string url) {
            requestURL = url;
            httpRequest = BuildHttpWebRequest(url);
        }

        /// <summary>
        /// Returns the headers of the web request.
        /// </summary>
        public IDictionary<string, string> GetHeaders() {
            foreach (var item in httpRequest.Headers.AllKeys) {
                if (requestHeaders.ContainsKey(item)) {
                    requestHeaders[item] = httpRequest.Headers[item];
                } else {
                    requestHeaders.Add(item, httpRequest.Headers[item]);
                }
            }

            return requestHeaders;
        }

        private HttpWebRequest BuildHttpWebRequest(string url) {
            var httpRequest = (HttpWebRequest)HttpWebRequest.Create(url);
            httpRequest.Method = requestMethod;
            httpRequest.Timeout = requestTimeout;

            return httpRequest;
        }
    }
}