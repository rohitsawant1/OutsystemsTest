/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Data;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.TransactionService {

    /// <summary>
    /// Database service that handles connection and transaction management to a access a database.
    /// </summary>
    public interface ITransactionService {

        /// <summary>
        /// Gets the <see cref="IDatabaseServices" /> instance associated with this service.
        /// </summary>
        /// <value>
        /// The database services associated.
        /// </value>
        IDatabaseServices DatabaseServices { get; }

        /// <summary>
        /// Returns a new transaction manager.
        /// </summary>
        /// <returns>The transaction manager.</returns>
        ITransactionManager CreateTransactionManager();

        /// <summary>
        /// Returns a new connection to the database.
        /// </summary>
        /// <returns>The database connection.</returns>
        IDbConnection CreateConnection();

        /// <summary>
        /// Returns a new connection to the database.
        /// </summary>
        /// <param name="numRetries">The number of retries for establishing the connection.</param>
        /// <returns>The database connection.</returns>
        IDbConnection CreateConnection(int numRetries);

        /// <summary>
        /// Checks if it is possible to establish a connection.
        /// </summary>
        /// <param name="errorMessage">Error message raised during the creation of the connection.</param>
        /// <returns>
        /// True if it was established a connection successfully, False otherwise.
        /// </returns>
        bool TestConnection(out string errorMessage);

        /// <summary>
        /// Returns a new transaction for the connection provided.
        /// </summary>
        /// <param name="conn">Connection from which the transaction is created.</param>
        /// <returns>A transaction created from the given connection.</returns>
        IDbTransaction CreateTransaction(IDbConnection conn);

        /// <summary>
        /// Releases all connections in the connection pool.
        /// </summary>
        /// <param name="reason">Reason why the connections will be released.</param>
        void ReleasePooledConnections(string reason);
        
        /// <summary>
        /// Checks if the connection is closed.
        /// </summary>
        /// <param name="connection">A database connection.</param>
        /// <returns>True if the connection is already closed, False otherwise.</returns>
        bool IsClosed(IDbConnection connection);

        /// <summary>
        /// Closes the provided database transaction.
        /// </summary>
        /// <param name="tran">Transaction to be closed.</param>
        void CloseTransaction(IDbTransaction tran);
    }    
}
