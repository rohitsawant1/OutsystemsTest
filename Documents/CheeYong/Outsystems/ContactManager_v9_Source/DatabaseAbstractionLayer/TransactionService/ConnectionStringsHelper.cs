/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Text.RegularExpressions;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.TransactionService {
    public static class ConnectionStringsHelper {
        static readonly Regex _passwordRegex = new Regex(@"(password=\s*)([^ ;]+)(\s*;)", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        static readonly Regex _IntegratedSecuriyRegex = new Regex(@"(integrated security=\s*[^ ;]+\s*;)", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        static readonly Regex _userIdReplaceRegex = new Regex(@"(user id=\s*)([^ ;]+)(\s*;)", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
        static readonly Regex _userIdRegex = new Regex(@"user id=\s*([^ ;]+)\s*;", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);			

        
        public static string ExtractUsername(string connectionString) {
            string dbUserName = "";

            if (connectionString != null) {
                Match m = _userIdRegex.Match(connectionString);

                if (m.Success && m.Groups[1].Success) {
                    dbUserName = m.Groups[1].Value;
                }
            }

            return dbUserName;
        }

        public static string ReplaceUsername(string connectionString, string username) {
            if (username.IsNullOrEmpty()) {
                return connectionString;
            }

            if (connectionString == null) {
                return "";
            }

            return _userIdReplaceRegex.Replace(connectionString, m => {
                return m.Groups[1] + username + m.Groups[3];
            });
            
        }

        public static string ExtractPassword(string connectionString) {
            string password = "";
            if (connectionString != null) {
                Match m = _passwordRegex.Match(connectionString);
                if (m.Success) {
                    if ((m.Groups[2] != null) && (m.Groups[2].Success)) {
                        password = m.Groups[2].Value;
                    }
                }
            }
            return password;
        }

        public static string ReplacePassword(string connectionString, string password) {
            if (password.IsNullOrEmpty()) {
                return connectionString;
            }

            if (connectionString == null) {
                return "";
            }

            if (_IntegratedSecuriyRegex.IsMatch(connectionString)) {
                connectionString = _IntegratedSecuriyRegex.Replace(connectionString, "");
                if (!connectionString.EndsWith(";")) {
                    connectionString += ";";
                }
                return connectionString + "password={0};".F(password);
            } 

            return _passwordRegex.Replace(connectionString, m =>
                    m.Groups[1].Value + password + m.Groups[3].Value
            );
            
        }
    }
}
