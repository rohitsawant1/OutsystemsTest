/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

namespace OutSystems.HubEdition.Extensibility.Data {

    /// <summary>
    /// Base implementation of a class to represent a set of properties that are specific to a database provider.
    /// </summary>
    public abstract class BaseProviderProperties : IProviderProperties {

        /// <summary>
        /// Fills the database provider information.
        /// </summary>
        /// <param name="provider">The database provider.</param>
        protected BaseProviderProperties(IDatabaseProvider provider) {
            DatabaseProvider = provider;
        }

        /// <summary>
        /// This property represents the associated <see cref="IDatabaseProvider" /> instance.
        /// </summary>
        public virtual IDatabaseProvider DatabaseProvider { get; private set; }

        /// <summary>
        /// Gets the friendly name of the database provider.
        /// </summary>
        public abstract string DisplayName { get; }

        /// <summary>
        /// Gets the friendly name of the database provider, when used to run the OutSystems Platform.
        /// </summary>
        public virtual string PlatformDisplayName {
            get { return DisplayName; }
        }

        /// <summary>
        /// Gets the friendly name of the database container (e.g. database, catalog, schema, ...), used 
        /// for UI generation and messages displayed to the end-user.
        /// This implementation return "Database"
        /// </summary>
        public virtual string DatabaseContainerName {
            get { return "database"; }
        }

        /// <summary>
        /// Indicates if the provider's driver supports more than one active result set for a single connection.
        /// This implementation returns true.
        /// </summary>
        public virtual bool SupportsMultipleActiveResultSets {
            get { return true; }
        }
    }
}
