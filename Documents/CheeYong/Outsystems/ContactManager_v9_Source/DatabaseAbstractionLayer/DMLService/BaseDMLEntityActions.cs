/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders;
using System.Collections.Generic;

namespace OutSystems.HubEdition.Extensibility.Data.DMLService {

    /// <summary>
    /// Base implementation of an interface that represents the different kinds of entity actions supported by the platform.
    /// </summary>
    public abstract class BaseDMLEntityActions : IDMLEntityActions {

        protected BaseDMLEntityActions(IDMLService dmlServices, ITableSourceInfo tableSourceInfo) {
            DMLService = dmlServices;
            TableSourceInfo = tableSourceInfo;
        }

        /// <summary>
        /// This property represents the associated DML service.
        /// </summary>
        public IDMLService DMLService { get; private set; }

        /// <summary>
        /// This property represents information about this entity's underlying table source, needed by the platform for DML generation purposes. 
        /// </summary>
        public ITableSourceInfo TableSourceInfo { get; private set; }
        
        /// <summary>
        /// Returns True if this entity requires the parameter values to be dumped inline for a given entity action kind.
        /// This implementation returns False.
        /// </summary>
        /// <param name="action">Entity action whose requirement for inline parameter values is to be tested.</param>
        /// <returns>A boolean indicating whether this entity requires inline parameter values or not.</returns>
        public virtual bool RequiresInlineParameterValues(EntityActionKind action) { return false; }

        /// <summary>
        /// Returns True if this entity requires the table names to be dumped inline for a given entity action kind. 
        /// This implementation returns False;
        /// </summary>
        /// <param name="action">Entity action whose requirement for inline table names is to be tested.</param>
        /// <returns>A boolean indicating whether this entity requires inline table names or not.</returns>
        public virtual bool RequiresInlineTableNames(EntityActionKind action) { return false; }

        /// <summary>
        /// Returns the table name of this entity to be used in the entity action specified. 
        /// This implementation returns null;
        /// </summary>
        /// <param name="action">Entity action to be considered for table name overriding.</param>
        /// <returns>The table name of this entity if it needs to be overridden, otherwise returns Null.</returns>
        public virtual string GetInlineTableName(EntityActionKind action) { return null; }
        
        /// <summary>
        /// Returns additional DML expressions to be inserted in the <code>SELECT</code> statement
        /// generated by the platform for the <code>Get</code> entity action.
        /// </summary>
        /// <returns>An <see cref="IDictionary{TKey,TValue}"/> with the DML expression.</returns>
        public virtual IDictionary<SelectPlaceholder, string> SQLPlaceholderValuesForGet() { return null; }

        /// <summary>
        /// Returns additional DML expression to be inserted in the <code>SELECT</code> statement
        /// generated by the platform for the <code>GetForUpdate</code> entity action.
        /// </summary>
        /// <returns>An <see cref="IDictionary{TKey,TValue}"/> with the DML expression.</returns>
        public virtual IDictionary<SelectPlaceholder, string> SQLPlaceholderValuesForGetForUpdate() { return null; }

        /// <summary>
        /// Returns additional DML expressions to be inserted in the <code>SELECT</code> statement
        /// generated by the platform for the <code>Create</code> entity action.
        /// </summary>
        /// <returns>An <see cref="IDictionary{TKey,TValue}"/> with the DML expression.</returns>
        public virtual IDictionary<InsertPlaceholder, string> SQLPlaceholderValuesForCreate() { return null; }

        /// <summary>
        /// Returns additional DML expression to be inserted in the <code>SELECT</code> statement
        /// generated by the platform for the <code>Create</code> entity action, when it's necessary
        /// to retrieve the <code>Id</code> of the record created.
        /// <para>This implementation returns Null and sets <code>retrieveIdMethod</code> to <code>ReturnValue</code>.</para>
        /// </summary>
        /// <param name="idColumnName">Column that stores the identifiers.</param>
        /// <param name="outputParameterName">If the <code>retrieveIdMethod</code> is <code>OutputParameter</code>, this is the name of the parameter that will hold the value stored 
        /// in <code>idColumnName</code>, otherwise it should be ignored.</param>
        /// <param name="retrieveIdMethod">Method used by the platform to retrieve the identifier.</param>
        /// <returns>An <see cref="IDictionary{TKey,TValue}"/> with the DML expressions.</returns>
        public virtual IDictionary<InsertPlaceholder, string> SQLPlaceholderValuesForCreateAndRetrieveId(string idColumnName, string outputParameterName, out RetrieveIdMethod retrieveIdMethod) {
            retrieveIdMethod = RetrieveIdMethod.ReturnValue;
            return null;
        }

        /// <summary>
        /// Returns additional DML expressions to be inserted in the <code>UPDATE</code> statement
        /// generated by the platform for the <code>Update</code> entity action.
        /// </summary>
        /// <returns>An <see cref="IDictionary{TKey,TValue}"/> with the DML expressions.</returns>
        public virtual IDictionary<UpdatePlaceholder, string> SQLPlaceholderValuesForUpdate() { return null; }

        /// <summary>
        /// Returns additional DML expressions to be inserted in the <code>DELETE</code> statement
        /// generated by the platform for the <code>Delete</code> entity action.
        /// </summary>
        /// <returns>An <see cref="IDictionary{TKey,TValue}"/> with the DML expressions.</returns>
        public virtual IDictionary<DeletePlaceholder, string> SQLPlaceholderValuesForDelete() { return null; }

    }
}
