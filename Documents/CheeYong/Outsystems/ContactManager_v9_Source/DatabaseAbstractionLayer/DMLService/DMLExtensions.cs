/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Globalization;
using OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.DMLService {
    public static class DMLExtensions {
        public static string GetMaxRecordsSQL(this IDMLQueries queries, int maxRecords, string selectSQL, string fromSQL, string whereSQL) {
            return GetMaxRecordsSQL(queries, maxRecords, selectSQL, fromSQL, whereSQL, null);
        }

        public static string GetMaxRecordsSQL(this IDMLQueries queries, int maxRecords, string selectSQL, string fromSQL, string whereSQL, string orderBySQL) {
            var placeholders = queries.SQLPlaceholderValuesForMaxRecords(maxRecords.ToString(CultureInfo.InvariantCulture));
            return string.Format("{0} SELECT {1} {2} {3} FROM {4} {5} {6} WHERE {7} {8} {9} {10}",
                placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeStatement),
                placeholders.GetPlaceholderValue(SelectPlaceholder.AfterSelectKeyword),
                selectSQL,
                placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeFromKeyword),
                placeholders.GetPlaceholderValue(SelectPlaceholder.AfterFromKeyword),
                fromSQL,
                placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeWhereKeyword),
                placeholders.GetPlaceholderValue(SelectPlaceholder.AfterWhereKeyword),
                whereSQL,
                (orderBySQL.IsNullOrEmpty()
                    ? ""
                    : string.Format("{0} ORDER BY {1} {2}",
                        placeholders.GetPlaceholderValue(SelectPlaceholder.BeforeOrderByKeyword),
                        placeholders.GetPlaceholderValue(SelectPlaceholder.AfterOrderByKeyword),
                        orderBySQL)),
                placeholders.GetPlaceholderValue(SelectPlaceholder.AfterStatement));
        }

        public static string GetCountSQL(this IDMLQueries queries, string sqlStatement) {
            var placeholders = queries.SQLPlaceholderValuesForCountQuery();
            return string.Format("{0} {1} {2}",
                placeholders.GetPlaceholderValue(StatementPlaceholder.BeforeStatement),
                sqlStatement,
                placeholders.GetPlaceholderValue(StatementPlaceholder.AfterStatement));
        }
    }
}
