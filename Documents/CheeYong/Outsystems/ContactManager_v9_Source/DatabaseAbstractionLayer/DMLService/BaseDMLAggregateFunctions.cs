/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

namespace OutSystems.HubEdition.Extensibility.Data.DMLService {

    /// <summary>
    /// Base implementation for generating the DML aggregate functions required by the applications to perform DataSet queries
    /// </summary>
    public abstract class BaseDMLAggregateFunctions : IDMLAggregateFunctions {

        protected BaseDMLAggregateFunctions(IDMLService dmlService) {
            DMLService = dmlService;
        }

        /// <summary>
        /// This property represents the associated DML service.
        /// </summary>
        public IDMLService DMLService { get; private set; }

        /// <summary>
        /// Returns a DML expression that computes the maximum value of 'v' in the current group's rows.
        /// Ignores rows for which the value of 'v' is NULL.
        /// This implementation returns <code>Max(v)</code>.
        /// </summary>
        /// <param name="v">A DML expression that evaluates to an Integer, Decimal or DateTime.</param>
        /// <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        public virtual string Max(string v) {
            return string.Format("Max({0})", v);
        }

        /// <summary>
        /// Returns a DML expression that computes the minimum value of 'v' in the current group's rows.
        /// Ignores rows for which the value of 'v' is NULL.
        /// This implementation returns <code>Min(v)</code>.
        /// </summary>
        /// <param name="v">A DML expression that evaluates to an Integer, Decimal or DateTime.</param>
        /// <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        public virtual string Min(string v) {
            return string.Format("Min({0})", v);
        }

        /// <summary>
        /// Returns a DML expression that computes the average value of 'n' in the current group's rows.
        /// Ignores rows for which the value of 'n' is NULL.
        /// This implementation returns <code>Avg(n)</code>.
        /// </summary>
        /// <param name="n">A DML expression that evaluates to an Integer or Decimal.</param>
        /// <returns>A DML expression that evaluates to a Decimal.</returns>
        public virtual string Avg(string n) {
            return string.Format("Avg({0})", n);
        }

        /// <summary>
        /// Returns a DML expression that computes the sum of 'n' in the current group's rows.
        /// Ignores rows for which the value of 'n' is NULL.
        /// This implementation returns <code>Sum(n)</code>.
        /// </summary>
        /// <param name="n">A DML expression that evaluates to an Integer or Decimal.</param>
        /// <returns>A DML expression that evaluates to a value of the same type as the argument.</returns>
        public virtual string Sum(string n) {
            return string.Format("Sum({0})", n);
        }

        /// <summary>
        /// Returns a DML expression that computes the number of rows in the current group.
        /// This implementation returns <code>Count(*)</code>.
        /// </summary>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        public virtual string Count() {
            return "Count(*)";
        }

        /// <summary>
        /// Returns a DML expression that computes the number of rows in the current group.
        /// Ignores rows for which the value of 'v' is NULL.
        /// This implementation returns <code>Count(v)</code>.
        /// </summary>
        /// <param name="v">A DML expression that evaluates to a basic type.</param>
        /// <returns>A DML expression that evaluates to a Integer.</returns>
        public virtual string Count(string v) {
            return string.Format("Count({0})", v);
        }

    }
}
