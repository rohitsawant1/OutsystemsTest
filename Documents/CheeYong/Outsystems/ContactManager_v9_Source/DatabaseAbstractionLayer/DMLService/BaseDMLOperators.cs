/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

namespace OutSystems.HubEdition.Extensibility.Data.DMLService {
    public class BaseDMLOperators : IDMLOperators {

        /// <summary>
        /// This property represents the associated <see cref="IDMLService"/>.
        /// </summary>
        public IDMLService DMLService { get; private set; }

        public BaseDMLOperators(IDMLService dmlService) {
            DMLService = dmlService;
        }

        /// <summary>
        /// Returns a DML expression that computes the numeric negation of a number.
        /// This implementation returns <code>-n</code>.
        /// </summary>
        /// <param name="n">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        public virtual string Negative(string n) {
            return "-" + n;
        }

        /// <summary>
        /// Returns a DML expression that computes the logical negation.
        /// This implementation returns 'NOT b'.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Boolean.</param>
        /// <returns>A DML expression that evaluates to a Boolean.</returns>
        public virtual string Not(string b) {
            return "NOT " + b;
        }

        /// <summary>
        /// Returns a DML expression that checks if the value is NULL.
        /// This implementation returns <code>v IS NULL</code>.
        /// </summary>
        /// <param name="v">A DML expression that evaluates to a value of any database type.</param>
        /// <returns>A DML expression that evaluates to a Boolean.</returns>
        public virtual string IsNull(string v) {
            return v + " IS NULL";
        }

        /// <summary>
        /// Returns a DML expression that checks if a is not NULL.
        /// This implementation returns <code>v IS NULL</code>.
        /// </summary>
        /// <param name="v">A DML expression that evaluates to a value of any database type.</param>
        /// <returns>A DML expression that evaluates to a Boolean.</returns>
        public virtual string IsNotNull(string v) {
            return v + " IS NOT NULL";
        }

        /// <summary>
        /// Returns a DML expression that concatenates two values.
        /// This implementation returns <code>v1 || v2</code>.
        /// </summary>
        /// <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        public virtual string Concatenate(string v1, string v2) {
            return v1 + " || " + v2;
        }

        /// <summary>
        /// Returns a DML expression that adds two numbers.
        /// This implementation returns <code>v1 + v2</code>.
        /// </summary>
        /// <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        public virtual string Add(string n1, string n2) {
            return n1 + " + " + n2;
        }

        /// <summary>
        /// Returns a DML expression that subtracts two numbers.
        /// This implementation returns <code>n1 - n2</code>.
        /// </summary>
        /// <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        public virtual string Subtract(string n1, string n2) {
            return n1 + " - " + n2;
        }

        /// <summary>
        /// Returns a DML expression that multiplies two numbers.
        /// This implementation returns <code>n1 * n2</code>.
        /// </summary>
        /// <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <returns>A DML expression that evaluates to a Decimal or Integer.</returns>
        public virtual string Multiply(string n1, string n2) {
            return n1 + " * " + n2;
        }

        /// <summary>
        /// Returns a DML expression that divides two numbers.
        /// This implementation returns <code>n1 / n2</code>.
        /// </summary>
        /// <param name="n1">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <param name="n2">A DML expression that evaluates to a Decimal or Integer.</param>
        /// <returns>A DML expression that evaluates to a Decimal.</returns>
        public virtual string Divide(string n1, string n2) {
            return n1 + " / " + n2;
        }

        /// <summary>
        /// Returns a DML expression that checks if two values are equal.
        /// This implementation returns <code>n1 = n2</code>.
        /// </summary>
        /// <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        public virtual string Equal(string v1, string v2) {
            return v1 + " = " + v2;
        }

        /// <summary>
        /// Returns a DML expression that checks if two values are different.
        /// This implementation returns <code>n1 &lt;&gt; n2</code>.
        /// </summary>
        /// <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        public virtual string NotEqual(string v1, string v2) {
            return v1 + " <> " + v2;
        }

        /// <summary>
        /// Returns a DML expression that checks if a value is less than another.
        /// This implementation returns <code>n1 &lt; n2</code>.
        /// </summary>
        /// <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        public virtual string LessThen(string v1, string v2) {
            return v1 + " < " + v2;
        }

        /// <summary>
        /// Returns a DML expression that checks if a value is less than or equal to another.
        /// This implementation returns <code>n1 &lt;= n2</code>.
        /// </summary>
        /// <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        public virtual string LessThanOrEqual(string v1, string v2) {
            return v1 + " <= " + v2;
        }

        /// <summary>
        /// Returns a DML expression that checks if a value is greater than another.
        /// This implementation returns <code>n1 &gt; n2</code>.
        /// </summary>
        /// <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        public virtual string GreaterThan(string v1, string v2) {
            return v1 + " > " + v2;
        }

        /// <summary>
        /// Returns a DML expression that checks if a value is less or equals to another.
        /// This implementation returns <code>n1 &gt;= n2</code>.
        /// </summary>
        /// <param name="v1">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <param name="v2">A DML expression that evaluates to a value of any type except binary data.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        public virtual string GreaterThanOrEqual(string v1, string v2) {
            return v1 + " >= " + v2;
        }

        /// <summary>
        /// Returns a DML expression that performs the logical AND.
        /// This implementation returns <code>b1 AND b2</code>.
        /// </summary>
        /// <param name="b1">A DML expression that evaluates to Boolean.</param>
        /// <param name="b2">A DML expression that evaluates to Boolean.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        public virtual string And(string b1, string b2) {
            return b1 + " AND " + b2;
        }

        /// <summary>
        /// Returns a DML expression that performs the logical OR.
        /// This implementation returns <code>b1 OR b2</code>.
        /// </summary>
        /// <param name="b1">A DML expression that evaluates to Boolean.</param>
        /// <param name="b2">A DML expression that evaluates to Boolean.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        public virtual string Or(string b1, string b2) {
            return b1 + " OR " + b2;
        }

        /// <summary>
        /// Provides a DML expression that checks whether a string matches a pattern.
        /// This implementation returns <code>t1 LIKE t2</code>.
        /// </summary>
        /// <param name="t1">A DML expression that evaluates to Text.</param>
        /// <param name="t2">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        public virtual string Like(string t1, string t2) {
            return t1 + " LIKE " + t2;
        }
    }
}
