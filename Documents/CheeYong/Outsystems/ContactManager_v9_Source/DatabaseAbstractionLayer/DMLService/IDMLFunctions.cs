/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

namespace OutSystems.HubEdition.Extensibility.Data.DMLService {

    /// <summary>
    /// Generates the SQL functions required by the applications to perform simple queries.
    /// </summary>
    public interface IDMLFunctions {

        /// <summary>
        /// Gets the associated DML service.
        /// </summary>
        /// <value>
        /// The DML service associated.
        /// </value>
        IDMLService DMLService { get; }

        #region Math

        /// <summary>
        /// Returns a DML expression that computes the absolute value (unsigned magnitude) of a decimal number.
        /// </summary>
        /// <param name="n">A string representing a decimal number.</param>
        /// <returns>A DML expression that evaluates to a Decimal.</returns>
        string Abs(string n);

        /// <summary>
        /// Returns a DML expression that computes the decimal number 'n' rounded to the zero fractional digits.
        /// </summary>
        /// <param name="n">DML expression of type Decimal that evaluates to the decimal number to round</param>
        /// <returns>A DML expression that evaluates to a Decimal.</returns>
        string Round(string n);

        /// <summary>
        /// Returns a DML expression that computes the square root of the decimal number 'n'.
        /// </summary>
        /// <param name="n">DML expression of type Decimal that evaluates to a decimal number</param>
        /// <returns>A DML expression that evaluates to a Decimal.</returns>
        string Sqrt(string n);

        /// <summary>
        /// Returns a DML expression that computes the decimal number 'n' truncated to integer removing the decimal part of 'n'.
        /// </summary>
        /// <param name="n">DML expression of type Decimal that evaluates to the decimal number to truncate</param>
        /// <returns>A DML expression that evaluates to a Decimal.</returns>
        string Trunc(string n);

        #endregion

        #region Text

        /// <summary>
        /// Returns a DML expression that concatenates two strings: 't1' and 't2'.
        /// </summary>
        /// <param name="t1">A DML expression that evaluates to Text.</param>
        /// <param name="t2">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string Concat(string t1, string t2);


        /// <summary>
        /// Returns a DML expression that coalesce two arguments: 't1' and 't2' (returning the first non null one).
        /// </summary>
        /// <param name="t1">A DML expression with no specific type.</param>
        /// <param name="t2">A DML expression with no specific type.</param>
        /// <returns>A DML expression with no specific type.</returns>
        string Coalesce(string t1, string t2);



        /// <summary>
        /// Returns a DML expression that searches an expression for another expression and returns its starting position if found.
        /// Returns -1 if the <paramref name="search"/> expression is empty or cannot be found.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <param name="search">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string Index(string t, string search);

        /// <summary>
        /// Returns a DML expression that computes the number of characters in a string.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string Length(string t);

        /// <summary>
        /// Returns a DML expression that replaces all occurrences of a specified string value with another string value.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <param name="search">A DML expression that evaluates to Text, to search for.</param>
        /// <param name="replace">A DML expression that evaluates to Text, to replace all occurrences with.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string Replace(string t, string search, string replace);

        /// <summary>
        /// Returns a DML expression that computes a substring beginning at <code>start</code> zero-based position
        /// and with <code>length</code> characters.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <param name="start">A DML expression that evaluates to an Integer, containing the start index.</param>
        /// <param name="length">A DML expression that evaluates to an Integer, containing the length of the text to return.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string Substr(string t, string start, string length);

        /// <summary>
        /// Returns a DML expression that converts a string to lowercase.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string ToLower(string t);

        /// <summary>
        /// Returns a DML expression that converts a string to uppercase.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string ToUpper(string t);

        /// <summary>
        /// Returns a DML expression that removes all leading and trailing white spaces from a string.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string Trim(string t);

        /// <summary>
        /// Returns a DML expression that removes all trailing white spaces from a string.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string TrimEnd(string t);

        /// <summary>
        /// Returns a DML expression that removes all leading white spaces from a string.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string TrimStart(string t);

        #endregion

        #region Date & Time

        /// <summary>
        /// Returns a DML expression that adds days to a DateTime and returns a valid DataTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to a Integer.</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string AddDays(string dt, string n);

        /// <summary>
        /// Returns a DML expression that adds days to a DateTime and returns a valid DataTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to a Integer.</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string AddHours(string dt, string n);

        /// <summary>
        /// Returns a DML expression that adds minutes to a DateTime and returns a valid DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string AddMinutes(string dt, string n);

        /// <summary>
        /// Returns a DML expression that adds months to a DateTime and returns a valid DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string AddMonths(string dt, string n);

        /// <summary>
        /// Returns a DML expression that adds seconds to a DateTime and returns a valid DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string AddSeconds(string dt, string n);

        /// <summary>
        /// Returns a DML expression that adds years to a DateTime and returns a valid DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="n">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string AddYears(string dt, string n);

        /// <summary>
        /// Returns a DML expression that creates a new DateTime given a Date and a Time.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Date.</param>
        /// <param name="t">A DML expression that evaluates to a Time.</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string BuildDateTime(string d, string t);

        /// <summary>
        /// Returns a DML expression that computes the day of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string Day(string dt);

        /// <summary>
        /// Returns a DML expression that computes the week day of a DateTime, ranging from 0 (Sunday) to 6 (Saturday).
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string DayOfWeek(string dt);

        /// <summary>
        /// Returns a DML expression that computes how many days have passed between two DateTimes.
        /// Returns zero if the two dates are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
        /// a negative number otherwise.
        /// </summary>
        /// <param name="dt1">First DML expression that evaluates to a DateTime.</param>
        /// <param name="dt2">Second DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string DiffDays(string dt1, string dt2);

        /// <summary>
        /// Returns a DML expression that computes how many hours have passed between two DateTimes.
        /// Returns zero if the two dates and hours are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
        /// a negative number otherwise.
        /// </summary>
        /// <param name="dt1">First DML expression that evaluates to a DateTime.</param>
        /// <param name="dt2">Second DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string DiffHours(string dt1, string dt2);

        /// <summary>
        /// Returns a DML expression that computes how many minutes have passed between two DateTimes.
        /// Returns zero if the two dates, hours and minutes are the same, a positive integer if <paramref name="dt1"/> is smaller than <paramref name="dt2"/>, and
        /// a negative number otherwise.
        /// </summary>
        /// <param name="dt1">A DML expression that evaluates to a DateTime.</param>
        /// /// <param name="dt2">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string DiffMinutes(string dt1, string dt2);

        /// <summary>
        /// Returns a DML expression that computes how many seconds have passed between two DateTimes.
        /// Returns zero if the two dates, hours, minutes, and seconds are the same, a positive integer if <paramref name="dt1"/> is smaller than
        /// <paramref name="dt2"/>, and a negative number otherwise.
        /// </summary>
        /// <param name="dt1">A DML expression that evaluates to a DateTime.</param>
        /// <param name="dt2">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string DiffSeconds(string dt1, string dt2);

        /// <summary>
        /// Returns a DML expression that computes the hour part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string Hour(string dt);

        /// <summary>
        /// Returns a DML expression that computes the minute part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string Minute(string dt);

        /// <summary>
        /// Returns a DML expression that computes the month part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string Month(string dt);

        /// <summary>
        /// Returns a DML expression that computes a new date from a year, month, and day.
        /// </summary>
        /// <param name="y">A DML expression that evaluates to an Integer.</param>
        /// <param name="m">A DML expression that evaluates to an Integer.</param>
        /// <param name="d">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to a Date.</returns>
        string NewDate(string y, string m, string d);

        /// <summary>
        /// Returns a DML expression that computes a new DateTime from a year, month, day, hour, minute, and second.
        /// </summary>
        /// <param name="y">A DML expression that evaluates to an Integer.</param>
        /// <param name="mo">A DML expression that evaluates to an Integer.</param>
        /// <param name="d">A DML expression that evaluates to an Integer.</param>
        /// <param name="h">A DML expression that evaluates to an Integer.</param>
        /// <param name="m">A DML expression that evaluates to an Integer.</param>
        /// <param name="s">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to DateTime.</returns>
        string NewDateTime(string y, string mo, string d, string h, string m, string s);

        /// <summary>
        /// Returns a DML expression that computes a new Time from an hour, minute, and second.
        /// </summary>
        /// <param name="h">A DML expression that evaluates to an Integer.</param>
        /// <param name="m">A DML expression that evaluates to an Integer.</param>
        /// <param name="s">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to Time.</returns>
        string NewTime(string h, string m, string s);

        /// <summary>
        /// Returns a DML expression that computes the seconds part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string Second(string dt);

        /// <summary>
        /// Returns a DML expression that computes the year part of a DateTime.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string Year(string dt);

        #endregion

        #region Data Conversion

        /// <summary>
        /// Returns a DML expression that converts a Boolean expression to an Integer. The expression evaluates into
        /// 1 if the boolean is True, or 0 if False.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Boolean.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string BooleanToInteger(string b);

        /// <summary>
        /// Returns a DML expression that converts a Boolean in its textual representation: <code>True</code> or <code>False</code>.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to Boolean.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string BooleanToText(string b);

        /// <summary>
        /// Returns a DML expression that converts a DateTime to a Date, by dropping the Time component.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to a Date.</returns>
        string DateTimeToDate(string dt);

        /// <summary>
        /// Returns a DML expression that converts a DateTime to its textual representation, using a specified format.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string DateTimeToText(string dt, string dateFormat);

        /// <summary>
        /// Returns a DML expression that converts a DateTime to a Time, by dropping the Date component.
        /// </summary>
        /// <param name="dt">A DML expression that evaluates to a DateTime.</param>
        /// <returns>A DML expression that evaluates to a Time.</returns>
        string DateTimeToTime(string dt);

        /// <summary>
        /// Returns a DML expression that converts a Date to a DateTime, by adding an empty Time component (00:00:00).
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Date.</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string DateToDateTime(string d);

        /// <summary>
        /// Returns a DML expression that converts a Date to its textual representation, using a specified format.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Date.</param>
        /// <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string DateToText(string d, string dateFormat);

        /// <summary>
        /// Returns an SQL expression that converts a Decimal to a Boolean. A Decimal value of 0.0 is False, all other values are True.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Decimal.</param>
        /// <returns>A DML expression that evaluates to Boolean.</returns>
        string DecimalToBoolean(string d);

        /// <summary>
        /// Returns a DML expression that converts a Decimal to an Integer.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Decimal.</param>
        /// <returns>A DML expression that evaluates to Integer.</returns>
        string DecimalToInteger(string d);

        /// <summary>
        /// Returns a DML expression that converts a Decimal to a Long Integer.
        /// </summary>
        /// <param name="d">A DML expression that evaluates to a Decimal.</param>
        /// <returns>A DML expression that evaluates to Long Integer.</returns>
        string DecimalToLongInteger(string d);

        /// <summary>
        /// Returns a DML expression that converts a Decimal to its textual representation.
        /// </summary>Big
        /// <param name="d">A DML expression that evaluates to a Decimal.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string DecimalToText(string d);

        /// <summary>
        /// Returns a DML expression that converts an Identifier to an Integer.
        /// </summary>
        /// <param name="id">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to Integer.</returns>
        string IdentifierToInteger(string id);

        /// <summary>
        /// Returns a DML expression that converts an Identifier to a Long Integer.
        /// </summary>
        /// <param name="id">A DML expression that evaluates to a Long Integer.</param>
        /// <returns>A DML expression that evaluates to a Long Integer.</returns>
        string IdentifierToLongInteger(string id);

        /// <summary>
        /// Returns a DML expression that converts an Identifier to its textual representation.
        /// </summary>
        /// <param name="id">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string IdentifierToText(string id);

        /// <summary>
        /// Returns a DML expression that converts an Integer to a Boolean.
        /// A Decimal value of 0 is False, all other values are True.
        /// </summary>
        /// <param name="i">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to a Boolean.</returns>
        string IntegerToBoolean(string i);

        /// <summary>
        /// Returns a DML expression that converts an Integer to a Decimal.
        /// </summary>
        /// <param name="i">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to a decimal.</returns>
        string IntegerToDecimal(string i);

        /// <summary>
        /// Returns a DML expression that converts an Integer to an (untyped) Identifier.
        /// </summary>
        /// <param name="i">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string IntegerToIdentifier(string i);

        /// <summary>
        /// Returns a DML expression that converts a Long Integer to an (untyped) Identifier.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Long Integer.</param>
        /// <returns>A DML expression that evaluates to a Long Integer.</returns>
        string LongIntegerToIdentifier(string b);
        
        /// <summary>
        /// Returns a DML expression that converts a Long Integer to an Integer.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Long Integer.</param>
        /// <returns>A DML expression that evaluates to Integer.</returns>
        string LongIntegerToInteger(string b);

        /// <summary>
        /// Returns a DML expression that converts a Long Integer to a Decimal.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Long Integer.</param>
        /// <returns>A DML expression that evaluates to Decimal.</returns>
        string LongIntegerToDecimal(string b);

        /// <summary>
        /// Returns a DML expression that converts an Integer to a Long Integer.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to Long Integer.</returns>
        string IntegerToLongInteger(string b);

        /// <summary>
        /// Returns a DML expression that converts a Long Integer to its textual representation.
        /// </summary>
        /// <param name="b">A DML expression that evaluates to a Long Integer.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string LongIntegerToText(string b);

        /// <summary>
        /// Returns a DML expression that converts an Integer to its textual representation.
        /// </summary>
        /// <param name="i">A DML expression that evaluates to an Integer.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string IntegerToText(string i);

        /// <summary>
        /// Returns a DML expression that computes a Null Date (1900-01-01).
        /// </summary>
        /// <returns>A DML expression that evaluates to a Date.</returns>
        string NullDate();

        /// <summary>
        /// Returns a DML expression that returns a Null Numeric Identifier.
        /// </summary>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string NullIdentifier();

        /// <summary>
        /// Returns a DML expression that computes a Null Text Identifier.
        /// </summary>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string NullTextIdentifier();

        /// <summary>
        /// Returns a DML expression that converts Text to a Date.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
        /// <returns>A DML expression that evaluates to a Date.</returns>
        string TextToDate(string t, string dateFormat);

        /// <summary>
        /// Returns a DML expression that converts Text to a DateTime.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <param name="dateFormat">Date format used to serialize the date component of the text value (e.g. YYYY-MM-DD).</param>
        /// <returns>A DML expression that evaluates to a DateTime.</returns>
        string TextToDateTime(string t, string dateFormat);

        /// <summary>
        /// Returns a DML expression that converts Text to a Decimal.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to a Decimal.</returns>
        string TextToDecimal(string t);

        /// <summary>
        /// Returns a DML expression that converts Text to an (untyped) Identifier.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string TextToIdentifier(string t);

        /// <summary>
        /// Returns a DML expression that converts Text to an Integer.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to an Integer.</returns>
        string TextToInteger(string t);

        /// <summary>
        /// Returns a DML expression that converts Text to a Long Integer.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to a Long Integer.</returns>
        string TextToLongInteger(string t);

        /// <summary>
        /// Returns a DML expression that converts Text to Time.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Text.</param>
        /// <returns>A DML expression that evaluates to Time.</returns>
        string TextToTime(string t);

        /// <summary>
        /// Returns a DML expression that converts a Time to a DateTime, by adding an empty Date component (1900-01-01).
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Time.</param>
        /// <returns>A DML expression that evaluates to DateTime.</returns>
        string TimeToDateTime(string t);
        
        /// <summary>
        /// Returns a DML expression that converts a Time to its text value in the format <code>hh:mm:ss</code>.
        /// </summary>
        /// <param name="t">A DML expression that evaluates to Time.</param>
        /// <returns>A DML expression that evaluates to Text.</returns>
        string TimeToText(string t);

        #endregion

        #region Misc

        /// <summary>
        /// Returns a DML expression that returns <paramref name="trueReturn"/> if <paramref name="value"/> is True, otherwise, it returns <paramref name="falseReturn"/>.
        /// </summary>
        /// <param name="value">A DML expression that evaluates to Boolean</param>
        /// <param name="trueReturn">A DML expression that evaluates to a specific type</param>
        /// <param name="falseReturn">A DML expression that evaluates to the same type as <paramref name="trueReturn"/></param>
        /// <returns>A DML expression that evaluates to the same type of <paramref name="trueReturn"/> and <paramref name="falseReturn"/></returns>
        string IfElse(string value, string trueReturn, string falseReturn);

        #endregion

    }
}
