/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;

namespace OutSystems.HubEdition.Extensibility.Data.DMLService {
    public abstract class BaseDMLService : IDMLService {

        /// <summary>
        /// This property represents the <see cref="IDatabaseServices"/> instance associated with this service.
        /// </summary>
        public IDatabaseServices DatabaseServices { get; private set; }

        protected BaseDMLService(IDatabaseServices databaseServices) {
            DatabaseServices = databaseServices;
        }

        /// <summary>
        /// Gets an object that generates the SQL fragments required to perform specific queries (e.g. count query).
        /// </summary>
        public abstract IDMLQueries Queries { get; }

        /// <summary>
        /// Gets an object that generates the SQL fragments required to perform entity actions.
        /// </summary>
        /// <param name="tableSourceInfo">Information about the entity's underlying table source</param>
        public abstract IDMLEntityActions GetEntityActions(ITableSourceInfo tableSourceInfo);

        /// <summary>
        /// Gets an object that generates and manipulates SQL identifiers.
        /// </summary>
        public abstract IDMLIdentifiers Identifiers { get; }

        /// <summary>
        /// Gets an object that generates the SQL operators required to execute simple queries.
        /// </summary>
        public abstract IDMLOperators Operators { get; }

        /// <summary>
        /// Gets an object that generates the SQL functions required to execute simple queries
        /// </summary>
        public abstract IDMLFunctions Functions { get; }

        /// <summary>
        /// Gets an object that generates the SQL aggregate functions required to execute simple queries
        /// </summary>
        public abstract IDMLAggregateFunctions AggregateFunctions { get; }

        /// <summary>
        /// Gets an object that generates the SQL default values for each database type.
        /// </summary>
        public abstract IDMLDefaultValues DefaultValues { get; }

        /// <summary>
        /// Gets an object that defines a set of fragments (e.g. keywords, operators) of the database-specific dialect 
        /// that can be used to provide syntax highlighting in SQL statements
        /// </summary>
        public virtual IDMLSyntaxHighlightDefinitions SyntaxHighlightDefinitions {
            get { return new GenericDMLSyntaxHighlightDefinitions(this); }
        }

        /// <summary>
        /// Returns an SQL expression that transforms a value of a specified type, so that it can be used in a query condition.
        /// This implementation returns the value without making any modification to it.
        /// </summary>
        public virtual string TransformDatabaseValue(string value, DBDataType type) {
            return value;
        }

        /// <summary>
        /// Returns an SQL expression that transforms a value of a specified type, to be used in conditions and calculated columns.
        /// This implementation returns the value without making any modification to it.
        /// </summary>
        public virtual string TransformValue(string value, DBDataType type) {
            return value;
        }

        /// <summary>
        /// Escapes special characters in a text value to be used in SQL statements (e.g replace ' by '').
        /// This implementation replaces the null string by the empty string and the character ' by ''.
        /// </summary>
        /// <param name="text">text value to be escaped</param>
        /// <returns>The escaped text</returns>
        public virtual string EscapeTextValue(string text) {
            return (text ?? "").Replace("\'", "\'\'");
        }
    }
}
