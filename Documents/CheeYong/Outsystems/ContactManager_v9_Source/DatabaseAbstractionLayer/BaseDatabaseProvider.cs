/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data {
    public abstract class BaseDatabaseProvider : IDatabaseProvider {
        
        /// <summary>
        /// Returns a unique identifier of the database provider, used to identify it as a plugin
        /// </summary>
        public abstract DatabaseProviderKey Key { get; }

        /// <summary>
        /// Gets the <see cref="IProviderProperties"/> instance associated with this database provider.
        /// </summary>
        /// <value>The provider properties.</value>
        public abstract IProviderProperties Properties { get; }

        /// <summary>
        /// Returns an empty <see cref="IIntegrationDatabaseConfiguration"/>.
        /// </summary>
        public abstract IIntegrationDatabaseConfiguration CreateEmptyIntegrationDatabaseConfiguration();

        /// <summary>
        /// Returns the services provided by the DBMS.
        /// </summary>
        /// <param name="databaseConfiguration">The database configuration.</param>
        public abstract IDatabaseServices GetIntegrationDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration);

        /// <summary>
        /// Returns true if the <see cref="Key"/> of both providers is equal
        /// </summary>
        public virtual bool Equals(IDatabaseProvider provider) {
            if (provider == null)
                return false;
            return provider.Key.Equals(Key);
        }

        public override bool Equals(object obj) {
            if (obj == null || GetType() != obj.GetType()) {
                return false;
            }

            return Equals(obj as IDatabaseProvider);
        }

        public override int GetHashCode() {
            return Key.GetHashCode();
        }
    }
}
