/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.PluginAPI.PluginConfiguration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.ConfigurationService {

    /// <summary>
    /// Areas in the user interface used to display configuration parameters that relate to the same concept (e.g. server location, user credentials)
    /// </summary>
    
    [Flags]
    public enum ParameterRegion {
        DatabaseLocation= 0x01,
        SessionDatabaseLocation=0x02,
        UserSpecific= 0x04,
        
        Advanced= 0x08,
        AdvancedSession = 0x10, 

        /* Non Credentials Fields */ 
        UserAdminSpecific = 0x20,
        UserRuntimeSpecific= 0x40,
        UserLogSpecific = 0x80,
        UserSessionSpecific= 0x100,

        Advanced1CP = 0x2000,
        AdvancedLogService = 0x4000,
        AdvancedLogCycling = 0x8000,
    }

    /// <summary>
    /// Attribute used to identify a configuration parameter and to describe the way it is presented in the user interface allowing users to manipulate it.
    /// This attribute should be used in a database configuration objects.
    /// </summary>
    [AttributeUsage(AttributeTargets.Property)]
    public class UserDefinedConfigurationParameter : ConfigurationParameter, IUserDefinedPluginConfiguration {
        string IUserDefinedPluginConfiguration.Region => Region.ToString();

        /// <summary>
        /// Identifies the UI region where the parameter will be placed.
        /// </summary>
        ///
        /// <value>The region where the parameter will be present.</value>
        public ParameterRegion Region {
            get;
            set;
        }

        /// <summary>
        /// Defines the text of the label that is placed next to the parameter in the user interface.
        /// </summary>
        ///
        /// <value>The label that will represent the parameter.</value>
        public string Label {
            get;
            set;
        }

        /// <summary>
        /// Defines the text of the message used to ask the user for a value to the parameter.
        /// </summary>
        /// <value>A string with the prompt to be displayed about the parameter's value.</value>
        public string Prompt {
            get;
            set;
        }

        /// <summary>
        /// Defines a detailed message that clearly explains the purpose of the parameter and/or applicable restrictions to its values.
        /// </summary>
        ///
        /// <value>The information to be shown about the parameter.</value>
        public string Example {
            get;
            set;
        }

        /// <summary>
        /// Establishes the order of the parameter inside its region.
        /// </summary>
        /// <value>An integer that represents the order of the parameter inside the defined region.</value>
        public int Order {
            get;
            set;
        }

        /// <summary>
        /// Indicates whether the parameter should be treated as a password.
        /// </summary>
        /// <value>True if this parameter is a password, or False otherwise.</value>
        public bool IsPassword {
            get;
            set;
        }

        /// <summary>
        /// Indicates whether this parameter should be treated as mandatory.
        /// </summary>
        /// <value>True if this parameter is mandatory, or False otherwise.</value>
        public bool IsMandatory {
            get;
            set;
        }

        /// <summary>
        /// Specifies the boolean property responsible for dictating if the parameter should be displayed in the user interface or not.
        /// </summary>
        /// <value>The boolean property name.</value>
        public string VisibilityChecker {
            get;
            set;
        }
    }


    /// <summary>
    /// Attribute used to place an hyperlink next to a configuration parameter whose type is an enumeration, when a specific value is selected.
    /// Multiple uses are possible allowing to place an help link for each value of the enumeration.
    /// </summary>
    [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]
    public class HelpLinkForEnumConfigurationParameter : Attribute, IHelpLinkForPluginEnumConfiguration {

        /// <summary>
        /// Defines the string value the help information relates to.
        /// </summary>
        ///
        /// <value>The string value the help information relates to.</value>
        public string EnumValue {
            get;
            set;
        }

        /// <summary>
        /// Defines the text of the link that is placed next to the enum parameter in the user interface.
        /// </summary>
        ///
        /// <value>The link text that will represent the parameter.</value>
        public string Text {
            get;
            set;
        }

        /// <summary>
        /// Defines the URL where the help link will point to.
        /// </summary>
        /// <value>The URL the help link will point to</value>
        public string Url {
            get;
            set;
        }
    }
}