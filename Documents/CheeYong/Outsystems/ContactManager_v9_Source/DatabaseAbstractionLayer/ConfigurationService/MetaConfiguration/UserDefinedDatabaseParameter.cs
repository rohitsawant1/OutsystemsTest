/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.PluginAPI.PluginConfiguration;
using OutSystems.PluginAPI.PluginConfiguration.Introspection;

namespace OutSystems.HubEdition.Extensibility.Data.ConfigurationService.MetaConfiguration {
    /// <summary>
    /// Represents a parameter defined by a specific implementation of a database provider tagged accordingly. (Wrapper to IUserDefinedPluginParameter)
    /// </summary>
    class UserDefinedDatabaseParameter : IUserDefinedDatabaseParameter {

        readonly IUserDefinedPluginParameter wrappedParameter;
        readonly UserDefinedConfigurationParameter annotation;

        string IUserDefinedPluginParameter.Region => wrappedParameter.Region;

        protected IUserDefinedPluginParameter WrappedParameter => wrappedParameter;
        
        /// <summary>Constructor to create a new parameter.</summary>
        ///
        /// <param name="wrappedParameter">The wrapped IUserDefinedPluginParameter.</param>
        /// <param name="annotation">The annotation.</param>
        public UserDefinedDatabaseParameter(IUserDefinedPluginParameter wrappedParameter, UserDefinedConfigurationParameter annotation) {
            this.wrappedParameter = wrappedParameter;
            this.annotation = annotation;
        }

        /// <summary>
        /// Invokes the visibilityChecker method to check whether this parameter is visible or not.
        /// </summary>
        ///
        /// <value>True if the parameter is visible or False if not.</value>
        public bool Visible => wrappedParameter.Visible;

        /// <summary>
        /// Gets the label that represents the parameter.
        /// </summary>
        ///
        /// <value>The label representing the parameter.</value>
        public string Label => wrappedParameter.Label;

        /// <summary>
        /// Returns information about the parameter.
        /// </summary>
        ///
        /// <value>The information to be shown.</value>
        public string Example => wrappedParameter.Example;

        /// <summary>
        /// Gets a value indicating whether the parameter is mandatory or not.
        /// </summary>
        ///
        /// <value>True if the parameter is mandatory or False if not.</value>
        public bool Mandatory => wrappedParameter.Mandatory;

        /// <summary>
        /// Gets the order of the parameter inside the region.
        /// </summary>
        ///
        /// <value>An integer that represents the parameter's order inside the region.</value>
        public int Order => wrappedParameter.Order;

        /// <summary>
        /// Gets the UI region of the parameter.
        /// </summary>
        ///
        /// <value>Object that represents the region where the parameter will be.</value>
        public ParameterRegion Region { 
            get {
                var databaseParameter = wrappedParameter as IUserDefinedDatabaseParameter;
                return (databaseParameter == null)? annotation.Region: databaseParameter.Region;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this object is password.
        /// </summary>
        ///
        /// <value>True if this parameter is representing password or False if not.</value>
        public bool IsPassword => wrappedParameter.IsPassword;

        /// <summary>This property indicates whether this object uses a multiline text.</summary>
        /// <value>True if this object has multiline text, false if not.</value>
        public bool Multiline => wrappedParameter.Multiline;

        /// <summary>Gets the autocomplete expression.</summary>
        /// <value>An expression that controls how autocomplete will react for read-only fields.</value>
        public string AutoCompleteExpression => wrappedParameter.AutoCompleteExpression;
        public Type Type => wrappedParameter.Type;
        public string Name => wrappedParameter.Name;

        public void Set(string value) {
            wrappedParameter.Set(value);
        }

        public string Get() => wrappedParameter.Get();
        public bool ReadOnly => wrappedParameter.ReadOnly;
        public bool Encrypt => wrappedParameter.Encrypt;
        public bool Persist => wrappedParameter.Persist;
    }
}
