/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.DatabaseObjects {

    /// <summary>
    /// Creates introspection objects from qualified names, inspecting the database only if needed.
    /// </summary>
    public interface IDatabaseObjectFactory {

        /// <summary>
        /// Returns an object that contains information about the current database
        /// </summary>
        /// <returns>Database-specific object that implements the IDatabaseInfo interface</returns>        
        IDatabaseInfo CreateLocalDatabaseInfo();

        /// <summary>
        /// Returns an object that contains information about a database, inferring it from a database identifier.
        /// If the <paramref name="databaseIdentifier"/> does not contain all the required information, the remaining 
        /// should be inferred from the current <see cref="IRuntimeDatabaseConfiguration"/>.
        /// </summary>
        /// <param name="databaseIdentifier">Unique identifier of the database</param>
        /// <returns>Database-specific object that implements the IDatabaseInfo interface</returns>
        /// <exception cref="InvalidDatabaseObjectIdentifierException">If the databaseIdentifier is invalid</exception>
        IDatabaseInfo CreateDatabaseInfo(string databaseIdentifier);

        /// <summary>
        /// Returns an object that contains information about a table source (data source in tabular format), like a database table or view,
        /// inferring both the database and table source information from a qualifiedName. If the <paramref name="qualifiedName"/> does not contain 
        /// all the required information, the remaining should be inferred from the current <see cref="IRuntimeDatabaseConfiguration"/>.
        /// </summary>
        /// <param name="qualifiedName">Qualified identifier of the table source, including the database information</param>
        /// <returns>Database-specific object that implements the ITableSourceInfo interface</returns>
        /// <exception cref="InvalidDatabaseObjectIdentifierException">if the qualifiedName is invalid</exception>
        ITableSourceInfo CreateTableSourceInfo(string qualifiedName);
    }
}
