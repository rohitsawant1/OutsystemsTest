/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Data.Common;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;

namespace OutSystems.Internal.Db {
    
    public class ManagedCommand : Command {
        
        public ITransactionManager Manager { get; private set; }
        
        public ManagedCommand(ITransactionManager manager, IDbCommand command, IExecutionBehaviours dbBehaviours)
            : base(manager.TransactionService.DatabaseServices.ExecutionService, command, dbBehaviours) {
            if (manager == null) {
                throw new ArgumentNullException();
            }
            Manager = manager;
        }

        public override IDataReader ExecuteReader(string description, bool isApplication, bool transformParameters, bool skipLog) {
            DateTime startTime = DateTime.Now;
            IDbTransaction trans = DriverCommand.Transaction;
            IDbConnection conn = DriverCommand.Connection;
            IDataReader reader = null;
            try {
                if (transformParameters) {
                    TransformParametersSyntax();
                }
                Func<IDataReader> executeReader = () => { return ExecutionService.ExecuteReader(DriverCommand); };
                reader = new DataReader(ExecutionService, this, DatabaseBehaviours.ExecuteWithoutRequestTimeout(executeReader));
                // The transaction manager will release the data reader automatically in the future.
                Manager.AssociateReader(DriverCommand.Transaction, reader);
            } catch (DbException e) {
                HandleDatabaseException(e, reader, conn, trans);
                throw;
            }
            if (!skipLog) {
                LogSlowQuery(startTime, description, isApplication);
            }

            return reader;
        }

        public override IDataReader ExecuteStoredProcedureWithResultSet(bool skipLog, string readerParamName) {
            DateTime startTime = DateTime.Now;
            IDbTransaction trans = DriverCommand.Transaction;
            IDbConnection conn = DriverCommand.Connection;
            IDataReader reader = null;
            try {
                var platformDatabaseServices = ExecutionService.DatabaseServices as IPlatformDatabaseServices;
                if (platformDatabaseServices == null) {
                    throw new InvalidOperationException("ExecuteStoredProcedureWithResultSet is only available for platform database providers");
                }
                TransformParametersSyntax();
                Func<IDataReader> executeStoredProcedureWithResultSet = () => { return platformDatabaseServices.ExecutionService.ExecuteStoredProcedureWithResultSet(DriverCommand, readerParamName); };
                reader = new DataReader(ExecutionService, this, DatabaseBehaviours.ExecuteWithoutRequestTimeout(executeStoredProcedureWithResultSet));
                // The transaction manager will release the data reader automatically in the future.
                Manager.AssociateReader(DriverCommand.Transaction, reader);
            } catch (DbException e) {
                HandleDatabaseException(e, reader, conn, trans);
                throw;
            }
            if (!skipLog) {
                LogSlowQuery(startTime, null, false);
            }
            return reader;
        }

        protected override void HandleDatabaseException(DbException e, IDataReader reader, IDbConnection conn, IDbTransaction trans) {
            ExecutionService.OnExecuteException(e, DriverCommand, reader, conn, trans, Manager);
        }
    }
}
