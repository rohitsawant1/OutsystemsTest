/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Diagnostics;

namespace OutSystems.Internal.Db {

    public static class DataReaderUtils {

        [DebuggerNonUserCode]
        public static T SafeGet<T>(object obj) {
            if (obj == null || obj == DBNull.Value)
                return default(T);
            try {
                return (T)Convert.ChangeType(obj, typeof(T));
            } catch (Exception) {
                return default(T);
            }
        }

        [DebuggerNonUserCode]
        public static Nullable<T> SafeNullableGet<T>(object obj) where T : struct {
            if (obj == null || obj == DBNull.Value) {
                return default(Nullable<T>);
            }

            try {
                return (T)Convert.ChangeType(obj, typeof(T));
            } catch (Exception) {
                return default(Nullable<T>);
            }
        }

        [DebuggerNonUserCode]
        public static T SafeGet<T>(object obj, T defaultValue) {
            if (obj == null || obj == DBNull.Value)
                return defaultValue;
            try {
                return (T)Convert.ChangeType(obj, typeof(T));
            } catch (Exception) {
                return default(T);
            }
        }

        [DebuggerNonUserCode]
        public static T SafeGet<T>(this IDataReader reader, string name) {
            return SafeGet<T>(reader[name]);
        }

        [DebuggerNonUserCode]
        public static Nullable<T> SafeNullableGet<T>(this IDataReader reader, string name) where T : struct {
            return SafeNullableGet<T>(reader[name]);
        }

        [DebuggerNonUserCode]
        public static T SafeGet<T>(this IDataReader reader, string name, T defaultValue) {
            return SafeGet<T>(reader[name], defaultValue);
        }

        [DebuggerNonUserCode]
        public static T SafeGet<T>(this IDataReader reader, int i) {
            return SafeGet<T>(reader[i]);
        }

        [DebuggerNonUserCode]
        public static T SafeGet<T>(this IDataReader reader, int i, T defaultValue) {
            return SafeGet<T>(reader[i], defaultValue);
        }

        [DebuggerNonUserCode]
        public static void SafeClose(this IDataReader reader) {
            if (reader != null && !reader.IsClosed) {
                reader.Close();
            }
        }
    }
}
