/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Data.Common;
using OutSystems.HubEdition.Extensibility.Data.ExecutionService;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;

namespace OutSystems.Internal.Db {

    // TODO JMR REFACTOR: To be moved to another project
    internal class DataReader : IDataReader {

        public IDataReader DriverReader { get; private set; }
        public IExecutionService ExecutionService { get; private set; }
        public Command Command { get; private set; }

        internal DataReader(IExecutionService executionService, Command cmd, IDataReader reader) {
            ExecutionService = executionService;
            Command = cmd;
            DriverReader = reader;
        }
        
        #region IDataReader Members

        public void Close() {
            DriverReader.Close();
            Dispose();
        }

        public int Depth {
            get { return DriverReader.Depth; }
        }

        public DataTable GetSchemaTable() { return DriverReader.GetSchemaTable(); }

        public bool IsClosed { get { return DriverReader.IsClosed; } }

        public bool NextResult() {
            return Command.DatabaseBehaviours.ExecuteWithoutRequestTimeout(() => { return DriverReader.NextResult(); });
        }

        public bool Read() {
            return Command.DatabaseBehaviours.ExecuteWithoutRequestTimeout(() => { return DriverReader.Read(); });
        }

        public int RecordsAffected {
            get { return DriverReader.RecordsAffected; }
        }

        #endregion

        #region IDisposable Members

        public void Dispose() {
            DriverReader.Dispose();
        }

        #endregion

        #region IDataRecord Members

        public int FieldCount {
            get { return DriverReader.FieldCount; }
        }

        public IDataReader GetData(int i) {
            return DriverReader.GetData(i);
        }

        public string GetDataTypeName(int i) {
            return DriverReader.GetDataTypeName(i);
        }

        public Type GetFieldType(int i) {
            return DriverReader.GetFieldType(i);
        }

        public string GetName(int i) {
            return DriverReader.GetName(i);
        }

        public int GetOrdinal(string name) {
            return DriverReader.GetOrdinal(name);
        }

        public bool GetBoolean(int i) {
            return InnerGetValue<bool>(DriverReader.GetBoolean(i));
        }

        public byte GetByte(int i) {
            return InnerGetValue<byte>(DriverReader.GetByte(i));
        }

        public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) {
            return InnerGetValue<long>(DriverReader.GetBytes(i, fieldOffset, buffer, bufferoffset, length));
        }

        public char GetChar(int i) {
            return InnerGetValue<char>(DriverReader.GetChar(i));
        }

        public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) {
            return InnerGetValue<long>(DriverReader.GetChars(i, fieldoffset, buffer, bufferoffset, length));
        }

        public DateTime GetDateTime(int i) {
            return InnerGetValue<DateTime>(DriverReader.GetDateTime(i));
        }

        public decimal GetDecimal(int i) {
            return InnerGetValue<decimal>(DriverReader.GetDecimal(i));
        }

        public double GetDouble(int i) {
            return InnerGetValue<double>(DriverReader.GetDouble(i));
        }

        public float GetFloat(int i) {
            return InnerGetValue<float>(DriverReader.GetFloat(i));
        }

        public Guid GetGuid(int i) {
            return InnerGetValue<Guid>(DriverReader.GetGuid(i));
        }

        public short GetInt16(int i) {
            return InnerGetValue<short>(DriverReader.GetInt16(i));
        }

        public int GetInt32(int i) {
            return InnerGetValue<int>(DriverReader.GetInt32(i));
        }

        public long GetInt64(int i) {
            return InnerGetValue<long>(DriverReader.GetInt64(i));
        }

        public string GetString(int i) {
            return InnerGetValue<string>(DriverReader.GetString(i));
        }

        public object GetValue(int i) {
            return InnerGetValue<Object>(DriverReader.GetValue(i));
        }

        public int GetValues(object[] values) {
            return InnerGetValue<int>(DriverReader.GetValues(values));
        }

        public bool IsDBNull(int i) {
            return InnerGetValue<bool>(DriverReader.IsDBNull(i));
        }

        public object this[string name] {
            get { return InnerGetValue<Object>(DriverReader[name]); }
        }

        public object this[int i] {
            get { return InnerGetValue<Object>(DriverReader[i]); }
        }

        private T InnerGetValue<T>(T value) {
            IDbTransaction trans = Command.DriverCommand.Transaction;
            IDbConnection conn = Command.DriverCommand.Connection;
            try {
                return (T) ExecutionService.TransformDatabaseToRuntimeValue(value);
            } catch (DbException e) {
                ITransactionManager manager = Command is ManagedCommand ? ((ManagedCommand)Command).Manager : null;
                ExecutionService.OnExecuteException(e, Command.DriverCommand, DriverReader, conn, trans, manager);
                throw;
            }
        }

        #endregion
    }
}
