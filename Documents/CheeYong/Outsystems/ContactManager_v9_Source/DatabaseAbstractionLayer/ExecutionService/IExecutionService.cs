/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Data.Common;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;

namespace OutSystems.HubEdition.Extensibility.Data.ExecutionService {

    /// <summary>
    /// Database service that handles the execution of statements made while connected to a database.
    /// </summary>
    public interface IExecutionService {

        /// <summary>
        /// Gets the <see cref="IDatabaseServices" /> instance associated with this service.
        /// </summary>
        /// <value>
        /// The database services associated.
        /// </value>
        IDatabaseServices DatabaseServices { get; }

        /// <summary>
        /// Gets the prefix used to qualify command parameters (e.g. @)
        /// </summary>
        /// <value>
        /// The parameter prefix.
        /// </value>
        string ParameterPrefix { get; }
        
        /// <summary>
        /// Creates and associates a new parameter to a command.
        /// </summary>
        /// <param name="cmd">The command to associate the parameter.</param>
        /// <param name="name">Parameter name.</param>
        /// <param name="dbType">Parameter type.</param>
        /// <param name="paramValue">Parameter value.</param>
        /// <returns>The parameter associated to the command.</returns>
        IDbDataParameter CreateParameter(IDbCommand cmd, string name, DbType dbType, object paramValue);
        
        /// <summary>
        /// Checks if an exception was raised due to a connection error.
        /// </summary>
        /// <param name="e">Exception raised.</param>
        /// <returns>True if the exception was due to a connection problem, False otherwise.</returns>
        bool IsConnectionException(DbException e);

        /// <summary>
        /// Method called by the consumers of this service when an execution exception occurs.
        /// It is used to handle edge cases where cleaning up is required.
        /// NOTE: This method should handle the exception and not rethrow it.
        /// </summary>
        /// <param name="e">Exception thrown during execution.</param>
        /// <param name="cmd">Command that was running when the exception was raised.</param>
        /// <param name="reader">Reader created from executing the command, if applicable.</param>
        /// <param name="conn">Connection that creates the transaction where the exception occurred, if applicable.</param>
        /// <param name="trans">Transaction where the exception was produced, if applicable.</param>
        /// <param name="manager">Transaction manager associated with this command, if applicable.</param>
        void OnExecuteException(DbException e, IDbCommand cmd, IDataReader reader, IDbConnection conn, IDbTransaction trans, ITransactionManager manager);
        
        /// <summary>
        /// Executes a command and returns the number of affected rows.
        /// </summary>
        /// <param name="cmd">The command to execute.</param>
        /// <returns>The number of rows affected.</returns>
        int ExecuteNonQuery(IDbCommand cmd);

        /// <summary>
        /// Executes a command and returns the resulting <see cref="IDataReader"/>.
        /// </summary>
        /// <param name="cmd">The command to execute.</param>
        /// <returns>A reader with the results of executing the query command.</returns>
        IDataReader ExecuteReader(IDbCommand cmd);

        /// <summary>
        /// Executes a command and returns the value of the first column of the first row in the resultset returned by the query.
        /// </summary>
        /// <param name="cmd">The command to execute.</param>
        /// <returns>An object with the resulting first row and first column of the query defined in the query command.</returns>
        object ExecuteScalar(IDbCommand cmd);
        
        /// <summary>
        /// Creates a transactionless command associated with the connection.
        /// </summary>
        /// <param name="connection">The connection where the command is going to be executed.</param>
        /// <param name="sql">The SQL statement to be executed.</param>
        /// <returns>An SQL command.</returns>
        IDbCommand CreateCommand(IDbConnection connection, string sql);

        /// <summary>
        /// Creates an SQL command to be executed in a transaction.
        /// </summary>
        /// <param name="trans">The transaction to execute the command.</param>
        /// <param name="sql">The SQL statement to be executed.</param>
        /// <returns>An SQL command.</returns>
        IDbCommand CreateCommand(IDbTransaction trans, string sql);

        /// <summary>
        /// Transforms a database value to the equivalent runtime value.
        /// </summary>
        /// <param name="value">Value to transform.</param>
        /// <returns>The transformed object.</returns>
        object TransformDatabaseToRuntimeValue(object value);

        /// <summary>
        /// Transforms a runtime value to the equivalent database value.
        /// </summary>
        /// <param name="dbType">Database type.</param>
        /// <param name="value">Value to be transform.</param>
        /// <returns>The transformed object.</returns>
        object TransformRuntimeToDatabaseValue(DbType dbType, object value);

        /// <summary>
        /// Sets the parameter direction (Input, Output, InputOutput or ReturnValue).
        /// </summary>
        /// <param name="param">Parameter to set the direction.</param>
        /// <param name="direction">Direction to be set.</param>
        void SetParameterDirection(IDbDataParameter param, ParameterDirection direction);

        /// <summary>
        /// Set a parameter with a value.
        /// </summary>
        /// <param name="param">Parameter to set the value with.</param>
        /// <param name="dbType">Database type of the parameter.</param>
        /// <param name="paramValue">Value to set.</param>
        void SetParameterValue(IDbDataParameter param, DbType dbType, object paramValue);
        
        /// <summary>
        /// Converts a type to its equivalent type in the database.
        /// </summary>
        /// <param name="type">The type to be converted.</param>
        /// <returns>A database type.</returns>
        DbType ConvertToDbType(Type type);

        /// <summary>
        /// Converts a type to its equivalent type in the database.
        /// </summary>
        /// <param name="type">The type to be converted.</param>
        /// <param name="originalType">The database specific original type name.</param>
        /// <returns>A database type.</returns>
        DbType ConvertToDbType(DBDataType type, string originalType);

        /// <summary>
        /// Checks if an exception was raised due to a timeout.
        /// </summary>
        /// <param name="exception">Exception raised.</param>
        /// <returns>True if the exception was caused by a timeout, False otherwise.</returns>
        bool IsTimeoutException(Exception exception);

        /// <summary>
        /// Bulk inserts data into the database
        /// </summary>
        /// <param name="datatable">A datatable with all information to transfer</param>
        void BulkInsert(DataTable datatable);
    }
}
