/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data {

    /// <summary>
    /// Represents a database management system.
    /// </summary>
    public interface IDatabaseProvider : IEquatable<IDatabaseProvider> {

        /// <summary>
        /// Returns a unique identifier of the database provider, used to identify it as a plugin
        /// </summary>
        /// <value>
        /// A unique identifier of the provider.
        /// </value>
        DatabaseProviderKey Key { get; }
        
        /// <summary>
        /// Gets the <see cref="IProviderProperties"/> instance associated with this database provider.
        /// </summary>
        /// <value>The provider properties.</value>
        IProviderProperties Properties { get; }

        /// <summary>
        /// Returns an empty <see cref="IIntegrationDatabaseConfiguration" />.
        /// </summary>
        /// <returns>An empty configuration.</returns>
        IIntegrationDatabaseConfiguration CreateEmptyIntegrationDatabaseConfiguration();

        /// <summary>
        /// Returns the services provided by the DBMS.
        /// </summary>
        /// <param name="databaseConfiguration">The database configuration.</param>
        /// <returns>The Integration Database Service provided from DBMS.</returns>
        IDatabaseServices GetIntegrationDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration);

        /// <summary>
        /// Validates that the plugin provider is the same
        /// </summary>
        /// <param name="provider">The provider to compare with</param>
        bool Equals(object provider);
    }
}
