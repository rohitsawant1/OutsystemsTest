/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects {

    /// <summary>
    /// Creates introspection objects from qualified names, inspecting the database only if needed.
    /// </summary>
    public interface IPlatformDatabaseObjectFactory : IDatabaseObjectFactory {
        
        /// <summary>
        /// Returns an object that contains information about a local table source (data source in tabular format), like a database table or view,
        /// inferring the database information from the current configuration
        /// </summary>
        /// <param name="tableName">Unqualified identifier of the table source</param>
        /// <returns>Database-specific object that implements the ITableSourceInfo interface</returns>
        ITableSourceInfo CreateLocalTableSourceInfo(string tableName);

        /// <summary>
        /// Returns an object that contains information about a data type, inferring the correct <see cref="IDataTypeInfo.SqlDataType"/> from the values
        /// of the other fields.
        /// </summary>
        /// <param name="dataType">Database type that can be mapped to the data types available in the platform</param>
        /// <param name="length">Size of the data type, when applicable (e.g. text of decimal numbers)</param>
        /// <param name="decimals">Number of decimal places of the data type, when applicable (e.g. decimal numbers)</param>
        /// <returns>Database-specific object that implements the IDataTypeInfo interface</returns>
        IPlatformDataTypeInfo CreateDataTypeInfo(DBDataType dataType, int length, int decimals);

        /// <summary>
        /// Returns an object that contains information about a table source column.
        /// </summary>
        /// <param name="tableSource">Table source that owns the column.</param>
        /// <param name="name">Name that identifies the column.</param>
        /// <param name="dataType">Data type of the values stored in the column.</param>
        /// <param name="isMandatory">True if the column must have a value assigned to it (NOT NULL), or false if it is nullable.</param>
        /// <param name="isPrimaryKey">True if the column is part of the table source's primary key, or false otherwise.</param>
        /// <param name="isAutoGenerated">true if the column value is generated automatically when a row is inserted (e.g. sequential numbers).</param>
        /// <returns>Database-specific object that implements the ITableSourceColumnInfo interface</returns>
        IPlatformTableSourceColumnInfo CreateColumnInfo(ITableSourceInfo tableSource, string name, IPlatformDataTypeInfo dataType, bool isMandatory,
                                                bool isPrimaryKey, bool isAutoGenerated);

        /// <summary>
        /// Returns an object that contains information about a table source foreign key.
        /// </summary>
        /// <param name="tableSource">Table source that owns the foreign key.</param>
        /// <param name="foreignKeyName">Name of the foreign key. If null, a generated name will be assigned.</param>
        /// <param name="columnName">Name of the column.</param>
        /// <param name="referencedTableSource">Table source that owns the referenced column.</param>
        /// <param name="referencedColumnName">Name of the referenced column.</param>
        /// <param name="isCascadeDelete">True if the delete rule of the foreign key is CASCADE DELETE.</param>
        /// <returns>Database-specific object that implements the ITableSourceForeignKeyInfo interface</returns>
        ITableSourceForeignKeyInfo CreateForeignKeyInfo(ITableSourceInfo tableSource, string foreignKeyName, string columnName, 
            ITableSourceInfo referencedTableSource, string referencedColumnName, bool isCascadeDelete);

        /// <summary>
        /// Returns an object that contains information about a table source index.
        /// </summary>
        /// <param name="tableSource">Table source that owns the index.</param>
        /// <param name="indexName">Name of the index. If null, a generated name will be assigned.</param>
        /// <param name="columns">Columns used in the index.</param>
        /// <param name="foreignKeys">Foreign keys that use the indexed columns</param>
        /// <param name="isUnique">True if the index is a unique index, false otherwise.</param>
        /// <param name="isPrimaryKey">True if the index is a primary key index, false otherwise.</param>
        /// <returns>Database-specific object that implements the ITableSourceIndexInfo interface</returns>
        IPlatformTableSourceIndexInfo CreateIndexInfo(ITableSourceInfo tableSource, string indexName, IEnumerable<IPlatformTableSourceColumnInfo> columns,
            IEnumerable<ITableSourceForeignKeyInfo> foreignKeys, bool isUnique, bool isPrimaryKey);

        /// <summary>
        /// Returns an object that contains information about a table source trigger.
        /// </summary>
        /// <param name="tableSource">Table source that owns the trigger.</param>
        /// <returns>Database-specific object that implements the ITableSourceTriggerInfo interface</returns>
        IPlatformTableSourceEventTriggerInfo CreateTriggerInfo(ITableSourceInfo tableSource);
    }
}
