/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.Configuration {

    public interface ITwoUserDatabaseConfigurationManager {

        /// <summary>
        /// Sets the command timeout value to use in configuration queries.
        /// </summary>
        /// <value>
        /// The query timeout.
        /// </value>
        int QueryTimeout {
            set;
        }

        /// <summary>
        /// This property indicates if this database should recommend a Database backup.
        /// If the DB doesn’t allow rollback of all statements and does implicit commits, it should have this property set to true.
        /// when set to true, indicates that its statements can do autocommit.
        /// </summary>
        /// <value>
        /// True if a Database backup is recommended, False otherwise.
        /// </value>
        bool RecommendDatabaseBackup {
            get;
        }

        /// <summary>
        /// This method will obtain the version that is being installed.
        /// </summary>
        /// <returns>The version number to upgrade.</returns>
        Version GetUpgradeVersion();

        /// <summary>
        /// This method will obtain all the statements necessary to upgrade from currentModelVersion to the version that is being installed.
        /// This method will process a well known source file upgrade script.
        /// It will do some pre-processing based in internal plugin configurations.
        /// </summary>
        /// <param name="currentModelVersion">this parameter indicates the version from which we need to upgrade</param>
        /// <returns>Set of statements to execute. This includes tagged statements (--%TAG%)</returns>
        IEnumerable<Block> GetDatabaseScriptStatements(Version currentModelVersion);

        /// <summary>
        /// Validates if elevated privileges are actually required
        /// If plugin has ImplementsElevatedPrivilegesOperations=false, this method should return false.
        /// This ensures pre create or upgrade logic can be ran by hand to avoid elevated privileges during setup 
        /// <returns>Elevated privileges operations still need to run for setup to be complete</returns>
        /// </summary>
        bool RequiresElevatedPrivilges();

        /// <summary>
        /// Generates a setup script containing operations that require elevated privileges 
        /// <returns>Setup script with elevated privileges operations</returns>
        /// </summary>
        string GenerateSetupScript();

        /// <summary>
        /// Allows the plugin to run instructions before the create/upgrade is done.
        /// This operation requires an elevated user privilege.
        /// If plugin has ImplementsElevatedPrivilegesOperations=false, this method should not be implemented. (the caller wouldn’t have a proper config to pass anyway)
        /// This would allow logic such as - create the database if it doesn’t exist.
        /// </summary>
        void Pre_CreateOrUpgradePlatform();

        /// <summary>
        /// Validates that the configuration for the user ‘User’ are valid and it can reach the db.
        /// It will return false if it cannot reach the db, and will have a non null errorMessage in that case.
        /// </summary>
        /// <param name="source">Specifies the component that will use the configuration (e.g. service or application).</param>
        /// <param name="friendlyMessage">Message with information regarding the result of the test.</param>
        /// <returns>True if connection was successfully established</returns>.
        bool TestAdminConnection(out string friendlyMessage, Source source);

        /// <summary>
        /// Validates that the configuration for the user ‘User’ are valid and it can reach the db.
        /// It will return false if it cannot reach the db, and will have a non null errorMessage in that case.
        /// </summary>
        /// <param name="source">Specifies the component that will use the configuration (e.g. service or application).</param>
        /// <param name="friendlyMessage">Message with information regarding the result of the test.</param>
        /// <returns>True if connection was successfully established</returns>
        bool TestRuntimeConnection(out string friendlyMessage, Source source);
    }
}