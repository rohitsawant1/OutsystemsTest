/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.Configuration {
    public enum Tag {
        //Block tags
        SCRIPT_VERSION,
        VERSION_UPGRADE,
        INVARIANT_INDEX,
        COLUMN_NOT_EXISTS,
        COLUMN_EXISTS,
        BEGIN_STATEMENT,
        END_STATEMENT,
        TABLE_NOT_EXISTS,
        TABLE_EXISTS,
        END_IGNORING_BLOCK,
        TOUCH_VERSION,
        CHECK,
        INDEX_NOT_EXISTS,
        INDEX_EXISTS,
        IF_CREATE_SYNONYM,
        PRIMARY_KEY_NOT_EXISTS,
        FOREIGN_KEY_EXISTS,
        TABLE_EXISTS_AND_COLUMN_NOT_EXISTS,
        //Statement tags
        DROP_COLUMN,
        SPECIFIC_UPGRADE,
    }

    public class Block {
        Tag conditionTag;
        string val;
        List<string> statements;

        public void SetTagValue(string tag, string val) {
            this.conditionTag = (Tag)Enum.Parse(typeof(Tag), tag);
            this.val = val;
            statements = new List<string>();
        }

        public void AddStatement(string statement) {
            statements.Add(statement);
        }

        public Tag ConditionTag {
            get {
                return conditionTag;
            }
        }

        public string Value {
            get {
                return val;
            }
        }

        public List<string> Statements {
            get {
                return statements;
            }
        }

        public override string ToString() {
            StringBuilder builder = new StringBuilder();
            int i = 0;
            foreach (var statement in statements) {
                builder.AppendLine("-- Statement #" + i++);
                builder.AppendLine(statement);
            }

            return ConditionTag + " " + Value + "\n-- Statements: \n" + builder.ToString();
        }
    }
}
