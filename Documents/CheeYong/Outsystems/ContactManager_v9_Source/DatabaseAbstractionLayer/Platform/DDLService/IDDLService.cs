/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.DDLService {

    public struct ColumnDetails {
        public ColumnDetails(IPlatformTableSourceColumnInfo column, string defaultValue) {
            Column = column;
            DefaultValue = defaultValue;
        }
        public IPlatformTableSourceColumnInfo Column;
        public string DefaultValue;
    }

    public interface IDDLService {
        
        string GetDefaultValue(DBDataType type);
        
        /// <summary>
        /// Returns true if the <paramref name="existingColumn"/> can be converted in the database,
        /// (via one of the AlterColumn* operations) to become equivalent to the <paramref name="newColumn"/>.
        /// If the column cannot be converted, an <paramref name="errorMessage"/> is also returned.
        /// </summary>
        /// <param name="existingColumn">Existing column, inspected from the database model</param>
        /// <param name="newColumn">New column, inspected from the application model</param>
        /// <param name="errorMessage">Reason</param>
        /// <returns>True if an alter column operation can be performed, false otherwise</returns>
        bool CanAlterColumn(IPlatformTableSourceColumnInfo existingColumn, IPlatformTableSourceColumnInfo newColumn, out string errorMessage);

        /// <summary>
        /// Returns true if the <paramref name="newColumn"/> can be created in the database,
        /// If the column cannot be created, an <paramref name="errorMessage"/> is also returned.
        /// </summary>
        /// <param name="newColumn">New column, inspected from the application model</param>
        /// <param name="errorMessage">Reason</param>
        /// <returns>True if a create column operation can be performed, false otherwise</returns>
        bool CanCreateColumn(IPlatformTableSourceColumnInfo newColumn, out string errorMessage);

        /// <summary>
        /// Returns true if the <paramref name="newTable"/> can be created in the database,
        /// If the table cannot be created, an <paramref name="errorMessage"/> is also returned.
        /// </summary>
        /// <param name="newTable">New table, inspected from the application model</param>
        /// <param name="columns">Columns, inspected from the application model</param>
        /// <param name="errorMessage">Reason</param>
        /// <returns>True if a create table operation can be performed, false otherwise</returns>
        bool CanCreateTable(ITableSourceInfo newTable, ColumnDetails[] columns, out string errorMessage);

        /// <summary>
        /// This method generates the SQL to create a new table.
        /// </summary>
        /// <param name="newTable">Info about the table to create.</param>
        /// <param name="columns">The columns information for the table to create along with the default values. 
        ///     Note that some of them may be primary keys, as indicated on the IsPrimaryKey property. 
        ///     This will lead to the creation of Primary Key Constraints. 
        ///     Also note that a column could be an autonumber column, there's no need to call the AlterColumnChangeAutoNumber after.</param>
        /// <returns>SQL statements to create the table.</returns>
        IEnumerable<string> CreateTable(ITableSourceInfo newTable, params ColumnDetails[] columns);

        /// <summary>
        /// This method generates the SQL to drop a table previously obtained through the IIntrospectionService API.
        /// </summary>
        /// <param name="existingTable">Info about the table to drop.</param>
        /// <returns>SQL statements to drop the table.</returns>
        IEnumerable<string> DropTable(ITableSourceInfo existingTable);

        /// <summary>
        /// This method generates the SQL to create a new index.
        /// </summary>
        /// <param name="newIndex">Info about the index to create.</param>
        /// <returns>SQL statements to create the index.</returns>
        IEnumerable<string> CreateIndex(IPlatformTableSourceIndexInfo newIndex);

        /// <summary>
        /// This method generates the SQL to drop an index previously obtained through the IIntrospectionService API.
        /// </summary>
        /// <param name="existingIndex">Info about the index to drop.</param>
        /// <returns>SQL statements to drop the index.</returns>
        IEnumerable<string> DropIndex(IPlatformTableSourceIndexInfo existingIndex);

        /// <summary>
        /// This method generates the SQL to create a new foreign key.
        /// </summary>
        /// <param name="newForeignKey">Info about the foreign key to create.</param>
        /// <returns>SQL statements to create the foreign key.</returns>
        IEnumerable<string> CreateForeignKey(ITableSourceForeignKeyInfo newForeignKey);

        /// <summary>
        /// This method generates the SQL to drop a foreign key previously obtained through the IIntrospectionService API.
        /// </summary>
        /// <param name="existingForeignKey">Info about the foreign key to drop.</param>
        /// <returns>SQL statements to drop the foreign key.</returns>
        IEnumerable<string> DropForeignKey(ITableSourceForeignKeyInfo existingForeignKey);

        /// <summary>
        /// This method generates the SQL to create an after insert or update event trigger.
        /// For each affected row in the trigger table, it validates if it needs to fire an event by crossing the values in the 
        /// <paramref name="triggerTableEventColumns"/> with the contents of the table <paramref name="eventTable"/>.
        /// For each event that must be fired the trigger must insert an entry in the table <paramref name="eventQueueTable"/>.
        /// </summary>
        /// <param name="newTrigger">Info about the trigger to create.</param>
        /// <param name="triggerTablePrimaryKeyColumn">Primary key column of the table associated with the trigger.</param>
        /// <param name="triggerTableEventColumns">Columns of the table associated with the trigger that fire events.</param>
        /// <param name="triggerTableForeignKeys">Foreign keys of the table associated with the trigger.</param>
        /// <param name="eventTable">Table source that stores the events for the table associated with the trigger.</param>
        /// <param name="eventQueueTable">Table source that stores the events to be fired by the platform.</param>
        /// <param name="lightEventQueueTable">Table source that stores the light events to be fired by the platform.</param>
        /// <returns>SQL statements to create the event trigger.</returns>
        IEnumerable<string> CreateEventTrigger(IPlatformTableSourceEventTriggerInfo newTrigger,
                                               IPlatformTableSourceColumnInfo triggerTablePrimaryKeyColumn,
                                               IEnumerable<IPlatformTableSourceColumnInfo> triggerTableEventColumns,
                                               IEnumerable<ITableSourceForeignKeyInfo> triggerTableForeignKeys,
                                               ITableSourceInfo eventTable,
                                               ITableSourceInfo eventQueueTable,
                                               ITableSourceInfo lightEventQueueTable);

        /// <summary>
        /// This method generates the SQL to drop a trigger previously obtained through the IIntrospectionService API.
        /// </summary>
        /// <param name="existingTrigger">Info about the trigger to drop.</param>
        /// <returns>SQL statements to drop the trigger.</returns>
        IEnumerable<string> DropEventTrigger(IPlatformTableSourceEventTriggerInfo existingTrigger);
        
        /// <summary>
        /// This method generates the SQL to create a new column.
        /// </summary>
        /// <param name="newColumn">Info about the column to create.</param>
        /// <param name="defaultValue">Column default value. It could be empty.</param>
        /// <returns>SQL statements to create the column.</returns>
        IEnumerable<string> CreateColumn(IPlatformTableSourceColumnInfo newColumn, string defaultValue);

        /// <summary>
        /// This method generates the SQL to drop a column previously obtained through the IIntrospectionService API.
        /// </summary>
        /// <param name="existingColumn">Info about the column to drop.</param>
        /// <returns>SQL statements to drop the column.</returns>
        IEnumerable<string> DropColumn(IPlatformTableSourceColumnInfo existingColumn);

        /// <summary>
        /// This method generates the SQL to change a column previously obtained through the IIntrospectionService API.
        /// </summary>
        /// <param name="existingColumn">Info about the column to change.</param>
        /// <param name="newColumn">New Info about the column.</param>        
        /// <param name="defaultValue">The new column default value. It could be null.</param>
        /// <returns>SQL statements to change the column.</returns> 
        IEnumerable<string> AlterColumn(IPlatformTableSourceColumnInfo existingColumn, IPlatformTableSourceColumnInfo newColumn, string defaultValue);

        /// <summary>
        /// #RPD-2648 This method validates if the DB Foreign Keys require indexes 
        /// In MySQL Foreign Keys require an index for the column with the Foreign Key, we cannot drop the index without dropinng the foreign key first. 
        /// </summary>
        /// <returns>True when one needs to take that case into account, False otherwise</returns>
        bool ForeignKeyRequiresIndex {
            get;
        }

        /// <summary>
        /// This method generates the SQL to create a new view. If already exists a view with the same name it should be replaced by the new one.
        /// </summary>
        /// <param name="newView">Info about the view we want to create.</param>
        /// <param name="viewSQL">SQL query that defines the view contents.</param>
        /// <param name="withCheckOption">true if the INSERT and UPDATE operations performed over the view should be constrained only to the rows referenced by the view</param>
        /// <returns>SQL statements to create the view.</returns>
        IEnumerable<string> CreateOrReplaceView(ITableSourceInfo newView, string viewSQL, bool withCheckOption);

        /// <summary>
        /// This method generates the SQL to grant permissions on a table source to a user.
        /// </summary>
        /// <param name="existingTableSource">Info about the table or view which we want to grant permissions on.</param>
        /// <param name="username">User to grant permissions.</param>
        /// <param name="permissions">Permissions to grant to the user.</param>
        /// <returns>SQL statements to grant permissions.</returns>
        IEnumerable<string> GrantPermissions(ITableSourceInfo existingTableSource, string username, Permissions permissions);


        /// <summary>
        /// This method generates the SQL to enable all the triggers for an existing table source.
        /// </summary>
        /// <param name="existingTableSource">Info about the table source which we want to enable the triggers.</param>
        /// <returns>SQL statements to enable the triggers.</returns>
        IEnumerable<string> EnableTriggers(ITableSourceInfo existingTableSource);

        /// <summary>
        /// This method generates the SQL to disable all the triggers for an existing table source.
        /// </summary>
        /// <param name="existingTableSource">Info about the table source which we want to disable the triggers.</param>
        /// <returns>SQL statements to disable the triggers.</returns>
        IEnumerable<string> DisableTriggers(ITableSourceInfo existingTableSource);

        /// <summary>
        /// This method generates the SQL to enable the auto-number behavior for an existing table source.
        /// </summary>
        /// <param name="existingTableSource">Info about the table source which we want to enable the auto-number.</param>
        /// <returns>SQL statements to enable the auto-number.</returns>
        IEnumerable<string> EnableAutoNumber(ITableSourceInfo existingTableSource);

        /// <summary>
        /// This method generates the SQL to disable the auto-number behavior for an existing table source.
        /// </summary>
        /// <param name="existingTableSource">Info about the table source which we want to disable the auto-number.</param>
        /// <returns>SQL statements to disable the auto-number.</returns>
        IEnumerable<string> DisableAutoNumber(ITableSourceInfo existingTableSource);
    }
}
