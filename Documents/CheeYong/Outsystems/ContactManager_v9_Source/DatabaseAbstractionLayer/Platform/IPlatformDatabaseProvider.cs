/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.Platform {

    /// <summary>
    /// Represents an instance that allows full usage of the database.
    /// </summary>
    public interface IPlatformDatabaseProvider : IDatabaseProvider {

        /// <summary>
        /// Gets the <see cref="IPlatformProviderProperties"/> instance associated with this database provider.
        /// </summary>
        new IPlatformProviderProperties Properties { get; }

        /// <summary>
        /// Creates a new Empty <code>IRuntimeDatabaseConfiguration.</code>
        /// </summary>
        /// <returns>An empty runtime database configuration.</returns>
        IRuntimeDatabaseConfiguration CreateEmptyRuntimeDatabaseConfiguration();

        /// <summary>
        /// Creates a new Empty <code>IPlatformDatabaseConfiguration</code>
        /// </summary>
        /// <returns>An empty platform database configuration.</returns>
        IPlatformDatabaseConfiguration CreateEmptyPlatformDatabaseConfiguration();

        /// <summary>
        /// Creates a new Empty <code>ILoggingDatabaseConfiguration</code>
        /// </summary>
        /// <returns>An empty logging database configuration.</returns>
        ISettableTwoUserDatabaseConfiguration CreateEmptyLoggingDatabaseConfiguration();

        /// <summary>
        /// Creates a new Empty <code>IDatabaseConfiguration</code>
        /// </summary>
        /// <returns>An empty database configuration.</returns>
        ISettableTwoUserDatabaseConfiguration CreateEmptyBusinessDatabaseConfiguration();

        /// <summary>
        /// Creates a new Empty <code>ISessionDatabaseConfiguration</code>
        /// </summary>
        /// <returns>An empty session database configuration.</returns>
        ISessionDatabaseConfiguration CreateEmptySessionDatabaseConfiguration();

        /// <summary>
        /// Creates a new BusinessDatabaseConfigurationManager <code>IBusinessConfigurationManager</code>
        /// </summary>
        /// <param name="uiConfiguration">The UI configuration.</param>
        /// <param name="systemDatabaseConfig">The database configuration for the system database.</param>
        /// <returns>A configuration manager.</returns>
        ITwoUserDatabaseConfigurationManager GetBusinessConfigurationManager(ISettableTwoUserDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration systemDatabaseConfig);

        /// <summary>
        /// Creates a new LoggingDatabaseConfigurationManager <code>ILoggingConfigurationManager</code>
        /// </summary>
        /// <param name="uiConfiguration">The UI configuration.</param>
        /// <param name="systemDatabaseConfig">The database configuration for the system database.</param>
        /// <returns>A configuration manager.</returns>
        ITwoUserDatabaseConfigurationManager GetLoggingConfigurationManager(ISettableTwoUserDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration systemDatabaseConfig);

        /// <summary>
        /// Creates a new PlatformConfigurationManager <code>IPlatformConfigurationManager</code>
        /// </summary>
        /// <param name="uiConfiguration">The UI configuration.</param>
        /// <returns>A configuration manager.</returns>
        IPlatformConfigurationManager GetPlatformConfigurationManager(IPlatformDatabaseConfiguration uiConfiguration);

        /// <summary>
        /// Creates a new SessionConfigurationManager <code>ISessionConfigurationManager</code>
        /// </summary>
        /// <param name="uiConfiguration">The UI configuration.</param>
        /// <param name="platformConfiguration">The Platform configuration.</param>
        /// <returns>A configuration manager.</returns>
        ISessionConfigurationManager GetSessionConfigurationManager(ISessionDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration platformConfiguration);

        /// <summary>
        /// Returns an instance of <code>IPlatformDatabaseServices</code> that uses the supplied configuration to access the database.
        /// </summary>
        /// <param name="databaseConfiguration">The database configuration.</param>
        /// <returns>A platform database configuration.</returns>
        IPlatformDatabaseServices GetPlatformDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration);
    }
}
