/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.QueryProvider {
    public abstract class BaseQueryProvider<QueryProviderType, QueryProviderQualifier>
        where QueryProviderType : class, new()
        where QueryProviderQualifier : IQueryProviderQualifier, new() {

        private static class QueryProviderTypeInstanceHolder {

            private static QueryProviderType instance;

            public static QueryProviderType Instance {
                get {
                    if (instance == null) {
                        QueryProviderQualifier qualifier = new QueryProviderQualifier();
                        providerName = qualifier.DatabaseProvider.Properties.DisplayName;
                        instance = qualifier.DatabaseProvider.GetProviderSpecificOrBaseType<QueryProviderType>(qualifier.ProviderSpecificTypes);
                    }
                    return instance;
                }
            }
        }

        private static QueryProviderType overrideInstance;
        private static string providerName;

        private static readonly object locker = new object();

        /// <summary>
        /// Returns an instance of a <typeparamref name="QueryProviderType" /> that can be used
        /// to execute platform queries against a specific <see cref="IDatabaseProvider" />
        /// </summary>
        /// <value>
        /// The instance to execute the queries.
        /// </value>
        public static QueryProviderType Instance {
            get {
                if (overrideInstance != null) {
                    return overrideInstance;
                }
                return QueryProviderTypeInstanceHolder.Instance;
            }
        }

        /// <summary>
        /// Used to override the singleton (<see cref="Instance"/>), for mocking purposes
        /// </summary>
        /// <param name="newInstance">instance of <typeparamref name="QueryProviderType"/>, or null to use the original singleton</param>
        protected static void OverrideInstance(QueryProviderType newInstance) {
            overrideInstance = newInstance;
        }

        protected static string GetNotImplementedMessage() {
            return "This query is not implemented for the database provider: " + providerName;
        }

    }
}
