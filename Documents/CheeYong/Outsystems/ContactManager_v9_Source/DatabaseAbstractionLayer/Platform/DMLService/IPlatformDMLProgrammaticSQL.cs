/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.DMLService {

    public struct VariableDetails {
        public VariableDetails(string name, IDataTypeInfo type) {
            Name = name;
            Type = type;
        }
        public string Name;
        public IDataTypeInfo Type;
    }

    /// <summary>
    /// Defines a contract for generating Programmatic SQL fragments to interact with a database.
    /// </summary>
    public interface IPlatformDMLProgrammaticSQL {
        /// <summary>
        /// Gets the associated DML service.
        /// </summary>
        /// <value>
        /// The DML service associated.
        /// </value>
        IPlatformDMLService DMLService { get; }
        
        /// <summary>
        /// This method generates SQL that represents the if else statement.
        /// </summary>
        /// <param name="condition">Condition to test.</param>
        /// <param name="ifBody">SQL to execute if the condition is true.</param>
        /// <param name="elseBody">SQL to execute if the condition is false. This can be null if there is no else body.</param>
        /// <returns>SQL that represents the if else statement.</returns>
        string IfElseStatement(string condition, string ifBody, string elseBody);

        /// <summary>
        /// This method generates a valid variable name based on the given name.
        /// </summary>
        /// <param name="varName">Name of the variable.</param>
        /// <returns>SQL that represents the name of the variable.</returns>
        string GetVariableValue(string varName);

        /// <summary>
        /// This method generates SQL that sets a variable value.
        /// </summary>
        /// <param name="varName">Name of the variable.</param>
        /// <param name="value">Value to assign to the variable.</param>
        /// <returns>SQL that sets the variable value.</returns>
        string SetVariable(string varName, string value);

        /// <summary>
        /// This method generates SQL fragments to insert in specific points of the query to set the variable value with the output of a query.
        /// </summary>
        /// <param name="varName">Name of the variable to assign the value.</param>
        /// <returns>SQL fragments to insert in specific points of the query to set the variable value.</returns>
        IDictionary<QueryPlaceholder,string> SetVariableFromQuery(string varName);

        /// <summary>
        /// This method generates SQL that sets a variable value with the last identifier inserted in the current scope.
        /// </summary>
        /// <param name="varName">Name of the variable to assign the value.</param>
        /// <returns>SQL that sets the variable value.</returns>
        string SetVariableFromLastInsertedId(string varName);

        /// <summary>
        /// This method generates SQL that starts a programmatic SQL Block and optionally declares variables to use inside the block.
        /// </summary>
        /// <param name="variables">Names and types of the variables.</param>        
        /// <returns>SQL that starts a programmatic SQL Block and declares variables.</returns>
        string BeginProgrammaticSQLBlock(params VariableDetails[] variables);
        
        /// <summary>
        /// This method generates SQL that ends a programmatic SQL Block.
        /// </summary>
        /// <returns>SQL that ends a programmatic SQL Block.</returns>
        string EndProgrammaticSQLBlock();

        /// <summary>
        /// This method generates the SQL to execute a DDL statement inside a block.
        /// </summary>
        /// <param name="statement">The DDL statement to execute.</param>
        /// <returns>SQL statement to execute the given DDL statement.</returns>
        string ExecuteDDLInsideBlock(string statement);
    }
}
