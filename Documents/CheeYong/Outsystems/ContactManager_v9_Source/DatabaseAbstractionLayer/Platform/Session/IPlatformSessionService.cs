/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.Session {

    /// <summary>
    /// Specify methods related to the storage of sessions information.
    /// </summary>
    public interface ISessionStoreOperations {

        /// <summary>
        /// If an association exists from str to an hash hash1, returns true and sets ehash to hash1.
        /// If the association does not exist, makes the association, returns true and sets ehash to hash.
        /// If there is a str str1 associated with an hash hash, returns false and sets to collidedStr to str1.
        /// </summary>
        /// <param name="str">The key to be associated to the given hash</param>
        /// <param name="hash">The hash to be stored</param>
        /// <param name="ehash">The existent hash for the given str, if it already exists.</param>
        /// <param name="collidedStr">The existent str, if there is a string different than str associated with an hash hash.</param>
        /// <returns>True, if the association doesn't exist or if it exists the hashes are different. False, otherwise.</returns>
		/// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        bool Store(string str, int hash, out int ehash, out string collidedStr);

        /// <summary>
        /// Releases the lock from the given session.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="lockId">The lock identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void ReleaseLock(string sessionId, int lockId);

        /// <summary>
        /// Gets the session with the specified session's ID.
        /// This method don't lock the required session.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="lockId">The lock identifier.</param>
        /// <param name="locked">True, if the required session is locked. False, otherwise.</param>
        /// <param name="lockAge">How long is the session locked.</param>
        /// <param name="state">The state.</param>
        /// <returns>The requested session data stored.</returns>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        byte[] Get(string sessionId, out int lockId, out bool locked, out TimeSpan lockAge, out ItemState state);

        /// <summary>
        /// Gets the session with the specified session's ID and lock it.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="lockId">The lock identifier.</param>
        /// <param name="locked">True, if the required session is locked. False, otherwise.</param>
        /// <param name="lockAge">How long is the session locked.</param>
        /// <param name="state">The state.</param>
        /// <returns>The requested session data stored.</returns>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        byte[] GetAndLock(string sessionId, out int lockId, out bool locked, out TimeSpan lockAge, out ItemState state);

        /// <summary>
        /// Inserts the specified session and it's data. The timeout for the inserted is also stored.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="data">The session's data.</param>
        /// <param name="timeout">The session's expiration timeout.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.RepeatedInsertException">
        /// Thrown when we try to insert a session when a session with the same sessionId already exists.
        /// </exception>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void Insert(string sessionId, byte[] data, TimeSpan timeout);

        /// <summary>
        /// Inserts an uninitialized session with the given identifier.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="data">The session's data.</param>
        /// <param name="timeout">The session's expiration timeout.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.RepeatedInsertException">
        /// Thrown when we try to insert a session when a session with the same sessionId already exists.
        /// </exception>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void InsertUninitialized(string sessionId, byte[] data, TimeSpan timeout);


        /// <summary>
        /// Updates the specified session information that has the given identifier.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="lockId">The lock identifier.</param>
        /// <param name="data">The session's data.</param>
        /// <param name="prevDataSize">Size of the previous data.</param>
        /// <param name="timeout">The session's expiration timeout.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void Update(string sessionId, int lockId, byte[] data, int prevDataSize, TimeSpan timeout);

        /// <summary>
        /// Deletes the specified session that has the given identifier.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="lockId">The lock identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void Delete(string sessionId, int lockId);

    }

    /// <summary>
    /// Specify methods to allow the management of existing sessions.
    /// </summary>
    public interface ISessionManagmentOperations {

        /// <summary>
        /// Deletes the session with the given identifier.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void DeleteSession(string sessionId);

        /// <summary>
        /// Deletes Top "X" expired sessions also deleting related module sessions.
        /// "X" is set by ConfigurationTool
        /// </summary>
        /// <returns>Number of sessions eliminated.</returns>
        int DeleteExpiredSessions();

        /// <summary>
        /// Deletes Top "X" expired sessions also deleting related module sessions.
        /// "X" is set by ConfigurationTool
        /// </summary>
        /// <returns>Number of session vars eliminated.</returns>
        int DeleteExpiredSessionVars();

        /// <summary>
        /// Checks if the stored procedure necessary to delete session variables exists.
        /// </summary>
        /// <returns>True if the stored procedure necessary to delete session variables exists, False otherwise.</returns>
        bool ContainsExpiredSessionVarsNewMechanism();

        /// <summary>
        /// Changes the session identifier.
        /// </summary>
        /// <param name="oldSessionId">The old session identifier.</param>
        /// <param name="newSessionId">The new session identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void ChangeSessionId(string oldSessionId, string newSessionId);

        /// <summary>
        /// Resets the session timeout.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="newTimeout">The new timeout.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void ResetSessionTimeout(string sessionId, TimeSpan newTimeout);

        /// <summary>
        /// Checks if the session state model is correctly created.
        /// </summary>
        /// <returns>True if the model is alright, false otherwise.</returns>
        bool CheckSessionModel();
    }

    /// <summary>
    /// Specify methods related to the storage of sessions information associated to a module (application).
    /// </summary>
    public interface ISessionModuleStoreOperations {

        /// <summary>
        /// Gets the data of a module's item identified by the given item's id and associated to the referred session.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="itemId">The item identifier.</param>
        /// <returns>The data stored for the given item in the requested session.</returns>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        byte[] GetModuleItem(string sessionId, string itemId);

        /// <summary>
        /// Inserts the data from a module's item identified by the given item's id and associate it to a session.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="itemId">The item identifier.</param>
        /// <param name="data">The data to be stored.</param>
        /// <param name="userId">The user identifier.</param>
        /// <param name="cookieId">The cookie identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void InsertModuleItem(string sessionId, string itemId, byte[] data, int userId, string cookieId);

        /// <summary>
        /// Updates the information stored about a module's item identified by the given item's id and associated to the referred session.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="itemId">The item identifier.</param>
        /// <param name="data">The data to be stored.</param>
        /// <param name="userId">The user identifier.</param>
        /// <param name="cookieId">The cookie identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
		void UpdateModuleItem(string sessionId, string itemId, byte[] data, int userId, string cookieId);

        /// <summary>
        /// Store the association of a module's item identified by the given item's id to a user.
        /// The item's data isn't stored in this method.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="itemId">The item identifier.</param>
        /// <param name="userId">The user identifier.</param>
        /// <param name="cookieId">The cookie identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void InsertModuleItemUser(string sessionId, string itemId, int userId, string cookieId);

        /// <summary>
        /// Updates the association related to a module's item identified by the given item's id.
        /// The item's data isn't changed in this method.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <param name="itemId">The item identifier.</param>
        /// <param name="userId">The user identifier.</param>
        /// <param name="cookieId">The cookie identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void UpdateModuleItemUser(string sessionId, string itemId, int userId, string cookieId);

        /// <summary>
        /// Deletes all the items associated to the session identified by the referred session's id.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void DeleteModuleItems(string sessionId);

        /// <summary>
        /// Returns the userID associated to the session identified by the referred session's id.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
		/// <returns>The Id of the user currently logged in or 0 if no user is logged in</returns>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        int GetUserBySessionId(string sessionId);

        /// <summary>
        /// Resets the timeout for the items associated to the session identified by the referred session's id.
        /// </summary>
        /// <param name="sessionId">The session identifier.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void ResetModuleTimeout(string sessionId);
    }

    /// <summary>
    /// Specify methods related to licensing
    /// </summary>
    public interface ISessionLicensing {

        /// <summary>
        /// Counts the number of concurrent users using the platform.
        /// </summary>
        /// <param name="referenceDate">The reference date.</param>
        /// <param name="moduleIdsToExclude">The ids of the modules to be excluded from the count.</param>
        /// <param name="anon">Number of anon users.</param>
        /// <param name="registered">Number of registered users.</param>
        /// <param name="current">The time when the evaluation was done.</param>
        /// <exception cref="OutSystems.HubEdition.Extensibility.Data.Platform.Session.SessionStoreException">
        /// Thrown when it's not possible to complete the operation.
        /// </exception>
        void CountConcurrentUsers(DateTime referenceDate, string[] moduleIdsToExclude, out int anon, out int registered, out DateTime current);

    }

    /// <summary>
    /// Represents an instance that allows the management of the sessions.
    /// </summary>
    public interface IPlatformSessionService : ISessionLicensing, ISessionManagmentOperations, ISessionStoreOperations, ISessionModuleStoreOperations {

        /// <summary>
        /// Sets the command timeout value in seconds to use in session queries.
        /// </summary>
        /// <value>
        /// The query timeout.
        /// </value>
        /// <remarks>
        /// A default value for this property must exist. The platform might not set its value before
        /// calling a method of the API.
        /// </remarks>
        int QueryTimeout { set; }

        /// <summary>
        /// Gets the <see cref="IPlatformDatabaseServices" /> instance associated with this service.
        /// </summary>
        /// <value>
        /// The database services associated.
        /// </value>
        IPlatformDatabaseServices DatabaseServices { get; }

    }
}