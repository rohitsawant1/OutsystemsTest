/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.IntrospectionService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService {
    
    /// <summary>
    /// Inspects a database server to retrieve information about its data model.
    /// </summary>
    public interface IPlatformIntrospectionService : IIntrospectionService {

        new IPlatformDatabaseServices DatabaseServices { get; }
        
        /// <summary>
        /// Returns detailed information about database table sources (e.g. foreign keys, indexes)
        /// </summary>
        /// <param name="tables">Table sources from which we want to fetch the details</param>
        /// <returns>Table sources information along with the details</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> GetTableSourcesDetails(params ITableSourceInfo[] tables);

        /// <summary>
        /// Checks if the table sources exist in the database.
        /// </summary>
        /// <param name="tableSourcesNames">Table sources names which we want to check</param>
        /// <returns>Table sources names along with a boolean value indicating if the table source exists or not in the database</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        IDictionary<string, bool> CheckTableSourcesExist(params string[] tableSourcesNames);


        /// <summary>
        /// Returns an aggregated hash code of the definition of all database schema meta-model elements that are related to a particular application's entity model definition (user tables, views, indexes and triggers). This method is to be used as a "fast" mechanism for detecting if the schema definition of 2 versions of the database are distinct, while avoiding the need to carry out a full introspection.
        /// </summary>
        /// <param name="objectNameFilter">A string present in the names of all (user-level) database schema elements that are associated to a particular application. This sequence of characters is subsequently used to filter schema elements that do not belong to the target application.</param>
        /// <returns>The aggregated hash code of database schema elements associated to a particular target application, as indicated by the input parameter.</returns>
        /// <exception cref="System.Data.Common.DbException">if an error occurs while accessing the database</exception>
        int GetDatabaseObjectsDefinitionHash(string objectNameFilter);
    }
}
