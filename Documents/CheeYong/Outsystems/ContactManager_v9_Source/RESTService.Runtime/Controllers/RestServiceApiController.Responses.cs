/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web.Http;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.RESTService.ErrorHandling;

namespace OutSystems.RESTService.Controllers {

    public partial class RestServiceApiController {
       
        protected IHttpActionResult GetResponseResult() {
            return this.StatusCode(RestServiceHttpUtils.GetCurrentStatusCode());
        }

        protected IHttpActionResult GetResponseResult(byte[] content) {
            HttpResponseMessage responseMessage = new HttpResponseMessage(RestServiceHttpUtils.GetCurrentStatusCode());
            responseMessage.Content = new StreamContent(new MemoryStream(content), (content.Length > 256 || content.Length == 0) ? 256 : content.Length);
            // #REST-120 (cja): If the response is a binary and the user wants a different content-type + charset, return as requested
            responseMessage.Content.Headers.ContentType = RestServiceHttpUtils.GetCurrentResponseContentType("application/octet-stream");
            return this.ResponseMessage(responseMessage);
        }

        protected IHttpActionResult GetResponseResult(Type type, object value) {
            return GetResponseResult(type, value, RestServiceHttpUtils.GetCurrentStatusCode());
        }

        protected IHttpActionResult GetResponseResult(Type type, object value, HttpStatusCode statusCode) {
            HttpResponseMessage responseMessage = new HttpResponseMessage(statusCode);
            responseMessage.Content = new ObjectContent(type, value, this.JsonMediaTypeFormater, RestServiceHttpUtils.GetCurrentResponseContentType("application/json").MediaType);
            return this.ResponseMessage(responseMessage);
        }

        protected IHttpActionResult GetResponseResult(string value) {
            return GetResponseResult(value, RestServiceHttpUtils.GetCurrentResponseContentType("text/plain").MediaType);
        }

        protected IHttpActionResult GetResponseResult(string value, string mediaType) {
            HttpResponseMessage responseMessage = new HttpResponseMessage(RestServiceHttpUtils.GetCurrentStatusCode());
            responseMessage.Content = new StringContent(value, System.Text.Encoding.UTF8, mediaType);
            return this.ResponseMessage(responseMessage);
        }

        protected IHttpActionResult GetErrorResponseResult(string error, HttpStatusCode status) {
            HttpResponseMessage responseMessage = new HttpResponseMessage(status);
            responseMessage.Content = new ObjectContent(typeof(ErrorResponse), new ErrorResponse(error, (int)status), this.JsonMediaTypeFormater);
            return this.ResponseMessage(responseMessage);
        }
    }

}
