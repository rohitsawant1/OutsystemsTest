/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using OutSystems.HubEdition.RuntimePlatform.Log;
using OutSystems.ObjectKeys;
using OutSystems.RuntimeCommon;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;
using static OutSystems.HubEdition.RuntimePlatform.Internal.SecurityTokenAPI;
using static OutSystems.RESTService.Controllers.CoreServicesApiController.Payload;

namespace OutSystems.RESTService.Controllers {
    public abstract partial class CoreServicesApiController : RestServiceApiController {

        protected IHttpActionResult GetSuccessResult(object outPayload, RequestSecurityTokenPayload authorizationPayload) {
            var successPayload = new SuccessResponsePayload(outPayload);
            var content = JsonConvert.SerializeObject(successPayload, Formatting.None, BehaviorsConfiguration.SerializerSettings);
            return this.GetResponseResultWithAuthentication(
                value: content,
                statusCode: HttpStatusCode.OK,
                authorizationPayload: authorizationPayload);
        }

        protected IHttpActionResult GetExceptionResult(Exception e) {
            if (e is LicensingException) {
                return GetExceptionResult(new ApplicationBackendUnavailableException(ApplicationNotEnabledMessage));
            }

            return GetResponseResult(
                type: typeof(FailResponsePayload),
                value: new FailResponsePayload(GetExceptionPayload(e)),
                statusCode: HttpStatusCode.InternalServerError);
        }

        protected IHttpActionResult GetExceptionResult(Exception e, RequestSecurityTokenPayload authorizationPayload) {
            var failPayload = new FailResponsePayload(GetExceptionPayload(e));
            var content = JsonConvert.SerializeObject(failPayload, Formatting.None, BehaviorsConfiguration.SerializerSettings);
            return GetResponseResultWithAuthentication(
                value: content,
                statusCode: HttpStatusCode.InternalServerError,
                authorizationPayload: authorizationPayload);
        }

        protected bool IsRequestValid(string requestString, string producerEspaceKey, out RequestSecurityTokenPayload payload) {
            payload = null;

            if (Request.Headers.Authorization == null || Request.Headers.Authorization.Parameter == null) {
                OSTrace.Error("Authorization header is null or badly formed.");
                return false;
            }

            payload = SecurityTokenAPI.GetValidatedToken<RequestSecurityTokenPayload>(RuntimeSettingsProvider.Instance, Request.Headers.Authorization.Parameter);
            if (payload == null) {
                return false;
            }
            return ValidateProducerKey(payload.ProducerKey, producerEspaceKey) &&
                IsRequestPayloadValid(requestString, payload);
        }

        protected void SetContextInfo(HeContext heContext, SecurityTokenAPI.RequestSecurityTokenPayload authorizationPayload) {
            try {
                if (authorizationPayload.TenantId != 0) {
                    heContext.Session.TenantId = authorizationPayload.TenantId;
                }
                if (authorizationPayload.UserId != 0) {
                    heContext.Session.UserId = authorizationPayload.UserId;
                }
            } catch (Exception e) {
                OSTrace.Warning("Invalid authentication information.", e);
            }

            if (Request.Content.Headers.TryGetValues("Content-Language", out var headerValues)) {
                string locale = headerValues.First();
                if (!string.IsNullOrWhiteSpace(locale)) {
                    GenericExtendedActions.SetCurrentLocale(heContext, locale);
                }
            } else {
                OSTrace.Warning("Locale information missing from the request.");
            }
        }

        private bool IsRequestPayloadValid(string requestString, RequestSecurityTokenPayload authorizationPayload) {
            bool isRequestValid = SecurityTokenAPI.ValidatePayloadHash(RuntimeSettingsProvider.Instance, requestString, authorizationPayload.RequestHash);
            if (!isRequestValid) {
                OSTrace.Error("Request hash doesn't match the request. Request may have been tampered with.");
            }
            return isRequestValid;
        }

        private bool ValidateProducerKey(string requestProducerKey, string eSpaceProducerKey) {
            bool isProducerKeyValid = requestProducerKey == eSpaceProducerKey;
            if (!isProducerKeyValid) {
                OSTrace.Error($"Producer Module keys don't match. Expected '{eSpaceProducerKey}' but was '{requestProducerKey}'");
            }
            return isProducerKeyValid;
        }

        private IHttpActionResult GetResponseResultWithAuthentication(string value, HttpStatusCode statusCode, RequestSecurityTokenPayload authorizationPayload) {
            HttpResponseMessage responseMessage = new HttpResponseMessage(statusCode);
            var authorizationToken = GenerateJWTTokenString(
                    settingsProvider: RuntimeSettingsProvider.Instance,
                    consumerModuleKey: authorizationPayload.ConsumerKey,
                    producerModuleKey: authorizationPayload.ProducerKey,
                    responseHash: SecurityTokenAPI.GeneratePayloadHash(RuntimeSettingsProvider.Instance, value),
                    requestLifetime: RuntimePlatformSettings.ServiceAPIs.RequestLifetime.GetValue());

            responseMessage.Content = new StringContent(value, Encoding.UTF8, RestServiceHttpUtils.GetCurrentResponseContentType("application/json").MediaType);
            responseMessage.Headers.Add($"{AuthorizationPayloadKey}", $"Bearer {authorizationToken}");
            return this.ResponseMessage(responseMessage);
        }

        protected void CheckApplicationEnabled(AppInfo appInfo) {
            if (appInfo != null && !appInfo.IsApplicationEnabled) {
                throw new LicensingException(ApplicationNotEnabledMessage);
            }
        }

        protected void LogApplicationError(Exception ex, HeContext context) {
            var errorLogId = ErrorLog.LogApplicationError(ex, context, "Service API");
            var loggingContext = LoggingHelper.GetLoggingContext();
            if (loggingContext != null) {
                loggingContext.ErrorLogId = errorLogId;
            }
        }

        protected void TrySetOriginalRequestKey(string requestKey) {
            if (requestKey != null) {
                var loggingContext = LoggingHelper.GetLoggingContext();
                if (loggingContext != null) {
                    loggingContext.OriginalRequestKey = requestKey;
                }
            }
        }
    }
}
