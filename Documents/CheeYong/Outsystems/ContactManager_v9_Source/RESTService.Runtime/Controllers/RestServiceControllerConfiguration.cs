/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Web.Http.Controllers;
using Newtonsoft.Json;
using OutSystems.RESTService.Behaviors;
using OutSystems.RESTService.Formatters;

namespace OutSystems.RESTService.Controllers {

    public class RestServiceControllerConfiguration : Attribute, IControllerConfiguration, IBehaviorsConfiguration {

        public RestServiceControllerConfiguration() {
            // Force defaults here
            DefaultValuesBehavior = Behaviors.DefaultValuesBehavior.DontSend;
            HTTPSecurity = Behaviors.HTTPSecurity.None;
            DateTimeFormat = Behaviors.DateTimeFormat.ISO;
            InternalAccessOnly = false;
            IsRESTRequest = true;
            IncludeBinariesURL = true;
            OptimizeBinaries = false;
            BinariesUsed = new HashSet<string>();
        }

        public DefaultValuesBehavior DefaultValuesBehavior { get; set; }
        public HTTPSecurity HTTPSecurity { get; set; }
        public DateTimeFormat DateTimeFormat { get; set; }
        public bool InternalAccessOnly { get; set; }
        public bool IsRESTRequest { get; set; }
        public bool IncludeBinariesURL { get; set; }
        public bool OptimizeBinaries { get; set; }
        public HashSet<string> BinariesUsed { get; private set; }

        public JsonSerializerSettings SerializerSettings {
            get{
                return CustomJsonMediaTypeFormatter.GetInstance(this).SerializerSettings;
            }
        }


        // IControllerConfiguration implementation. Do not set instance variables inside, since attributes are not singletons and the Initialization is only called once for each controller type. So this method may or may not be called for an instance!
        public void Initialize(HttpControllerSettings controllerSettings, HttpControllerDescriptor controllerDescriptor) {
                           
            controllerSettings.Formatters.Clear();
            
            // #REST-105 (rmf): only use the default JSON formatter
            var formatter = CustomJsonMediaTypeFormatter.GetInstance(this);
            controllerSettings.Formatters.Add(formatter);

            // Add our Text formater to handle all text/* and application/x-www-form-urlencoded content-types in methods that receive a basic data type in body
            controllerSettings.Formatters.Add(TextMediaTypeFormatter.Instance);
            // Add our Binary formatter to handle all content-types in methods that receive a binary in body
            controllerSettings.Formatters.Add(BinaryMediaTypeFormatter.Instance);
        }

        public object Clone() {
            var clone = (RestServiceControllerConfiguration)this.MemberwiseClone();
            clone.BinariesUsed = new HashSet<string>(this.BinariesUsed);
            return clone;
        }
    }
}
