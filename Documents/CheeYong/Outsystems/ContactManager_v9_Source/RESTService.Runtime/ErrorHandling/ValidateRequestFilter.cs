/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http.Controllers;
using System.Web.Http.Filters;

namespace OutSystems.RESTService.ErrorHandling {

    public class ValidateRequestFilter : ActionFilterAttribute {

        public static readonly ValidateRequestFilter Instance = new ValidateRequestFilter();

        public override void OnActionExecuting(HttpActionContext actionContext) {
            if (actionContext.ModelState.IsValid == false) {

                var errorMessages = new List<string>();

                foreach (var key in actionContext.ModelState.Keys) {
                    foreach (var error in actionContext.ModelState[key].Errors) {
                        if (error.Exception != null) {
                            if (error.Exception.Source == "Newtonsoft.Json" || error.Exception is Newtonsoft.Json.JsonException) {
                                // json deserialization error
                                errorMessages.Add("Failed to parse JSON request content.");
                            } else {
                                // some other exception
                                errorMessages.Add("Failed to parse '" + key + "': " + error.Exception.Message);
                            }
                        } else if (error.ErrorMessage != null) {
                            errorMessages.Add("Failed to parse '" + key + "': " + error.ErrorMessage);
                        }
                    }
                }

                throw new ExposeRestException(errorMessages, HttpStatusCode.BadRequest);
            }
        }
    }
}
