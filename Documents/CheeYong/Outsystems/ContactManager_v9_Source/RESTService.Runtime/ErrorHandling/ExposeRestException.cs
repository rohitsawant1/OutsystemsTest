/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Linq;
using System.Collections.Generic;
using System.Net;

namespace OutSystems.RESTService.ErrorHandling {

    public class ExposeRestException : Exception {
        public HttpStatusCode StatusCode { get; private set; }
        public List<string> Errors { get; private set; }
        public bool IsLoggable { get; private set; }

        /// <summary>
        /// Constructs a new ExposeRestException exception with the specified StatusCode.
        /// </summary>
        /// <param name="errors">List of errors processing the request</param>
        /// <param name="statusCode">The http status code that will be used in the response</param>
        public ExposeRestException(List<string> errors, HttpStatusCode statusCode) : this(errors, statusCode, true) {
        }

        /// <summary>
        /// Constructs a new ExposeRestException exception with the specified StatusCode.
        /// </summary>
        /// <param name="errors">List of errors processing the request</param>
        /// <param name="statusCode">The http status code that will be used in the response</param>
        /// <param name="isLoggable">Indicates id this object is supposed to be logged</param>
        public ExposeRestException(List<string> errors, HttpStatusCode statusCode, bool isLoggable) : base(toMessagesString(errors)) {
            if (statusCode == HttpStatusCode.OK) { // Default to InternalServerError if we were asked to send an exception with OK. This also allows not having to worrie about the default outside.
				this.StatusCode = HttpStatusCode.InternalServerError;
			} else {
                this.StatusCode = statusCode;
            }

            this.StatusCode = statusCode;
            this.Errors = errors;
            this.IsLoggable = isLoggable;
        }

        private static String toMessagesString(List<string> errors) {
            return string.Join("\n", errors.Where(e => e != ""));
        }

        /// <summary>
        /// Constructs a new ExposeRestException exception with the specified StatusCode.
        /// </summary>
        /// <param name="innerException">Original exception that generated the error</param>
        /// <param name="statusCode">The http status code that will be used in the response</param>
        public ExposeRestException(Exception innerException, HttpStatusCode statusCode) : this(innerException.Message, statusCode, true, innerException) {
        }

        /// <summary>
        /// Constructs a new ExposeRestException exception with the specified StatusCode.
        /// </summary>
        /// <param name="error">The error processing the request</param>
        /// <param name="statusCode">The http status code that will be used in the response</param>
        /// <param name="innerException">Original exception that generated the error</param>
        public ExposeRestException(string error, HttpStatusCode statusCode, Exception innerException) : this(error, statusCode, true, innerException) {
        }

        /// <summary>
        /// Constructs a new ExposeRestException exception with the specified StatusCode.
        /// </summary>
        /// <param name="error">The error processing the request</param>
        /// <param name="statusCode">The http status code that will be used in the response</param>
        public ExposeRestException(string error, HttpStatusCode statusCode) : this(error, statusCode, true) {
        }


        /// <summary>
        /// Constructs a new ExposeRestException exception with the specified StatusCode.
        /// </summary>
        /// <param name="error">The error processing the request</param>
        /// <param name="statusCode">The http status code that will be used in the response</param>
        /// <param name="isLoggable">Indicates id this object is supposed to be logged</param>
        public ExposeRestException(string error, HttpStatusCode statusCode, bool isLoggable) : this(error, statusCode, isLoggable, /*innerException*/null) {
        }

        /// <summary>
        /// Constructs a new ExposeRestException exception with the specified StatusCode.
        /// </summary>
        /// <param name="error">The error processing the request</param>
        /// <param name="statusCode">The http status code that will be used in the response</param>
        /// <param name="isLoggable">Indicates id this object is supposed to be logged</param>
        /// <param name="innerException">Original exception that generated the error</param>
        private ExposeRestException(string error, HttpStatusCode statusCode, bool isLoggable, Exception innerException) : base(error, innerException) {
			if (statusCode == HttpStatusCode.OK) { // Default to InternalServerError if we were asked to send an exception with OK. This also allows not having to worrie about the default outside.
				this.StatusCode = HttpStatusCode.InternalServerError;
			} else {
                this.StatusCode = statusCode;
            }
            this.Errors = new List<string>() { error };
            this.IsLoggable = isLoggable;
        }
    }
}
