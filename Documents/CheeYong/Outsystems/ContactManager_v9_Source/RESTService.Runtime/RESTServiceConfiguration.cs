/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Internal;
using OutSystems.Internal.Db;
using OutSystems.RuntimeCommon.Caching;

namespace OutSystems.RESTService {
    public class RESTServiceConfiguration {
        public bool TraceErrors { get; set; }
        public bool TraceAll { get; set; }
        public bool Trace {
            get {
                return TraceErrors || TraceAll;
            }
        }

        public RESTServiceConfiguration() : this(false, false) { }
        public RESTServiceConfiguration(bool traceErrors, bool traceAll) {
            TraceErrors = traceErrors;
            TraceAll = traceAll;
        }
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        private static IDataReader GetCustomClientConfigFields(Transaction tran, String webrefSSKey, int espaceId) {
            Command cmd = tran.CreateCommand("SELECT TraceErrors, TraceAll FROM ossys_Rest_Expose WHERE Espace_Id = @espaceId AND SS_Key = @webrefSSKey");
            cmd.CreateParameter("@espaceId", DbType.Int32, espaceId);
            cmd.CreateParameter("@webrefSSKey", DbType.String, webrefSSKey);
            return cmd.ExecuteReader();
        }

        private static class ConfigurationCache {
            private static bool reentrantCall = false;
            private static readonly object lockObject = new object();
            

            public static RESTServiceConfiguration GetESpaceCachedValue(string key, String cacheName, int eSpaceId, Func<string, RESTServiceConfiguration> Getter) {
                String cacheKey = cacheName + eSpaceId + key;
                return InnerGetCachedValue(cacheKey, cacheName, Getter, eSpaceId);
            }

            private static RESTServiceConfiguration InnerGetCachedValue(string key, String cacheName, Func<string, RESTServiceConfiguration> Getter, int cacheExtraId) {
                lock (lockObject) {
                    if (reentrantCall) {
                        throw new InvalidOperationException("Reentrant call in AppCache for key: " + key);
                    }
                    reentrantCall = true;
                    try {
                        return (RESTServiceConfiguration)RuntimeCache.Instance.GetOrAdd(
                                                                                new CacheKey(key),
                                                                                () => Getter(key),
                                                                                new EspaceTenantDependency(cacheExtraId, 0),
                                                                                DateTime.UtcNow.AddDays(1),
                                                                                TimeSpan.Zero,
                                                                                CacheItemPriority.Removable);
                    } finally {
                        reentrantCall = false;
                    }
                }
            }
        }
    }
}
