/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Threading;
using System.Threading.Tasks;
using System.Web.Http.Controllers;
using System.Web.Http.Filters;
using OutSystems.RESTService.ErrorHandling;

namespace OutSystems.RESTService.Formatters {

    /// <summary>
    /// Extends WebAPI to only allow MediaTypes that are registered (e.g.: JsonTypeFormatter)
    /// </summary>
    /// <remarks><see cref="http://pedroreys.com/2012/02/17/extending-asp-net-web-api-content-negotiation/"/></remarks>
    public class NotAcceptableFormatterHandler : ActionFilterAttribute {

        public static readonly NotAcceptableFormatterHandler Instance = new NotAcceptableFormatterHandler();

        public override void OnActionExecuting(HttpActionContext actionContext) {
            var acceptHeader = actionContext.Request.Headers.Accept;

            // #REST-192 - CJA
            // If it's XML and it's the only accept header, return NotAcceptable (See RFC3023 for all XML media types)
            if (acceptHeader.All(x => x.MediaType.Contains("+xml") || x.MediaType.Contains("/xml")) && acceptHeader.Count > 0) {
                var errorMessage = "The requested accepted media type are not supported for this resource.";
                HttpResponseMessage exceptionResponse = new HttpResponseMessage(HttpStatusCode.NotAcceptable);
                exceptionResponse.Content = new ObjectContent(typeof(ErrorResponse), new ErrorResponse(errorMessage, (int)HttpStatusCode.NotAcceptable), new JsonMediaTypeFormatter());

                actionContext.Response = exceptionResponse;
            }
        }
    }
}
