/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Net;
using System.Net.Http;
using System.Web.Http.Controllers;
using System.Web.Http.Filters;
using OutSystems.RESTService.Controllers;
using OutSystems.RESTService.ErrorHandling;

namespace OutSystems.RESTService.Filters {

    /// <summary>
    /// Base class that ActionFilters and AuthorizationFilters should implement for extensibility
    /// </summary>
    public abstract class AbstractFilter {

        /// <summary>
        /// OnRequest method that should be called before an Action executes
        /// </summary>
        /// <param name="actionContext"></param>
        public void OnRequest(HttpActionContext actionContext, HttpRequestMessage httpRequestMessage, RestServiceApiController controller) {
            try {
                OnRequestImplementation(actionContext, httpRequestMessage, controller);
                OnAuthenticationImplementation(actionContext, httpRequestMessage, controller);
			} catch (Exception ex) {
				if (ex is ExposeRestException) {
					throw;
				}
				throw new ExposeRestException(ex, RestServiceHttpUtils.GetCurrentStatusCode());
			}
        }

        /// <summary>
        /// OnResponse method should be called after an Action executes
        /// </summary>
        /// <param name="actionContext"></param>
        public void OnResponse(HttpActionExecutedContext actionContext, HttpResponseMessage httpResponseMessage, RestServiceApiController controller) {
            try {
				var initialStatusCode = RestServiceHttpUtils.GetCurrentStatusCode();

                OnResponseImplementation(actionContext, actionContext.Response, controller);

				var currentStatusCode = RestServiceHttpUtils.GetCurrentStatusCode();
				if (currentStatusCode != initialStatusCode) {
					actionContext.Response.StatusCode = currentStatusCode;
				}
			} catch (Exception ex) {
				if (ex is ExposeRestException) {
					throw;
				}
				throw new ExposeRestException(ex, RestServiceHttpUtils.GetCurrentStatusCode());
			}
        }

        
        protected virtual void OnAuthenticationImplementation(HttpActionContext actionContext, HttpRequestMessage httpRequestMessage, RestServiceApiController controller) { return; }
        protected virtual void OnRequestImplementation(HttpActionContext actionContext, HttpRequestMessage httpRequestMessage, RestServiceApiController controller) { return; }
        protected virtual void OnResponseImplementation(HttpActionExecutedContext actionContext, HttpResponseMessage httpResponseMessage, RestServiceApiController controller) { return; }
    }
}
