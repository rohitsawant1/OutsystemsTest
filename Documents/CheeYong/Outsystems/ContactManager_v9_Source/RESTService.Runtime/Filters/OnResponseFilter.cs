/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Net.Http;
using System.Web.Http.Filters;
using OutSystems.RESTService.Controllers;

namespace OutSystems.RESTService.Filters {

    /// <summary>
    /// Filter that runs AFTER the action is executed
    /// </summary>
    public class OnResponseFilter : ActionFilterAttribute {

        /// <summary>
        /// The type that has the OnResponse method
        /// </summary>
        private AbstractFilter filterImpl;

        /// <summary>
        /// Creates an implementation of an ActionFilter.
        /// </summary>
        /// <param name="typeOfControllerFilter">The type that has the Extensibility methods</param>
        public OnResponseFilter(Type typeOfControllerFilter) {
            if (typeOfControllerFilter != null) {
                filterImpl = (AbstractFilter)Activator.CreateInstance(typeOfControllerFilter);
            }
        }        

        public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext) {
            base.OnActionExecuted(actionExecutedContext);
            
            RestServiceApiController controller = actionExecutedContext.ActionContext.ControllerContext.Controller as RestServiceApiController;
            if (controller == null) {
                return;
            }

            if (controller.IsSwaggerRequest(actionExecutedContext.ActionContext.Request.GetRouteData().Route.RouteTemplate)) {
				return;
			}

            if (actionExecutedContext.Response != null && filterImpl != null) {
                filterImpl.OnResponse(actionExecutedContext, actionExecutedContext.Response, controller);
            }

            LoggingHelper.LogResponse(actionExecutedContext);
        }        
    }
}
