/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Specialized;
using System.Web.UI;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using System.Globalization;

namespace OutSystems.HubEdition.WebWidgets {
	/// <summary>
	/// Summary description for OsValidator.
	/// </summary>
	public abstract class OsValidator : ViewStateSpecializations.ViewStateLessWebControl {
		public OsValidator() : base() { }

		private void RegisterValidatorDeclaration() {
			Page.ClientScript.RegisterArrayDeclaration("OsPage_Validators", "\n" + GetValidatorDeclarationElement());
		}

		private void RegisterValidatorDeclarationOrder() {
			((OSPage)Page).RegisterValidationControlOrder(controlToValidate);
		}


		private string GetValidatorDeclarationElement() {
			NameValueCollection properties = new NameValueCollection();
			addValidatorDeclarationProperties(properties);
			string arrayElement = "";

			foreach (string propertyName in properties.Keys) {
				if (arrayElement != String.Empty) {
					arrayElement += ", ";
				}

				arrayElement += propertyName + ": \"" + BuiltInFunction.EncodeJavascript(properties[propertyName])
					+ "\"";
			}
			return "{" + arrayElement + "}";
		}


		private string GetAJAXRemovePageValidator() {
			return "OsRemovePageValidator(" + GetValidatorDeclarationElement() + ");";
		}

		private string GetAJAXAddPageValidator() {
			return "OsAddPageValidator(" + GetValidatorDeclarationElement() + ");";
		}

		protected Control controlToValidate {
			get {
				return Parent.FindControl(Attributes["ControlToValidate"]);
			}
		}		

		protected override void Render( HtmlTextWriter writer ) {
			if ( Page != null ) {
				Page.VerifyRenderingInServerForm(this);
			}

            if (OSPage.IsAjaxRequest) {
				// #99202
				string js;
				// for Ajax be sure to remove existing validations for this control
				js = GetAJAXRemovePageValidator();
				// and add them properly...
				// Only register the script if the control to validate is visible (#38772)
				if (controlToValidateIsVisible && Enabled) {
					js += GetAJAXAddPageValidator();					
				}
				// queue this js for execution in this refresh
                ((OSPageViewState)Page).AddQueuedJavascript(js);
			} else {
				// Only register the script if the control to validate is visible (#38772)
				if (controlToValidateIsVisible && Enabled) {
					RegisterValidatorDeclaration();
				}				
			}
		}


		protected override void OnInit(EventArgs e) {
			// #99202 - register the validator order for all validators for helping focus the first 
			// visible invalid control even if ajax refreshes to show or hide edit record controls
			RegisterValidatorDeclarationOrder();
		}


		/// <summary>
		/// Add properties to the validator that will go to the Page_Validators array
		/// </summary>
		/// <param name="properties"></param>
		protected virtual void addValidatorDeclarationProperties( NameValueCollection properties ) {
			if ( controlToValidate != null ) {
				properties.Add("controltovalidate", controlToValidate.ClientID);
			}

			properties.Add("evaluationfunction", evaluationFunction);
			properties.Add("errormessage", BuiltInFunction.EncodeHtml(Attributes["ErrorMessage"]));
		}

		protected bool controlToValidateIsVisible {
			get {
                return controlToValidate != null && controlToValidate.Visible;
			}
		}

		/// <summary>
		/// Get the name of the javascript function called to perform the validation
		/// </summary>
		protected abstract string evaluationFunction {
			get;
		}
	}

	/// <summary>
	/// Summary description for TextValidator.
	/// </summary>
	public sealed class TextValidator : OsValidator {

		protected override string evaluationFunction {
			get {
				return "OsCustomValidatorEvaluateIsValid";
			}
		}

		protected override void addValidatorDeclarationProperties( NameValueCollection properties ) {
			base.addValidatorDeclarationProperties(properties);
			properties.Add("clientvalidationfunction", Attributes["ClientValidationFunction"]);
		}
	}

    public sealed class RequiredFieldTextValidator : OsValidator {

		protected override string evaluationFunction {
			get {
				return "OsRequiredFieldValidatorEvaluateIsValid";
			}
		}

		protected override void addValidatorDeclarationProperties( NameValueCollection properties ) {
			base.addValidatorDeclarationProperties(properties);
            string initialValue = Attributes["InitialValue"];
            properties.Add("initialvalue", initialValue != null ? initialValue : string.Empty);
		}

		public override bool Enabled {
			get {
                var textBox = controlToValidate as TextBox;
                if (textBox != null) {
                    return textBox.Mandatory;
                }
                var dropDownList = controlToValidate as DropDownList;
                if (dropDownList != null) {
                    return dropDownList.Mandatory;
                }
                return false;
            }
            set { }
        }
    }

    public static class ValidationUtils {
        private static bool ProceedWithValidation(IParentEditRecordProp widget, string parentEditRecord) {
            return String.IsNullOrEmpty(parentEditRecord) || (widget.GetParentEditRecordClientId() == parentEditRecord);
        }

        public static bool validateTrue(string value) {
            return true;
        }

        public static bool validateFalse(string value) {
            return false;
        }

        public delegate bool InputTypeValidator(string val);

        // Determines if every control with id "childId" contained in the iterator is valid
        public static bool IsValid(Control parentControl, string childId) {
            return Validate<IWidgetWithValidProperty>(parentControl, childId, WidgetWithValidPropertyUtils.GetValidForValidationParent);
        }

        // Sets the Valid property to "value" in every control with id "childId" contained in the iterator
        public static void SetValid(Control parentControl, string childId, bool value) {
            Validate<IWidgetWithValidProperty>(parentControl, childId, delegate(IWidgetWithValidProperty control) {
                control.SetValidForValidationParent(value);
                return true;
            });
        }

        public static void ResetValidation(Control parentControl, string childId, string parentEditRecord, bool validate) {
            Validate<IWidgetWithParentEditRecordAndValidation>(parentControl, childId, delegate(IWidgetWithParentEditRecordAndValidation control) {
                if (!validate || !ProceedWithValidation(control, parentEditRecord)) {
                    control.Valid = true;
                    control.ValidationMessage = String.Empty;
                }

                return true;
            });
        }

        private static bool Validate<ControlType>(Control parentCtrl, string childId, Predicate<ControlType> validateMethod) 
                where ControlType: class, IWidgetWithValidProperty {

            IWebListRecordWidget listRecords = parentCtrl as IWebListRecordWidget;
            if (listRecords != null) {
                bool result = true;
                foreach (Control row in listRecords.Rows) {
                    ControlType child = (ControlType) (object) row.FindControl(childId);
                    if (child != null) {
                        if (!validateMethod(child)) {
                            result = false;
                        }
                    }
                }
                return result;
            } else {
                ControlType widget = (ControlType) (object) parentCtrl.FindControl(childId);
                return validateMethod(widget);
            }
        }

        public static bool ValidateComboBox(Control parentCtrl, string childId, string parentEditRecord, bool validate) {
            return Validate<DropDownList>(parentCtrl, childId, widget => ValidateComboBox(widget, parentEditRecord, validate));
        }

        public static bool ValidateComboBox(DropDownList widget, string parentEditRecord, bool validate) {
            if (!WidgetWithValidPropertyUtils.ValidateWidget(widget)) {
                return true;
            }

            //don't validate what's not on my parent edit record
            if (!ProceedWithValidation(widget, parentEditRecord)) {
                validate = false;
            }

            //don't keep values, always reset to true
            if (validate) {
                widget.Valid = true;
                widget.ValidationMessage = "";
            }

            bool valid = true;
            string validationMessage = "";
            //if not validating, assume "" is valid, so skip mandatory validations
            if (validate) {
                valid = !widget.Mandatory || !widget.SelectedValue.StartsWith(Constants.ComboBoxSpecialListIdPrefix);
            }

            if (!valid) {
                validationMessage = widget.MandatoryValidationMessage;
            }

            //if not validating, don't change the runtime properties
            if (validate) {
                widget.Valid = valid;
                widget.ValidationMessage = validationMessage;
            }

            return valid;
        }

        public static bool ValidateInput(Control parentCtrl, string childId, string parentEditRecord, InputTypeValidator typeVal, bool validate) {
            return Validate<TextBox>(parentCtrl, childId, widget => ValidateInput(widget, parentEditRecord, typeVal, validate));
        }

        public static bool ValidateInput(TextBox widget, string parentEditRecord, InputTypeValidator typeVal, bool validate) {
            if (!WidgetWithValidPropertyUtils.ValidateWidget(widget)) {
                return true;
            }

            widget.TypedValue = widget.Text;

            //don't validate what's not on my parent edit record
            if (!ProceedWithValidation(widget, parentEditRecord)) {
                validate = false;
            }

            //don't keep values, always reset to true
            if (validate) {
                widget.Valid = true;
                widget.ValidationMessage = "";
            }

            bool valid = true;
            string validationMessage = "";
            //if not validating, assume "" is valid, so skip mandatory validations
            if (validate) {
                valid = !widget.Mandatory || widget.TypedValue != "";
            }

            if (!valid) {
                validationMessage = widget.MandatoryValidationMessage;
				} else {
                valid = (widget.TypedValue == "") || typeVal(widget.TypedValue);
                if (!valid) {
                    validationMessage = widget.TypeValidationMessage;
                }
				}

            //if not validating, don't change the runtime properties
            if (validate) {
                widget.Valid = valid;
                widget.ValidationMessage = validationMessage;
			}

            return valid;
		}

        public static bool TextToDecimalValidate(string t) {
            decimal ignore;

            NumberFormatInfo nfi = new NumberFormatInfo();
            nfi.NumberDecimalSeparator = ".";
            nfi.NumberGroupSeparator = "";

            if (Decimal.TryParse(t, NumberStyles.Number, nfi, out ignore)) {
                return true;
            } else {
                nfi.NumberDecimalSeparator = ",";
                return Decimal.TryParse(t, NumberStyles.Number, nfi, out ignore);
            }
        }
	}

    public static class ConversionUtils {

        private static NumberFormatInfo nfidot;
        private static NumberFormatInfo nficomma;

        static ConversionUtils() {
            nfidot = new NumberFormatInfo();
            nfidot.NumberDecimalSeparator = ".";
            nfidot.NumberGroupSeparator = "";

            nficomma = new NumberFormatInfo();
            nficomma.NumberDecimalSeparator = ",";
            nficomma.NumberGroupSeparator = "";
        }

        public static decimal TextToDecimal(string t) {
            decimal result;

            if (Decimal.TryParse(t, NumberStyles.Number, nfidot, out result)) {
                return result;
            } else {
                if (Decimal.TryParse(t, NumberStyles.Number, nficomma, out result)) {
                    return result;
                } else {
                    return 0.0M;
                }
            }
        }

        public static string DecimalToText(decimal value) {

            NumberFormatInfo format = FormatInfoLogic.Number;
            format = (NumberFormatInfo)format.Clone();
            format.NumberDecimalDigits = 28;
            return RuntimePlatformUtils.RemoveTrailingZeros(value.ToString("N", format), format);
        }
    }
}
