/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Web.UI;
using System.Web.UI.WebControls;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.WebWidgets {

    /// <summary>
    /// Interface to be used for controls which may store attributes in the
    /// viewstate
    /// </summary>
    public interface IViewStateAttributes {
        ViewStateAttributes ViewStateAttributes {
            get;
        }
    }

    public class ViewStateAttributes {
        private Control _control;
        private StateBag _viewState;

        private string _lastKey = null;
        private object _lastValue = null;

        protected AttributeCollection _attributes;
        protected AttributeCollection _inlineAttributes = new AttributeCollection(new StateBag());



        public ViewStateAttributes(StateBag viewState)
            : this(null, null, viewState) {
        }

        public ViewStateAttributes(Control control, AttributeCollection attributes, StateBag viewState) {
            _control = control;
            _attributes = attributes;
            _viewState = viewState;
        }

        public void SetInViewState(string key, object value, object defaultValue) {
            if (value == null) {
                if (defaultValue != null)
                    _viewState[key] = value;
                else
                    _viewState.Remove(key);
            } else {
                if (!value.Equals(defaultValue))
                    _viewState[key] = value;
                else
                    _viewState.Remove(key);
            }
            _lastKey = key;
            _lastValue = value;
        }


        public void EnsureNotEmpty() {
            if (_viewState.Count == 0 && (_lastKey != null)) {
                // force the last key + value to be stored in the viewstate
                _viewState[_lastKey] = _lastValue;
            }
        }

        public object GetFromViewState(string key, object defaultValue) {
            object o = _viewState[key];
            return (o == null ? defaultValue : o);
        }

        public void InheritInlineAttributes() {
            foreach (string attrName in _attributes.Keys) {
                System.Diagnostics.Debug.Assert(_inlineAttributes[attrName.ToLower()] == null, "InlineAttribute " + attrName + " already initialized");
                _inlineAttributes[attrName.ToLower()] = _attributes[attrName];
            }

            _attributes.CssStyle.Clear();
        }


        /// <summary>
        /// Attribute collection which is tracked by the viewstate
        /// </summary>
        public AttributeCollection Attributes {
            get {
                return _attributes;
            }
        }
        /// <summary>
        /// Attribute collection which won't be tracked by the viewstate
        /// </summary>
        public AttributeCollection InlineAttributes {
            get {
                return _inlineAttributes;
            }
        }

        public bool IsEmpty { get { return (_viewState.Count == 0); } }
        public int Count { get { return _viewState.Count; } }

        public static short GetTabIndex(WebControl control) {
            var viewStateAttributes = control as IViewStateAttributes;
            if (viewStateAttributes != null) {
                var tabIndexStr = viewStateAttributes.ViewStateAttributes.InlineAttributes["tabindex"];
                if (!tabIndexStr.IsEmpty()) {
                    short tabIndex;
                    if (short.TryParse(tabIndexStr, out tabIndex)) {
                        return tabIndex;
                    }
                }
            }
            return control.TabIndex;
        }

        public static void SetTabIndex(WebControl control, short value) {
            short settedValue = 0;
            SetTabIndex(control, value, out settedValue);
        }

        public static void SetTabIndex(WebControl control, short value, out short settedValue) {
            var viewStateAttributes = control as IViewStateAttributes;
            if (viewStateAttributes != null) {
                var tabIndexStr = viewStateAttributes.ViewStateAttributes.InlineAttributes["tabindex"];
                if (!tabIndexStr.IsEmpty()) {
                    short tabIndex;
                    if (short.TryParse(tabIndexStr, out tabIndex)) {
                        settedValue = tabIndex;
                    } else {
                        //for tabindexes values outside the specification 
                        settedValue = 0;
                    }
                    control.TabIndex = 0;
                    return;
                }
            }
            control.TabIndex = value;
            settedValue = value;
        }
    }

    public interface IObjectWithViewState {
        void StoreViewState();
    }
}