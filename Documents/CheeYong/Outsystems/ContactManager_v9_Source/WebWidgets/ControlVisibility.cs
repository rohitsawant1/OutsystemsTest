/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using System.Web.UI;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.WebWidgets {
    public class ControlVisibility {
        private const string INPUT_VISIBILITY_KEY_IN_VIEWSTATE = "<OS_INPUT_VISIBILITY>";
        private const string OWNER_KEY_IN_VISIBILITY_DICTIONARY = "<OWNER>";

        private ViewStateAttributes viewState;
        private Control owner;

        private IDictionary<string, bool> GetVisibilityDictionary(bool createIfNotExists) {
            var result = (IDictionary<string, bool>) viewState.GetFromViewState(INPUT_VISIBILITY_KEY_IN_VIEWSTATE, null);

            if ((result == null) && createIfNotExists) {
                result = new Dictionary<string, bool>();
                viewState.SetInViewState(INPUT_VISIBILITY_KEY_IN_VIEWSTATE, result, null);
            }

            return result;
        }

        private void RemoveControlFromDictionary(string id) {
            IDictionary<string, bool> visibilityDictionary = GetVisibilityDictionary(false);

            if (visibilityDictionary == null) {
                return;
            }

            visibilityDictionary.Remove(id);

            if (visibilityDictionary.Count == 0) {
                // Remove the dictionary from the viewstate...
                viewState.SetInViewState(INPUT_VISIBILITY_KEY_IN_VIEWSTATE, null, null);
            }
        }

        private void StoreControlVisibility(string id, Control control) {
            if (control.Visible) {
                RemoveControlFromDictionary(id);
            } else {
                GetVisibilityDictionary(true)[id] = true;
            }
        }

        public bool IsEmpty { get { return (GetVisibilityDictionary(false) == null); } }

        public void RestoreChildControlVisibility(string id) {
            Control controlToRestore = owner.FindControl(id);

            if (controlToRestore == null) {
                return;
            }

            IDictionary<string, bool> visibilityDictionary = GetVisibilityDictionary(false);
            bool wasInvisible;

            if ((visibilityDictionary != null) && visibilityDictionary.TryGetValue(id, out wasInvisible)) {
                controlToRestore.Visible = !wasInvisible;
            } else {
                controlToRestore.Visible = true;
            }
        }

        public void StoreChildControlVisibility(string id) {
            Control controlToStore = owner.FindControl(id);

            if (controlToStore != null) {
                StoreControlVisibility(id, controlToStore);
            }
        }

        public void StoreOwnerControlVisibility() {
            StoreControlVisibility(OWNER_KEY_IN_VISIBILITY_DICTIONARY, owner);
        }

        public bool GetSavedOwnerControlVisibility() {
            IDictionary<string, bool> visibilityDictionary = GetVisibilityDictionary(false);
            bool wasInvisible;

            if ((visibilityDictionary != null) && visibilityDictionary.TryGetValue(OWNER_KEY_IN_VISIBILITY_DICTIONARY, out wasInvisible)) {
                return !wasInvisible;
            } else {
                return true;
            }
        }

        public ControlVisibility(Control owner, ViewStateAttributes viewState) {
            this.owner = owner;
            this.viewState = viewState;
        }
    }
}
