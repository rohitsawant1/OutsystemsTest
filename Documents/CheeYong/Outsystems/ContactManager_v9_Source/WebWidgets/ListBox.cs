/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Web.UI;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.WidgetsRuntimeAPI;

namespace OutSystems.HubEdition.WebWidgets {
    public sealed class ListBox : System.Web.UI.WebControls.ListBox, IViewStateAttributes, IBreakPointControl, IAjaxHandler, IAjaxChangeEvent, IWidgetWithParentEditRecordAndValidation, IGridWidget, IOSControl {

        private bool _executedPreRender = false;
        private bool _valid = true;
        private string _typedValue = "";
        private string _validationMessage = "";


        public ListBox() : base() {
            _viewStateAttributes = new ViewStateAttributes(this, Attributes, ViewState);
        }

        #region IWidgetRuntimeProperties implementation

        public bool Valid {
            get {
                return _valid;
            }
            set {
                _valid = value;
            }
        }

        bool IControlWithValidation.Validate(ScreenContext context) {
            return Valid;
        }

        public bool Mandatory {
            get {
                return true;
            }
            set { }
        }

        public string TypedValue {
            get {
                return _typedValue;
            }
            set {
                _typedValue = value;
            }
        }

        public string ValidationMessage {
            get {
                return _validationMessage;
            }
            set {
                _validationMessage = value;
            }
        }

        public string TypeValidationMessage {
            get {
                return "";
            }
            set { }
        }
        public string MandatoryValidationMessage {
            get {
                return "";
            }
            set { }
        }

        #endregion

        protected override void OnPreRender(EventArgs e) {
            if (!_executedPreRender) {
                // base.OnPreRender(e) registers the postback event
                // only register requires postback event once per request, otherwise in multiple partial refreshes the 
                // control's ids will appear multiple times in the Viewstate in the key __ControlsRequirePostBackKey__
                base.OnPreRender(e);
                _executedPreRender = true;
            }
        }

        public override void RenderControl(HtmlTextWriter writer) {
            if (((OSPage)Page).QuirksMode) {
                base.RenderControl(new HtmlTextWriterOverriderForWebControls(writer, new HtmlTextWriterAttribute[] { HtmlTextWriterAttribute.Disabled, HtmlTextWriterAttribute.Multiple }, new string[] { null, null }));
            } else {
                base.RenderControl(writer);
            }
        }

        //public override bool SupportsDisabledAttribute { get { return true; } }

        protected override void AddAttributesToRender(HtmlTextWriter writer) {
            using (var w = new HtmlTextWriterWithAttributeFilter(writer)) {

                // add to class='' the Valid style
                if (!this._valid) {
                    string cssClass = this.CssClass;
                    if (cssClass != null && cssClass != "") {
                        this.CssClass = this.CssClass + " Not_Valid";
                    } else {
                        this.CssClass = "Not_Valid";
                    }
                }
                this.Attributes.Add("aria-invalid", (!this._valid).ToString().ToLower());

                // TODO JMR #585790 uncommend SupportsDisabledAttribute override and delete this block when targetting .net 4.0+
                bool old_Enabled = Enabled;
                if (!Enabled) {
                    w.AddAttribute(HtmlTextWriterAttribute.Disabled, ((OSPage)Page).QuirksMode ? null : "disabled");
                    Enabled = true;
                }

                // dump ajax onchange handler
                AjaxEventsHelper.AddAjaxEventAttribute(this, AjaxEventType.onAjaxChange, ClientID, UniqueID, "__OSVSTATE", ViewStateAttributes.InlineAttributes);
                base.AddAttributesToRender(w);
                ViewStateAttributes.InlineAttributes.AddAttributes(w);
                Enabled = old_Enabled;
            }
        }

        protected override void Render(HtmlTextWriter writer) {
            RenderBeginTag(writer);
            RenderContents(writer);
            RenderEndTag(writer);

            writer.WriteBeginTag("span");
            writer.WriteAttribute("style", "display: none;");
            writer.WriteAttribute("class", "ValidationMessage");
            writer.WriteAttribute("role", "alert");
            writer.WriteAttribute("id", "ValidationMessage_" + ClientID);
            writer.Write(">");
            writer.WriteEndTag("span");
            if (!_valid)
                writer.Write(JavaScriptManager.GetInvalidInputJS(ClientID, _validationMessage));

        }

        private Hashtable events;
        public void RegisterAjaxEvent(AjaxEventType eventType, Array controlIdsToSend) {
            if (events == null) {
                events = new Hashtable();
            }

            events[eventType] = controlIdsToSend;
        }

        public Hashtable GetRegisteredAjaxEvents() {
            return events;
        }

        public string GridCssClasses { get; set; }

        #region IAjaxChangeEvent implementation

        public event EventHandler AjaxChange;

        public void OnAjaxChange(EventArgs e) {
            AjaxEventsHelper.RaiseAjaxEvent(this, AjaxChange);
        }

        #endregion

        #region IBreakPointControl implementation

        private String _BreakpointHookId;
        private bool _BreakpointHookIsExpressionlessWidget = false;

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get { return _BreakpointHookId; }
            set { _BreakpointHookId = value; }
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get { return _BreakpointHookIsExpressionlessWidget; }
            set { _BreakpointHookIsExpressionlessWidget = value; }
        }

        protected override void OnInit(EventArgs e) {
            base.OnInit(e);
            this.AddGridClassesAttribute();
        }

        public override void DataBind() {
            if (BreakpointHookEvent != null) {
                BreakpointHookEvent(BreakpointHookId, BreakpointHookIsExpressionlessWidget);
            }
            base.DataBind();
        }

        #endregion

        #region IViewStateAttributes Members

        private ViewStateAttributes _viewStateAttributes;
        public ViewStateAttributes ViewStateAttributes {
            get {
                return _viewStateAttributes;
            }
        }

        #endregion

        #region IOSControl members
        string IOSControl.TagName { get { return this.TagName; } }
        string[] IOSControl.CssClass { get { return this.CssClass.Split(' '); } }
        #endregion

        public void ToXml(Object parent, XmlElement baseElem, String fieldName, int detailLevel) {
            // baseElem is already the widget element, so all we need to do is to add the
            // ListBox own properties
            if (detailLevel > 0) {
                VarValue.AppendAttribute(baseElem, "Valid", Valid, TypeKind.Boolean);
                VarValue.AppendAttribute(baseElem, "ValidationMessage", ValidationMessage, TypeKind.Text);
            }
        }

        public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
            // baseElem is already the widget element, so all we need to do is to check the
            // ListBox own properties
            String head = VarValue.GetHead(fields);
            String tail = VarValue.GetTail(fields);
            if (head == "valid")
                variable.Value = Valid;
            else if (head == "validationmessage")
                variable.Value = ValidationMessage;
        }

        public string ParentEditRecord { get; set; }
        public ParentEditRecordPropType ValidatorType { get { return ParentEditRecordPropType.NEEDS_VALIDATION; } }
    }
}