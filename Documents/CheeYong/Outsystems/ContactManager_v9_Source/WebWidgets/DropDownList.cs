/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Specialized;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.WidgetsRuntimeAPI;

namespace OutSystems.HubEdition.WebWidgets {
    [ValidationProperty("SelectedItem")]
    public sealed class DropDownList : ListControl, IPostBackDataHandler, IViewStateAttributes, IBreakPointControl, IAjaxHandler, IAjaxChangeEvent, IWidgetWithParentEditRecordAndValidation, IGridWidget, IOSControl {

        private bool _valid = true;
        private string _typedValue = "";
        private string _validationMessage = "";
        private string _mandatoryValidationMessage = "";
        private bool _mandatory = false;

        public DropDownList()
            : base() {
            _viewStateAttributes = new ViewStateAttributes(this, Attributes, ViewState);
        }

        #region IWidgetRuntimeProperties implementation

        public bool Valid {
            get { return _valid; }
            set { _valid = value; }
        }

        bool IControlWithValidation.Validate(ScreenContext context) {
            return Valid;
        }

        public bool Mandatory {
            get { return _mandatory; }
            set { _mandatory = value; }
        }

        public string TypedValue {
            get { return _typedValue; }
            set { _typedValue = value; }
        }

        public string ValidationMessage {
            get { return _validationMessage; }
            set { _validationMessage = value; }
        }

        public string TypeValidationMessage {
            get { return ""; }
            set { }
        }

        public delegate string GetString();
        public event GetString DefaultMandatoryValidationMessage;

        public string MandatoryValidationMessage {
            get {
                if (_mandatoryValidationMessage == "") {
                    _mandatoryValidationMessage = DefaultMandatoryValidationMessage();
                }
                return _mandatoryValidationMessage;
            }
            set { _mandatoryValidationMessage = value; }
        }

        #endregion

        protected override void AddAttributesToRender(HtmlTextWriter writer) {
            using (var w = new HtmlTextWriterWithAttributeFilter(writer)) {
                Page.VerifyRenderingInServerForm(this);

                w.AddAttribute(HtmlTextWriterAttribute.Name, base.UniqueID);

                bool old_Enabled = Enabled;
                if (!Enabled) {
                    w.AddAttribute(HtmlTextWriterAttribute.Disabled, ((OSPage)Page).QuirksMode ? null : "disabled");
                    Enabled = true;
                }

                // add to class='' the Mandatory style
                if (this._mandatory) {
                    string cssClass = this.CssClass;
                    if (cssClass != null && cssClass != "") {
                        this.CssClass = this.CssClass + " Mandatory";
                    } else {
                        this.CssClass = "Mandatory";
                    }
                    this.Attributes.Add("aria-required", "true");
                }

                // add to class='' the Valid style
                if (!this._valid) {
                    string cssClass = this.CssClass;
                    if (cssClass != null && cssClass != "") {
                        this.CssClass = this.CssClass + " Not_Valid";
                    } else {
                        this.CssClass = "Not_Valid";
                    }
                    this.Attributes.Add("aria-invalid", "true");
                }
                this.Attributes.Add("aria-invalid", (!this._valid).ToString().ToLower());

                // dump ajax onchange handler
                AjaxEventsHelper.AddAjaxEventAttribute(this, AjaxEventType.onAjaxChange, ClientID, UniqueID, "__OSVSTATE", ViewStateAttributes.InlineAttributes);
                base.AddAttributesToRender(w);
                ViewStateAttributes.InlineAttributes.AddAttributes(w);
                Enabled = old_Enabled;
            }
        }

        protected override ControlCollection CreateControlCollection() {
            return new EmptyControlCollection(this);
        }

        protected override void RenderContents(HtmlTextWriter writer) {
            ListItemCollection collection1;
            int num1;
            bool flag1;
            int num2;
            ListItem item1;
            collection1 = base.Items;
            num1 = base.Items.Count;
            flag1 = false;
            if (num1 > 0) {
                for (num2 = 0; (num2 < num1); num2 = (num2 + 1)) {
                    item1 = collection1[num2];
                    writer.WriteBeginTag("option");
                    if (item1.Selected) {
                        if (flag1) {
                            throw new HttpException("There is already an item selected");
                        }
                        flag1 = true;
                        writer.WriteAttribute("selected", "selected", false);

                    }
                    writer.WriteAttribute("value", item1.Value, true);
                    writer.Write('>');
                    HttpUtility.HtmlEncode(item1.Text, writer);
                    writer.WriteEndTag("option");
                    writer.WriteLine();
                }
            }
        }

        protected override void Render(HtmlTextWriter writer) {
            RenderBeginTag(writer);
            RenderContents(writer);
            RenderEndTag(writer);

            writer.WriteBeginTag("span");
            writer.WriteAttribute("style", "display: none;");
            writer.WriteAttribute("class", "ValidationMessage");
            writer.WriteAttribute("role", "alert");
            writer.WriteAttribute("id", "ValidationMessage_" + ClientID);
            writer.Write(">");
            writer.WriteEndTag("span");
            if (!_valid)
                writer.Write(JavaScriptManager.GetInvalidInputJS(ClientID, _validationMessage));

        }

        bool IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection) {
            string[] array = postCollection.GetValues(postDataKey);
            if (array != null)
                SelectedValue = array[0];
            // As we don't store SelectedValue in ViewState, we don't know if changed or not, so we have to force the event to always occur
            return true;
        }

        void IPostBackDataHandler.RaisePostDataChangedEvent() {
            OnSelectedIndexChanged(EventArgs.Empty);
        }

        public override int SelectedIndex {
            get {
                int num = base.SelectedIndex;
                if ((num < 0) && (base.Items.Count > 0)) {
                    base.Items[0].Selected = true;
                    num = 0;
                }
                return num;
            }

            set {
                base.SelectedIndex = value;
            }
        }

        public override string ToolTip {
            get {
                return string.Empty;
            }
            set { }
        }

        private string _selectedValue = "";
        public override string SelectedValue {
            get {
                return _selectedValue;
            }
            set {
                _selectedValue = value;
            }
        }

        public string ParentEditRecord { get; set; }
        public ParentEditRecordPropType ValidatorType { get { return ParentEditRecordPropType.NEEDS_VALIDATION; } }

        private Hashtable events;
        public void RegisterAjaxEvent(AjaxEventType eventType, Array controlIdsToSend) {
            if (events == null) {
                events = new Hashtable();
            }

            events[eventType] = controlIdsToSend;
        }

        public Hashtable GetRegisteredAjaxEvents() {
            return events;
        }

        public string GridCssClasses { get; set; }

        #region IAjaxChangeEvent implementation

        public event EventHandler AjaxChange;

        public void OnAjaxChange(EventArgs e) {
            AjaxEventsHelper.RaiseAjaxEvent(this, AjaxChange);
        }

        #endregion

        #region IBreakPointControl implementation

        private String _BreakpointHookId;
        private bool _BreakpointHookIsExpressionlessWidget = false;

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get { return _BreakpointHookId; }
            set { _BreakpointHookId = value; }
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get { return _BreakpointHookIsExpressionlessWidget; }
            set { _BreakpointHookIsExpressionlessWidget = value; }
        }

        protected override void OnInit(EventArgs e) {
            base.OnInit(e);
            this.AddGridClassesAttribute();
        }

        public override void DataBind() {
            if (BreakpointHookEvent != null) {
                BreakpointHookEvent(BreakpointHookId, BreakpointHookIsExpressionlessWidget);
            }
            //#91380 - must clear existing items to avoid lists with repeated items after more than one ajax refresh
            base.Items.Clear();
            base.DataBind();
        }

        #endregion

        #region IViewStateAttributes Members

        private ViewStateAttributes _viewStateAttributes;
        public ViewStateAttributes ViewStateAttributes {
            get {
                return _viewStateAttributes;
            }
        }

        #endregion

        #region IOSControl members
        string IOSControl.TagName { get { return this.TagName; } }
        string[] IOSControl.CssClass { get { return this.CssClass.Split(' '); } }
        #endregion

        public void ToXml(Object parent, XmlElement baseElem, String fieldName, int detailLevel) {
            // baseElem is already the widget element, so all we need to do is to add the
            // ComboBox own properties
            if (detailLevel > 0) {
                VarValue.AppendAttribute(baseElem, "Valid", Valid, TypeKind.Boolean);
                VarValue.AppendAttribute(baseElem, "ValidationMessage", ValidationMessage, TypeKind.Text);
            }
        }

        public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
            // baseElem is already the widget element, so all we need to do is to check the
            // ComboBox own properties
            String head = VarValue.GetHead(fields);
            String tail = VarValue.GetTail(fields);
            if (head == "valid")
                variable.Value = Valid;
            else if (head == "validationmessage")
                variable.Value = ValidationMessage;
        }
    }
}
