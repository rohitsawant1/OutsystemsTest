/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Web.UI;
using System.Web.UI.WebControls;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.Web;

namespace OutSystems.HubEdition.WebWidgets {
    public sealed class OsTemplateColumn : TemplateColumn, IBreakPointControl {

        public OsTemplateColumn() : base() {
            ColumnSpan = 1;
        }

        public int ColumnSpan { get; set; }

        public string HeaderId { get; set; }
        public string ItemId { get; set; }


        public override void InitializeCell(System.Web.UI.WebControls.TableCell cell, int columnIndex, ListItemType itemType) {
            base.InitializeCell(cell, columnIndex, itemType);

            if (this.ColumnSpan != 1) {
                cell.ColumnSpan = this.ColumnSpan;
            }

            switch (itemType) {
            case ListItemType.Header:
                if (HeaderTemplate == null) {
                    cell.Visible = false;
                } else {
                    InitializeBreakpointCell((IBreakPointControl) cell);
                }
                if (!string.IsNullOrEmpty(HeaderId)) {
                    cell.ID = HeaderId;
                }
                break;
            case ListItemType.Item:
            case ListItemType.AlternatingItem:
                if (ItemTemplate == null) {
                    cell.Visible = false;
                } else {
                    InitializeBreakpointCell((IBreakPointControl) cell);
                }
                if (!string.IsNullOrEmpty(ItemId)) {
                    cell.ID = ItemId;
                }
                break;
            default:
                break;
            }
        }

        private void InitializeBreakpointCell(IBreakPointControl cell) {
            cell.BreakpointHookId = this.BreakpointHookId;
            cell.BreakpointHookIsExpressionlessWidget = this.BreakpointHookIsExpressionlessWidget;
            if (this.BreakpointHookEvent != null) {
                cell.BreakpointHookEvent += delegate(string breakpointId, bool breakpointIsExpressionlessWidget) {
                    return this.BreakpointHookEvent(breakpointId, breakpointIsExpressionlessWidget);
                };
            }
        }

        #region IBreakPointControl implementation

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get;
            set;
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get;
            set;
        }

        public void DataBind() {
        }

        #endregion

    }
}