/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.Web;
using System.Collections.Generic;

namespace OutSystems.HubEdition.WebWidgets {
    public sealed class OSDataGrid : DataGrid, IWebListRecordWidget, IViewStateAttributes, IRowRendering, IListRefresh, IBreakPointControl, IAjaxHandler, IAjaxClickEvent, IOSControl, IGridWidget {

        public delegate string ViewStateStorage(object dataItem, int index);

        public event ViewStateStorage SetViewStateStorage;

        public event EventHandler ClearViewStateStorage;

        public event EventHandler ListRefreshDataBind;

        public ListRecordRtWidget RtWidget;

        private int _defaultLineCount = 50;

        private bool _enableLegacyRendering = false;
        public bool EnableLegacyRendering {
            get {
                return _enableLegacyRendering;
            }
        }

        public void DoListRefreshDataBind() {
            ListRefreshDataBind(this, null);
        }


        public OSDataGrid()
            : base() {
            AllowPaging = true;
            AllowCustomPaging = true;

            RtWidget = new ListRecordRtWidget(this);
            _viewStateAttributes = new ViewStateAttributes(this, Attributes, ViewState);
        }


        private ViewStateAttributes _viewStateAttributes;
        public ViewStateAttributes ViewStateAttributes {
            get { return _viewStateAttributes; }
        }

        private bool _isDataBinding;
        public bool IsDataBinding {
            get { return _isDataBinding; }
        }

        private Func<string> emptyMessageExpression;
        public Func<string> EmptyMessageExpression {
            set { emptyMessageExpression = value; }
        }

        public string EmptyMessage {
            get { return emptyMessageExpression == null ? null : emptyMessageExpression(); }
        }

        private bool _isEmpty;
        public bool IsEmpty {
            get { return _isEmpty; }
        }

        private bool _showHeader = true;

        public override bool ShowHeader {
            get { return _showHeader; }
            set { _showHeader = value; }
        }

        public override int PageSize {
            get {
                return LineCount;
            }
            set {
                LineCountLastEvaluation = value;
            }
        }

        private string _headerLineStyle;
        public string HeaderLineStyle {
            get { return _headerLineStyle; }
            set { _headerLineStyle = value; }
        }

        private string _oddLineStyle;
        public string OddLineStyle {
            get { return _oddLineStyle; }
            set { _oddLineStyle = value; }
        }

        private string _evenLineStyle;
        public string EvenLineStyle {
            get { return _evenLineStyle; }
            set { _evenLineStyle = value; }
        }




        /// <summary>
        /// Stores the current row ids to the viewstate
        /// </summary>
        public void StoreViewStateRowIdsandItemIndexes() {
            // store the current ids of every child rows...
            OSDataGridTable child = Controls[0] as OSDataGridTable;
            ArrayList rowIds = new ArrayList(child.Rows.Count);
            ArrayList itemIndexes = new ArrayList(child.Rows.Count);
            int i = 1;
            foreach (OSDataGridItem item in child.Rows) {
                if (item.ID == null)
                    item.ID = OSDataGridItem.FormatId(i, EnableLegacyRendering);
                rowIds.Add(OSDataGridItem.GetIntegerId(item.ID, EnableLegacyRendering));
                itemIndexes.Add(item.ItemIndex);
                i++;
            }
            ViewState["RowIds"] = rowIds;
            ViewState["RowIdxs"] = itemIndexes;
        }


        /// <summary>
        /// Gets the Row ids saved in the current viewstate
        /// </summary>
        /// <returns></returns>
        public ArrayList GetViewStateRowIds() {
            return (ArrayList)ViewState["RowIds"];
        }


        /// <summary>
        /// Gets the Item data indexes saved in the current viewstate
        /// </summary>
        /// <returns></returns>
        public ArrayList GetViewStateItemIndexes() {
            return (ArrayList)ViewState["RowIdxs"];
        }


        /// <summary>
        /// Clears the row ids and item indexes states
        /// </summary>
        public void ClearViewStateRowIdsandItemIndexes() {
            ViewState.Remove("RowIds");
            ViewState.Remove("RowIdxs");
        }


        protected override object SaveViewState() {
            // remove non-necessary attributes from the viewstate
            ViewState.Remove("PageCount");
            ViewState.Remove("DataKeys");

            return base.SaveViewState();
        }


        public void EnsureChildControlsOnPostback() {
            ViewStateAttributes.SetInViewState("EnsureChildControls", true, false);
        }

        protected override void LoadViewState(object savedState) {
            base.LoadViewState(savedState);

            // check if we need to ensure child controls for this datagrid for running onSubmits
            if ((bool)ViewStateAttributes.GetFromViewState("EnsureChildControls", false)) {
                ViewState.Remove("EnsureChildControls");
                EnsureChildControls();
            }
        }


        // override implementation of selected index, to avoid it from going to the viewstate		
        private int _selectedIndex = -1;
        public override int SelectedIndex {
            get {
                return _selectedIndex;
            }
            set {
                _selectedIndex = value;
            }
        }

        /// <summary>
        /// Gets the current selected item control in the datagrid
        /// </summary>
        public OSDataGridItem SelectedItemControl {
            get {
                if (_selectedIndex == -1)
                    return null;
                else {
                    OSDataGridTable child = (OSDataGridTable)Controls[0];
                    // find the control corresponding to the selected index
                    ArrayList indexes = GetViewStateItemIndexes();
                    if (indexes != null) {
                        // search for the selected index in the indexes list
                        int idx = 0;
                        for (int i = 0; i < indexes.Count; i++) {
                            if ((int)indexes[i] == _selectedIndex) {
                                idx = i;
                                break;
                            }
                        }
                        return (OSDataGridItem)child.Rows[idx];
                    } else {
                        // no index data
                        return (OSDataGridItem)child.Rows[_selectedIndex + 2];
                    }
                }
            }
        }

        public IEnumerable<Control> Rows {
            get {
                if (Controls.Count > 0) {
                    foreach (OSDataGridItem item in this.Controls[0].Controls) {
                        yield return item;
                    }
                }
            }
        }

        private OSDataGridItem _headerItemControl;
        public OSDataGridItem HeaderItemControl {
            get {
                return _headerItemControl;
            }
            set {
                _headerItemControl = value;
            }
        }

        protected override bool OnBubbleEvent(object source, EventArgs e) {
            // set the selected index
            if (e is DataGridCommandEventArgs) {
                SelectedIndex = ((DataGridCommandEventArgs)e).Item.ItemIndex;
            } else if (e is AjaxEventArgs) {
                // ajax bubble up event
                // find the datagriditem that is parent of the sender control to set the selected index
                Control ctrl = source as Control;
                while (!(ctrl is DataGridItem))
                    ctrl = ctrl.Parent;
                SelectedIndex = ((DataGridItem)ctrl).ItemIndex;

                // create a datagrid command ajax event args instance, so that it can be trapped onbubble up by the table records select handler
                e = new DataGridCommandAjaxEventArgs((DataGridItem)ctrl, (Control)source, (AjaxEventArgs)e);
            }
            // set the datasource position so that the current record is set if the list is not empty and in memory
            IOSList rl = DataSource;
            if (rl != null && rl.Length > 0 && SelectedIndex != -1) {
                try {
                    rl.SetPosition(SelectedIndex);
                } catch (ArgumentOutOfRangeException) {
                    throw new HEMessageException(MR.GetMessage(MessageId.AjaxListModified, "Table Records", this.ID));
                }
            }

            // keep the current row number of the record list before bubbling up the event			
            int beforeBubbleCurrentRowNumber = (rl != null) ? rl.CurrentRowNumber : 0;

            // follow up the event
            bool ret = base.OnBubbleEvent(source, e);

            // store viewstate changes for the current row. Skip if:
            // - the record list is empty 
            // - the current row number is not the same as the one before bubbling up event - happens when the list is iterated inside the action
            if (ret && rl != null && (rl.Length > 0) && (SelectedIndex != -1) && (beforeBubbleCurrentRowNumber == rl.CurrentRowNumber)) {
                SetViewStateStorage(rl.Current, SelectedIndex);
            }

            return ret;
        }


        // override to create repeated items from DataSource
        protected override void OnDataBinding(EventArgs e) {
            // clear widget viewstate storage variable
            ClearViewStateStorage(this, e);
            // clear any row ids and item indexes, since we are rebuilding all the list
            ClearViewStateRowIdsandItemIndexes();
            _isDataBinding = true;
            // execute regular datagrid databind
            base.OnDataBinding(e);
            _isDataBinding = false;

            // add empty row if necessary
            AddEmptyRow();
        }

        private int TotalColumnSpan {
            get {
                int colspan = 0;
                foreach (OsTemplateColumn col in Columns) {
                    // Sum the colspan of the header cells
                    if (col.HeaderTemplate != null) {
                        colspan += col.ColumnSpan;
                    }
                }

                return colspan;
            }
        }

        /// <summary>
        /// Adds the empty row item if necessary
        /// </summary>
        private void AddEmptyRow() {
            bool any = false;
            foreach (OSDataGridItem item in this.Controls[0].Controls) {
                if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem) {
                    any = true;
                    break;
                }
            }
            if (!any) {
                _isEmpty = true;
                // add empty row...
                OSDataGridItem dataGridItem = new OSDataGridItem(0, 0, ListItemType.Item);

                // mark this as empty message item
                dataGridItem.IsEmptyMessageItem = true;
                OSDataGridTableCell tableCell = new OSDataGridTableCell();
                tableCell.ColumnSpan = TotalColumnSpan;
                tableCell.CssClass = OddLineStyle;

                tableCell.Text = EmptyMessage;
                dataGridItem.Cells.Add(tableCell);

                OSDataGridTable child = (OSDataGridTable)Controls[0];
                child.Rows.Add(dataGridItem);
                // Making the id item ok based on the number of elements
                dataGridItem.ID = OSDataGridItem.FormatId(child.Rows.Count, EnableLegacyRendering);
            } else {
                _isEmpty = false;
            }
        }


        protected override void CreateControlHierarchy(bool useDataSource) {

            SelectedIndex = -1;

            if (useDataSource) {
                DataSource.StartIteration();
                if (!DataSource.Empty) {
                    DataSource.Advance(StartIndex);
                }
            }

            base.CreateControlHierarchy(useDataSource);

            if (useDataSource) {
                DataSource.EndIteration();
            }

            // replace with created Table control with OSTable, for controlling viewstate growth and for restoring previous row ids
            ArrayList rowIds = GetViewStateRowIds();
            ArrayList itemIndexes = GetViewStateItemIndexes();

            System.Web.UI.WebControls.Table table = (System.Web.UI.WebControls.Table)this.Controls[0];

            // determine if row ids are being generated in legacy mode or not
            string firstClientId = table.Rows[0].ClientID;
            int separatorIndex = firstClientId.IndexOf("_");
            if (separatorIndex >= 0) {
                _enableLegacyRendering = firstClientId.Substring(separatorIndex).StartsWith("__ctl");
            }

            OSDataGridTable osTable = OSDataGridTable.FromTable(this, table, rowIds, itemIndexes);
            this.Controls.Clear();
            this.Controls.Add(osTable);
        }

        public event EventHandler HeaderRowDataBinding;
        public event EventHandler DataRowDataBinding;

        protected override void InitializePager(DataGridItem item, int columnSpan, PagedDataSource pagedDataSource) {
            base.InitializePager(item, columnSpan, pagedDataSource);
            item.Cells.Clear();
        }

        protected override void InitializeItem(DataGridItem item, DataGridColumn[] columns) {
            InitializeItem(item, columns, IsDataBinding, true);
        }

        private void InitializeItem(DataGridItem item, bool recreateChildControls) {
            DataGridColumn[] columns = new DataGridColumn[Columns.Count];
            Columns.CopyTo(columns, 0);
            InitializeItem(item, columns, true, recreateChildControls);
        }

        private void InitializeItem(DataGridItem item, DataGridColumn[] columns, bool rowDatabinding, bool recreateChildControls) {
            if (rowDatabinding) {
                switch (item.ItemType) {
                    case ListItemType.Header:
                        if (HeaderRowDataBinding != null) {
                            HeaderRowDataBinding(item, null);
                        }
                        break;
                    case ListItemType.Item:
                    case ListItemType.AlternatingItem:
                        if (DataRowDataBinding != null) {
                            DataRowDataBinding(item, null);
                        }
                        break;
                    default:
                        break;
                }
            }

            if (recreateChildControls) {
                item.Cells.Clear();

                TableCellCollection cells = item.Cells;
                for (int i = 0; i < columns.Length; i++) {
                    System.Web.UI.WebControls.TableCell cell;
                    if (item.ItemType == ListItemType.Header) {
                        cell = new OSDataGridTableHeaderCell();
                    } else {
                        cell = new OSDataGridTableCell();
                    }
                    cell.CssClass = getCellClass(item);
                    columns[i].InitializeCell(cell, i, item.ItemType);
                    cells.Add(cell);
                }
            }
        }

        private string getCellClass(DataGridItem item) {
            switch (item.ItemType) {
                case ListItemType.Header:
                    return HeaderLineStyle;
                case ListItemType.Item:
                    return OddLineStyle;
                case ListItemType.AlternatingItem:
                    return EvenLineStyle;
                default:
                    return "";
            }
        }

        protected override DataGridItem CreateItem(int itemIndex, int dataSourceIndex, ListItemType itemType) {
            var item = InnerCreateItem(itemIndex, dataSourceIndex, itemType);
            // #116141 - keep a reference to the header item for easier getting ids of widgets in the header
            if (itemType == ListItemType.Header && ShowHeader) {
                HeaderItemControl = item;
            }
            return item;
        }

        private OSDataGridItem InnerCreateItem(int itemIndex, int dataSourceIndex, ListItemType itemType) {
            switch (itemType) {
                case ListItemType.Pager:
                case ListItemType.Footer:
                    return new OSDataGridDummyItem(itemIndex, dataSourceIndex, itemType);
                default:
                    return new OSDataGridItem(itemIndex, dataSourceIndex, itemType);
            }
        }

        public void RemoveItem(int itemIndex) {
            // clear selected item, if deleting the current selected index
            if (SelectedIndex == itemIndex)
                SelectedIndex = -1;

            // remove the correspondent data item from the controls			
            OSDataGridTable child = (OSDataGridTable)Controls[0];
            // find the row corresponding to this index
            int rowIndexToRemove = -1;
            for (int i = 0; i < child.Rows.Count; i++) {
                OSDataGridItem item = (OSDataGridItem)child.Rows[i];
                bool isItem = item.ItemType == ListItemType.AlternatingItem || item.ItemType == ListItemType.Item;
                if (isItem && item.ItemIndex == itemIndex) {
                    rowIndexToRemove = i;
                    break;
                }
            }

            IOSList rl = DataSource;

            if (rowIndexToRemove == -1 || itemIndex >= rl.Length) {
                throw new ArgumentException("Index of out range");
            }

            child.Rows.RemoveAt(rowIndexToRemove);

            // update the datasource	
            rl.Remove(itemIndex);

            // update item count
            ViewState["_!ItemCount"] = rl.Length;

            // decrease higher item indexes in the data grid
            foreach (OSDataGridItem otherItem in child.Rows) {
                if (otherItem.ItemIndex > itemIndex) {
                    otherItem.SetItemIndex(otherItem.ItemIndex - 1);
                }
            }

            // add empty row if necessary
            AddEmptyRow();

            // update row ids in the viewstate 
            StoreViewStateRowIdsandItemIndexes();
        }


        /// <summary>
        /// Appends an item to the datagrid
        /// </summary>
        /// <param name="dataItem"></param>
        /// <returns></returns>
        public void AppendItem(object dataItem) {
            IOSList rl = DataSource;
            InsertItem(rl.Length, dataItem);
        }


        /// <summary>
        /// Inserts an item to the datagrid
        /// </summary>
        /// <param name="param name="dataItemIndex"></param>
        /// <param name="dataItem"></param>
        public void InsertItem(int dataItemIndex, object dataItem) {
            // check if the current page is full
            IOSList rl = DataSource;

            // update the datasource			
            rl.Insert(dataItem, dataItemIndex);

            // set the record list position and databind the item
            rl.SetPosition(dataItemIndex);

            // create an item at the end of the list
            OSDataGridItem item = (OSDataGridItem)CreateItem(dataItemIndex, dataItemIndex, ListItemType.Item);
            DataGridItemEventArgs e = new DataGridItemEventArgs(item);

            // initialize item
            item.DataItem = dataItem;
            InitializeItem(item, true);
            this.OnItemCreated(e);

            OSDataGridTable child = (OSDataGridTable)Controls[0];

            // remove any empty message row...
            if (((OSDataGridItem)child.Rows[child.Rows.Count - 1]).IsEmptyMessageItem)
                child.Rows.RemoveAt(child.Rows.Count - 1);

            // insert the item before the footer and pager items
            int footerIndex = child.Rows.Count - 2;

            int footerId;
            if (child.Rows[footerIndex].ID != null)
                footerId = OSDataGridItem.GetIntegerId(child.Rows[footerIndex].ID, EnableLegacyRendering);
            else
                footerId = footerIndex + 1;

            child.Rows.AddAt(footerIndex, item);

            // generate a new item id for this control
            int id = footerId;
            item.ID = OSDataGridItem.FormatId(id, EnableLegacyRendering);

            // increase the footer and pager items, so that no repateated ids exist in the page
            child.Rows[child.Rows.Count - 2].ID = OSDataGridItem.FormatId(id + 1, EnableLegacyRendering);
            child.Rows[child.Rows.Count - 1].ID = OSDataGridItem.FormatId(id + 2, EnableLegacyRendering);

            ViewState["_!ItemCount"] = rl.Length;
            _isEmpty = false;

            // increase higher item indexes in the data grid
            foreach (OSDataGridItem otherItem in child.Rows) {
                if (otherItem.ItemIndex >= dataItemIndex && otherItem != item) {
                    otherItem.SetItemIndex(otherItem.ItemIndex + 1);
                }
            }

            // update row ids in the viewstate 
            StoreViewStateRowIdsandItemIndexes();

            SelectedIndex = dataItemIndex;

            item.DataBind();
            this.OnItemDataBound(e);

            item.DataItem = null;
        }


        public void RefreshItem(int dataItemIndex) {
            // set the datasource position
            IOSList rl = DataSource;
            rl.SetPosition(dataItemIndex);
            SelectedIndex = dataItemIndex;

            // databind the correspondent datagriditem
            int controlIndex = GetItemControlIndex(dataItemIndex);
            OSDataGridTable child = (OSDataGridTable)Controls[0];
            OSDataGridItem item = (OSDataGridItem)child.Rows[controlIndex];

            // initialize item
            item.DataItem = rl.Current;
            InitializeItem(item, false);
            item.DataBind();
        }


        /// <summary>
        /// Renders the last row in the datagrid
        /// </summary>
        /// <param name="writer"></param>
        public void RenderLastRow(HtmlTextWriter writer) {
            // get the last row before the footer and pager and render it
            OSDataGridTable child = (OSDataGridTable)Controls[0];
            child.Rows[child.Rows.Count - 3].RenderControl(writer);
        }

        /// <summary>
        /// Renders the empty message row
        /// </summary>
        /// <param name="writer"></param>
        public void RenderEmptyMessage(HtmlTextWriter writer) {
            // get the last row and render it
            OSDataGridTable child = (OSDataGridTable)Controls[0];
            child.Rows[child.Rows.Count - 1].RenderControl(writer);
        }


        /// <summary>
        /// Renders a specific row of the datagrid
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rowIndex"></param>
        public void RenderRow(HtmlTextWriter writer, int dataItemIndex) {
            // find the control index for the data item index
            int controlIndex = GetItemControlIndex(dataItemIndex);
            OSDataGridTable child = (OSDataGridTable)Controls[0];
            child.Rows[controlIndex].RenderControl(writer);
        }


        /// <summary>
        /// Gets the current item control index for a given data item index
        /// </summary>
        /// <param name="dataItemIndex"></param>
        /// <returns></returns>
        private int GetItemControlIndex(int dataItemIndex) {
            ArrayList indexes = GetViewStateItemIndexes();
            int controlIndex;
            if (indexes == null)
                controlIndex = dataItemIndex + 2;
            else {
                for (controlIndex = 0; controlIndex < indexes.Count; controlIndex++) {
                    if ((int)indexes[controlIndex] == dataItemIndex) {
                        break;
                    }
                }
            }
            return controlIndex;
        }

        protected override void OnPreRender(EventArgs e) {
            if (ShowHeader && Controls.Count > 0) {
                var table = (System.Web.UI.WebControls.Table)Controls[0];

                // Pager row
                table.Rows[0].TableSection = TableRowSection.TableHeader;
                // Header row
                table.Rows[1].TableSection = TableRowSection.TableHeader;
            }
            base.OnPreRender(e);
        }

        protected override void Render(HtmlTextWriter writer) {
            AjaxEventsHelper.AddAjaxEventAttribute(this, AjaxEventType.onAjaxClick, ClientID, UniqueID, "__OSVSTATE", ViewStateAttributes.InlineAttributes);
            ViewStateAttributes.InheritInlineAttributes();
            ViewStateAttributes.InlineAttributes.Add("class", _isEmpty ? (string.IsNullOrEmpty(CssClass) ? CssClass : CssClass + " ") + "Empty" : CssClass);

            // Render of the datagrid will be delegated in the child OSDataGridTable control
            base.Render(writer);
        }

        #region IWebListRecordWidgetBase Members

        public new IOSList DataSource {
            get { return (IOSList)base.DataSource; }
            set { base.DataSource = value; }
        }


        public int StartIndex {
            get {
                int startIndexEvaluation = Math.Max(startIndexExpression(), 0);
                StartIndexLastEvaluation = startIndexEvaluation;
                return startIndexEvaluation;
            }
        }

        private Func<int> startIndexExpression;
        public Func<int> StartIndexExpression {
            set { startIndexExpression = value; }
        }
        // Used for debug purposes (debugger crashes trying to evaluate these expressions)
        public int? StartIndexLastEvaluation { get; private set; }
        public int? LineCountLastEvaluation { get; private set; }

        public int LineCount {
            get {
                if (IsDataBinding) {
                    LineCountLastEvaluation = LineCountExpression();
                } else {
                    int eval = LineCountExpression();
                    LineCountLastEvaluation = (Math.Max(eval, (int)(ViewState["_!ItemCount"] ?? eval)));
                }
                return (int)LineCountLastEvaluation;
            }
        }

        private Func<int> _lineCountExpression;
        public Func<int> LineCountExpression {
            set {
                _lineCountExpression = value;
            }
            get {
                return new Func<int>(
                        () => {
                            // Assure we have a positive LineCount value
                            int _temp = _lineCountExpression();
                            return _temp > 0 ? _temp : _defaultLineCount;
                        }
                    );
            }
        }

        #endregion

        #region IBreakPointControl implementation

        private String _BreakpointHookId;
        private bool _BreakpointHookIsExpressionlessWidget = false;

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get { return _BreakpointHookId; }
            set { _BreakpointHookId = value; }
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get { return _BreakpointHookIsExpressionlessWidget; }
            set { _BreakpointHookIsExpressionlessWidget = value; }
        }

        protected override void OnInit(EventArgs e) {
            base.OnInit(e);
            this.AddGridClassesAttribute();
        }

        public override void DataBind() {
            if (BreakpointHookEvent != null) {
                BreakpointHookEvent(BreakpointHookId, BreakpointHookIsExpressionlessWidget);
            }

            base.DataBind();
        }

        // Fix for stackoverflow on exceptions during DataBind
        protected override void DataBindChildren() {
            if (!this.HasControls())
                return;

            int count = this.Controls.Count;
            for (int index = 0; index < count; ++index)
                this.Controls[index].DataBind();
        }

        #endregion


        private Hashtable events;
        public void RegisterAjaxEvent(AjaxEventType eventType, Array controlIdsToSend) {
            if (events == null) {
                events = new Hashtable();
            }

            events[eventType] = controlIdsToSend;
        }

        public Hashtable GetRegisteredAjaxEvents() {
            return events;
        }

        #region IAjaxClickEvent implementation

        public event EventHandler AjaxClick;

        public void OnAjaxClick(EventArgs e) {
            AjaxEventsHelper.RaiseAjaxEvent(this, AjaxClick);
        }

        #endregion

        #region IOSControl members
        string IOSControl.TagName { get { return this.TagName; } }
        string[] IOSControl.CssClass { get { return this.CssClass.Split(' '); } }
        #endregion

        public string GridCssClasses { get; set; }
    }
}