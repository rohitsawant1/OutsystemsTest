/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Web.UI;
using System.Web.UI.WebControls;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.RuntimePlatform.Web;

namespace OutSystems.HubEdition.WebWidgets {
    public sealed class OSDataGridTable : ViewStateSpecializations.ViewStateLessTable, IOSControl {

        private string _parentID;
        public OSDataGridTable(string parentID) {
            _parentID = parentID;
        }

        private OSDataGrid ParentDataGrid {
            get { return (OSDataGrid) Parent; }
        }

        protected override void AddAttributesToRender(HtmlTextWriter writer) {
            using (var w = new HtmlTextWriterWithAttributeFilter(writer)) {
                base.AddAttributesToRender(w);
                ParentDataGrid.ViewStateAttributes.InlineAttributes.AddAttributes(w);

                if (_parentID != null)
                    w.AddAttribute(HtmlTextWriterAttribute.Id, _parentID);
            }
        }

        public static OSDataGridTable FromTable(OSDataGrid parent, System.Web.UI.WebControls.Table table, ArrayList rowIds, ArrayList itemIndexes) {
            OSDataGridTable osTable = new OSDataGridTable(parent.ClientID);
            // copy everything from table
            // Properties
            osTable.BackImageUrl = table.BackImageUrl;
            osTable.Caption = table.Caption;
            osTable.CaptionAlign = table.CaptionAlign;
            osTable.CellPadding = table.CellPadding;
            osTable.CellSpacing = table.CellSpacing;
            osTable.GridLines = table.GridLines;
            osTable.HorizontalAlign = table.HorizontalAlign;

            // Rows
            TableRow[] tableRows = new TableRow[table.Rows.Count];
            table.Rows.CopyTo(tableRows, 0);

            int i = 0;
            foreach (OSDataGridItem row in tableRows) {
                try {
                    // restore the original id of this row, if set
                    if (rowIds != null) {
                        row.ID = OSDataGridItem.FormatId((int)rowIds[i], parent.EnableLegacyRendering);
                    } else {
                        row.ID = OSDataGridItem.FormatId(i + 1, parent.EnableLegacyRendering);
                    }

                    // set the item index, if set
                    if (itemIndexes != null) {
                        row.SetItemIndex((int)itemIndexes[i]);
                    }

                } catch(ArgumentOutOfRangeException) {
                    throw new HEMessageException(MR.GetMessage(MessageId.AjaxListModified, "Table Records", parent.ClientID));
                }

                osTable.Rows.Add(row);
                i++;
            }

            return osTable;
        }

        // Fix for stackoverflow on exceptions during DataBind
        protected override void DataBindChildren() {
            if (!this.HasControls())
                return;

            int count = this.Controls.Count;
            for (int index = 0; index < count; ++index)
                this.Controls[index].DataBind();
        }

        #region IOSControl members
        string IOSControl.TagName { get { return this.TagName; } }
        string[] IOSControl.CssClass { get { return this.CssClass.Split(' '); } }
        #endregion
    }
}