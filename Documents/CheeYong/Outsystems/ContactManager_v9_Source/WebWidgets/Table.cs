/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.ComponentModel;
using System.Web.UI;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.WebWidgets {
    public class Table : ViewStateSpecializations.ViewStateLessHtmlTable, IBreakPointControl, IAjaxHandler, IAjaxClickEvent, IGridWidget, IOSControl {

        public Table() : base() { }

        #region IBreakPointControl implementation

        private String _BreakpointHookId;
        private bool _BreakpointHookIsExpressionlessWidget = false;

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get { return _BreakpointHookId; }
            set { _BreakpointHookId = value; }
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get { return _BreakpointHookIsExpressionlessWidget; }
            set { _BreakpointHookIsExpressionlessWidget = value; }
        }

        public override void DataBind() {
            if (BreakpointHookEvent != null) {
                BreakpointHookEvent(BreakpointHookId, BreakpointHookIsExpressionlessWidget);
            }
            base.DataBind();
        }

        // Fix for stackoverflow on exceptions during DataBind
        protected override void DataBindChildren() {
            if (!this.HasControls())
                return;

            int count = this.Controls.Count;
            for (int index = 0; index < count; ++index)
                this.Controls[index].DataBind();
        }

        #endregion

        protected override void RenderBeginTag(HtmlTextWriter writer) {
            AjaxEventsHelper.AddAjaxEventAttribute(this, AjaxEventType.onAjaxClick, ClientID, UniqueID, "__OSVSTATE", Attributes);
            Utils.RemoveIdIfAnonymous(this, Attributes);
            base.RenderBeginTag(writer);
        }

        // #474622 Tables were breaking the line after the end tag
        protected override void RenderEndTag(HtmlTextWriter writer) {
            writer.WriteEndTag(TagName);
        }

        private Hashtable events;
        public void RegisterAjaxEvent(AjaxEventType eventType, Array controlIdsToSend) {
            if (events == null) {
                events = new Hashtable();
            }

            events[eventType] = controlIdsToSend;
        }

        protected override void OnInit(EventArgs e) {
            base.OnInit(e);
            this.AddGridClassesAttribute();
        }

        public Hashtable GetRegisteredAjaxEvents() {
            return events;
        }

        public string GridCssClasses { get; set; }
        
        #region IAjaxClickEvent implementation

        public event EventHandler AjaxClick;

        public void OnAjaxClick(EventArgs e) {
            AjaxEventsHelper.RaiseAjaxEvent(this, AjaxClick);
        }

        #endregion

        #region IOSControl members
        string[] IOSControl.CssClass { get { return (this.Attributes["class"] ?? string.Empty).Split(' '); }}
        #endregion
    }
}
