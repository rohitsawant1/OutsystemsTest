/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.ExceptionServices;
using System.Threading;
using System.Web.UI;
using System.Web.UI.WebControls;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.WidgetsRuntimeAPI;

namespace OutSystems.HubEdition.WebWidgets {

    [ParseChildren(true)]
    public sealed class Iterator : WebControl, IWebListRecordWidget, INamingContainer, IViewStateAttributes, IListRefresh, IRowRendering, IBreakPointControl, IOSControl, IRepeaterControl {

        private IOSList _dataSource = null;
        private ITemplate _itemTemplate = null;
        private ITemplate _invisibleTemplate = null;
        private string _itemCommandName = null;
        private bool _useBullets = false;
        private bool _needsBreakAfter = false;
        public event EventHandler ClearViewStateStorage;
        public delegate string ViewStateStorage(object dataItem, int index);
        public event ViewStateStorage SetViewStateStorage;
        private int _defaultLineCount = 50;

        public event EventHandler ListRefreshDataBind;

        public ListRecordRtWidget RtWidget;

        private bool _isAjaxRefreshed;
        /// <summary>
        /// If this list record is ajax refreshed by an ajax refresh node or by list append, insert and remove actions
        /// </summary>
        public bool IsAjaxRefreshed {
            get { return _isAjaxRefreshed; }
            set { _isAjaxRefreshed = value; }
        }

        private bool _isDataBinding;
        public bool IsDataBinding {
            get { return _isDataBinding; }
        }

        public void DoListRefreshDataBind() {
            if (ListRefreshDataBind != null) {
                ListRefreshDataBind(this, null);
            }
        }

        public Iterator() : base() {
            RtWidget = new ListRecordRtWidget(this);
            _viewStateAttributes = new ViewStateAttributes(this, Attributes, ViewState);
        }

        private Func<string> emptyMessageExpression;
        public Func<string> EmptyMessageExpression {
            set { emptyMessageExpression = value; }
        }

        public string EmptyMessage {
            get { return emptyMessageExpression == null ? null : emptyMessageExpression(); }
        }

        private string _emptyMessageStyle;
        public string EmptyMessageStyle {
            get { return _emptyMessageStyle; }
            set { _emptyMessageStyle = value; }
        }

        private bool _isEmpty;
        public bool IsEmpty {
            get {
                return _isEmpty;
            }
        }

        private ViewStateAttributes _viewStateAttributes;
        public ViewStateAttributes ViewStateAttributes {
            get {
                return _viewStateAttributes;
            }
        }

        public string OnItemCommand {
            get { return _itemCommandName; }
            set { _itemCommandName = value; }
        }

        public int PageSize {
            get {
                return LineCount;
            }
            set {
                LineCountLastEvaluation = value;
            }
        }

        public bool UseBullets {
            get { return _useBullets; }
            set { _useBullets = value; }
        }

        public bool NeedsBreakAfter {
            get { return _needsBreakAfter; }
            set { _needsBreakAfter = value; }
        }

        #region IWebListRecordWidgetBase Members

        public IOSList DataSource {
            get {
                return _dataSource;
            }
            set {
                _dataSource = value;
            }
        }

        public int StartIndex {
            get {
                int startIndexEvaluation = Math.Max(startIndexExpression(), 0);
                StartIndexLastEvaluation = startIndexEvaluation;
                return startIndexEvaluation;
            }
        }

        private Func<int> startIndexExpression;
        public Func<int> StartIndexExpression {
            set { startIndexExpression = value; }
        }

        // Used for debug purposes (debugger crashes trying to evaluate these expressions)
        public int? StartIndexLastEvaluation { get; private set; }
        public int? LineCountLastEvaluation { get; private set; }

        public int LineCount {
            get {
                if (IsDataBinding) {
                    LineCountLastEvaluation = LineCountExpression();
                } else {
                    int eval = LineCountExpression();
                    LineCountLastEvaluation = (Math.Max(eval, (int)(ViewState["NumItems"] ?? eval)));
                }
                return (int)LineCountLastEvaluation;
            }
        }

        private Func<int> _lineCountExpression;
        public Func<int> LineCountExpression {
            set {
                _lineCountExpression = value;
            }
            get {
                return new Func<int>(
                    () => {
                        // Assure we have a positive LineCount value
                        int _temp = _lineCountExpression();
                        return _temp > 0 ? _temp : _defaultLineCount;
                    }
                );
            }
        }

        #endregion

        [TemplateContainer(typeof(RepeaterItem))]
        public ITemplate ItemTemplate {
            get {
                return _itemTemplate;
            }
            set {
                _itemTemplate = value;
            }
        }

        [TemplateContainer(typeof(InvisibleItem))]
        public ITemplate InvisibleTemplate {
            get {
                return _invisibleTemplate;
            }
            set {
                _invisibleTemplate = value;
            }
        }

        // override to prevent literal controls from being added as children
        protected override void AddParsedSubObject(object o) {
        }

        // override to create repeated items from DataSource
        protected override void OnDataBinding(EventArgs e) {
            base.OnDataBinding(e);

            if (!Visible) {
                return;
            }

            if (DataSource != null) {
                _isDataBinding = true;

                // clear selected index
                SelectedIndex = -1;
                // clear widget viewstate storage variable
                ClearViewStateStorage(this, e);
                // clear any row ids and item indexes, since we are rebuilding all the list
                ClearViewStateRowIdsandItemIndexes();
                // clear any existing child controls
                Controls.Clear();
                // clear any previous viewstate for existing child controls
                ClearChildViewState();

                DataSource.StartIteration();
                if (!DataSource.Empty) {
                    DataSource.Advance(StartIndex);
                }

                // iterate DataSource creating a new item for each data item
                int i = 0;
                int pageSize = PageSize;
                while (DataSource.MoveNext() && i < pageSize) {
                    CreateItem(DataSource, i);
                    i++;
                }
                // store the number of items created in viewstate for postback scenarios
                object o = ViewStateAttributes.GetFromViewState("NumItems", /*defaultValue*/null);
                if (i > 0 || o != null) {
                    ViewStateAttributes.SetInViewState("NumItems", i, /*defaultValue*/null);
                }
                // prevent child controls from being created again
                ChildControlsCreated = true;

                _isDataBinding = false;

                DataSource.EndIteration();
            }
        }

        private void CreateItem(IOSList dataEnum, int i) {
            CreateItem(dataEnum.Current, i);
        }

        private void CreateItem(object current, int i) {
            CreateItem(current, i, true);
        }

        private void CreateItem(object current, int i, bool doDatabind) {
            // create item
            var item = new RepeaterItem(i, current);
            var invItem = new InvisibleItem(i, current);

            // get the id of the last created item
            int lastId = -1;
            if (Controls.Count > 0) {
                lastId = GetIntegerId(Controls[Controls.Count - 1].ID);
            }

            // initialize item from template
            ItemTemplate.InstantiateIn(item);
            InvisibleTemplate.InstantiateIn(invItem);

            // set the ids appropriately
            item.ID = FormatId(lastId + 1);
            invItem.ID = FormatId(lastId + 2);

            // add item to the child controls collection
            Controls.Add(item);
            Controls.Add(invItem);

            if (doDatabind) {
                item.DataBind();
                invItem.DataBind();
            }
        }

        /// <summary>
        /// Databinds the last created item
        /// </summary>
        private void DataBindLastCreatedItem() {
            Controls[Controls.Count - 2].DataBind();
            Controls[Controls.Count - 1].DataBind();
        }

        private int _selectedIndex = -1;
        public int SelectedIndex {
            get {
                return _selectedIndex;
            }
            set {
                _selectedIndex = value;
            }
        }

        /// <summary>
        /// Gets the current selected item control in the iterator
        /// </summary>
        public RepeaterItem SelectedItemControl {
            get {
                if (_selectedIndex == -1) {
                    return null;
                } else {
                    // find the control corresponding to the selected index
                    var indexes = GetViewStateItemIndexes();
                    if (indexes != null) {
                        // search for the selected index in the indexes list
                        int idx = 0;
                        for (int i = 0; i < indexes.Count; i++) {
                            if ((int)indexes[i] == _selectedIndex) {
                                idx = i;
                                break;
                            }
                        }
                        return (RepeaterItem)Controls[idx];
                    } else {
                        // no index data
                        return (RepeaterItem)Controls[_selectedIndex * 2];
                    }
                }
            }
        }

        public IEnumerable<Control> Rows {
            get {
                foreach (Control row in Controls) {
                    yield return row;
                }
            }
        }

        protected override bool OnBubbleEvent(object sender, EventArgs args) {
            if (_itemCommandName == null) {
                return true;
            }

            if (((sender.GetType() == typeof(Button) || sender.GetType() == typeof(LinkButton)) && (args is CommandEventArgs))
                || args is AjaxEventArgs) {
                // Get the method
                var ParentPage = Utils.GetOwnerOfControl(this);
                var info = ParentPage.GetType().GetMethod(_itemCommandName);
                if (info == null) {
                    throw new Exception("Could not find method " + _itemCommandName);
                }
                // Get the item that was clicked
                var ctrl = (Control)sender;
                while (ctrl.GetType() != typeof(RepeaterItem)) {
                    ctrl = ctrl.Parent;
                }
                // Set selected item index
                SelectedIndex = ((RepeaterItem)ctrl).ItemIndex;
                // set the datasource position so that the current record is set if the list is not empty and in memory
                var rl = DataSource;
                if (rl != null && rl.Length > 0) {
                    try {
                        rl.SetPosition(SelectedIndex);
                    } catch (ArgumentOutOfRangeException) {
                        throw new HEMessageException(MR.GetMessage(MessageId.AjaxListModified, "List Records", this.ID));
                    }
                }

                // keep the current row number of the record list before bubbling up the event
                int beforeBubbleCurrentRowNumber = (rl != null) ? rl.CurrentRowNumber : 0;

                try {
                    IteratorCommandEventArgs iteratorArgs;
                    if (args is AjaxEventArgs) {
                        // ajax event, must create IteratorCommandAjaxEventArgs to be trapped by the select handler of the iterator
                        iteratorArgs = new IteratorCommandAjaxEventArgs(SelectedIndex, (Control)sender, (AjaxEventArgs)args);
                    } else {
                        // submit event, use IteratorCommandEventArgs
                        iteratorArgs = new IteratorCommandEventArgs(SelectedIndex, (Control)sender);
                    }
                    // invoke the select method
                    info.Invoke(ParentPage, new object[] { this, iteratorArgs });
                } catch (Exception exception) {
                    var originalException = exception;

                    // Descend into inner exceptions, ignoring TargetInvocationException which encapsulates
                    // the original exception when a method is invoked through reflection (Invoke above).
                    while (originalException != null && originalException.GetType() == typeof(TargetInvocationException)) {
                        originalException = originalException.InnerException;
                    }

                    // If a ThreadAbort is found, just stop.
                    if (originalException != null && originalException.GetType() == typeof(ThreadAbortException)) {
                        return true;
                    }

                    // Using this API to throw the exception in order to preserve its original stack.
                    ExceptionDispatchInfo.Capture(originalException).Throw();
                }

                // store viewstate changes for the current row. Skip if:
                // - the record list is empty 
                // - the current row number is not the same as the one before bubbling up event - happens when the list is iterated inside the action
                if (rl != null && rl.Length > 0 && SelectedIndex != -1 && beforeBubbleCurrentRowNumber == rl.CurrentRowNumber) {
                    SetViewStateStorage(rl.Current, SelectedIndex);
                }
                return true;
            }
            return true;
        }

        public void EnsureChildControlsOnPostback() {
            ViewStateAttributes.SetInViewState("EnsureChildControls", true, false);
        }

        protected override void LoadViewState(object savedState) {
            base.LoadViewState(savedState);

            // check if we need to ensure child controls for this iterator for running onSubmits
            if ((bool)ViewStateAttributes.GetFromViewState("EnsureChildControls", false)) {
                ViewState.Remove("EnsureChildControls");
                EnsureChildControls();
            }
        }

        // override to create repeated items
        protected override void CreateChildControls() {
            if (!Visible) {
                return;
            }

            SelectedIndex = -1;

            object o = ViewStateAttributes.GetFromViewState("NumItems", null);
            if (o != null) {
                // get item ids and indexes for supporting ajax list append, insert and remove operations and restoring the exact previous state
                var itemIds = GetViewStateItemIds();
                var itemIndexes = GetViewStateItemIndexes();

                // clear any existing child controls
                Controls.Clear();

                int numItems = (int)o;
                int pageSize = PageSize;

                for (int i = 0; i < numItems && i < pageSize; i++) {
                    // create item
                    var item = new RepeaterItem(i, /*dataItem*/null);
                    var invItem = new InvisibleItem(i, /*dataItem*/null);

                    try {
                        // initialize item id
                        if (itemIds != null) {
                            item.ID = FormatId((int)itemIds[i * 2]);
                            invItem.ID = FormatId((int)itemIds[i * 2 + 1]);
                        } else {
                            item.ID = FormatId(i * 2);
                            invItem.ID = FormatId(i * 2 + 1);
                        }
                        // initialize item index
                        if (itemIndexes != null) {
                            item.ItemIndex = (int)itemIndexes[i * 2];
                            invItem.ItemIndex = (int)itemIndexes[i * 2 + 1];
                        }
                    } catch (ArgumentOutOfRangeException) {
                        throw new HEMessageException(MR.GetMessage(MessageId.AjaxListModified, "List Records", this.ID));
                    }

                    // initialize item from template
                    ItemTemplate.InstantiateIn(item);
                    InvisibleTemplate.InstantiateIn(invItem);
                    // add item to the child controls collection
                    Controls.Add(item);
                    Controls.Add(invItem);
                }
            }
        }

        protected override void Render(HtmlTextWriter writer) {
            var RenderWrapperTag = Attributes["RenderWrapperTag"] != "false";

            object o = ViewStateAttributes.GetFromViewState("NumItems", null);
            bool isEmpty = o == null || (o != null && (int)o == 0);

            if (RenderWrapperTag) {
                writer.Write("<span id=\"" + ClientID + "\"");

                if (isEmpty) {
                    if (!string.IsNullOrEmpty(EmptyMessageStyle)) {
                        writer.Write(" class=\"" + EmptyMessageStyle + "\"");
                    }
                } else {
                    if (!string.IsNullOrEmpty(CssClass)) {
                        writer.Write(" class=\"" + CssClass + "\"");
                    }
                }

                writer.Write(">");
            }

            if (UseBullets && !isEmpty) {
                writer.Write("<ul>");
            }
            foreach (Control ctrl in Controls) {
                if (ctrl.GetType() == typeof(RepeaterItem)) {
                    RenderRepeaterItem(writer, ctrl);
                }
            }
            if (UseBullets && !isEmpty) {
                writer.Write("</ul>");
            }

            if (isEmpty) {
                RenderEmptyMessage(writer);
            }

            if (RenderWrapperTag) {
                writer.Write("</span>");
            }
        }

        public void RenderEmptyMessage(HtmlTextWriter writer) {
            if (_isAjaxRefreshed) {
                writer.Write("<span id=\"" + ClientID + "_EmptyMsg\">");
            }
            writer.Write(EmptyMessage);
            if (_isAjaxRefreshed) {
                writer.Write("</span>");
            }
        }

        private void RenderRepeaterItem(HtmlTextWriter writer, Control ctrl) {
            if (_isAjaxRefreshed && !UseBullets) {
                writer.Write("<span>");
            }
            if (UseBullets) {
                writer.Write("<li>");
            }
            ctrl.RenderControl(writer);
            if (UseBullets) {
                writer.Write("</li>");
            }
            if (NeedsBreakAfter) {
                writer.Write("<br/>");
            }
            if (_isAjaxRefreshed && !UseBullets) {
                writer.Write("</span>");
            }
        }

        public void RemoveItem(int itemIndex) {
            // clear selected item, if deleting the current selected index
            if (SelectedIndex == itemIndex) {
                SelectedIndex = -1;
            }

            // find the Repeater Item for this itemItem
            int rowIndexToRemove = -1;
            for (int i = 0; i < Controls.Count; i += 2) {
                var item = (IIteratorItem)Controls[i];
                if (item.ItemIndex == itemIndex) {
                    rowIndexToRemove = i;
                    break;
                }
            }

            IOSList rl = DataSource;

            if (rowIndexToRemove == -1 || itemIndex >= rl.Length) {
                throw new ArgumentException("Index of out range");
            }

            // remove the repeater item
            Controls.RemoveAt(rowIndexToRemove);
            // remove also the invisible item, now at the same position
            Controls.RemoveAt(rowIndexToRemove);

            // update the datasource
            rl.Remove(itemIndex);

            // update item count
            ViewStateAttributes.SetInViewState("NumItems", ItemCount, null);
            // set the empty property
            _isEmpty = (rl.Length == 0);

            // decrease higher item indexes in the iterator
            foreach (IIteratorItem otherItem in Controls) {
                if (otherItem.ItemIndex > itemIndex) {
                    otherItem.ItemIndex--;
                }
            }

            // update item ids and indexes in the viewstate 
            StoreViewStateItemIdsandIndexes();
        }

        private int ItemCount {
            get { return Controls.Count / 2; }
        }

        /// <summary>
        /// Appends an item to the datagrid
        /// </summary>
        /// <param name="dataItem"></param>
        /// <returns></returns>
        public void AppendItem(object dataItem) {
            IOSList rl = DataSource;
            InsertItem(rl.Length, dataItem);
        }

        /// <summary>
        /// Inserts an item to the datagrid
        /// </summary>
        /// <param name="param name="dataItemIndex"></param>
        /// <param name="dataItem"></param>
        public void InsertItem(int itemIndex, object dataItem) {
            InsertItem(itemIndex, dataItem, /*selectItem*/true);
        }

        private void InsertItem(int itemIndex, object dataItem, bool selectItem) {
            // check if the current page is full
            IOSList rl = DataSource;

            // update the datasource			
            rl.Insert(dataItem, itemIndex);

            // increase higher item indexes in the iterator
            foreach (IIteratorItem otherItem in Controls) {
                if (otherItem.ItemIndex >= itemIndex) {
                    otherItem.ItemIndex++;
                }
            }

            // create an item at the end of the list (and don't databind...)
            CreateItem(dataItem, itemIndex, false);

            // update item count
            ViewStateAttributes.SetInViewState("NumItems", ItemCount, null);

            // update item ids and indexes in the viewstate 
            StoreViewStateItemIdsandIndexes();

            var previousSelectedIndex = SelectedIndex;
            var previousDataSourceIndex = rl.CurrentRowNumber;

            SelectedIndex = itemIndex;

            // set the record list position 
            rl.SetPosition(itemIndex);

            // databind the created item
            DataBindLastCreatedItem();

            if (!selectItem) {
                // revert the record list position 
                rl.SetPosition(previousDataSourceIndex);
                SelectedIndex = previousSelectedIndex;
            }
        }

        public void RefreshItem(int dataItemIndex) {
            // set the datasource position
            IOSList rl = DataSource;
            rl.SetPosition(dataItemIndex);
            SelectedIndex = dataItemIndex;

            // databind the correspondent item
            int controlIndex = GetItemControlIndex(dataItemIndex);
            var item = (RepeaterItem)Controls[controlIndex];
            item.DataItem = rl.Current;
            item.DataBind();

            var invItem = (InvisibleItem)Controls[controlIndex + 1];
            invItem.DataItem = rl.Current;
            invItem.DataBind();
        }

        public void RenderLastRow(HtmlTextWriter writer) {
            // get the last repeater item and render it
            RenderRepeaterItem(writer, Controls[Controls.Count - 2]);
        }

        /// <summary>
        /// Renders a specific item of the iterator
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dataItemIndex"></param>
        public void RenderRow(HtmlTextWriter writer, int dataItemIndex) {
            // find the control index for the data item index
            int controlIndex = GetItemControlIndex(dataItemIndex);
            // render the correspondent repeater item
            RenderRepeaterItem(writer, Controls[controlIndex]);
        }

        /// <summary>
        /// Gets the current item control index for a given data item index
        /// </summary>
        /// <param name="dataItemIndex"></param>
        /// <returns></returns>
        private int GetItemControlIndex(int dataItemIndex) {
            ArrayList indexes = GetViewStateItemIndexes();
            int controlIndex;
            if (indexes == null) {
                controlIndex = dataItemIndex * 2;
            } else {
                for (controlIndex = 0; controlIndex < indexes.Count; controlIndex++) {
                    if ((int)indexes[controlIndex] == dataItemIndex) {
                        break;
                    }
                }
            }
            return controlIndex;
        }

        public static string FormatId(int id) {
            return "ctl" + ((id < 10) ? "0" + id : id.ToString());
        }

        public static int GetIntegerId(string itemId) {
            return int.Parse(itemId.Substring(3));
        }

        /// <summary>
        /// Stores the current item ids and indexes to the viewstate
        /// </summary>
        public void StoreViewStateItemIdsandIndexes() {
            // store the current ids of every child rows...			
            var itemIds = new ArrayList(Controls.Count);
            var itemIndexes = new ArrayList(Controls.Count);
            int i = 0;
            foreach (IIteratorItem item in Controls) {
                Control itemControl = (Control)item;
                if (itemControl.ID == null) {
                    itemControl.ID = FormatId(i);
                }
                itemIds.Add(GetIntegerId(itemControl.ID));
                itemIndexes.Add(item.ItemIndex);
                i++;
            }
            ViewState["ItemIds"] = itemIds;
            ViewState["ItemIdxs"] = itemIndexes;
        }

        /// <summary>
        /// Gets the Item data indexes saved in the current viewstate
        /// </summary>
        /// <returns></returns>
        public ArrayList GetViewStateItemIndexes() {
            return (ArrayList)ViewState["ItemIdxs"];
        }

        /// <summary>
        /// Gets the Item identifiers saved in the current viewstate
        /// </summary>
        /// <returns></returns>
        public ArrayList GetViewStateItemIds() {
            return (ArrayList)ViewState["ItemIds"];
        }

        /// <summary>
        /// Clears the row ids and item indexes states
        /// </summary>
        public void ClearViewStateRowIdsandItemIndexes() {
            ViewState.Remove("ItemIds");
            ViewState.Remove("ItemIdxs");
        }

        #region IBreakPointControl implementation

        private string _BreakpointHookId;
        private bool _BreakpointHookIsExpressionlessWidget = false;

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get { return _BreakpointHookId; }
            set { _BreakpointHookId = value; }
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get { return _BreakpointHookIsExpressionlessWidget; }
            set { _BreakpointHookIsExpressionlessWidget = value; }
        }

        public override void DataBind() {
            if (BreakpointHookEvent != null) {
                BreakpointHookEvent(BreakpointHookId, BreakpointHookIsExpressionlessWidget);
            }
            base.DataBind();
        }

        // Fix for stackoverflow on exceptions during DataBind
        protected override void DataBindChildren() {
            if (!HasControls()) {
                return;
            }

            int count = Controls.Count;
            for (int index = 0; index < count; ++index) {
                Controls[index].DataBind();
            }
        }

        #endregion

        #region IOSControl members
        string IOSControl.TagName { get { return "span"; } }
        string[] IOSControl.CssClass { get { return this.CssClass.Split(' '); } }
        #endregion

        public Func<IRecord> CreateRecordDelegate { private get; set; }

        public OSPageViewState.StoreViewStateDelegate ViewStateStoreDelegate { private get; set; }

        // TODO JMN clientIdOverride doesn't make sense but currently don't have other way
        void IRepeaterControl.Append(string clientIdOverride) {
            if (OSPage.IsAjaxRequest) {
                ((OSPageViewState)Page).AjaxRefresh(this, 0, "None", "Append", false, CreateRecordDelegate(), ViewStateStoreDelegate, clientIdOverride);
            } else {
                AppendRow();
            }
        }

        private void AppendRow() {
            // when (first) loading the page we insert the row before the last one
            if (DataSource.Length >= StartIndex + LineCount) {
                var oldLineCountExpression = _lineCountExpression;
                LineCountExpression = () => oldLineCountExpression() + 1; // ensure we have room for the new appended record (it will be visible)
            }
            InsertItem(ItemCount, CreateRecordDelegate(), /*selectItem*/false);
        }

        /// <summary>
        /// Appends an item but doesn't refresh the view
        /// </summary>
        void IRepeaterControl.Append() {
            AppendRow();
        }

        void IRepeaterControl.Remove(string clientIdOverride) {
            if (OSPage.IsAjaxRequest) {
                ((OSPageViewState)Page).AjaxRefresh(this, SelectedIndex, "None", "Remove", false, null, ViewStateStoreDelegate, clientIdOverride);
            } else {
                RemoveItem(SelectedIndex);
            }
        }

        /// <summary>
        /// Removes the item but doesn't refresh the view
        /// </summary>
        /// <param name="itemIndex"></param>
        void IRepeaterControl.Remove(int itemIndex) {
            RemoveItem(itemIndex);
        }

        int IRepeaterControl.Count {
            get { return ItemCount; }
        }

        void IRepeaterControl.Refresh(string clientIdOverride) {
            if (OSPage.IsAjaxRequest) {
                ((OSPageViewState)Page).AjaxRefresh(this, SelectedIndex, "None", "Refresh", false, null, ViewStateStoreDelegate, clientIdOverride);
            } else {
                RefreshItem(SelectedIndex);
            }
        }

        int IRepeaterControl.CurrentIndex {
            get { return SelectedIndex; }
            set {
                SelectedIndex = value;
                if (DataSource != null && value < DataSource.Length) {
                    DataSource.SetPosition(value);
                }
            }
        }
    }

    public class IteratorCommandEventArgs : EventArgs {

        private int _selectedIndex;
        private Control _commandSource;

        public int SelectedIndex {
            get { return _selectedIndex; }
        }

        public Control CommandSource {
            get { return _commandSource; }
        }

        public IteratorCommandEventArgs(int index, Control commandSource) {
            _selectedIndex = index;
            _commandSource = commandSource;
        }
    }

    public sealed class IteratorCommandAjaxEventArgs : IteratorCommandEventArgs {

        public AjaxEventArgs AjaxEventArgs;

        public IteratorCommandAjaxEventArgs(int index, Control commandSource, AjaxEventArgs args)
            : base(index, commandSource) {
            AjaxEventArgs = args;
        }

        public void InvokeHandler() {
            AjaxEventArgs.InvokeHandler();
        }
    }

    public interface IIteratorItem {
        object DataItem { get; set; }
        int ItemIndex { get; set; }
    }

    public sealed class RepeaterItem : Control, IIteratorItem, INamingContainer {

        private int _itemIndex;
        private object _dataItem;
        private bool _binded = false;

        public RepeaterItem(int itemIndex, object dataItem) {
            _itemIndex = itemIndex;
            _dataItem = dataItem;
        }

        public object DataItem {
            get { return _dataItem; }
            set { _dataItem = value; }
        }

        public int ItemIndex {
            get { return _itemIndex; }
            set { _itemIndex = value; }
        }

        public override void DataBind() {
            OnDataBinding(EventArgs.Empty);
            if (!_binded) {
                foreach (Control c in Controls) {
                    c.DataBind();
                }
                _binded = true;
            }
        }
    }

    public sealed class InvisibleItem : Control, IIteratorItem, INamingContainer {

        private int _itemIndex;
        private object _dataItem;
        private bool _binded = false;

        public InvisibleItem(int itemIndex, object dataItem) {
            _itemIndex = itemIndex;
            _dataItem = dataItem;
        }

        public object DataItem {
            get { return _dataItem; }
            set { _dataItem = value; }
        }

        public int ItemIndex {
            get { return _itemIndex; }
            set { _itemIndex = value; }
        }

        public override void DataBind() {
            OnDataBinding(EventArgs.Empty);
            if (!_binded) {
                foreach (Control c in Controls) {
                    c.DataBind();
                }
                _binded = true;
            }
        }

        protected override void Render(HtmlTextWriter writer) {
            return;
        }
    }
}