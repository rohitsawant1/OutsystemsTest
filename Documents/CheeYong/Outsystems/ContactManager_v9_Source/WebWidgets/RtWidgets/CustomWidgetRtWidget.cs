/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Db;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.WebWidgets {
    public class CustomWidgetRtWidget : RtWidget, IRtCustomWidget {
        public Dictionary<string, object> runtimeProperties = new Dictionary<string,object>();

        public override void InnerToXml(XmlElement widgetElem, int detailLevel) {
            base.InnerToXml(widgetElem, detailLevel);
            foreach (var itemName in runtimeProperties.Keys) {
                var value = runtimeProperties[itemName];
                if (value is IRecord || value is RecordList) {
                    VarValue.InvokeToXml(value, this, widgetElem, itemName, detailLevel - 1);
                } else {
                    //TODO TCS This seems to work, but should it be different for other TypeKinds?
                    VarValue.AppendAttribute(widgetElem, itemName, value, TypeKind.Text);
                }
            }
        }

        public override void InnerEvaluateField(VarValue variable, string field) {
            base.InnerEvaluateField(variable, field);
            foreach (var itemName in runtimeProperties.Keys) {
                if (field.ToLower() == itemName.ToLower()) {
                    variable.Value = runtimeProperties[itemName];
                } 
            }
        }

        public void StoreRuntimeProperty(string name, object value) {
            runtimeProperties[name] = value;
        }

    }
}
