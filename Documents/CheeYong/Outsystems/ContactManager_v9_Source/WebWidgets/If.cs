/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Web.UI;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.WebWidgets {
    public sealed class If : ViewStateSpecializations.ViewStateLessControl, IBreakPointControl {

        #region IBreakPointControl implementation

        private String _BreakpointHookId;
        private bool _BreakpointHookIsExpressionlessWidget = false;

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get { return _BreakpointHookId; }
            set { _BreakpointHookId = value; }
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get { return _BreakpointHookIsExpressionlessWidget; }
            set { _BreakpointHookIsExpressionlessWidget = value; }
        }

        // override to create repeated items from DataSource
        public override void DataBind() {
            if (BreakpointHookEvent != null) {
                BreakpointHookEvent(BreakpointHookId, BreakpointHookIsExpressionlessWidget);
            }

            base.OnDataBinding(EventArgs.Empty);
            
            // clear any previous viewstate for existing child controls
            ClearChildViewState();            

            if (!Visible) {
                /* since child blocks are not going to be databind (they are invisible)
                 * we need to store the inputs visibility in the child blocks in the viewstate,
                 * so we can ignore their validation results for the Validation Parent widget.
                 * Additionally we also store the block visibility, so we can skip the execution of
                 * the OnSubmit action for invisible blocks
                 */
                StoreViewStateInputsAndWebBlockVisibility(this);
                return;
            }

            foreach (Control ctrl in Controls) {
                ctrl.DataBind();
            }

            ChildControlsCreated = true;
        }


        private void StoreViewStateInputsAndWebBlockVisibility(Control c) {
            foreach (Control ctrl in c.Controls) {
                OSUserControl webBlock = ctrl as OSUserControl;
                if (webBlock != null) {
                    webBlock.StoreInputVisibilityInChildWebBlocksViewState(ctrl);
                } else {
                    IWidgetRuntimeProperties ctrlWithValidations = ctrl as IWidgetRuntimeProperties;
                    if (ctrlWithValidations != null) {
                        ctrlWithValidations.Mandatory = false;
                    }
                    StoreViewStateInputsAndWebBlockVisibility(ctrl);
                }
            }
        }
        #endregion
    }
}
