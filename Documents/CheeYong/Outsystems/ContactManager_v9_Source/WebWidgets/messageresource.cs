/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Globalization;
using System.Text.RegularExpressions;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition.WebWidgets {
	// Don't remove the comment below. The comment between that line and 
	// the matching BEGIN is generated by a tool and will be overwritten 
	// during compilation
    [DoNotObfuscateType]
	internal enum MessageId {
		UnimplementedImageType,
		AjaxListModified
	}

	// Don't remove the comment above. The comment between that line and 
	// the matching BEGIN is generated by a tool and will be overwritten 
	// during compilation

	/// <summary>
	/// Summary description for MessageResource.
	/// </summary>
	internal class MR {
		internal MR() {
		}

		public static HEMessage GetMessage(string messageId) {
			return GetMessage(null, messageId, (object[]) null);
		}
		
		public static HEMessage GetMessage(MessageId id) {
			return GetMessage(null, id.ToString(), (object[]) null);
		}

		public static HEMessage GetMessage(MessageId id, params object[] args) {
			return GetMessage(null, id.ToString(), args);
		}
		
		public static HEMessage GetMessage(string messageId, params object[] args) {
			return GetMessage(null, messageId, args);
		}

		public static HEMessage GetMessage(CultureInfo culture, MessageId id) {
			return GetMessage(culture, id, (object[]) null);
		}

		private static Regex _rwParams = new Regex("\\{([0-9]+)\\}", RegexOptions.Singleline | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);
		public static HEMessage GetMessage(CultureInfo culture, MessageId id, params object[] args) {
			return GetMessage(culture, id.ToString(), args);
		}
		
		public static HEMessage GetMessage(CultureInfo culture, string messageId, params object[] args) {
			HEMessage message = new HEMessage();
			string text=null;
			string[] parts=null;
			Exception exception=null;
			string extrainfo = "";
			try {
				try {
					text = SR.GetString(culture, messageId, (object[]) null);
                    if (!string.IsNullOrEmpty(text)) {
                        text = text.ReplaceBranding();
                    }
					MatchCollection matches = _rwParams.Matches(text);
					int max = -1;
					foreach(Match m in matches) {
						int dummy = int.Parse(m.Groups[1].Value);
						if (max < dummy) max = dummy;
					}
					max++;
					if (((args == null) && (max > 0)) || ((args != null) && (args.Length < max))) {
						extrainfo = "\r\nThis message references more parameters than it receives.";
						// Remove extraneous references otherwise it will crash
						// while formatting the string and the result will be 
						// even less useful
						int slider = 0;
                        int argsLength = (args == null)? 0: args.Length;

						foreach(Match m in matches) {
							int dummy = int.Parse(m.Groups[1].Value);
							if (dummy >= argsLength) {
								text = text.Remove(m.Index-slider, m.Length);
								slider += m.Length;
							}
						}
					} else if ((args != null) && (args.Length > max)) {
						extrainfo = "\r\nThis message is receiving more parameters than it uses.";
					}
					if ((args != null) && (args.Length > 0)) {
						text = string.Format(text, args); 
					}
				} catch (Exception ex) {
					exception = ex;
				}
				if ((text == null) || (text.Length == 0) || (exception != null)) {
					message.Id = "";
					message.Message = "Error loading resources";
					message.Detail = "Unable to find string for message id '" + messageId + "'.";
					if (exception != null) {
						message.Detail += "\r\n" + exception.ToString();
					}
					return message;
				}
				try {
					parts = text.Split(new char[] {'|'}, 8);
				} catch (Exception ex) {
					exception = ex;
				}
				if ((parts == null) || (parts.Length < 7) || (parts.Length > 8) || (exception != null)) {
					message.Id = "";
					message.Message = "Error loading resources";
					message.Detail = "Unable to parse string for message id '" + messageId + "'.";
					if (exception != null) {
						message.Detail += "\r\n" + exception.ToString();
					}
					return message;
				}
				message.Id = parts[0];
				try {
					message.HelpRef = int.Parse(parts[1]);
				} catch { }
				try {
					message.Type = (HEMessageType)Enum.Parse(typeof(HEMessageType), parts[2], true);
				} catch { }
				try {
					message.Submitable = bool.Parse(parts[3]);
				} catch {
					message.Submitable = true;
				}
				message.Message = parts[4];
				try {
					message.Detail = MessageDefinition.UnescapeString(parts[5]);
				} catch { }
				try {
					message.ExtraInfo = parts[6];
				} catch { }

				if (extrainfo != null) {
					if (message.ExtraInfo != null) {
						message.ExtraInfo += extrainfo;
					} else {
						message.ExtraInfo = extrainfo;
					}
				}
			} catch (Exception ex) {
				message = new HEMessage();
				message.Id = "";
				message.Message = "Error creating message";
				message.Detail = "Unable to create message for message id '" + messageId + "'.";
				HEMessageException exm = new HEMessageException(message, ex);
				message = exm.HEMessage;
			}
			return message;
		}

		public static HEMessageException NewException(MessageId id) {
			return NewException(null, id, (object[]) null);
		}
		public static HEMessageException NewException(MessageId id, params object[] args) {
			return NewException(null, id, args);
		}
		public static HEMessageException NewException(CultureInfo cultureInfo, MessageId id) {
			return NewException(cultureInfo, id, (object[]) null);
		}
		public static HEMessageException NewException(CultureInfo cultureInfo, MessageId id, params object[] args) {
			return new HEMessageException(GetMessage(cultureInfo, id, args));
		}
	}
}