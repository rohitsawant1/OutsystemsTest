/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Web.UI;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.WebWidgets {
    public sealed class Button : System.Web.UI.WebControls.Button, IParentEditRecordProp, IViewStateAttributes, IAjaxHandler, IAjaxClickEvent, IBreakPointControl, IGridWidget, IOSControl {
        private void AddAJaxJavascriptIfNeeded() {
            // #99202 - set the elementsToValidate attribute value for buttons with parent edit record set in ajax refreshes
            // #1340857 - set the elementsToValidate attribute value for buttons with parent that behaves like IValidationParent
            if (this.GetValidationParentWidget() != null || !ParentEditRecord.IsEmpty()) {
                ((OSPageViewState)Page).AddQueuedJavascript(JavaScriptManager.GetButtonElementsToValidateJavascript(ClientID, this.GetParentEditRecordClientId()));
            }
        }
        
        public Button()
            : base() {
            _viewStateAttributes = new ViewStateAttributes(this, Attributes, ViewState);
        }

        private ViewStateAttributes _viewStateAttributes;
        public ViewStateAttributes ViewStateAttributes {
            get {
                return _viewStateAttributes;
            }
        }

        private Hashtable events;
        public void RegisterAjaxEvent(AjaxEventType eventType, Array controlIdsToSend) {
            if (events == null) {
                events = new Hashtable();
            }

            events[eventType] = controlIdsToSend;
        }

        public Hashtable GetRegisteredAjaxEvents() {
            return events;
        }

        private string _confirmMessage;
        public string ConfirmationMessage {
            get { return _confirmMessage; }
            set { _confirmMessage = value; }
        }

        private string _navigateURL;
        public string NavigateURL {
            get { return _navigateURL; }
            set { _navigateURL = value; }
        }

        public override void RenderEndTag(HtmlTextWriter writer) {
            base.RenderEndTag(writer);
        }

        public string ParentEditRecord { get; set; }
        public ParentEditRecordPropType ValidatorType { get { return ParentEditRecordPropType.PERFORMS_VALIDATION; } }

        /// <summary>
        /// This is exactly the same as in System.Web.UI.WebControls.Button, only the javascript
        /// of the onclick attribute is diferent.
        /// This change was done to support FireFox (#37171)
        /// </summary>
        /// <param name="writer"></param>
        protected override void AddAttributesToRender(HtmlTextWriter writer) {
            using (var w = new HtmlTextWriterWithAttributeFilter(writer)) {
                string onClickText = JavaScriptManager.GetButtonOnClickCode(ClientID, UniqueID, ViewStateAttributes.InlineAttributes["onclick"],
                    _confirmMessage, (events != null) && events.Contains(AjaxEventType.onAjaxClick), CausesValidation);

                if (!string.IsNullOrEmpty(_navigateURL)) {
                    onClickText += "window.location.href='" + _navigateURL + "'; return false;";
                }

                if (onClickText.Length > 0) {
                    ViewStateAttributes.InlineAttributes["onclick"] = onClickText;
                }

                bool old_Enabled = Enabled;
                if (!Enabled) {
                    w.AddAttribute(HtmlTextWriterAttribute.Disabled, ((OSPage)Page).QuirksMode ? null : "disabled");
                    Enabled = true;
                }

                ViewStateAttributes.InlineAttributes.AddAttributes(w);
                base.AddAttributesToRender(w);
                Enabled = old_Enabled;
            }
        }

        protected override void Render(HtmlTextWriter writer) {
            base.Render(writer);

            if (OSPage.IsAjaxRequest) {
                AddAJaxJavascriptIfNeeded();
            }
        }

        #region IBreakPointControl implementation

        private String _BreakpointHookId;
        private bool _BreakpointHookIsExpressionlessWidget = false;

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get { return _BreakpointHookId; }
            set { _BreakpointHookId = value; }
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get { return _BreakpointHookIsExpressionlessWidget; }
            set { _BreakpointHookIsExpressionlessWidget = value; }
        }

        protected override void OnInit(EventArgs e) {
            base.OnInit(e);
            this.AddGridClassesAttribute();
        }

        public override void DataBind() {
            if (BreakpointHookEvent != null) {
                BreakpointHookEvent(BreakpointHookId, BreakpointHookIsExpressionlessWidget);
            }
            base.DataBind();
        }

        #endregion

        protected override void RaisePostBackEvent(string eventArgument) {
            // cancel raise postback event for all ajax events, so the submit/click event is not triggered in those cases
            if (Page.Request.Form["__AJAXEVENT"] == null)
                base.RaisePostBackEvent(eventArgument);
        }

        #region Grid Child Widget implementation

        public string GridCssClasses { get; set; }

        #endregion Grid Child Widget implementation

        #region IAjaxClickEvent Members

        public event EventHandler AjaxClick;

        public void OnAjaxClick(EventArgs e) {
            AjaxEventsHelper.RaiseAjaxEvent(this, AjaxClick);
        }

        #endregion

        #region IOSControl members
        string IOSControl.TagName { get { return this.TagName; } }
        string[] IOSControl.CssClass { get { return this.CssClass.Split(' '); } }
        #endregion
    }
}
