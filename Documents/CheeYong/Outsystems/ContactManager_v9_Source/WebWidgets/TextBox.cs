/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Specialized;
using System.Globalization;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using OutSystems.HubEdition.RuntimePlatform;
using OutSystems.HubEdition.RuntimePlatform.Web;
using OutSystems.RuntimeCommon;
using OutSystems.WidgetsRuntimeAPI;

namespace OutSystems.HubEdition.WebWidgets {
    [ValidationProperty("Text")]
    public sealed class TextBox : WebControl, IPostBackDataHandler, IWidgetWithParentEditRecordAndValidation, IViewStateAttributes, IBreakPointControl, IAjaxHandler, IAjaxChangeEvent, IGridWidget, IOSControl {

        private bool _valid = true;
        private string _typedValue = "";
        private string _validationMessage = "";
        private string _typeValidationMessage = "";
        private string _mandatoryValidationMessage = "";
        private bool _mandatory = false;

        public event EventHandler TextChanged {
            add { base.Events.AddHandler(TextBox.EventTextChanged, value); }
            remove { base.Events.RemoveHandler(TextBox.EventTextChanged, value); }
        }

        private ViewStateAttributes _viewStateAttributes;
        public ViewStateAttributes ViewStateAttributes {
            get { return _viewStateAttributes; }
        }

        #region IWidgetRuntimeProperties implementation

        public bool Valid {
            get { return _valid; }
            set { _valid = value; }
        }

        bool IControlWithValidation.Validate(ScreenContext context) {
            return Valid;
        }

        public bool Mandatory {
            get { return _mandatory; }
            set { _mandatory = value; }
        }

        public string TypedValue {
            get { return _typedValue; }
            set { _typedValue = value; }
        }

        public string ValidationMessage {
            get { return _validationMessage; }
            set { _validationMessage = value; }
        }

        public delegate string GetString();
        public event GetString DefaultMandatoryValidationMessage;
        public event GetString DefaultTypeValidationMessage;

        public string TypeValidationMessage {
            get {
                if (_typeValidationMessage == "") {
                    _typeValidationMessage = DefaultTypeValidationMessage();
                }
                return _typeValidationMessage;
            }
            set { _typeValidationMessage = value; }
        }

        public string MandatoryValidationMessage {
            get {
                if (_mandatoryValidationMessage == "") {
                    _mandatoryValidationMessage = DefaultMandatoryValidationMessage();
                }
                return _mandatoryValidationMessage;
            }
            set { _mandatoryValidationMessage = value; }
        }

        #endregion

        public string ParentEditRecord {
            get;
            set;
        }

        static TextBox() {
            TextBox.EventTextChanged = new object();
        }

        public TextBox()
            : base(System.Web.UI.HtmlTextWriterTag.Input) {
            _viewStateAttributes = new ViewStateAttributes(this, Attributes, ViewState);
        }

        protected override void AddAttributesToRender(HtmlTextWriter writer) {
            using (var w = new HtmlTextWriterWithAttributeFilter(writer)) {
                Page.VerifyRenderingInServerForm(this);

                w.AddAttribute(HtmlTextWriterAttribute.Name, UniqueID);

                TextBoxMode mode = this.TextMode;
                if (mode == TextBoxMode.MultiLine) {
                    int rows = this.Rows;
                    if (rows > 0) {
                        w.AddAttribute(HtmlTextWriterAttribute.Rows, rows.ToString(NumberFormatInfo.InvariantInfo));
                    }
                    int cols = this.Columns;
                    if (cols > 0) {
                        w.AddAttribute(HtmlTextWriterAttribute.Cols, cols.ToString(NumberFormatInfo.InvariantInfo));
                    }
                } else {
                    if (mode == TextBoxMode.SingleLine) {
                        w.AddAttribute(HtmlTextWriterAttribute.Type, "text");
                        string value = this.Text;
                        if (value.Length > 0) {
                            w.AddAttribute(HtmlTextWriterAttribute.Value, value);
                        }
                    } else if (mode == TextBoxMode.Password) {
                        w.AddAttribute(HtmlTextWriterAttribute.Type, "password");
                    }

                    int ml = this.MaxLength;
                    if (ml > 0) {
                        w.AddAttribute(HtmlTextWriterAttribute.Maxlength, ml.ToString(NumberFormatInfo.InvariantInfo));

                    }
                    int size = this.Columns;
                    if (size > 0) {
                        w.AddAttribute(HtmlTextWriterAttribute.Size, size.ToString(NumberFormatInfo.InvariantInfo));

                    }
                }

                if (this.ReadOnly) {
                    w.AddAttribute(HtmlTextWriterAttribute.ReadOnly, ((OSPage)Page).QuirksMode ? null : "readonly");
                }

                // [#35738] add to class='' the Mandatory style
                if (this._mandatory) {
                    string cssClass = this.CssClass;
                    if (cssClass != null && cssClass != "") {
                        this.CssClass = this.CssClass + " Mandatory";
                    } else {
                        this.CssClass = "Mandatory";
                    }
                    this.Attributes.Add("aria-required", "true");
                }

                // [#35738] add to class='' the Valid style
                if (!this._valid) {
                    string cssClass = this.CssClass;
                    if (cssClass != null && cssClass != "") {
                        this.CssClass = this.CssClass + " Not_Valid";
                    } else {
                        this.CssClass = "Not_Valid";
                    }
                }
                this.Attributes.Add("aria-invalid", (!this._valid).ToString().ToLower());
                // dump ajax onchange handler
                AjaxEventsHelper.AddAjaxEventAttribute(this, AjaxEventType.onAjaxChange, ClientID, UniqueID, "__OSVSTATE", ViewStateAttributes.InlineAttributes);
                base.AddAttributesToRender(w);
                ViewStateAttributes.InlineAttributes.AddAttributes(w);
            }
        }

        protected override void AddParsedSubObject(object obj) {
            var literalControl = obj as LiteralControl;
            if (literalControl != null) {
                this.Text = literalControl.Text;
                return;
            }
            throw new HttpException("Cannot have children of type " + obj.GetType().Name.ToString());
        }

        private void OnTextChanged(EventArgs e) {
            EventHandler handler1;
            handler1 = ((EventHandler)base.Events[TextBox.EventTextChanged]);
            if (handler1 != null) {
                handler1.Invoke(this, e);
            }
        }

        protected override void Render(HtmlTextWriter writer) {
            RenderBeginTag(writer);
            if (this.TextMode == TextBoxMode.MultiLine) {
                HttpUtility.HtmlEncode(this.Text, writer);
            }

            base.RenderEndTag(writer);

            writer.WriteBeginTag("span");
            writer.WriteAttribute("style", "display: none;");
            writer.WriteAttribute("class", "ValidationMessage");
            writer.WriteAttribute("role", "alert");
            writer.WriteAttribute("id", "ValidationMessage_" + ClientID);
            writer.Write(">");
            writer.WriteEndTag("span");
            if (!_valid)
                writer.Write(JavaScriptManager.GetInvalidInputJS(ClientID, _validationMessage));

        }

        bool IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection) {
            string temp = postCollection[postDataKey];
            if (temp != null) {
                Text = temp;
            }
            // As we don't store Text in ViewState, we don't know if changed or not, so we have to force the event to always occur
            return true;
        }

        void IPostBackDataHandler.RaisePostDataChangedEvent() {
            TypedValue = Text;
            this.OnTextChanged(EventArgs.Empty);
        }

        public int Columns {
            get {
                object obj = ViewStateAttributes.GetFromViewState("Columns", null);
                if (obj != null) {
                    return (int)obj;
                } else {
                    return 0;
                }
            }
            set {
                if (value < 0) {
                    throw new ArgumentOutOfRangeException("value");
                }
                ViewStateAttributes.SetInViewState("Columns", value, null);
            }
        }

        public int MaxLength {
            get {
                object obj = ViewStateAttributes.GetFromViewState("MaxLength", null);
                if (obj != null) {
                    return (int)obj;
                } else {
                    return 0;
                }
            }
            set {
                if (value < 0) {
                    throw new ArgumentOutOfRangeException("value");
                }
                ViewStateAttributes.SetInViewState("MaxLength", value, null);
            }
        }

        public bool ReadOnly {
            get {
                object obj = ViewStateAttributes.GetFromViewState("ReadOnly", null);
                if (obj != null) {
                    return (bool)obj;
                } else {
                    return false;
                }
            }
            set {
                ViewStateAttributes.SetInViewState("ReadOnly", value, null);
            }
        }

        public int Rows {
            get {
                object obj = ViewStateAttributes.GetFromViewState("Rows", null);
                ;
                if (obj != null) {
                    return (int)obj;
                } else {
                    return 0;
                }
            }
            set {
                if (value < 0) {
                    throw new ArgumentOutOfRangeException("value");
                }
                ViewStateAttributes.SetInViewState("Rows", value, null);
            }
        }

        protected override HtmlTextWriterTag TagKey {
            get {
                if (this.TextMode == TextBoxMode.MultiLine) {
                    return HtmlTextWriterTag.Textarea;
                }
                return HtmlTextWriterTag.Input;
            }
        }

        private string _text = "";
        public string Text {
            get {
                return _text;
            }
            set {
                _text = value;
            }
        }

        public TextBoxMode TextMode {
            get {
                object obj = ViewStateAttributes.GetFromViewState("Mode", null);
                if (obj != null) {
                    return (TextBoxMode)obj;
                } else {
                    return TextBoxMode.SingleLine;
                }
            }
            set {
                if (((int)value < 0) || ((int)value > 2)) {
                    throw new ArgumentOutOfRangeException("value");
                }
                ViewStateAttributes.SetInViewState("Mode", value, null);
            }
        }

        public ParentEditRecordPropType ValidatorType { get { return ParentEditRecordPropType.NEEDS_VALIDATION; } }

        private static readonly object EventTextChanged;

        public void ToXml(Object parent, XmlElement baseElem, String fieldName, int detailLevel) {
            // baseElem is already the widget element, so all we need to do is to add the
            // TextBox own properties
            if (detailLevel > 0) {
                VarValue.AppendAttribute(baseElem, "TypedValue", TypedValue, TypeKind.Text);
                VarValue.AppendAttribute(baseElem, "Valid", Valid, TypeKind.Boolean);
                VarValue.AppendAttribute(baseElem, "ValidationMessage", ValidationMessage, TypeKind.Text);
            }
        }

        public void EvaluateFields(VarValue variable, Object parent, String baseName, String fields) {
            // baseElem is already the widget element, so all we need to do is to check the
            // TextBox own properties
            String head = VarValue.GetHead(fields);
            String tail = VarValue.GetTail(fields);
            if (head == "typedvalue")
                variable.Value = TypedValue;
            else if (head == "valid")
                variable.Value = Valid;
            else if (head == "validationmessage")
                variable.Value = ValidationMessage;
        }

        private Hashtable events;
        public void RegisterAjaxEvent(AjaxEventType eventType, Array controlIdsToSend) {
            if (events == null) {
                events = new Hashtable();
            }

            events[eventType] = controlIdsToSend;
        }

        public Hashtable GetRegisteredAjaxEvents() {
            return events;
        }

        public string GridCssClasses { get; set; }

        #region IAjaxChangeEvent implementation

        public event EventHandler AjaxChange;

        public void OnAjaxChange(EventArgs e) {
            AjaxEventsHelper.RaiseAjaxEvent(this, AjaxChange);
        }

        #endregion

        #region IBreakPointControl implementation

        private String _BreakpointHookId;
        private bool _BreakpointHookIsExpressionlessWidget = false;

        public event BreakpointHook BreakpointHookEvent;

        public string BreakpointHookId {
            get { return _BreakpointHookId; }
            set { _BreakpointHookId = value; }
        }

        public bool BreakpointHookIsExpressionlessWidget {
            get { return _BreakpointHookIsExpressionlessWidget; }
            set { _BreakpointHookIsExpressionlessWidget = value; }
        }

        #endregion

        protected override void OnInit(EventArgs e) {
            base.OnInit(e);
            this.AddGridClassesAttribute();
        }
        public override void DataBind() {
            if (BreakpointHookEvent != null) {
                BreakpointHookEvent(BreakpointHookId, BreakpointHookIsExpressionlessWidget);
            }
            base.DataBind();
            /// Not visible input Widgets are marked as not Mandatory, so that the validation classifies them as valid.
            /// An empty field that is not mandatory is always valid.
            if (!this.Visible) {
                this.Mandatory = false;
            }
        }

        #region IOSControl members
        string IOSControl.TagName { get { return this.TagName; } }
        string[] IOSControl.CssClass { get { return this.CssClass.Split(' '); } }
        #endregion
    }
}
