/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using SAP.Middleware.Connector;

using System;
using System.Collections.Generic;
using System.Web;

namespace OutSystems.Plugin.SAP {
    public class SapTransactionHandler {

        private const string SapManualContextsKey = "SapManualContexts";
        private const string SapGlobalManualContextKey = "SapGlobalManualContext";
        private const string SapStatelessRegionsKey = "SapStatelessRegions";
        private const string SapGlobalStatelessRegionKey = "SapGlobalStatelessRegion";

        public static bool isManualContext(HttpContext currentContext, String sapClientName) {
            Dictionary<String, RfcDestination> manualContexts = currentContext.Items[SapManualContextsKey] as Dictionary<String, RfcDestination>;
            if (manualContexts != null && (currentContext.Items.Contains(SapGlobalManualContextKey) || manualContexts.ContainsKey(sapClientName))) {
                return true;
            }
            return false;
        }

        public static bool isStatelessRegion(HttpContext currentContext, String sapClientName) {
            ICollection<String> stateLessRegions = currentContext.Items[SapStatelessRegionsKey] as ICollection<String>;
            if (stateLessRegions != null && (currentContext.Items.Contains(SapGlobalStatelessRegionKey) || stateLessRegions.Contains(sapClientName))) {
                return true;
            }
            return false;
        }

        public static RfcDestination GetManualContextDestination(HttpContext currentContext, string sapClientName) {
            if (isManualContext(currentContext, sapClientName) &&
                ((Dictionary<String, RfcDestination>)currentContext.Items[SapManualContextsKey]).ContainsKey(sapClientName)) {
                return ((Dictionary<String, RfcDestination>)currentContext.Items[SapManualContextsKey])[sapClientName];
            }

            return null;
        }

        public static void initializeContext(HttpContext currentContext, String sapClientName, RfcDestination destination) {
            bool manualContext = isManualContext(currentContext, sapClientName);
            if (manualContext) {
                var manualContexts = (Dictionary<String, RfcDestination>)currentContext.Items[SapManualContextsKey];
                if (!manualContexts.ContainsKey(sapClientName) || manualContexts[sapClientName] == null) {
                    manualContexts[sapClientName] = destination;
                    RfcSessionManager.BeginContext(destination);
                }
            } else if (!isStatelessRegion(currentContext, sapClientName)) {
                RfcSessionManager.BeginContext(destination);
            }
        }

        public static void commitIfNeeded(HttpContext currentContext, String sapClientName, RfcDestination destination) {
            if (!isManualContext(currentContext, sapClientName) && !isStatelessRegion(currentContext, sapClientName)) {
                IRfcFunction commitFunc = destination.Repository.CreateFunction("BAPI_TRANSACTION_COMMIT");
                commitFunc.Invoke(destination);
            }
        }

        public static void closeContextIfNeeded(HttpContext currentContext, String sapClientName, RfcDestination destination) {
            if (!isManualContext(currentContext, sapClientName) && !isStatelessRegion(currentContext, sapClientName)) {
                RfcSessionManager.EndContext(destination);
            }
        }
    }
}
