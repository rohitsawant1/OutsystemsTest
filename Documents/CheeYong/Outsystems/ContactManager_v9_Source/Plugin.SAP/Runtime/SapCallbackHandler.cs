/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.RuntimePlatform;
using SAP.Middleware.Connector;
using System;

namespace OutSystems.Plugin.SAP {
    public class SapCallbackHandler {
        
        public static RfcConfigParameters handleOnBeforeConnection(HeContext heContext, Action<HeContext> onBeforeConnection, RfcConfigParameters configParameters, String actionName) {
            using (var sapInternalContext = new OutSystems.Internal.SAP.SAPInternalContext(actionName)) {
                sapInternalContext.SetRfcConfigParameters(configParameters);
                onBeforeConnection(heContext);
                configParameters = sapInternalContext.GetRfcConfigParameters();
            }
            return configParameters;
        }

        [Obsolete]
        public static IRfcFunction handleOnBeforeCall(HeContext heContext, Action<HeContext, String> onBeforeCall, String actionName, IRfcFunction func, String functionName) {
            using (var sapInternalContext = new OutSystems.Internal.SAP.SAPInternalContext(actionName)) {
                sapInternalContext.SetIRfcFunction(func);
                onBeforeCall(heContext, functionName);
                func = sapInternalContext.GetIRfcFunction();
            }
            return func;
        }
        
        public static IRfcFunction handleOnBeforeCall(HeContext heContext, Action<HeContext> onBeforeCall, String actionName, IRfcFunction func) {
            using (var sapInternalContext = new OutSystems.Internal.SAP.SAPInternalContext(actionName)) {
                sapInternalContext.SetIRfcFunction(func);
                onBeforeCall(heContext);
                func = sapInternalContext.GetIRfcFunction();
            }
            return func;
        }
        
        [Obsolete]
        public static IRfcFunction handleOnAfterCall(HeContext heContext, Action<HeContext, String> onAfterCall, String actionName, IRfcFunction func, String functionName) {
            using (var sapInternalContext = new OutSystems.Internal.SAP.SAPInternalContext(actionName)) {
                sapInternalContext.SetIRfcFunction(func);
                onAfterCall(heContext, functionName);
                func = sapInternalContext.GetIRfcFunction();
            }
            return func;
        }
        
        public static IRfcFunction handleOnAfterCall(HeContext heContext, Action<HeContext> onAfterCall, String actionName, IRfcFunction func) {
            using (var sapInternalContext = new OutSystems.Internal.SAP.SAPInternalContext(actionName)) {
                sapInternalContext.SetIRfcFunction(func);
                onAfterCall(heContext);
                func = sapInternalContext.GetIRfcFunction();
            }
            return func;
        }
    }
}
