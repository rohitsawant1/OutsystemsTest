/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SAP.Middleware.Connector;

namespace OutSystems.RuntimePublic.SAP {

    /// <summary>
    /// Provides access to the SAP Transactional context for SAP Remote Functions
    /// </summary>
    public class SAPContext {

        private const string SapManualContextsKey = "SapManualContexts";
        private const string SapGlobalManualContextKey = "SapGlobalManualContext";
        private const string SapStatelessRegionsKey = "SapStatelessRegions";
        private const string SapGlobalStatelessRegionKey = "SapGlobalStatelessRegion";

        private static Dictionary<String, RfcDestination> GetSapManualContexts() {
            if (System.Web.HttpContext.Current.Items.Contains(SapManualContextsKey)) {
                return (Dictionary<String, RfcDestination>)System.Web.HttpContext.Current.Items[SapManualContextsKey];
            }

            return null;
        }

        /// <summary>
        /// Marks the connection's context as manually controlled allowing the user to orchestrate 2 or more function calls in the same context. 
        /// </summary>
        /// <param name="connectionName">The name of the SAP connection which context is to be manually controlled.</param>
        public static void BeginContext(String connectionName) {
            if (!System.Web.HttpContext.Current.Items.Contains(SapManualContextsKey)) {
                System.Web.HttpContext.Current.Items.Add(SapManualContextsKey, new Dictionary<String, RfcDestination>());
            }

            if (connectionName != null) {
                ((Dictionary<String, RfcDestination>)System.Web.HttpContext.Current.Items[SapManualContextsKey]).Add(connectionName, null);
            }
        }

        /// <summary>
        /// Marks any connections' context as manually controlled allowing the user to orchestrate 2 or more function calls in the same context. 
        /// </summary>
        public static void BeginContext() {
            BeginContext(null);

            if (!System.Web.HttpContext.Current.Items.Contains(SapGlobalManualContextKey)) {
                System.Web.HttpContext.Current.Items.Add(SapGlobalManualContextKey, true);
            }
        }

        /// <summary>
        /// Ends a manually controlled context.
        /// </summary>
        /// <param name="connectionName">The name of the SAP connection which context is to be terminated.</param>
        public static void EndContext(String connectionName) {
            Dictionary<String, RfcDestination> SapManualContexts = GetSapManualContexts();
            if (SapManualContexts != null) {
                RfcDestination destination = SapManualContexts[connectionName];
                if (destination != null) {
                    RfcSessionManager.EndContext(destination);
                } else {
                    throw new Exception("Unable to access the remote destination on connection: " + connectionName);
                }
                SapManualContexts.Remove(connectionName);                
                return;
            }
            throw new Exception("No manually controlled context found for the connection: " + connectionName);
        }

        /// <summary>
        /// Ends a manually controlled context.
        /// </summary>
        public static void EndContext() {
            Dictionary<String, RfcDestination> SapManualContexts = GetSapManualContexts();
            if (SapManualContexts != null) {
                foreach (string destinationKey in SapManualContexts.Keys.ToList()) {
                    EndContext(destinationKey);
                }
                SapManualContexts.Clear();
                System.Web.HttpContext.Current.Items.Remove(SapGlobalManualContextKey);
                return;
            }
            throw new Exception("No manually controlled context found.");
        }

        /// <summary>
        /// Commit the work performed so far in a manually controlled context.
        /// </summary>
        /// <param name="connectionName">The name of the SAP connection.</param>
        public static void Commit(String connectionName) {
            Dictionary<String, RfcDestination> SapManualContexts = GetSapManualContexts();
            if (SapManualContexts != null) {
                RfcDestination destination = SapManualContexts[connectionName];
                if (destination != null) {
                    IRfcFunction commit = destination.Repository.CreateFunction("BAPI_TRANSACTION_COMMIT");
                    if (commit != null) {
                        commit.Invoke(destination);
                        return;
                    } else {
                        throw new Exception("Unable execute the commit function on connection: " + connectionName);
                    }
                } else {
                    throw new Exception("Unable to access the remote destination on connection: " + connectionName);
                }
            }
            throw new Exception("No manually controlled context found for the connection: " + connectionName);
        }

        /// <summary>
        /// Commit the work performed so far in a manually controlled context.
        /// </summary>
        public static void Commit() {
            Dictionary<String, RfcDestination> SapManualContexts = GetSapManualContexts();
            if (SapManualContexts != null) {
                foreach (string destinationKey in SapManualContexts.Keys) {
                    Commit(destinationKey);
                }
            }
        }

        /// <summary>
        /// Rollback any changes made so far in a manually controlled context.
        /// </summary>
        /// <param name="connectionName">The name of the SAP connection.</param>
        public static void Rollback(String connectionName) {
            Dictionary<String, RfcDestination> SapManualContexts = GetSapManualContexts();
            if (SapManualContexts != null) {
                RfcDestination destination = SapManualContexts[connectionName];
                if (destination != null) {
                    IRfcFunction rollback = destination.Repository.CreateFunction("BAPI_TRANSACTION_ROLLBACK");
                    if (rollback != null) {
                        rollback.Invoke(destination);
                        return;
                    } else {
                        throw new Exception("Unable execute the rollback function on connection: " + connectionName);
                    }
                } else {
                    throw new Exception("Unable to access the remote destination on connection: " + connectionName);
                }
            }
            throw new Exception("No manually controlled context found for the connection: " + connectionName);
        }

        /// <summary>
        /// Rollback any changes made so far in a manually controlled context.
        /// </summary>
        public static void Rollback() {
            Dictionary<String, RfcDestination> SapManualContexts = GetSapManualContexts();
            if (SapManualContexts != null) {
                foreach (string destinationKey in SapManualContexts.Keys) {
                    Rollback(destinationKey);
                }
            }
        }

        private static IList<String> GetSapStatelessRegions() {
            if (System.Web.HttpContext.Current.Items.Contains(SapStatelessRegionsKey)) {
                return (IList<String>)System.Web.HttpContext.Current.Items[SapStatelessRegionsKey];
            }

            return null;
        }

        #region "Stateless Regions"

        /// <summary>
        /// Marks the connection's context as Stateless allowing the user to invoke BAPIs with implicit commits without the overhead of a stateful connection. 
        /// </summary>
        /// <param name="connectionName">The name of the SAP connection which should be Stateless.</param>
        public static void BeginStatelessRegion(String connectionName) {
            if (!System.Web.HttpContext.Current.Items.Contains(SapStatelessRegionsKey)) {
                System.Web.HttpContext.Current.Items.Add(SapStatelessRegionsKey, new List<String>());
            }

            if (connectionName != null) {
                ((IList<String>)System.Web.HttpContext.Current.Items[SapStatelessRegionsKey]).Add(connectionName);
            }
        }

        /// <summary>
        /// Marks any connection's context as Stateless allowing the user to invoke BAPIs with implicit commits without the overhead of a stateful connection. 
        /// </summary>
        public static void BeginStatelessRegion() {
            BeginStatelessRegion(null);

            if (!System.Web.HttpContext.Current.Items.Contains(SapGlobalStatelessRegionKey)) {
                System.Web.HttpContext.Current.Items.Add(SapGlobalStatelessRegionKey, true);
            }
        }

        /// <summary>
        /// Ends a Stateless region.
        /// </summary>
        /// <param name="connectionName">The name of the SAP connection which context is to be terminated.</param>
        public static void EndStatelessRegion(String connectionName) {
            IList<String> SapStatelessRegions = GetSapStatelessRegions();
            if (SapStatelessRegions != null) {
                SapStatelessRegions.Remove(connectionName);
                return;
            }
            throw new Exception("No stateless region found for the connection: " + connectionName);
        }

        /// <summary>
        /// Ends a Stateless region.
        /// </summary>
        public static void EndStatelessRegion() {
            IList<String> SapStatelessRegions = GetSapStatelessRegions();
            if (SapStatelessRegions != null) {
                foreach (string destinationKey in SapStatelessRegions) {
                    EndStatelessRegion(destinationKey);
                }
                SapStatelessRegions.Clear();
                System.Web.HttpContext.Current.Items.Remove(SapGlobalStatelessRegionKey);
                return;
            }
            throw new Exception("No stateless region found.");
        }

        #endregion

    }
}
