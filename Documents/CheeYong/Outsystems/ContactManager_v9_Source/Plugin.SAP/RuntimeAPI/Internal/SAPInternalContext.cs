/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using SAP.Middleware.Connector;
using System;
using System.Net;
using System.Text;

namespace OutSystems.Internal.SAP {

    /// <summary>
    /// Internal class used to store the context of a Rest Request.
    /// Should never be used directly. Use the OutSystems.RuntimePublic.REST.RestRequest class instead.
    /// </summary>
    public class SAPInternalContext : IDisposable {

        [ThreadStatic]
        private static SAPInternalContext currentContext;
        private SAPInternalContext previousContext = null;

        private readonly string actionName;

        private RfcConfigParameters rfcConfigParameters;
        private IRfcFunction rfcFunction;
        
        /// <summary>
        /// Constructor for SapContext.
        /// This class is for internal use only. Use the OutSystems.RuntimePublic.Sap.SapInvoke class instead.
        /// </summary>
        /// <param name="actionName"></param>
        public SAPInternalContext(string actionName) {
            this.previousContext = SAPInternalContext.currentContext;
            SAPInternalContext.currentContext = this;

            this.actionName = actionName;
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose() {
            SAPInternalContext.currentContext = previousContext;
        }


        internal static SAPInternalContext GetCurrent() {
            return SAPInternalContext.currentContext;
        }

        /// <summary>
        /// Returns the name of the REST API Method that invoked the extension.
        /// </summary>
        public string GetActionName() {
            return actionName;
        }

        /// <summary>
        /// Returns the RfcConfigParameters.
        /// </summary>
        public RfcConfigParameters GetRfcConfigParameters()
        {
            return rfcConfigParameters;
        }

        /// <summary>
        /// Sets the RfcConfigParameters.
        /// </summary>
        public void SetRfcConfigParameters(RfcConfigParameters rfcConfigParameters)
        {
            this.rfcConfigParameters = rfcConfigParameters;
        }


        /// <summary>
        /// Returns the current IRfcFunction being called.
        /// </summary>
        /// <returns>The IRfcFunction being called.</returns>
        public IRfcFunction GetIRfcFunction()
        {
            return rfcFunction;
        }

        /// <summary>
        /// Sets the IRfcFunction.
        /// </summary>
        /// <param name="rfcFunction">The IRfcFunction to be set.</param>
        public void SetIRfcFunction(IRfcFunction rfcFunction)
        {
            this.rfcFunction = rfcFunction;
        }
    }
}