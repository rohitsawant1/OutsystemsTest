/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;

namespace OutSystems.ObjectKeys {

    [Serializable]
    internal class LocalKey : ObjectKey {

        private LocalKeyValue localKey;

        private ObjectKey parent;

        public override bool NeedsParent { get { return true; } }

        public override ObjectKey Parent {
            get { return parent; }
            set {
                if (parent != null) {
                    if (parent != value) {
                        throw new InvalidOperationException("The key parent can only be set once");
                    }
                }
                if (value == null) {
                    throw new InvalidOperationException("The key parent can not be null");
                }
                parent = value;
            }
        }

        public LocalKey(LocalKeyValue localKey) {
            this.localKey = localKey;
        }

        public override int GetHashCodeIgnoringParent() {
            return localKey.GetHashCode();
        }

        public override int GetHashCode() {
            if (parent == null) {
                throw new InvalidOperationException("Cannot add key to collection without the parent info");
            }
            return localKey.GetHashCode() + parent.GetHashCode();
        }

        public override bool EqualsIgnoringParent(ObjectKey obj) {
            LocalKey other = obj as LocalKey;
            return other != null && localKey == other.localKey;
        }

        public override bool Equals(object obj) {
            LocalKey other = obj as LocalKey;
            return other != null && localKey == other.localKey && parent == other.parent;
        }

        public static bool operator ==(LocalKey lk1, LocalKey lk2) {
            if (ReferenceEquals(lk1, lk2)) {
                return true;
            } else if (ReferenceEquals(lk1, null) || ReferenceEquals(lk2, null)) {
                return false;
            }

            return lk1.localKey == lk2.localKey && lk1.parent == lk2.parent;
        }

        public static bool operator !=(LocalKey lk1, LocalKey lk2) {
            if (ReferenceEquals(lk1, lk2)) {
                return false;
            } else if (ReferenceEquals(lk1, null) || ReferenceEquals(lk2, null)) {
                return true;
            }

            return lk1.localKey != lk2.localKey || lk1.parent != lk2.parent;
        }

        protected override string GetSerializationInfoData() {
            return ToString(parent == null ? ObjectKey.ShortFormat : ObjectKey.FullFormat);
        }

        public override string ToString(string format) {
            if (format == ObjectKey.ShortFormat) {
                return LocalKeyPrefix + localKey;
            } else if (format == ObjectKey.DatabaseFormat) {
                return parent.ToString(ObjectKey.DatabaseFormat) + SeparatorChar + LocalKeyPrefix + localKey.ToString();
            } else if (format == ObjectKey.FullFormat) {
                return parent.ToString(ObjectKey.FullFormat) + SeparatorChar + LocalKeyPrefix + localKey;
            } else {
                throw new InvalidOperationException("Invalid key format: " + format);
            }
        }

        public override int CompareTo(ObjectKey obj) {
            return DefaultCompareTo<LocalKey>(obj, other => localKey.CompareTo(other.localKey));
        }

        public override bool IsLocal {
            get { return true; }
        }

        protected override ObjectKeyType KeyType {
            get { return ObjectKeyType.LocalKey; }
        }

        public override LocalKeyValue LocalPart {
            get { return localKey; }
        }

        public override ObjectKey Duplicate() {
            return new LocalKey(localKey);
        }
    }
}