/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;

namespace OutSystems.ObjectKeys {

    [Serializable]
    internal class GuidKey : ObjectKey {

        private Guid value;

        protected int SpecificTypeComparer(GuidKey other) {
            return value.CompareTo(other.value);
        }

        public GuidKey(Guid value) {
            this.value = value;
        }

        public override int GetHashCode() {
            return value.GetHashCode();
        }

        public override bool Equals(object obj) {
            GuidKey other = obj as GuidKey;
            return other != null && value.Equals(other.value);
        }

        public static bool operator ==(GuidKey gk1, GuidKey gk2) {
            if (ReferenceEquals(gk1, gk2)) {
                return true;
            } else if (ReferenceEquals(gk1, null) || ReferenceEquals(gk2, null)) {
                return false;
            }

            return gk1.value.Equals(gk2.value);
        }

        public static bool operator !=(GuidKey gk1, GuidKey gk2) {
            if (ReferenceEquals(gk1, gk2)) {
                return false;
            } else if (ReferenceEquals(gk1, null) || ReferenceEquals(gk2, null)) {
                return true;
            }

            return !gk1.value.Equals(gk2.value);
        }

        public override string ToString(string format) {
            if (format == ObjectKey.ShortFormat) {
                return Base64.ToBase64(value);
            } else if (format == ObjectKey.DatabaseFormat) {
                // Base64 can not be used because the database may be case insensitive
                // we return the ToLower value because of Oracle
                return value.ToString().ToLower();
            } else if (format == ObjectKey.FullFormat) {
                return Base64.ToBase64(value);
            } else {
                throw new InvalidOperationException("Invalid key format: " + format);
            }
        }

        public override int CompareTo(ObjectKey obj) {
            return DefaultCompareTo<GuidKey>(obj, SpecificTypeComparer);
        }

        public override bool IsLocal {
            get { return false; }
        }

        protected override ObjectKeyType KeyType {
            get { return ObjectKeyType.GuidKey; }
        }

        public override Guid AsGuid {
            get { return value; }
        }

        public override ObjectKey Duplicate() {
            return this;
        }
    }
}