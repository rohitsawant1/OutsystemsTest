/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.RuntimeCommon;

namespace OutSystems.ObjectKeys {

    [Serializable]
    internal class Pre50Key : ObjectKey {

        private string value;

        protected int SpecificTypeComparer(Pre50Key other) {
            return value.CompareTo(other.value);
        }

        public Pre50Key(string value) {
            // the '/' char is used as a separator char in compound keys, so we replace it by an underscore
            // when using it in the oml; in the DB we can use it as is without problems
            this.value = value.Replace("_", "/");
        }

        public override int GetHashCode() {
            return value.GetHashCode();
        }

        public override bool Equals(object obj) {
            Pre50Key other = obj as Pre50Key;
            return other != null && value.Equals(other.value);
        }

        public static bool operator ==(Pre50Key gk1, Pre50Key gk2) {
            if (ReferenceEquals(gk1, gk2)) {
                return true;
            } else if (ReferenceEquals(gk1, null) || ReferenceEquals(gk2, null)) {
                return false;
            }

            return gk1.value.Equals(gk2.value);
        }

        public static bool operator !=(Pre50Key gk1, Pre50Key gk2) {
            if (ReferenceEquals(gk1, gk2)) {
                return false;
            } else if (ReferenceEquals(gk1, null) || ReferenceEquals(gk2, null)) {
                return true;
            }

            return !gk1.value.Equals(gk2.value);
        }

        public override string ToString(string format) {
            if (format == DatabaseFormat) {
                return value;
            } else {
                return value.Replace("/", "_");
            }
        }

        public override int CompareTo(ObjectKey obj) {
            return DefaultCompareTo<Pre50Key>(obj, SpecificTypeComparer);
        }

        public override bool IsLocal {
            get { return false; }
        }

        protected override ObjectKeyType KeyType {
            get { return ObjectKeyType.Pre50Key; }
        }

        public override ObjectKey Duplicate() {
            return this;
        }
    }
}