/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;

namespace OutSystems.ObjectKeys {

    [Serializable]
    public class GlobalObjectKey : IComparable<GlobalObjectKey> {

        public const string Separator = "*";

        public readonly ObjectKey OwnerKey;
        public readonly ObjectKey Key;

        public GlobalObjectKey(string ownerKey, string key) : 
            this(ObjectKey.Parse(ownerKey), ObjectKey.Parse(key))  { }

        public GlobalObjectKey(ObjectKey ownerKey, ObjectKey key) {
            this.OwnerKey = ownerKey;
            this.Key = key;
        }

        public override string ToString() {
            return OwnerKey.ToString() + Separator + Key.ToString();
        }

        public string ToString(string format) {
            return OwnerKey.ToString(format) + Separator + Key.ToString(format);
        }

        public static GlobalObjectKey Parse(string str) {
            if (string.IsNullOrEmpty(str) || str == " ") {
                return null;
            }

            int pos = str.IndexOf(Separator);
            return new GlobalObjectKey(
                ObjectKey.Parse(str.Substring(0, pos)),
                ObjectKey.Parse(str.Substring(pos + 1)));
        }

        public int CompareTo(GlobalObjectKey other) {
            int result = OwnerKey.CompareTo(other.OwnerKey);
            if (result == 0) {
                result = Key.CompareTo(other.Key);
            }
            return result;
        }

        public override bool Equals(object obj) {
            var other = obj as GlobalObjectKey;
            return other != null && Key == other.Key && OwnerKey == other.OwnerKey;
        }

        public override int GetHashCode() {
            return Key.GetHashCode() ^ OwnerKey.GetHashCode();
        }

        public static bool operator ==(GlobalObjectKey a, GlobalObjectKey b) {
            if (ReferenceEquals(a, null)) {
                return ReferenceEquals(b, null);
            }
            return a.Equals(b);
        }

        public static bool operator !=(GlobalObjectKey a, GlobalObjectKey b) {
            if (ReferenceEquals(a, null)) {
                return !ReferenceEquals(b, null);
            }
            return !a.Equals(b);
        }

        public bool IsAnyOf(params GlobalObjectKey[] keys) {
            foreach (var key in keys) {
                if (Equals(key)) {
                    return true;
                }
            }
            return false;
        }
    }
}