/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;

namespace OutSystems.RuntimeCommon {

    [Serializable]
    public class Triplet<T1, T2, T3> {

        public T1 First { get; set; }
        public T2 Second { get; set; }
        public T3 Third { get; set; }

        public Triplet() { }

        public Triplet(T1 first, T2 second, T3 third) {
            First = first;
            Second = second;
            Third = third;
        }

        public override int GetHashCode() {
            return (First == null ? 0 : First.GetHashCode()) ^
                   (Second == null ? 0 : Second.GetHashCode()) ^
                   (Third == null ? 0 : Third.GetHashCode());
        }

        public override bool Equals(object obj) {
            var other = obj as Triplet<T1, T2, T3>;
            return this == other;
        }

        public static bool operator ==(Triplet<T1, T2, T3> triplet1, Triplet<T1, T2, T3> triplet2) {
            if (ReferenceEquals(triplet1, null)) {
                return ReferenceEquals(triplet2, null);
            }
            if (ReferenceEquals(triplet2, null)) {
                return false;
            }

            if (triplet1.First == null) {
                if (triplet2.First != null) {
                    return false;
                }
            } else if (!triplet1.First.Equals(triplet2.First)) {
                return false;
            }

            if (triplet1.Second == null) {
                if (triplet2.Second != null) {
                    return false;
                }
            } else if (!triplet1.Second.Equals(triplet2.Second)) {
                return false;
            }

            if (triplet1.Third == null) {
                if (triplet2.Third != null) {
                    return false;
                }
            } else if (!triplet1.Third.Equals(triplet2.Third)) {
                return false;
            }

            return true;
        }

        public static bool operator !=(Triplet<T1, T2, T3> triplet1, Triplet<T1, T2, T3> triplet2) {
            if (ReferenceEquals(triplet1, null)) {
                return !ReferenceEquals(triplet2, null);
            }
            if (ReferenceEquals(triplet2, null)) {
                return true;
            }

            if (triplet1.First == null) {
                if (triplet2.First != null) {
                    return true;
                }
            } else if (!triplet1.First.Equals(triplet2.First)) {
                return true;
            }

            if (triplet1.Second == null) {
                if (triplet2.Second != null) {
                    return true;
                }
            } else if (!triplet1.Second.Equals(triplet2.Second)) {
                return true;
            }

            if (triplet1.Third == null) {
                if (triplet2.Third != null) {
                    return true;
                }
            } else if (!triplet1.Third.Equals(triplet2.Third)) {
                return true;
            }

            return false;
        }

        public override string ToString() {
            return string.Format("<{0},{1},{2}>", First, Second, Third);
        }
    }

    public static class Triplet {

        public static Triplet<T1, T2, T3> Create<T1, T2, T3>(T1 first, T2 second, T3 third) {
            return new Triplet<T1, T2, T3>(first, second, third);
        }
    }
}