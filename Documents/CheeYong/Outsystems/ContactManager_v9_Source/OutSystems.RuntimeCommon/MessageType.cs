/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;

namespace OutSystems.RuntimeCommon {

    [Flags, Serializable]
    public enum MessageType {
        Info = 1,
        Warning = 2,
        Error = 4,
        DevWarn = 8,
        Ok = 16,
        Question = 32,
        State = 64,
        TestRunning = 128,
        StepX = 256,
        StepSub = 512,
    }

    public static class MessageTypeExtensions {
        public static HEMessageType ToHEMessageType(this MessageType type) {

            switch (type) {
                case MessageType.Info:
                    return HEMessageType.Info;
                case MessageType.Warning:
                    return HEMessageType.Warning;
                case MessageType.Error:
                    return HEMessageType.Error;
                case MessageType.DevWarn:
                    return HEMessageType.DevWarn;
                case MessageType.Ok:
                    return HEMessageType.OK;
                case MessageType.Question:
                    return HEMessageType.Question;
                case MessageType.StepX:
                    return HEMessageType.StepX;
                case MessageType.StepSub:
                    return HEMessageType.StepSub;
                default:
                    // Not sure what to return here, but it shouldn't be used anyway
                    return HEMessageType.Info;
            }
        }

        public static MessageType ToMessageType(this HEMessageType type) {

            switch (type) {
                case HEMessageType.Info:
                    return MessageType.Info;
                case HEMessageType.Warning:
                    return MessageType.Warning;
                case HEMessageType.Error:
                    return MessageType.Error;
                case HEMessageType.DevWarn:
                    return MessageType.DevWarn;                
                case HEMessageType.Question:
                    return MessageType.Question;
                case HEMessageType.StepX:
                    return MessageType.StepX;
                case HEMessageType.StepSub:
                    return MessageType.StepSub;
                default:
                    return MessageType.Ok;
            }
        }
    }
}