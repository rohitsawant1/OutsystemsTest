/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Linq;

namespace OutSystems.RuntimeCommon {

    public class ScriptableEmailFunctions {

        // since .Net 2.0 RegExp massive compilation makes performance lousy. Real lousy.
        // so we cache all regexps here!
        private static IDictionary<Pair<string, RegexOptions>, Regex> RegexCache = new Dictionary<Pair<string, RegexOptions>, Regex>();
        public static Regex GetRegex(string expression, RegexOptions options) {
            lock (RegexCache) {
                Regex regex;
                var key = Pair.Create(expression, options);
                if (!RegexCache.TryGetValue(key, out regex)) {
                    RegexCache.Add(key, regex = new Regex(expression, options | RegexOptions.Compiled));
                }
                return regex;
            }
        }

        public static Regex GetRegex(string expression) {
            return GetRegex(expression, RegexOptions.None);
        }

        // Email format is compliant to HTML 5. Reference: http://blog.gerv.net/2011/05/html5_email_address_regexp/
        private static string EmailRegexStr = @"[a-zA-Z0-9.!#$%&'*+\-/=?^_`{|}~]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*";
        private static string EmailNameStr = @"([0-9a-zA-Z\\= ]*|=\?([^?]*)\?([qQbB])\?([^?]*)\?=)";

        private static readonly Regex SimpleEmailRegex = GetRegex("^" + EmailRegexStr + "$", RegexOptions.ExplicitCapture);
        private static readonly Regex NameAndEmailRegex = GetRegex("^" + EmailNameStr + "[ ]*<" + EmailRegexStr + ">$", RegexOptions.ExplicitCapture);
        private static readonly Regex QuotedNameAndEmailRegex = GetRegex("^\\\"" + EmailNameStr + "\\\"[ ]*<" + EmailRegexStr + ">$", RegexOptions.ExplicitCapture);

        public static bool IsValid(string email) {
            foreach (string emailAddr in email.Split(',', ';')) {
                string trimmedEmail = emailAddr.Trim();
                if (!InnerIsValid(trimmedEmail)) {
                    return false;
                }
            }

            return true;
        }

        private static string[] Exceptions = {
                                                 ".@", // #713619 - no need to change the regex for something so simple
                                                 ".." // #RPD-1742 - invalidates emails with two dots following each other
                                             };

        private static bool InnerIsValid(string individualEmail) {
            if (individualEmail.IsEmpty()) {
                return true;
            }

            if (Exceptions.Any(individualEmail.Contains)) {
                return false;
            }

            return SimpleEmailRegex.IsMatch(individualEmail) ||
                NameAndEmailRegex.IsMatch(individualEmail) ||
                QuotedNameAndEmailRegex.IsMatch(individualEmail);
        }
    }
}
