/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.ObjectKeys;

namespace OutSystems.RuntimeCommon {

    public enum BreakpointType {
        Normal,
        AtFunctionReturn,
        BetweenAssignments
    }

    public class BreakpointId : IDebuggerSerializable {

        private const char SeparatorChar = ':';

        protected ObjectKey eSpaceKey;
        protected ObjectKey objectKey;
        protected string compoundKeyStr;
        protected string debuggerHashStr;

        string IDebuggerSerializable.SerializationString { get { return ToString(); } }

        public ObjectKey ESpaceKey {
            get { return eSpaceKey; }
        }

        public ObjectKey ObjectKey {
            get { return objectKey; }
        }

        public string CompoundKeyString {
            get { return compoundKeyStr; }
        }

        protected BreakpointId() {
        }

        // the compound key and compilation hash are represented as strings so that we don't have to make the 
        // CompoundKey and Hash classes available in the RuntimePlatform
        public BreakpointId(ObjectKey eSpaceKey, ObjectKey objectKey, string compoundKeyStr, string debuggerHashStr) {
            this.eSpaceKey = eSpaceKey;
            this.objectKey = objectKey;
            this.compoundKeyStr = compoundKeyStr;
            this.debuggerHashStr = debuggerHashStr;
        }

        public void Init(string breakpointIdStr) {
            if (string.IsNullOrEmpty(breakpointIdStr)) {
                return;
            }

            string[] parts = breakpointIdStr.Split(SeparatorChar);
            eSpaceKey = ObjectKey.Parse(parts[0]);
            objectKey = ObjectKey.Parse(parts[1]);
            compoundKeyStr = parts.Length > 2 && !string.IsNullOrEmpty(parts[2]) ? parts[2] : null;
            debuggerHashStr = parts.Length > 3 && !string.IsNullOrEmpty(parts[3]) ? parts[3] : null;
        }

        public static bool TryParse(string breakpointIdStr, out BreakpointId breakpoint) {
            breakpoint = null;
            if (string.IsNullOrEmpty(breakpointIdStr)) {
                return false;
            }
            try {
                breakpoint = new BreakpointId();
                breakpoint.Init(breakpointIdStr);
                return true;
            } catch {
                return false;
            }
        }

        public override bool Equals(object obj) {
            BreakpointId other = obj as BreakpointId;
            if (other == null) {
                return false;
            }

            return this == other;
        }

        public override int GetHashCode() {
            var eSpaceHash = eSpaceKey != null ? eSpaceKey.GetHashCode() : 0;
            var objectHash = objectKey != null ? objectKey.GetHashCode() : 0;
            return eSpaceHash ^ objectHash;
        }

        public static bool operator ==(BreakpointId b1, BreakpointId b2) {
            if (ReferenceEquals(b1, null)) {
                return ReferenceEquals(b2, null);
            } else if (ReferenceEquals(b2, null)) {
                return false;
            }

            return b1.eSpaceKey == b2.eSpaceKey && b1.objectKey == b2.objectKey;
        }

        public static bool operator !=(BreakpointId b1, BreakpointId b2) {
            return !(b1 == b2);
        }

        public override string ToString() {
            return ToString(/*includeCompoundKey*/true);
        }

        public string ToString(bool includeCompoundKey) {
            if (!includeCompoundKey && debuggerHashStr == null) {
                return eSpaceKey.ToString() + SeparatorChar +
                       (objectKey != null ? objectKey.ToString() : "");
            } else {
                return
                    (eSpaceKey != null ? eSpaceKey.ToString() : "") + SeparatorChar +
                    (objectKey != null ? objectKey.ToString() : "") + SeparatorChar +
                    (includeCompoundKey && compoundKeyStr != null ? compoundKeyStr : "") + SeparatorChar +
                    (debuggerHashStr != null ? debuggerHashStr : "");
            }
        }
    }
}
