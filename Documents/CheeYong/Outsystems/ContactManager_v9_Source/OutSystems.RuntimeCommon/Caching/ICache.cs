/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;

namespace OutSystems.RuntimeCommon.Caching {
    public delegate void CacheItemInvalidationCallback();
    public delegate object CacheItemValueGetter();

    public enum CacheItemPriority {
        Removable,
        NotRemovable
    }

    public interface ICache : IDisposable {

        /// <summary>
        ///     Clears the cache.
        /// </summary>
        void Clear();

        /// <summary>
        ///     Used to register a Listener to invalidations on a given dependency.
        /// </summary>
        /// 
        /// <param name="key">
        ///     The key for the Listener. This key will be used to identify the Listener in case you want to remove it,
        ///     must be an unique identifier to prevent clashes.
        /// </param>
        /// 
        /// <param name="dependency">
        ///     The dependency for the item. When this dependency gets invalidated, the invalidation 
        ///     callback <paramref name="invalidationCallback"/> will be invoked.
        /// </param>
        ///
        /// <param name="invalidationCallback">
        ///     A delegate that will be called each time the dependency is invalidated.
        /// </param>
        /// 
        void Listen(ICacheKey key, ICacheDependency dependency, CacheItemInvalidationCallback invalidationCallback);

        /// <summary>
        ///     Used to unregister a Listener from the cache.
        /// </summary>
        /// 
        /// <param name="key">
        ///     The key for the Listener. This key should be the identifier for the Listener inserted before on Listen(...).
        /// </param>
        /// 
        object StopListen(ICacheKey key);

        /// <summary>
        ///     Used to notify listeners for a given key and invalidate all items depending on it.
        /// </summary>
        /// 
        /// <param name="invalidationKey">
        ///     The key being invalidated.
        /// </param>
        /// 
        void Invalidate(ICacheInvalidationKey invalidationKey);

        /// <summary>
        ///     Used to add an item into the cache.
        /// </summary>
        /// 
        /// <param name="key">
        ///     The key for the item. This key will be used to identify the item on the cache and must be
        ///     an unique identifier to prevent clashes.
        /// </param>
        ///
        /// <param name="value">
        ///     The value that will be cached to this <paramref name="key"/> until it gets invalidated.
        /// </param>
        /// 
        /// <param name="dependency">
        ///     The dependency for the item. When this dependency gets invalidated, the the current stored 
        ///     value will be invalidated and replaced by the value returned by <paramref name="value"/> 
        ///     delegate.
        /// </param>
        /// 
        /// <param name="expirationDate">
        ///     The time at which the added object expires and is removed from the cache.
        ///     If you are using absolute expiration, the <paramref name="slidingSpan"/> parameter must 
        ///     be OutSystems.RuntimeCommon.Caching.CacheUtils.NoExpiration.
        ///</param>
        ///
        /// <param name="slidingSpan">
        ///     The interval between the time the added object was last accessed and the time
        ///     at which that object expires. 
        ///     If you are using sliding expiration, the <paramref name="expirationDate"/> parameter
        ///     must be OutSystems.RuntimeCommon.Caching.CacheUtils.NoSliding.
        /// </param>
        ///
        /// <param name="priority">
        ///     This parameter is used by the cache when it evicts objects. Object with CacheItemPriority.Removable
        ///     will be removed if there is the need.
        /// </param>
        /// 
        /// <exception cref="System.ArgumentException">
        ///     The <paramref name="expirationDate"/> and <paramref name="slidingSpan"/> parameters are 
        ///     both set for the item you are trying to add to the Cache.
        /// </exception>
        /// 
        /// <exception cref="System.ArgumentOutOfRangeException">
        ///     You set the <paramref name="slidingSpan"/> parameter to less than TimeSpan.Zero or a negative value.
        /// </exception>
        /// 
        void Add(ICacheKey key, object value, ICacheDependency dependency, DateTime expirationDate, TimeSpan slidingSpan, CacheItemPriority priority);

        /// <summary>
        ///     Used to get an item from the cache.
        /// </summary>
        /// 
        /// <param name="key">
        ///     The identifier for the item you are trying to get.
        /// </param>
        ///
        /// <returns>
        ///     The cache item value, or null if the key is not found.
        /// </returns>
        /// 
        object Get(ICacheKey key);

        /// <summary>
        ///     Used to get an item from the cache or add if it is not present.
        /// </summary>
        /// 
        /// <param name="key">
        ///     The key for the item your are trying to get or add.
        /// </param>
        ///
        /// <param name="getter">
        ///     The delegate that will be invoked to get the value to store in case it is no present on the cache.
        ///     The value returned will be cached to this <paramref name="key"/> until it gets invalidated.
        /// </param>
        /// 
        /// <param name="dependency">
        ///     The dependency for the item. When this dependency gets invalidated, the the current stored 
        ///     value will be invalidated and replaced by the value returned by <paramref name="getter"/> 
        ///     delegate.
        /// </param>
        /// 
        /// <param name="expirationDate">
        ///     The time at which the added object expires and is removed from the cache.
        ///     If you are using absolute expiration, the <paramref name="slidingSpan"/> parameter must 
        ///     be OutSystems.RuntimeCommon.Caching.CacheUtils.NoExpiration.
        ///</param>
        ///
        /// <param name="slidingSpan">
        ///     The interval between the time the inserted object was last accessed and the time
        ///     at which that object expires. 
        ///     If you are using sliding expiration, the <paramref name="expirationDate"/> parameter
        ///     must be OutSystems.RuntimeCommon.Caching.CacheUtils.NoSliding.
        /// </param>
        ///
        /// <param name="priority">
        ///     This parameter is used by the cache when it evicts objects. Object with CacheItemPriority.Removable
        ///     will be removed if there is the need.
        /// </param>
        /// 
        /// <returns>
        ///     The cache item value, or null if the key is not found.
        /// </returns>
        /// 
        object GetOrAdd(ICacheKey key, CacheItemValueGetter getter, ICacheDependency dependency, DateTime expirationDate, TimeSpan slidingSpan, CacheItemPriority priority);

        /// <summary>
        ///     Used test is ICache object is available.
        /// </summary>
        /// 
        /// <returns>
        ///     If the Cache is available
        /// </returns>
        /// 

        bool IsAvailable();
        /// <summary>
        ///     Used test is ICache object is available.
        /// </summary>
        /// 
        /// <returns>
        ///     If the Cache is available
        /// </returns>
        /// 
        bool IsAvailable(out Exception ex);
    }
}
