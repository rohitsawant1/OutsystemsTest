/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Globalization;

namespace OutSystems.RuntimeCommon {

	public static class FormatInfoLogic {
        private static readonly string[] defaultDateTimeFormatsConst = { "yyyy-M-d H:m:s", // this entry will have the application default datetime format
														  "yyyy-M-d H:m:s",
														  "yyyy/M/d H:m:s",
														  "yyyy.M.d H:m:s" };

        private static NumberFormatInfo inputNumberInfo;
		private static NumberFormatInfo numberFormatInfo;
		private static DateTimeFormatInfo dateTimeFormatInfo;
		private static char decimalSeparator;
		
		public static readonly CultureInfo defaultHeCultureInfo = new CultureInfo("en-US");

        // these entries will have the application default date format
        static string defaultDateFormat = "yyyy-M-d";
        static string outputDateFormat = "yyyy-M-d";
        static string outputTimeFormat = "HH:mm:ss";

        public static string[] defaultDateTimeFormats {
            get {
                return defaultDateTimeFormatsConst;
            }            
        }

		public static void SetDefaultDateAndDateTimeFormatString( string format, string outputFormat) {
			defaultDateFormat = format;
			defaultDateTimeFormats[0] = format + " H:m:s";
			outputDateFormat = outputFormat;
		}

        public static void SetOutputDateFormatString(string outputFormat) {
            outputDateFormat = outputFormat;
        }

		public static string GetDefaultDateFormatString() {
			return defaultDateFormat;
		}

		public static string GetDefaultDateTimeFormatString() {
			return defaultDateTimeFormats[0];
		}

		public static string GetOutputDateFormatString() {
			return outputDateFormat;
		}

		public static string GetOutputDateTimeFormatString() {
			return outputDateFormat + " " + outputTimeFormat;
		}

        public static string GetOutputTimeFormatString() {
            return outputTimeFormat;
        }

        public static void SetInputDecimalSeparator(string separator) {
            inputNumberInfo.NumberDecimalSeparator = separator;
        }

        public static void SetInputGroupSeparator(string separator) {
            inputNumberInfo.NumberGroupSeparator = separator;
        }

		static FormatInfoLogic() {
			decimalSeparator = '.';
			
			numberFormatInfo = new NumberFormatInfo();
			numberFormatInfo.NumberDecimalSeparator = decimalSeparator.ToString();
            numberFormatInfo.NumberDecimalDigits = 8;
			numberFormatInfo.NumberGroupSeparator = string.Empty;
			numberFormatInfo.NumberGroupSizes[0] = 0;
			numberFormatInfo.NumberNegativePattern = 1;

            inputNumberInfo = new NumberFormatInfo();
            inputNumberInfo.NumberDecimalDigits = 8;

			dateTimeFormatInfo = new DateTimeFormatInfo();
			dateTimeFormatInfo.DateSeparator = "-";
			dateTimeFormatInfo.TimeSeparator = ":";
		}

		public static NumberFormatInfo Number {
			get {
				return numberFormatInfo;
			}
		}

        public static NumberFormatInfo InputNumber {
            get {
                return inputNumberInfo;
            }
        }

		public static DateTimeFormatInfo DateTime {
			get {
				return dateTimeFormatInfo;
			}
		}

		public static char DecimalSeparator {
			get {
				return decimalSeparator;
			}
		}

        public static string GetDateTimeRegExp(string dateFormat) {
            const string fourDig = "\\d{4}";
            const string doubleDig = "\\d{1,2}";
            const string sep = "(.)";
            const string wSpace = "\\s+";
            const string fullTime = doubleDig + sep + doubleDig + sep + doubleDig;
            switch (dateFormat.ToUpper()) {
                case "MM-DD-YYYY":
                case "MM/DD/YYYY":
                case "DD/MM/YYYY":
                case "DD-MM-YYYY":
                    return doubleDig + sep + doubleDig + sep + fourDig + wSpace + fullTime;
                case "YYYY-MM-DD":
                case "YYYY/MM/DD":
                default:
                    return fourDig + sep + doubleDig + sep + doubleDig + wSpace + fullTime;
            }

        }
    }
}
