/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Text;
using OutSystems.RuntimeCommon.Cryptography.Interfaces;

namespace OutSystems.RuntimeCommon.Cryptography.Implementations.Crypt {    
    // WARNING: This file and its inner usages can only use the Activation assembly because of the backoffice.
    /// <summary>
    /// NOTE: This algorithm is FIPS compliant...
    /// </summary>
    internal sealed class RSAAdapter : IAsymmetricCrypt {
        public byte[] Encrypt(byte[] bytes, byte[] key)
        {
            if (key == null)
                throw new ArgumentNullException("key");
            string stringKey = Encoding.UTF8.GetString(key);
            RSA engine = new RSA();            
            engine.Init(true, new RsaPrivateKey(stringKey));
            return engine.ProcessText(bytes);
        }

        public byte[] Decrypt(byte[] bytes, byte[] key) {
            if (key == null)
                throw new ArgumentNullException("key");
            string stringKey = Encoding.UTF8.GetString(key);
            RSA engine = new RSA();
            engine.Init(false, new RsaKey(stringKey));
            return engine.ProcessText(bytes);
        }
    }
}