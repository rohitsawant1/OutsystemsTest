/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.IO;
using System.Security.Cryptography;
using OutSystems.RuntimeCommon.Cryptography.Interfaces;


namespace OutSystems.RuntimeCommon.Cryptography.Implementations.Crypt {
    internal class CryptManagedAdapter: ISymmetricTransformCrypt {
        private readonly CryptManaged crypt;

        private ICryptTransform GetEncryptTransformer(CryptAlgorithmParameters parameters) {
            return crypt.GetEncryptTransformer(parameters);
        }

        private ICryptTransform GetDecryptTransformer(CryptAlgorithmParameters parameters) {
            return crypt.GetDecryptTransformer(parameters);
        } 

        public CryptManagedAdapter(CryptManaged crypt) {
            this.crypt = crypt;
        }

        public CryptoStream GetEncryptorStream(Stream outputStream, CryptAlgorithmParameters parameters) {
            return new CryptoStream(outputStream, GetEncryptTransformer(parameters).GetObject(), CryptoStreamMode.Write);
        }

        public CryptoStream GetDecryptorStream(Stream inputStream, CryptAlgorithmParameters parameters) {
            return new CryptoStream(inputStream, GetDecryptTransformer(parameters).GetObject(), CryptoStreamMode.Read);
        }

        public int InitializationVectorSizeInBytes { get { return crypt.InitializationVectorSizeInBytes; } }
    }
}