/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Text;

namespace OutSystems.RuntimeCommon.Cryptography.Implementations.Crypt
{
    public class KeysFactories {

        public static string CreateSymetricKey() {
            StringBuilder key = new StringBuilder(256);
            // This is cryptographic stuff, we want to use the secure random provider
            Random random = RandomGenerator.GetSecureRandomGenerator();
            for (int i = 0; i < 256; i++) {
                key.Append((char)random.Next(33, 126));
            }
            return key.ToString();
        }

        public static void CreateAsymetricKey(int strength, out string privateKey, out string publicKey) {
            RsaKeyPair keyPair = RSA.GenerateKeyPair(strength);
            privateKey = keyPair.PrivateKey.ToXmlString();
            publicKey = keyPair.PublicKey.ToXmlString();
        }
    }
}