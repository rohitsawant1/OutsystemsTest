/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Security.Cryptography;
using System.Text;
using OutSystems.RuntimeCommon.Cryptography.Interfaces;

namespace OutSystems.RuntimeCommon.Cryptography.Implementations.Signature {
    public class RSASHA256SignatureProvider : IAsymmetricSignatureProvider {
        private Encoding Encoding { get; }
        private HashAlgorithm HashProvider { get; }
        private string XmlKeys { get; }

        public RSASHA256SignatureProvider(string xmlKeys) {
            Encoding = new UnicodeEncoding();
            HashProvider = new SHA256CryptoServiceProvider();
            XmlKeys = xmlKeys;
        }

        public string Sign(string content) {
            var dataToSign = Encoding.GetBytes(content);

            byte[] signedRequest = null;
            using (var rsaProvider = new RSACryptoServiceProvider()) {
                rsaProvider.FromXmlString(XmlKeys);
                signedRequest = rsaProvider.SignData(dataToSign, HashProvider);
            }

            var signedString = Convert.ToBase64String(signedRequest);
            return signedString;
        }

        public bool VerifySignature(string content, string signature) {
            var contentBytes = Encoding.GetBytes(content);
            var dataToVerify = Convert.FromBase64String(signature);
            using (var rsaProvider = new RSACryptoServiceProvider()) {
                rsaProvider.FromXmlString(XmlKeys);
                var verified = rsaProvider.VerifyData(contentBytes, HashProvider, dataToVerify);
                return verified;
            }
        }
    }
}
