/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

namespace OutSystems.RuntimeCommon.Cryptography
{
    /// <summary>
    /// NOTE: This algorithm is FIPS compliant...
    /// </summary>
    public static class HashSHA1Helper {
        /// <summary>
        /// Computes the hash value for the specified plain text.
        /// </summary>
        /// <param name="plainText">The string to compute the hash code for with ASCII encode.</param>
        /// <returns> The computed hash code in Base64 string.</returns>
        /// <example>string hashedString = HashSHA1Helper.HashFromASCII("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static string HashFromASCII(string plainText) {
            return CryptManager.Instance.HashSHA1FromASCII(plainText);
        }

        /// <summary>
        /// Computes the hash value for the specified plain text.
        /// </summary>
        /// <param name="plainText">The string to compute the hash code for with ASCII encode.</param>
        /// <returns> The computed hash code in array of bytes. </returns>
        /// <example>byte[] arrHashedBytes = HashSHA1Helper.HashFromASCIIToBytes("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static byte[] HashFromASCIIToBytes(string plainText) {
            return CryptManager.Instance.HashSHA1FromASCIIToBytes(plainText);
        }

        /// <summary>
        /// Computes the hash value for the specified byte array.
        /// </summary>
        /// <param name="bytes">The byte array to compute the hash.</param>
        /// <returns> The computed hash code encoded as a base64 string. </returns>
        /// <example>string arrHashedBytes = HashSHA1Helper.Hash(byteArray);</example>
        /// <datetime>23-08-2016-14:30</datetime>
        /// <author> mip </author>
        public static string Hash(byte[] bytes) {
            return CryptManager.Instance.HashSHA1(bytes);
        }
    }
}