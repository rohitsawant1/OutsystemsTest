/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Linq;
using System.Collections.Generic;

// ReSharper disable once CheckNamespace
namespace OutSystems.RuntimeCommon.Cryptography {
    /// <summary>
    /// NOTE: This algorithm is FIPS compliant...
    /// </summary>    
    public static class GuidHelper {
        internal static string IEnumerableToText<T>(IEnumerable<T> list) {
            return list.Select(obj => !Equals(obj, null)? obj.ToString(): String.Empty).StrCat(String.Empty);
        }

        /// <summary>
        /// Computes a GUID from an array of bytes.
        /// </summary>
        /// <param name="bytes">The array of bytes to compute the guid.</param>
        /// <returns> The generated Guid. </returns>
        /// <example>Guid guid1 = GuidHelper.ToGuid(arrBytes);</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static Guid ToGuid(byte[] bytes) {
            return CryptManager.Instance.ToGuid(bytes);
        }

        /// <summary>
        /// Computes a GUID from a specific text.
        /// </summary>
        /// <param name="text">The string to compute the guid.</param>
        /// <returns> The generated Guid. </returns>
        /// <example>Guid guid = GuidHelper.ToGuid("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static Guid ToGuid(string text) {
            return CryptManager.Instance.ToGuid(text);
        }

        /// <summary>
        /// Computes a GUID from a specific array of byte.
        /// </summary>
        /// <param name="data">The array of bytes to compute the guid </param>
        /// <returns> The generated Guid. </returns>
        /// <example>Guid guid = GuidHelper.ToGuidUsingDefaultEncoding(arrBytes);</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static Guid ToGuidUsingDefaultEncoding(byte[] data) {
            return CryptManager.Instance.ToGuid(data);
        }

        /// <summary>
        /// Computes a GUID from a specific text using Default Encoding.
        /// </summary>
        /// <param name="text">The string to compute the guid.</param>
        /// <returns> The generated Guid. </returns>
        /// <example>Guid guid = GuidHelper.ToGuidUsingDefaultEncoding("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static Guid ToGuidUsingDefaultEncoding(string text) {
            return CryptManager.Instance.ToGuidUsingDefaultEncoding(text);
        }

        /// <summary>
        /// Computes a GUID from a list of objects using Default Encoding.
        /// </summary>
        /// <param name="list">The list of objects to compute the guid. The ToString() for each of the object is
        /// called and the results are concatenated into a single string, whose GUID is then calculated.</param>
        /// <returns> The generated Guid. </returns>
        /// <example>Guid guid = GuidHelper.ToGuidUsingDefaultEncoding("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static Guid ToGuidUsingDefaultEncoding<T>(IEnumerable<T> list) {
            return ToGuidUsingDefaultEncoding(IEnumerableToText(list));
        }

        /// <summary>
        /// Computes a GUID from a specific text with return in Base64.
        /// </summary>
        /// <param name="text">The string to compute the guid for.</param>
        /// <returns> The generated Guid in string Base64. </returns>
        /// <example>string guidString = GuidHelper.GenerateToBase64("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static string GenerateToBase64(string text) {
            return CryptManager.Instance.ToGuidToBase64(text);
        }

        /// <summary>
        /// Computes a GUID from a specific text using Default Encoding and returning in Base64.
        /// </summary>
        /// <param name="text">The string to compute the guid.</param>
        /// <returns> The generated Guid in string Base64. </returns>
        /// <example>string guidString = GuidHelper.GenerateToBase64UsingDefaultEncoding("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static string GenerateToBase64UsingDefaultEncoding(string text) {
            return CryptManager.Instance.GenerateToBase64UsingDefaultEncoding(text);
        }

        /// <summary>
        /// Computes a GUID from a specific text with an added Salt and using UTF16.
        /// </summary>
        /// <param name="text">The string to compute the guid for.</param>
        /// <param name="salt">The salt to add to the text.</param>
        /// <returns> The generated Guid. </returns>
        /// <example>Guid guid3 = GuidHelper.ToGuidWithSaltAndUTF16("This is a text example", "a bad salt");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static System.Guid ToGuidWithSaltAndUTF16(string text, string salt) {
            return CryptManager.Instance.ToGuidWithSaltAndUTF16(text, salt);
        }
    }
}