/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
// ReSharper disable once CheckNamespace


namespace OutSystems.RuntimeCommon.Cryptography.Insecure
{
    /// <summary>
    /// NOTE: This algorithm is NOT FIPS compliant...
    /// </summary>
    public static class MD5HashHelper {
        public static byte[] HashToBytes(byte[] bytes) {

            #pragma warning disable 618

            return CryptManager.Instance.Insecure.HashToBytes(bytes);

            #pragma warning restore 618

        }

        public static string Hash(byte[] bytes) {
            #pragma warning disable 618

            return CryptManager.Instance.Insecure.Hash(bytes);

            #pragma warning restore 618

        }

        public static string Hash(string plainText) {

            #pragma warning disable 618

            return CryptManager.Instance.Insecure.Hash(plainText);

            #pragma warning restore 618

        }

        public static string HashUsingUTF16(string plainText) {
            
            #pragma warning disable 618
            
            return CryptManager.Instance.Insecure.HashUsingUTF16(plainText);

            #pragma warning restore 618

        }

        public static string HashUsingDefaultEncoding(string plainText) {

            #pragma warning disable 618

            return CryptManager.Instance.Insecure.HashUsingDefaultEncoding(plainText);

            #pragma warning restore 618

        }
    }

    [Obsolete("Please use SecureHashHelper")]
    public static class HashHelper {
        public static byte[] HashToBytes(byte[] bytes) {
            return MD5HashHelper.HashToBytes(bytes);
        }

        public static string Hash(byte[] bytes) {
            return MD5HashHelper.Hash(bytes);
        }

        public static string Hash(string plainText) {
            return MD5HashHelper.Hash(plainText);
        }

        public static string HashUsingUTF16(string plainText) {
            return MD5HashHelper.HashUsingUTF16(plainText);
        }

        public static string HashUsingDefaultEncoding(string plainText) {
            return MD5HashHelper.HashUsingDefaultEncoding(plainText);
        }
    } 
}