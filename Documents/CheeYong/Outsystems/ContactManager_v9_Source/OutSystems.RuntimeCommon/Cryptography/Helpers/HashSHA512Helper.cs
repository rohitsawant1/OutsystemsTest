/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

// ReSharper disable once CheckNamespace
namespace OutSystems.RuntimeCommon.Cryptography {
    /// <summary>
    /// NOTE: This algorithm is FIPS compliant...
    /// </summary>
    public static class HashSHA512Helper {
        public static string HashWithSalt(int saltSizeInBytes, string password) {
            var salt = CryptManager.Instance.GenerateStrongPassword(saltSizeInBytes);
            return salt + CryptManager.Instance.SHA512HexDeriveUsingUTF16(password, salt);
        }

        public static bool ValidateHashWithSalt(string password, string hashWithSalt) {
            if (hashWithSalt.Length <= CryptManager.Instance.SHA512HexPasswordsSizeInCharacters) {
                return false;
            }

            int saltSize = hashWithSalt.Length - CryptManager.Instance.SHA512HexPasswordsSizeInCharacters;

            if (saltSize <= 0) {
                return false;
            }

            var salt = hashWithSalt.Substring(0, saltSize);
            var hash = hashWithSalt.Substring(saltSize);
            return CryptManager.Instance.SHA512HexDeriveUsingUTF16(password, salt) == hash;
        }

        /// <summary>
        /// Computes the hash value for the specified array of bytes.
        /// </summary>
        /// <param name="bytes">The array of bytes to compute the hash code.</param>
        /// <returns> The computed hash code in byte array. </returns>
        /// <example>byte[] arrBytesHashed = HashHelper.HashToBytes(arrBytes);</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static byte[] HashToBytes(byte[] bytes) {
            return CryptManager.Instance.HashSHA512ToBytes(bytes);
        }

        /// <summary>
        /// Computes the hash value for the specified array of bytes.
        /// </summary>
        /// <param name="bytes">The array of bytes to compute the hash code.</param>
        /// <returns> The computed hash code in Base64 string.</returns>
        /// <example>string hashedStringFromBytes = HashHelper.Hash(arrBytes);</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static string Hash(byte[] bytes) {
            return CryptManager.Instance.HashSHA512(bytes);
        }

        /// <summary>
        /// Computes the hash value for the specified plain text.
        /// </summary>
        /// <param name="plainText">The string to compute the hash code.</param>
        /// <returns> The computed hash code in Base64 string.</returns>
        /// <example>string hashedString = HashHelper.Hash("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static string Hash(string plainText) {
            return CryptManager.Instance.HashSHA512(plainText);
        }

        /// <summary>
        /// Computes the hash value for the specified plain text.
        /// </summary>
        /// <param name="plainText">The string to compute the hash code for with UTF16 encoding.</param>
        /// <returns> The computed hash code in base64 string.</returns>
        /// <example>string hashedString = HashHelper.HashUsingUTF16("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static string HashUsingUTF16(string plainText) {
            return CryptManager.Instance.HashSHA512UsingUTF16(plainText);
        }


        /// <summary>
        /// Computes the hash value for the specified plain text using Default Encoding.
        /// </summary>
        /// <param name="plainText">The string to compute the hash code.</param>
        /// <returns> The computed hash code in Base64 string.</returns>
        /// <example>string hashedString = HashHelper.HashUsingDefaultEncoding("This is a text example");</example>
        /// <datetime>18-01-2013-11:51</datetime>
        /// <author> dfs </author>
        public static string HashUsingDefaultEncoding(string plainText) {
            return CryptManager.Instance.HashSHA512UsingDefaultEncoding(plainText);
        }
    }
}