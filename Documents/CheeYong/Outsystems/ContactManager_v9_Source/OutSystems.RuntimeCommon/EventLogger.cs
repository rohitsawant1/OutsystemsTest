/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Diagnostics;

namespace OutSystems.RuntimeCommon.Log {

    public class EventLogger {
        public const string DefaultSource = "OutSystems Platform";

        static readonly TraceSource traceSource = new TraceSource("EventLoggerSource");
        static string logDisclamer;

        EventLogger() {
        }

        public static void SetUp(string serviceName, string disclamer) {
            CreateSource(serviceName);
            logDisclamer = disclamer;
        }
        
        public static void CreateSource(string source) {
            try {
                if (!EventLog.SourceExists(source)) {
                    EventLog.CreateEventSource(source, "Application");
                }
            } catch { }
        }

        public static void Write(string message, TraceEventType type) {
            try {
                if (logDisclamer != null) {
                    message += Environment.NewLine + Environment.NewLine + logDisclamer;
                }
                traceSource.TraceEvent(type, 0, message);
                traceSource.Flush();
            } catch { }
        }

        public static void WriteInfo(string message) {
            Write(message, TraceEventType.Information);
        }

        public static void WriteError(string message) {
            Write(message, TraceEventType.Error);
        }

        public static void WriteError(Exception ex) {
            Write(ex.Message + Environment.NewLine + ex.StackTrace, TraceEventType.Error);
        }

        public static void WriteWarning(string message) {
            Write(message, TraceEventType.Warning);
        }

        public static void WriteDebug(string message) {
            Write(message, TraceEventType.Information);
        }
    }
}
