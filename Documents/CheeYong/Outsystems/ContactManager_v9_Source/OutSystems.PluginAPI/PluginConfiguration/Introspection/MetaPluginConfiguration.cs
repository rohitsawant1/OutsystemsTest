/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace OutSystems.PluginAPI.PluginConfiguration.Introspection {
    /// <summary>
    /// Represents the meta-information about a plugin configuration.
    /// </summary>

    public class MetaPluginConfiguration {
        protected class DefaultPluginParameterFactory: IPluginParameterFactory {
            public virtual IPluginParameter CreatePluginParameter(string propName, MethodInfo getter, MethodInfo setter, bool encrypt, bool persist, object configuration) {
                return new PluginParameter(propName, getter, setter, encrypt, persist, configuration);
            }

            public virtual IUserDefinedPluginParameter CreateUserDefinedPluginParameter(string propName, MethodInfo getter, MethodInfo setter, bool encrypt, bool persist, object configuration, 
                    MethodInfo visibilityChecker, IUserDefinedPluginConfiguration userConfigurationParameter) {

                return new UserDefinedPluginParameter(propName, getter, setter, configuration, encrypt, persist, visibilityChecker, userConfigurationParameter);
            }

            public virtual IUserChosenOptionPluginParameter CreateUserChosenOptionPluginParameter(string propName, MethodInfo getter, MethodInfo setter, bool encrypt, bool persist, object configuration, 
                    MethodInfo visibilityChecker, IUserDefinedPluginConfiguration userConfigurationParameter, IDictionary<string, KeyValuePair<string, string>> helpInfo) {

                return new UserChosenOptionPluginParameter(propName, getter, setter, configuration, encrypt, persist, visibilityChecker, userConfigurationParameter, helpInfo);
            }
        }


        private static readonly ConcurrentDictionary<Type, PluginMetaParameterExtractor> parameterExtractorCache = new ConcurrentDictionary<Type, PluginMetaParameterExtractor>();

        readonly object configuration;
        private readonly IEnumerable<IPluginParameter> parameters;

        protected object Configuration => configuration;

        protected virtual IPluginParameterFactory PluginParameterFactory => new DefaultPluginParameterFactory();
        
        public MetaPluginConfiguration(object configuration) {
            this.configuration = configuration;
            this.parameters = parameterExtractorCache
                                .GetOrAdd(
                                    configuration.GetType(),
                                    t => new PluginMetaParameterExtractor(t))
                                .ToParameters(configuration, PluginParameterFactory);
        }

        /// <summary>
        /// Returns a parameter with the given name.
        /// </summary>
        ///
        /// <param name="name">The parameter's name.</param>
        ///
        /// <returns>A parameter with the given name.</returns>
        public virtual IPluginParameter GetParameter(string name) {
            return Parameters.FirstOrDefault(p => p.Name.Equals(name));
        }

        public string this[string pname] {
            get { return GetParameter(pname).Get(); }
            set { GetParameter(pname).Set(value); }
        }

        /// <summary>
        /// Gets a list of visible parameters.
        /// </summary>
        ///
        /// <value>The list of visible parameters.</value>
        public virtual IEnumerable<IUserDefinedPluginParameter> VisibleParameters {
            get {
                return parameters.OfType<IUserDefinedPluginParameter>().Where(p => p.Visible);
            }
        }

        public IList<IPluginParameter> PersistableParameters {
            get {
                return parameters.Where(p => p.Persist).ToList();
            }
        }

        /// <summary>
        /// Gets a list of all parameters.
        /// </summary>
        ///
        /// <value>The list of parameters.</value>
        public IEnumerable<IPluginParameter> Parameters {
            get {
                return parameters;
            }
        }

        public virtual IEnumerable<IPluginParameter> AllParameters {
            get {
                return Parameters;
            }
        }
    }
}
