/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Reflection;

namespace OutSystems.PluginAPI.PluginConfiguration.Introspection {
    /// <summary>
    /// Represents a parameter defined by a specific implementation of a database provider tagged accordingly.
    /// </summary>
    class UserDefinedPluginParameter : PluginParameter, IUserDefinedPluginParameter {

        private readonly IUserDefinedPluginConfiguration annotation;
        private readonly MethodInfo visibilityChecker;
        private readonly object config;

        /// <summary>Constructor to create a new parameter.</summary>
        ///
        /// <param name="name">The parameter's name.</param>
        /// <param name="getter">Method to get the value of the parameter.</param>
        /// <param name="setter">Method to set the value of the parameter.</param>
        /// <param name="config">The configuration.</param>
        /// <param name="encrypt">Indicates if the parameter is encrypted.</param>
        /// <param name="persist">Indicates if the parameter should be persisted.</param>
        /// <param name="visibilityChecker">Method to check the visibility of the parameter.</param>
        /// <param name="annotation">The annotation.</param>
        public UserDefinedPluginParameter(
            string name,
            MethodInfo getter,
            MethodInfo setter,
            object config,
            bool encrypt,
            bool persist,
            MethodInfo visibilityChecker,
            IUserDefinedPluginConfiguration annotation)
            : base(name, getter, setter, encrypt, persist, config) {
            this.config = config;
            this.visibilityChecker = visibilityChecker;
            this.annotation = annotation;
        }

        /// <summary>
        /// Invokes the visibilityChecker method to check whether this parameter is visible or not.
        /// </summary>
        ///
        /// <value>True if the parameter is visible or False if not.</value>
        public bool Visible {
            get {
                if (visibilityChecker == null) {
                    return true;
                }
                var visible = visibilityChecker.Invoke(config, (object[])null);
                return Convert.ToBoolean(visible);
            }
        }

        /// <summary>
        /// Gets the label that represents the parameter.
        /// </summary>
        ///
        /// <value>The label representing the parameter.</value>
        public string Label { get { return annotation.Label; } }

        /// <summary>
        /// Returns information about the parameter.
        /// </summary>
        ///
        /// <value>The information to be shown.</value>
        public string Example { get { return annotation.Example; } }

        /// <summary>
        /// Gets a value indicating whether the parameter is mandatory or not.
        /// </summary>
        ///
        /// <value>True if the parameter is mandatory or False if not.</value>
        public bool Mandatory { get { return annotation.IsMandatory; } }

        /// <summary>
        /// Gets the order of the parameter inside the region.
        /// </summary>
        ///
        /// <value>An integer that represents the parameter's order inside the region.</value>
        public int Order { get { return annotation.Order; } }

        /// <summary>
        /// Gets the UI region of the parameter.
        /// </summary>
        ///
        /// <value>Object that represents the region where the parameter will be.</value>
        public string Region { 
            get { 
                return annotation.Region; 
            }
        }

        /// <summary>
        /// Gets a value indicating whether this object is password.
        /// </summary>
        ///
        /// <value>True if this parameter is representing password or False if not.</value>
        public bool IsPassword { get { return annotation.IsPassword; } }

        /// <summary>This property indicates whether this object uses a multiline text.</summary>
        /// <value>True if this object has multiline text, false if not.</value>
        public bool Multiline {
            get {
                return false;
            }
        }

        /// <summary>Gets the autocomplete expression.</summary>
        /// <value>An expression that controls how autocomplete will react for read-only fields.</value>
        public string AutoCompleteExpression { get { return ""; } }
    }
}
