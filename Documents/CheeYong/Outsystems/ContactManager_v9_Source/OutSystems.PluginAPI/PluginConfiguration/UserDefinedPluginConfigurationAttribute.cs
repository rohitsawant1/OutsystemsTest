/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;

namespace OutSystems.PluginAPI.PluginConfiguration {
    [AttributeUsage(AttributeTargets.Property)]
    public class UserDefinedPluginConfigurationAttribute: PluginConfigurationAttribute, IUserDefinedPluginConfiguration {
        /// <summary>
        /// Identifies the UI region where the parameter will be placed.
        /// </summary>
        ///
        /// <value>The region where the parameter will be present.</value>
        public string Region { get; set; }
        
        /// <summary>
        /// Defines the text of the label that is placed next to the parameter in the user interface.
        /// </summary>
        ///
        /// <value>The label that will represent the parameter.</value>
        public string Label { get; set; }

        /// <summary>
        /// Defines the text of the message used to ask the user for a value to the parameter.
        /// </summary>
        /// <value>A string with the prompt to be displayed about the parameter's value.</value>
        public string Prompt { get; set; }

        /// <summary>
        /// Defines a detailed message that clearly explains the purpose of the parameter and/or applicable restrictions to its values.
        /// </summary>
        ///
        /// <value>The information to be shown about the parameter.</value>
        public string Example { get; set; }

        /// <summary>
        /// Establishes the order of the parameter inside its region.
        /// </summary>
        /// <value>An integer that represents the order of the parameter inside the defined region.</value>
        public int Order { get; set; }

        /// <summary>
        /// Indicates whether the parameter should be treated as a password.
        /// </summary>
        /// <value>True if this parameter is a password, or False otherwise.</value>
        public bool IsPassword { get; set; }

        /// <summary>
        /// Indicates whether this parameter should be treated as mandatory.
        /// </summary>
        /// <value>True if this parameter is mandatory, or False otherwise.</value>
        public bool IsMandatory { get; set; }

        /// <summary>
        /// Specifies the boolean property responsible for dictating if the parameter should be displayed in the user interface or not.
        /// </summary>
        /// <value>The boolean property name.</value>
        public string VisibilityChecker { get; set; }
    }
}
