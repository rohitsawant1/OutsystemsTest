/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using OutSystems.PluginAPI.PluginConfiguration.Introspection;

namespace OutSystems.PluginAPI.PluginConfiguration {
    public class PluginConfigurationHandler {
        public MetaPluginConfiguration ConfigurationParameters { get; }

        IPluginConfiguration pluginConfiguration;

        public PluginConfigurationHandler(IPluginConfiguration pluginConfiguration): this(pluginConfiguration, obj => new MetaPluginConfiguration(obj)) {}

        internal PluginConfigurationHandler(IPluginConfiguration pluginConfiguration, Func<object, MetaPluginConfiguration> metaPluginConfigurationFactory) {
            this.pluginConfiguration = pluginConfiguration;
            ConfigurationParameters = metaPluginConfigurationFactory(pluginConfiguration);
        }

        public IDictionary<string, string> ToKeyValuePairs() {
            return ConfigurationParameters.PersistableParameters.ToDictionary(p => p.Name, p => p.Get());
        }

        public void FromKeyValuePairs(IEnumerable<KeyValuePair<string, string>> keyValuePairs) {
            foreach (KeyValuePair<string, string> keyValuePair in keyValuePairs) {
                IPluginParameter parameter = ConfigurationParameters.GetParameter(keyValuePair.Key);

                if ((parameter != null) && parameter.Persist) {
                    parameter.Set(keyValuePair.Value);
                }
            }
        }

        public static void FillConfigurationFromKeyValuePairs(IPluginConfiguration pluginConfiguration, IEnumerable<KeyValuePair<string, string>> keyValuePairs) {
            if (pluginConfiguration != null) {
                var handler = new PluginConfigurationHandler(pluginConfiguration);
                handler.FromKeyValuePairs(keyValuePairs);
            }
        }

        public static IDictionary<string, string> ConfigurationToKeyValuePairs(IPluginConfiguration pluginConfiguration) {
            var handler = new PluginConfigurationHandler(pluginConfiguration);
            return handler.ToKeyValuePairs();
        }
    }
}
