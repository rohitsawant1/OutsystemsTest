/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Data.Common;
using OutSystems.RuntimeCommon;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ExecutionService;
using OutSystems.HubEdition.DatabaseProvider.iDB2.Extensions;
using OutSystems.RuntimeCommon.ObfuscationProperties;
using IBM.Data.DB2.iSeries;
using System.Data;
using System;

namespace OutSystems.HubEdition.DatabaseProvider.iDB2.ExecutionService
{

	[DoNotObfuscate]
	public class iDB2ExecutionService : BaseExecutionService
	{
        
		public iDB2ExecutionService(IDatabaseServices databaseServices) : base(databaseServices) {}

        public override string ParameterPrefix { get { return "@"; } }

		public override IDataReader ExecuteReader(IDbCommand cmd)
		{
            cmd.CastAndMultiplicateParameters();
			return base.ExecuteReader(cmd);
		}

		public override int ExecuteNonQuery(IDbCommand cmd)
		{
            cmd.CastAndMultiplicateParameters();
			return base.ExecuteNonQuery(cmd);
		}

		public override object ExecuteScalar(IDbCommand cmd)
		{
            cmd.CastAndMultiplicateParameters();
            return base.ExecuteScalar(cmd);
		}

		public override bool IsConnectionException(DbException e)
		{
            var isCommError = (e as iDB2CommErrorException) != null;
			var isFailedConnection = (e as iDB2ConnectionFailedException) != null;
			var isTimeout = (e as iDB2ConnectionTimeoutException) != null;
            var isInvalidConnString = (e as iDB2InvalidConnectionStringException) != null;
            var isHostError = (e as iDB2HostErrorException) != null;
            var isHostVersionError = (e as iDB2UnsupportedHostVersionException) != null;

            return isCommError || isFailedConnection || isTimeout || isInvalidConnString || isHostError || isHostVersionError;
		}

        public override DbType ConvertToDbType(DBDataType type, string providerType)
        {
            //Remove extra info from name (ex: "NCHAR(10)")
            var providerTypeOnly = providerType.IsNullOrEmpty() ? "" : providerType.Split('(')[0].ToUpper();

            if (type == DBDataType.TEXT) {
                switch (providerTypeOnly) {
                    case "DECFLOAT":
                    case "FLOAT":
                    case "REAL":
                        return DbType.Double;
                    case "DECIMAL":
                    case "NUMERIC":
                        return DbType.Decimal;
                }
            }
            if (type == DBDataType.DATE_TIME)
            {
                switch (providerTypeOnly)
                {
                    case "DATE":
                        return DbType.Date;
                    case "TIME":
                        return DbType.Time;
                    default:
                        break;
                }
            }
            
            return base.ConvertToDbType(type, providerType);
        }

        public override object TransformDatabaseToRuntimeValue(object value)
        {
            if (value is DateTime)
            {
                DateTime dtValue = (DateTime)value;
                if(dtValue.Date == new DateTime(1, 1, 1).Date)
                {
                    return new DateTime(1900, 1, 1, dtValue.Hour, dtValue.Minute, dtValue.Second);
                }
            }

            return base.TransformDatabaseToRuntimeValue(value);
        }

    }
}
