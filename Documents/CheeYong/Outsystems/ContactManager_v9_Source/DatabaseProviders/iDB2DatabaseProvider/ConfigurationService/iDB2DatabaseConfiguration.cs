/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Text;
using OutSystems.HubEdition.DatabaseProvider.iDB2.Extensions;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition.DatabaseProvider.iDB2.ConfigurationService
{
    [DoNotObfuscate]
    public class iDB2DatabaseConfiguration : BaseDatabaseConfiguration {

        public override IDatabaseProvider DatabaseProvider { get { return iDB2IntegrationDatabaseProvider.Instance; } }

        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation)]
        public string DataSource { get; set; }

        [UserDefinedConfigurationParameter(Label = "Database", IsMandatory = true, Order = 2, Region = ParameterRegion.DatabaseLocation)]
        public string Database { get; set; }

        [UserDefinedConfigurationParameter(Label = "Schema", IsMandatory = true, Order = 3, Region = ParameterRegion.DatabaseLocation)]
        public string Schema { get; set; }

        [UserDefinedConfigurationParameter(Label = "Auto Commit", IsMandatory = true, Order = 1, Region = ParameterRegion.UserSpecific)]
        public bool AutoCommit { get; set; }


        [UserDefinedConfigurationParameter(Label = "Username", IsMandatory = true, Order = 2, Region = ParameterRegion.UserSpecific)]
        public string UserID { get; set; }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, Order = 3, Region = ParameterRegion.UserSpecific)]
        public string Password { get; set; }

        private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(
            "Insert configuration parameters separated by ';'. Username and Password will be inserted automatically if present. Example: Server=serverAddress1, serverAddress2, serverAddress3; Database=myDataBase;",
            "Connection String Parameters", AssembleAdvanceConfigTemplate());

        public override string DatabaseIdentifier {
            get { return Schema; }
        }

        public override AdvancedConfiguration AdvancedConfiguration {
            get { return advancedConfiguration; }
            set { advancedConfiguration = value; }
        }

        public override int GetHashCode() {
            return base.GetHashCode() ^ GetHashCodeBasedOnParts(DataSource, Database, Schema, AutoCommit, UserID, Password);
        }

        public override bool Equals(object obj) {
            iDB2DatabaseConfiguration config = obj as iDB2DatabaseConfiguration;

            return config != null && base.Equals(obj) &&
                DataSource == config.DataSource &&
                Database == config.Database &&
                Schema == config.Schema &&
                AutoCommit == config.AutoCommit &&
                UserID == config.UserID &&
                Password == config.Password &&
                ConnectionStringOverride == config.ConnectionStringOverride &&
                AdvancedConfiguration == config.AdvancedConfiguration;
        }

        /// <summary>
        /// Format
        ///        DataSource=<ip address/localhost>:<port number>; 
        ///        Database=<db name>;
        ///        UID=<userID>; 
        ///        PWD=<password>; 
        ///        Connect Timeout=<Timeout value>
        /// </summary>
        /// <returns></returns>
        protected override string AssembleBasicConnectionString() {
            StringBuilder sb = new StringBuilder();
            sb.AppendConnectionStringParam(iDB2IDs.DATA_SOURCE, DataSource);
            sb.AppendConnectionStringParam(iDB2IDs.DATABASE, Database);
            sb.AppendConnectionStringParam(iDB2IDs.USERNAME, UserID);
            sb.AppendConnectionStringParam(iDB2IDs.PASSWORD, Password);
            sb.AppendConnectionStringParam(iDB2IDs.SCHEMA, Schema);
            sb.AppendConnectionStringParam(iDB2IDs.CHECK_CONNECTION_ON_OPEN, System.Boolean.TrueString);

            return sb.ToString();
        }

        protected override string AssembleAdvancedConnectionString() {
            StringBuilder sb = new StringBuilder();
            sb.Append(AdvancedConfiguration.AdvancedConnectionStringField);
            if (!string.IsNullOrEmpty(UserID)) {
                sb.AppendConnectionStringParam(iDB2IDs.USERNAME, UserID);
                sb.AppendConnectionStringParam(iDB2IDs.PASSWORD, Password);
            }
            if (AdvancedConfiguration.AdvancedConnectionStringField != null &&
                AdvancedConfiguration.AdvancedConnectionStringField.IndexOf(iDB2IDs.CHECK_CONNECTION_ON_OPEN) == -1) {
                sb.AppendConnectionStringParam(iDB2IDs.CHECK_CONNECTION_ON_OPEN, System.Boolean.TrueString);
            }
            return sb.ToString();
        }

        /// <summary>
        /// AdvanceConfiguration template ex: 
        ///             [UID=$Username;PWD=&lt;hidden&gt;;]$AdvancedConnectionStringField
        /// </summary>
        /// <returns>AdvancedConfiguration connection string template</returns>
        private static string AssembleAdvanceConfigTemplate() {
            var sb = new StringBuilder();
            sb.Append("[");
            sb.AppendConnectionStringParam(iDB2IDs.USERNAME, "$UserID");
            sb.AppendConnectionStringParam(iDB2IDs.PASSWORD, "<hidden>");
            sb.Append("]");
            sb.Append("$AdvancedConnectionStringField");

            return sb.ToString();

        }

        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration {
            get {
                return new iDB2RuntimeDatabaseConfiguration() {
                    Username = UserID,
                    Schema = Schema,
                    AutoCommit = AutoCommit,
                    ConnectionString = ConnectionString
                };
            }
        }
    }
}

