/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

//OutSystems database providers integration supports two ways of sending the method parameters to this class functions:
// - By using query parameters with @param0, @param1, etc., which is afterwards binded to the SQL query command
// - By directly providing the information
// Unfortunately DB2 doesn't support the first scenario as it was supposed, you'll need to do a cast to every param received.
// That being said, if this proves to be a performance issue, the functionality can change, thus, as I first implemented this
// having in mind the second scenario, I'm going to add support to both, using this define. 
//
// If you want the 1st scenario, define USING_PARAMS, if you want the 2nd, comment it.

using OutSystems.HubEdition.Extensibility.Data.DMLService;
using System;
using System.Text;
using OutSystems.RuntimeCommon;


namespace OutSystems.HubEdition.DatabaseProvider.iDB2.DMLService
{
    internal class iDB2DMLFunctions : BaseDMLFunctions
    {

        private const string TIME_FORMAT = "HH24:MI:SS"; //http://www.sqlines.com/mysql-to-db2/date_format

        private enum TimestampInterval
        {
            Microseconds = 1,
            Seconds = 2,
            Minutes = 4,
            Hours = 8,
            Days = 16,
            Weeks = 32,
            Months = 64,
            Quarters = 128,
            Years = 256
        }

        internal iDB2DMLFunctions(IDMLService dmlService) : base(dmlService) { }

        public new iDB2DMLService DMLService
        {
            get { return (iDB2DMLService)base.DMLService; }
        }

        #region Math
        public override string Sqrt(string n)
        {
            return string.Format("Sqrt({0})", n);
        }

        public override string Round(string n)
        {
            return string.Format("Round({0}, 0)", n);
        }

        public override string Abs(string n)
        {
            return string.Format("Abs({0})", n);
        }
        public override string Trunc(string n)
        {

            return string.Format("INTEGER({0})", n); //http://pic.dhe.ibm.com/infocenter/iseries/v7r1m0/topic/db2/rbafzcast.htm
        }
        #endregion

        #region Text
        public override string Concat(string t1, string t2)
        {

            return string.Format("concat({0},{1})", t1, t2);
        }
        public override string Index(string t, string search)
        {
            return string.Format("(locate({0}, {1}) -1)", search, t); //http://pic.dhe.ibm.com/infocenter/iseries/v7r1m0/topic/db2/rbafzscalocate.htm
        }


        public override string Length(string t)
        {
            return string.Format("length({0})", t); //http://pic.dhe.ibm.com/infocenter/iseries/v7r1m0/topic/db2/rbafzscalength.htm
        }

        public override string Substr(string t, string start, string length)
        {

            return string.Format("substring({0}, {1} + 1, {2})", t, start, length); //  
        }

        public override string TrimStart(string t)
        {
            return string.Format("LTrim({0})", t);
        }

        public override string TrimEnd(string t)
        {
            return string.Format("RTrim({0})", t);
        }

        public override string Replace(string t, string search, string replace)
        {
            return string.Format("Replace({0}, {1}, {2})", t, search, replace);
        }


        public override string Trim(string t)
        {
            return string.Format("trim({0})", t);
        }
        #endregion

        #region Date & Time

        public override string AddDays(string dt, string n)
        {
            return string.Format("{0} + {1} DAYS", dt, n);
        }

        public override string AddHours(string dt, string n)
        {
            return string.Format("{0} + {1} HOURS", dt, n);
        }

        public override string AddMinutes(string dt, string n)
        {
            return string.Format("{0} + {1} MINUTES", dt, n);
        }

        public override string AddMonths(string dt, string n)
        {
            return string.Format("{0} + {1} MONTHS", dt, n);
        }

        public override string AddSeconds(string dt, string n)
        {
            return string.Format("{0} + {1} SECONDS", dt, n);
        }

        public override string AddYears(string dt, string n)
        {
            return string.Format("{0} + {1} YEARS", dt, n);
        }

        public override string Day(string dt)
        {
            return string.Format("DAY({0})", dt);
        }

        public override string DayOfWeek(string dt)
        {
            return string.Format("(DAYOFWEEK({0}) - 1)", dt);
        }

        public override string DiffDays(string dt1, string dt2)
        {
            return DateDiff(TimestampInterval.Days, dt1, dt2);
        }

        public override string DiffHours(string dt1, string dt2)
        {
            return DateDiff(TimestampInterval.Hours, dt1, dt2);
        }

        public override string DiffMinutes(string dt1, string dt2)
        {
            return DateDiff(TimestampInterval.Minutes, dt1, dt2);
        }

        public override string DiffSeconds(string dt1, string dt2)
        {
            return DateDiff(TimestampInterval.Seconds, dt1, dt2);
        }

        public override string Hour(string dt)
        {
            return string.Format("HOUR({0})", dt);
        }

        public override string Minute(string dt)
        {
            return string.Format("MINUTE({0})", dt);
        }

        public override string Month(string dt)
        {
            return string.Format("MONTH({0})", dt);
        }

        public override string Second(string dt)
        {
            return string.Format("SECOND({0})", dt);
        }

        public override string Year(string dt)
        {
            return string.Format("YEAR({0})", dt);
        }

        public override string NewDate(string y, string m, string d)
        {
            return string.Format("TIMESTAMP('0001-01-01 00:00:00') + (cast({0} AS INTEGER)-1) YEARS + (cast({1} AS INTEGER)-1) MONTHS + (cast({2} AS INTEGER)-1) DAYS", y, m, d);
        }

        public override string NewTime(string h, string m, string s)
        {
            return string.Format("TIMESTAMP('1900-01-01 00:00:00') + {0} HOURS + {1} MINUTES + {2} SECONDS", h, m, s);
        }

        public override string NewDateTime(string y, string mo, string d, string h, string m, string s)
        {
            return string.Format("TIMESTAMP('0001-01-01 00:00:00') + (cast({0} AS INTEGER)-1) YEARS + (cast({1} AS INTEGER)-1) MONTHS + (cast({2} AS INTEGER)-1) DAYS + cast({3} AS INTEGER) HOURS + cast({4} AS INTEGER) MINUTES + cast({5} AS INTEGER) SECONDS", y, mo, d, h, m, s);
        }

        public override string BuildDateTime(string d, string t)
        {
            return string.Format("TIMESTAMP(DATE({0}),TIME({1}))", d, t);
        }
        #endregion

        #region Data Conversion

        public override string BooleanToInteger(string b)
        {
            return string.Format("cast({0} AS SMALLINT)", b); //in DB2 boolean is actually a SMALLINT no conversion needed
        }

        public override string BooleanToText(string b)
        {
            return string.Format("(CASE WHEN {0} = 0 THEN 'False' ELSE 'True' end)", b);
        }

        public override string DateTimeToDate(string dt)
        {
            return string.Format("TIMESTAMP(DATE({0}), '00:00:00')", dt);
            //return string.Format("CHAR(DATE({0}), EUR)", dt); 
        }

        public override string DateTimeToTime(string dt)
        {
            return string.Format("TIMESTAMP('1900-01-01', TIME({0}))", dt);
        }

        public override string DecimalToBoolean(string d)
        {
            return string.Format("SMALLINT({0})", d); //DB2 doesn't have a BOOLEAN type, SMALLINT is the one that should be used
        }

        public override string DecimalToInteger(string d) {
            return string.Format("INTEGER({0})", d);
        }
            
        public override string DecimalToLongInteger(string d)
        {
            return string.Format("BIGINT({0})", d);
        }

        public override string LongIntegerToInteger(string b) {
            return string.Format("INTEGER({0})", b);
        }

        public override string IntegerToLongInteger(string b) {
            return string.Format("BIGINT({0})", b);
        }

        public override string DecimalToText(string d)
        {
            return string.Format("case when {0} = 0 then '0' else TRIM(TRAILING '.' FROM TRIM(TRAILING '0' FROM cast({0} as decimal(" + Constants.DecimalTotalPrecision + ", " + Constants.DecimalDecimals + ")))) end", d);
        }

        public override string IdentifierToInteger(string id)
        {
            return string.Format("IFNULL({0}, 0)", id);
        }

        public override string IdentifierToLongInteger(string id) {
            return string.Format("IFNULL({0}, 0)", id);
        }

        public override string IdentifierToText(string id)
        {
            return string.Format("IFNULL({0}, '')", id);
        }
        public override string TextToIdentifier(string t)
        {
            return t;
        }

        public override string IntegerToIdentifier(string i)
        {
            return i;
        }

        public override string LongIntegerToIdentifier(string b) {
            return b;
        }

        public override string IntegerToBoolean(string i)
        {
            return i; //DB2 doesn't have a BOOLEAN type, SMALLINT is the one that should be used
        }

        public override string IntegerToDecimal(string i)
        {
            return i;
        }

        public override string IntegerToText(string i)
        {
            return i;
        }

        public override string LongIntegerToText(string b) {
            return b;
        }

        public override string LongIntegerToDecimal(string b) {
            return b;
        }

        public override string NullDate()
        {
            return "CAST( NULL as DATE)";
        }

        public override string DateTimeToText(string dt, string dateFormat)
        {
            dateFormat = "'" + dateFormat + "'";
            string timeF = "' " + TIME_FORMAT + "'";
            return string.Format("VARCHAR_FORMAT({0}, {1})", dt, dateFormat + " CONCAT " + timeF);
        }

        public override string DateToText(string d, string dateFormat)
        {
            dateFormat = "'" + dateFormat + "'";
            return string.Format("VARCHAR_FORMAT({0}, {1})", d, dateFormat);
        }

        public override string TextToDate(string t, string dateFormat)
        {
            t = DateReplace(t, dateFormat);
            return string.Format("TIMESTAMP(DATE({0}), '00:00:00')", t); //OutSystems only uses DateTimes, which maps to DB2 Timestamps
        }

        private String DateReplace(String t, String dateFormat)
        {
            //Converting to USA, EUR or ISO date format based on the received dateFormat string
            switch (dateFormat)
            {
                case "dd-MM-yyyy":
                    t = String.Format("replace ({0}, '-', '.')", t);
                    break;
                case "dd/MM/yyyy":
                    t = String.Format("replace ({0}, '/', '.')", t);
                    break;
                case "MM-dd-yyyy":
                    t = String.Format("replace ({0}, '-', '/')", t);
                    break;
                case "MM.dd.yyyy":
                    t = String.Format("replace ({0}, '.', '/')", t);
                    break;
                case "yyyy/MM/dd":
                    t = String.Format("replace ({0}, '/', '-')", t);
                    break;
            }

            return t;
        }

        public override string TextToDateTime(string t, string dateFormat)
        {
            string tWithDateReplace = DateReplace(t, dateFormat);
            return String.Format("timestamp (substr({0}, 0, 11), substr({1}, 12))", tWithDateReplace, t);
        }

        public override string DateToDateTime(string d)
        {
            return d;
        }

        public override string TextToDecimal(string t)
        {
            return t;
        }

        public override string TextToInteger(string t)
        {
            return t;
        }

        public override string TextToLongInteger(string t) {
            return t;
        }

        public override string TextToTime(string t)
        {
            return string.Format("TIMESTAMP('1900-01-01',{0})", t);
        }

        public override string TimeToText(string t)
        {
            string timeF = "'" + TIME_FORMAT + "'";
            return string.Format("VARCHAR_FORMAT({0}, {1})", t, timeF);
        }

        public override string TimeToDateTime(string t)
        {
            return string.Format("TIMESTAMP('1900-01-01', TIME({0}))", t);
        }

        #endregion

        #region Utils

        private static string DateDiff(TimestampInterval part, string dt1, string dt2)
        {
            return string.Format("TIMESTAMPDIFF({0}, CHAR({2} - {1}))", (int)part, dt1, dt2);
        }

        #endregion
    }
}
