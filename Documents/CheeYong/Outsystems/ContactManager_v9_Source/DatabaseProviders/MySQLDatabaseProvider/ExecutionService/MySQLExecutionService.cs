/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Data.Common;
using System.Text;
using System.Linq;
using MySql.Data.MySqlClient;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ExecutionService;
using OutSystems.RuntimeCommon.ObfuscationProperties;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.Log;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL.ExecutionService {

    public class MySQLExecutionService : BaseExecutionService {
        private const int AbortedConnection = 1152;

        public MySQLExecutionService(IDatabaseServices databaseServices)
            : base(databaseServices) {
        }

        public override string ParameterPrefix {
            get {
                return "?";
            }
        }
        
        public override bool IsConnectionException(DbException e) {
            var sqlE = e as MySqlException;
            return (sqlE != null) && sqlE.Number == AbortedConnection;
        }

        protected override IDbCommand CreateCommand(IDbConnection connection) {
            return base.CreateCommand(connection);
        }


        public override void BulkInsert(DataTable tab) {
            using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                string columns = "";
                string prepend = "";


                DbType[] dbTypes = new DbType[tab.Columns.Count];

                for (int i = 0; i < tab.Columns.Count; i++ ){
                    columns += prepend + DatabaseServices.DMLService.Identifiers.EscapeIdentifier(tab.Columns[i].ColumnName);
                    prepend = ",";
                    dbTypes[i] = ConvertToDbType(tab.Columns[i].DataType);
                }

                StringBuilder sb = new StringBuilder();
                sb.Append("INSERT INTO ");
                sb.Append(tab.TableName);
                sb.Append("(");
                sb.Append(columns);
                sb.Append(") VALUES ");


                foreach (DataRow row in tab.Rows) {
                    sb.Append("('");
                    sb.Append(row.ItemArray.Select(p => ValueToLiteral(p)).StrCat("','"));
                    sb.Append("'),");
                }

                try {
                    using (IDbTransaction tran = con.BeginTransaction()) {
                        IDbCommand cmd = CreateCommand(con);
                        cmd.CommandText = sb.Remove(sb.Length - 1, 1).ToString();

                        cmd.ExecuteNonQuery();
                        tran.Commit();
                    }
                } catch (Exception){
                    //downgrade to single log write and discard bad logs

                    foreach (DataRow row in tab.Rows) {
                        StringBuilder individualSB = new StringBuilder();
                        individualSB.Append("INSERT INTO ");
                        individualSB.Append(tab.TableName);
                        individualSB.Append("(");
                        individualSB.Append(columns);
                        individualSB.Append(") VALUES ");
                        individualSB.Append("('");
                        individualSB.Append(row.ItemArray.Select(p => ValueToLiteral(p)).StrCat("','"));
                        individualSB.Append("')");
                        try {
                            IDbCommand cmd = CreateCommand(con);
                            cmd.CommandText = individualSB.ToString();

                            cmd.ExecuteNonQuery();
                        } catch(Exception ex){
                            EventLogger.WriteError(ex.Message + Environment.NewLine + "Stack:" + Environment.NewLine + ex.StackTrace);
                        }
                    }
                }
            }
        }


        private string ValueToLiteral(object obj) {
            if (obj is DateTime){
                return ((DateTime) obj).ToString("yyyy-MM-dd HH:mm:ss");
            } else if (obj is bool) {
                return ((bool)obj) ? "1" : "0"; 
            } else return  DatabaseServices.DMLService.EscapeTextValue(obj.ToString());
        }

        public override DbType ConvertToDbType(DBDataType type, string providerType) {
            if (DBDataType.TEXT == type) {

                //Remove extra info from name (ex: "NCHAR(10)")
                var providerTypeOnly = providerType.IsNullOrEmpty() ? "" : providerType.Split('(')[0];

                switch (providerTypeOnly.ToUpper()) {
                    case "VARCHAR":
                    case "CHAR":
                    case "LONGTEXT":
                    case "MEDIUMTEXT":
                    case "TINYTEXT":
                    case "TEXT":
                    case "ENUM":
                    case "SET":
                        return DbType.String;
                    case "FLOAT":
                    case "REAL":
                        return DbType.Single;
                    case "DOUBLE":
                        return DbType.Double;
                    case "DECIMAL":
                    case "NUMERIC":
                        return DbType.Decimal;
                    case "TIME":
                        return DbType.Time;
                    default:
                        return DbType.String;
                }
            }

            if (DBDataType.TIME == type) {
                throw new NotSupportedException("Unable to convert " + type.ToString() + " to DbType");
            }

            return base.ConvertToDbType(type, providerType);
        }

        public override object TransformRuntimeToDatabaseValue(DbType dbType, object value) {
            if (dbType == DbType.Time && value is string) {

                if (string.IsNullOrEmpty((string)value)) {
                    value = "00:00:00";
                }
                TimeSpan result;
                if (TimeSpan.TryParse((string)value, out result)) {
                    return result;
                }
            }

            return base.TransformRuntimeToDatabaseValue(dbType, value);
        }
    }
}
