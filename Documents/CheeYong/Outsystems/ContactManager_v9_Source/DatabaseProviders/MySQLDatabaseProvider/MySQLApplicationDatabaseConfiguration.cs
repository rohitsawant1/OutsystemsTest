/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Net;
using OutSystems.HubEdition.DatabaseProvider.MySQL.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Application;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL {

    public class MySQLApplicationDatabaseConfiguration : BaseApplicationDatabaseConfiguration {

        public override IPlatformDatabaseProvider PlatformDatabaseProvider {
            get { return Platform.MySQLPlatformDatabaseProvider.Instance; }
        }

        private const int DEFAULT_PORT_VALUE = 3306;

        public AuthenticationType UsedAuthenticationMode { get; set; }

        public override AuthenticationType AuthenticationMode {
            get { return UsedAuthenticationMode; }
        }
        
        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration(User user) {
            NetworkCredential credentials = user == User.Admin ? AdminAuthenticationCredential : RuntimeAuthenticationCredential;
            return new MySQLRuntimeDatabaseConfiguration {
                Username = credentials.UserName,
                ConnectionString = ConnectionString(credentials),
                Schema = Schema,
            };
        }

        #region ConnectionString Assemblage
        private const string _usernamePart = "user id={0};";
        private const string _passwordPart = "password={0};";
        private const string _datasourcePart = "data source={0}/{1};";
        private const string _portPart = "port={0};";
        
        private string ConnectionString(NetworkCredential userCredentials) {
            return string.Format("Server={0};Database={1};Uid={2};Pwd={3};Allow User Variables=true;ConnectionLifeTime=6000;ConnectionReset=true;", Server, Schema, userCredentials.UserName, userCredentials.Password);
            //TODO: dvn support advanced scenario
        }
        #endregion

        #region DatabaseLocation
#if !JAVA
        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation, Prompt = "Server")]
#else
        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation | ParameterRegion.Advanced, Prompt = "Server")]
#endif
        public string Server { get; set; }

#if !JAVA
        [UserDefinedConfigurationParameter(Label = "Schema", IsMandatory = true, Order = 2, Region = ParameterRegion.DatabaseLocation, Prompt = "Schema")]
#else
        [UserDefinedConfigurationParameter(Label = "Schema", IsMandatory = true, Order = 2, Region = ParameterRegion.DatabaseLocation | ParameterRegion.Advanced, Prompt = "Schema")]
#endif
        public string Schema { get; set; }

        #endregion

        #region Database Advanced Settings
        public override string ContextualHelpForBasicMode {
            get {
                return @"Allows to configure the Server and Schema.";
            }
        }

        public override string ContextualHelpForAdvancedMode {
            get {
                return @"Allows to configure the Server, Schema and custom JDBC Url parameters to be used by Services and Applications.";
            }
        }

#if JAVA
        [UserDefinedConfigurationParameter(Label = "Runtime JDBC Url Parameters", Order = 3, IsMandatory = false, Region = ParameterRegion.Advanced, Prompt = "Runtime JDBC Url Parameters")]
        public override string RuntimeAdvancedSettings { get; set; }

        [UserDefinedConfigurationParameter(Label = "Services JDBC Url Parameters", Order = 4, IsMandatory = false, Region = ParameterRegion.Advanced, Prompt = "Services JDBC Url Parameters")]
        public override string ServicesAdvancedSettings { get; set; }
#endif
        #endregion

        public override bool Equals(IApplicationDatabaseConfiguration obj) {
            
            if ((object)this == (object) obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (GetType() != obj.GetType()) {
                return false;
            }

            var other = (MySQLApplicationDatabaseConfiguration) obj;

            return Server == other.Server
                && Schema == other.Schema
                && ImplementsElevatedPrivilegesOperations == other.ImplementsElevatedPrivilegesOperations
                && UsedAuthenticationMode == other.UsedAuthenticationMode
                && AdminUser == other.AdminUser
                && AdminPassword == other.AdminPassword
                && RuntimeUser == other.RuntimeUser
                && RuntimePassword == other.RuntimePassword
                && RuntimeAdvancedSettings == other.RuntimeAdvancedSettings
                && ServicesAdvancedSettings == other.ServicesAdvancedSettings;
        }
    }
}