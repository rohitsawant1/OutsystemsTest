/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Session;
using OutSystems.RuntimeCommon;
using System.Diagnostics;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.Session {

    internal class MySQLPlatformSessionService : IPlatformSessionService {

        private static readonly string TempSessionsTableName = "ASPStateTempSessions";
        private static readonly string TempExtVarsTableName = "ASPStateTempSessionsExtVars";

        public MySQLPlatformSessionService(IPlatformDatabaseServices services) {
            DatabaseServices = services;
            P = new MySQLParamPrefixer(DatabaseServices.ExecutionService.ParameterPrefix);
        }

        private int queryTimeout = 30 /* seconds */;

        public IPlatformDatabaseServices DatabaseServices {
            get;
            private set;
        }

        private MySQLParamPrefixer P { get; set; }

        public void CountConcurrentUsers(DateTime referenceDate, string[] moduleIdsToExclude, out int anon, out int registered, out DateTime current) {
            var sql = "SELECT " +
                      "    COALESCE(sum(case maxUserId when 0 then 1 end),0) as Anonymous, " +
                      "    COALESCE(sum(case maxUserId when 0 then 0 else 1 end),0) as NonAnonymous, " +
                      "    now() DateNow " +
                      "  FROM (select cookie, max(Userid) as maxUserId" +
                      "         from " + TempExtVarsTableName + " ExtVars, " + TempSessionsTableName + " Sessions " +
                      "         where ExtVars.SessionID = Sessions.SessionID " +
                      "{0}" +
                      "         And Sessions.lockdate > "+ P.P("referenceDate") + " And Sessions.created <= " + P.P("referenceDate")  +
                      "         group by cookie) tt";
            
            var excludedModulesCondition = "";
            foreach (string itemId in moduleIdsToExclude) {
                excludedModulesCondition += "            AND ExtVars.Variable <> '" + itemId + "' ";
            }
            sql = sql.F(excludedModulesCondition);

            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    using (var cmd = DatabaseServices.ExecutionService.CreateCommand(con, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        DatabaseServices.ExecutionService.CreateParameter(cmd, P.P("referenceDate"), DbType.DateTime, referenceDate);

                        using (var reader = cmd.ExecuteReader()) {
                            if (reader.Read()) {
                                anon = Convert.ToInt32(reader["Anonymous"]);
                                registered = Convert.ToInt32(reader["NonAnonymous"]);
                                current = Convert.ToDateTime(reader["DateNow"]);
                            } else {
                                anon = 0;
                                registered = 0;
                                current = DateTime.UtcNow;
                            }
                        }
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private void DeleteSessionInTable(IDbConnection conn, string tableName, string sessionId) {
            var e = DatabaseServices.ExecutionService;

            var sql = "DELETE FROM " + tableName + " WHERE SessionId = " + P.P("sessionId");

            using (var cmd = e.CreateCommand(conn, sql)) {
                cmd.CommandTimeout = queryTimeout;
                cmd.CommandType = CommandType.Text;
                e.CreateParameter(cmd, P.P("sessionId"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                cmd.ExecuteNonQuery();
            }
        }

        public void DeleteSession(string sessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    DeleteSessionInTable(conn, TempSessionsTableName, sessionId);
                    DeleteSessionInTable(conn, TempExtVarsTableName, sessionId);
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public int DeleteExpiredSessions() {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(conn, "DeleteExpiredSessionsIncr")) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        var p = e.CreateParameter(cmd, P.P("deletedRowsCount"), DbType.Int32, null);
                        p.Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();
                        return Convert.ToInt32(p.Value);
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public int DeleteExpiredSessionVars() {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(conn, "DeleteExpiredSessionVarsIncr")) {
                        cmd.CommandTimeout = queryTimeout * 2;
                        cmd.CommandType = CommandType.StoredProcedure;
                        var p = e.CreateParameter(cmd, P.P("deletedRowsCount"), DbType.Int32, null);
                        p.Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();
                        return Convert.ToInt32(p.Value);
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public bool ContainsExpiredSessionVarsNewMechanism() {            
            string sql = "SHOW PROCEDURE STATUS WHERE NAME = 'DeleteExpiredSessionVarsIncr'";
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandType = CommandType.Text;
                        using (var reader = e.ExecuteReader(cmd)) {
                            return reader.Read();                              
                        }
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }            
        }

        private void ChangeSessionIdInTable(IDbConnection con, string tableName, string oldSessionId, string newSessionId) {
            var e = DatabaseServices.ExecutionService;

            var sql = "UPDATE " + tableName + " SET SessionId = " + P.P("newSessionId") + " WHERE SessionId = " + P.P("oldSessionId");

            using (var cmd = e.CreateCommand(con, sql)) {
                cmd.CommandTimeout = queryTimeout;
                cmd.CommandType = CommandType.Text;
                e.CreateParameter(cmd, P.P("oldSessionId"), DbType.StringFixedLength, oldSessionId).Size = SessionConstants.ID_LENGTH;
                e.CreateParameter(cmd, P.P("newSessionId"), DbType.StringFixedLength, newSessionId).Size = SessionConstants.ID_LENGTH;
                cmd.ExecuteNonQuery();
            }
        }

        public void ChangeSessionId(string oldSessionId, string newSessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    ChangeSessionIdInTable(conn, TempSessionsTableName, oldSessionId, newSessionId);
                    ChangeSessionIdInTable(conn, TempExtVarsTableName, oldSessionId, newSessionId);
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void ResetSessionTimeout(string sessionId, TimeSpan newTimeout) {
            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;

                    var sqlUpdateTimeout = "UPDATE " + TempSessionsTableName + " SET Timeout = " + P.P("newTimeout") + " WHERE SessionId = " + P.P("id");
                    using (var cmd = e.CreateCommand(con, sqlUpdateTimeout)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, P.P("newTimeout"), DbType.Int32, Convert.ToInt32(newTimeout.TotalMinutes));
                        e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        cmd.ExecuteNonQuery();
                    }

                    var sqlResetTimeout = "TempResetTimeout";
                    using (var cmd = e.CreateCommand(con, sqlResetTimeout)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public bool CheckSessionModel() {
            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(con, "select sessionid from " + TempSessionsTableName)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.ExecuteNonQuery();
                        cmd.CommandText = "select SessionId, UserId, Cookie from " + TempExtVarsTableName;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new Exception(e.Message, e);
            }
            return true;
        }

        public void ReleaseLock(string sessionId, int lockId) {
            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "TempReleaseStateItemExclusive";
                    using (var cmd = e.CreateCommand(con, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, P.P("lockCookie"), DbType.Int32, lockId);
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
            
        }

        private IDbCommand CommandGetAndGetLock(IDbConnection conn, bool getAndLock, string sessionId) {
            var getSql = "TempGetStateItem";
            var getLockSql = "TempGetStateItemExclusive";
            var e = DatabaseServices.ExecutionService;

            var cmd = e.CreateCommand(conn, getAndLock ? getLockSql : getSql);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = queryTimeout;

            e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
            var p = e.CreateParameter(cmd, P.P("item"), DbType.Binary, System.DBNull.Value);
            MySQLParams.SetBlobType(p);
            p.Direction = ParameterDirection.Output;
            p = e.CreateParameter(cmd, P.P("locked"), DbType.Boolean, System.DBNull.Value);
            p.Direction = ParameterDirection.Output;
            p = e.CreateParameter(cmd, P.P("lockAge"), DbType.Int32, System.DBNull.Value);
            p.Direction = ParameterDirection.Output;
            p = e.CreateParameter(cmd, P.P("lockCookie"), DbType.Int32, System.DBNull.Value);
            p.Direction = ParameterDirection.Output;
            p = e.CreateParameter(cmd, P.P("actionFlags"), DbType.Int32, System.DBNull.Value);
            p.Direction = ParameterDirection.Output;

            return cmd;
        }


        private byte[] GetAndGetAndLock(bool getAndLock, string sessionId, out int lockId, out bool locked, out TimeSpan lockAge, out ItemState state) {
            lockId = -1;
            locked = false;
            lockAge = TimeSpan.Zero;
            state = default(ItemState);

            using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                byte[] buf = null;

                using (var cmd = CommandGetAndGetLock(conn, getAndLock, sessionId)) {
                    using (var reader = cmd.ExecuteReader()) {
                        if (reader.Read()) {
                            buf = (byte[])reader[0];
                        }
                    }

                    if (MySQLParams.IsNull(cmd.Parameters[2])) {
                        return null;
                    }

                    locked = MySQLParams.BoolVal(cmd.Parameters[2]);
                    lockId = MySQLParams.IntVal(cmd.Parameters[4]);

                    if (locked) {
                        lockAge = MySQLParams.TimeSpanVal(cmd.Parameters[3]);

                        if (lockAge > MySQLTimeSpans.Year) {
                            lockAge = TimeSpan.Zero;
                        }

                        return null;
                    }

                    state = MySQLParams.ItemStateVal(cmd.Parameters[5]);

                    if (buf == null) {
                        buf = MySQLParams.BinaryVal(cmd, cmd.Parameters[1]);
                    }

                    return buf;
                }
            }
        }

        public byte[] Get(string sessionId, out int lockId, out bool locked, out TimeSpan lockAge, out ItemState state) {
            try {
                return GetAndGetAndLock(false, sessionId, out lockId, out locked, out lockAge, out state);
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public byte[] GetAndLock(string sessionId, out int lockId, out bool locked, out TimeSpan lockAge, out ItemState state) {
            try {
                return GetAndGetAndLock(true, sessionId, out lockId, out locked, out lockAge, out state);
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }


        public void InsertUninitialized(string sessionId, byte[] data, System.TimeSpan timeout) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "TempInsertUninitializedItem";
                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, P.P("item"), DbType.Binary, data);
                        e.CreateParameter(cmd, P.P("timeout"), DbType.Int32, Convert.ToInt32(timeout.TotalMinutes));
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private IDbCommand UpdateCommand(IDbConnection conn) {
            var e = DatabaseServices.ExecutionService;
            var sql = "TempUpdateStateItem";
            var cmd = e.CreateCommand(conn, sql);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = queryTimeout;
            e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, null).Size = SessionConstants.ID_LENGTH;
            var p = e.CreateParameter(cmd, P.P("item"), DbType.Binary, null);
            MySQLParams.SetBlobType(p);
            e.CreateParameter(cmd, P.P("timeout"), DbType.Int32, null);
            e.CreateParameter(cmd, P.P("lockCookie"), DbType.Int32, null);

            return cmd;
        }

        public void Update(string sessionId, int lockId, byte[] data, int prevDataSize, TimeSpan timeout) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = UpdateCommand(conn)) {
                        MySQLParams.SetVal(cmd.Parameters[0], sessionId);
                        MySQLParams.SetVal(cmd.Parameters[1], data);
                        MySQLParams.SetVal(cmd.Parameters[2], Convert.ToInt32(timeout.TotalMinutes));
                        MySQLParams.SetVal(cmd.Parameters[3], lockId);
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private IDbCommand InsertCommand(IDbConnection conn) {
            var e = DatabaseServices.ExecutionService;
            var sql = "TempInsertStateItem";
            var cmd = e.CreateCommand(conn, sql);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = queryTimeout;
            e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, null).Size = SessionConstants.ID_LENGTH;
            var p = e.CreateParameter(cmd, P.P("item"), DbType.Binary, null);
            MySQLParams.SetBlobType(p);
            e.CreateParameter(cmd, P.P("timeout"), DbType.Int32, null);

            return cmd;
        }

        public void Insert(string sessionId, byte[] data, TimeSpan timeout) {
            try { 
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = InsertCommand(conn)) {
                        MySQLParams.SetVal(cmd.Parameters[0], sessionId);
                        MySQLParams.SetVal(cmd.Parameters[1], data);
                        MySQLParams.SetVal(cmd.Parameters[2], Convert.ToInt32(timeout.TotalMinutes));
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void Delete(string sessionId, int lockId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "TempRemoveStateItem";

                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, P.P("lockCookie"), DbType.Int32, lockId);
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        // Session Module Operations

        public byte[] GetModuleItem(string sessionId, string itemId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "SELECT Data FROM " + TempExtVarsTableName + " " +
                              "WHERE SessionId = " + P.P("sessionId") + " AND Variable = " + P.P("variable");

                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, P.P("sessionId"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, P.P("variable"), DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;

                        using (var reader = cmd.ExecuteReader()) {
                            if (reader.Read()) {
                                if (!reader.IsDBNull(0)) {
                                    return (byte[])reader.GetValue(0);
                                }
                            }
                        }
                    }
                    return null;
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private IDbCommand InsertModuleItemCommand(IDbConnection conn, string sessionId, string itemId, byte[] data, int userId, string cookieId) {

            var longInsertSql = "INSERT INTO " + TempExtVarsTableName + "(SessionId, Variable, Data, UserId, Cookie) " +
                "VALUES (" + P.P("sessionId") + ", " + P.P("variable") + ", " + P.P("data") + ", " + P.P("userId") + ", " + P.P("cookie") + ")";

            var e = DatabaseServices.ExecutionService;

            var cmd = e.CreateCommand(conn, longInsertSql);
            cmd.CommandTimeout = queryTimeout;
            e.CreateParameter(cmd, P.P("sessionId"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
            e.CreateParameter(cmd, P.P("variable"), DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
            e.CreateParameter(cmd, P.P("data"), DbType.Binary, data);
            e.CreateParameter(cmd, P.P("userId"), DbType.Int32, userId);
            e.CreateParameter(cmd, P.P("cookie"), DbType.StringFixedLength, cookieId).Size = SessionConstants.VARIABLE_NAME_LENGTH;

            return cmd;
        }

        public void InsertModuleItem(string sessionId, string itemId, byte[] data, int userId, string cookieId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    using (var cmd = InsertModuleItemCommand(conn, sessionId, itemId, data, userId, cookieId)) {
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private IDbCommand UpdateModuleItemCommand(IDbConnection conn, string sessionId, string itemId, byte[] data, int userId, string cookieId) {

            var longUpdateSql = "UPDATE " + TempExtVarsTableName + " " +
                                "SET Data = " + P.P("data") + " , UserId=" + P.P("userId") + ", Cookie=" + P.P("cookie") + " " +
                                "WHERE SessionId = " + P.P("sessionId") + " AND Variable = " + P.P("variable");

            var e = DatabaseServices.ExecutionService;

            var cmd = e.CreateCommand(conn, longUpdateSql);
            cmd.CommandType = CommandType.Text;
            cmd.CommandTimeout = queryTimeout;
            e.CreateParameter(cmd, P.P("sessionId"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
            e.CreateParameter(cmd, P.P("variable"), DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
            e.CreateParameter(cmd, P.P("data"), DbType.Binary, data);
            e.CreateParameter(cmd, P.P("userId"), DbType.Int32, userId);
            e.CreateParameter(cmd, P.P("cookie"), DbType.StringFixedLength, cookieId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
            return cmd;
        }

        public void UpdateModuleItem(string sessionId, string itemId, byte[] data, int userId, string cookieId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    using (var cmd = UpdateModuleItemCommand(conn, sessionId, itemId, data, userId, cookieId)) {
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void InsertModuleItemUser(string sessionId, string itemId, int userId, string cookieId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "INSERT INTO " + TempExtVarsTableName + "(SessionId, Variable, UserId, Cookie) " +
                              "VALUES (" + P.P("sessionId") + ", " + P.P("variable") + ", " + P.P("userId") + ", " + P.P("cookie") + ")";
                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, P.P("sessionId"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, P.P("variable"), DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
                        e.CreateParameter(cmd, P.P("userId"), DbType.Int32, userId);
                        e.CreateParameter(cmd, P.P("cookie"), DbType.StringFixedLength, cookieId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void UpdateModuleItemUser(string sessionId, string itemId, int userId, string cookieId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "UPDATE " + TempExtVarsTableName + " " +
                              "SET UserId=" + P.P("userId") + ", Cookie=" + P.P("cookie") + " " +
                              "WHERE SessionId = " + P.P("sessionId") + " AND Variable = " + P.P("variable");
                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, P.P("sessionId"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, P.P("variable"), DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
                        e.CreateParameter(cmd, P.P("userId"), DbType.Int32, userId);
                        e.CreateParameter(cmd, P.P("cookie"), DbType.StringFixedLength, cookieId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void DeleteModuleItems(string sessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    DeleteSessionInTable(conn, TempExtVarsTableName, sessionId);
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public int GetUserBySessionId(string sessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;

                    var sql = "SELECT UserId FROM " + TempExtVarsTableName + " WHERE SessionId = " + P.P("sessionId") + " and UserId != 0";

                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, P.P("sessionId"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        using (var reader = cmd.ExecuteReader()) {
                            if (reader.Read()) {
                                return Convert.ToInt32(reader.GetValue(0));
                            }
                        }
                    }

                    return 0;
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void ResetModuleTimeout(string sessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(conn, "TempResetTimeout")) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, P.P("id"), DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public bool Store(string str, int hash, out int ehash, out string collidedStr) {

            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(con, "TempGetAppId2")) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, P.P("appName"), DbType.String, str);
                        e.CreateParameter(cmd, P.P("appNameHash"), DbType.Int32, hash);
                        var existingAppName = e.CreateParameter(cmd, P.P("existingAppName"), DbType.String, System.DBNull.Value);
                        existingAppName.Direction = ParameterDirection.Output;
                        var existingAppNameHash = e.CreateParameter(cmd, P.P("existingAppNameHash"), DbType.Int32, System.DBNull.Value);
                        existingAppNameHash.Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();

                        if (existingAppName.Value == System.DBNull.Value) {
                            ehash = Convert.ToInt32(existingAppNameHash.Value);
                            collidedStr = null;
                            return true;
                        } else {
                            ehash = -1;
                            collidedStr = Convert.ToString(existingAppName.Value);
                            return false;
                        }
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public int QueryTimeout {
            set { queryTimeout = value; }
        }
    }
}