/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using OutSystems.HubEdition.DatabaseProvider.MySQL.DatabaseObjects;
using OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.IntrospectionService {

    public class MySQLPlatformIntrospectionService : MySQL.IntrospectionService.MySQLIntrospectionService, IPlatformIntrospectionService {

        private readonly IPlatformDatabaseServices databaseServices;

        IPlatformDatabaseServices IPlatformIntrospectionService.DatabaseServices { get { return databaseServices; } }

        public MySQLPlatformIntrospectionService(IPlatformDatabaseServices databaseServices)
            : base(databaseServices) {
            this.databaseServices = databaseServices;
        }

        public IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> GetTableSourcesDetails(params ITableSourceInfo[] tables) {
            IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> tablesDetails =
                new Dictionary<ITableSourceInfo, IPlatformTableSourceInfo>();

            IList<MySQLTableSourceInfo> tableSourceList = tables.OfType<MySQLTableSourceInfo>().ToList();
            if (tableSourceList.IsNullOrEmpty()) {
                return tablesDetails;
            }

            //columns
            IDictionary<string, IList<IPlatformTableSourceColumnInfo>> tableSourcesColumns =
                new Dictionary<string, IList<IPlatformTableSourceColumnInfo>>();
            foreach (IPlatformTableSourceColumnInfo column in GetColumns(tableSourceList)) {
                string tableName = ((MySQLTableSourceInfo)column.TableSource).Name.ToUpperInvariant();
                IList<IPlatformTableSourceColumnInfo> tableColumns;
                if (!tableSourcesColumns.TryGetValue(tableName, out tableColumns)) {
                    tableColumns = new List<IPlatformTableSourceColumnInfo>();
                    tableSourcesColumns[tableName] = tableColumns;
                }
                tableColumns.Add(column);
            }

            //foreign keys
            IDictionary<string, IList<ITableSourceForeignKeyInfo>> tableSourcesForeignKeys =
                new Dictionary<string, IList<ITableSourceForeignKeyInfo>>();
            foreach (ITableSourceForeignKeyInfo foreignKey in GetForeignKeys(tableSourceList)) {
                string tableName = ((MySQLTableSourceInfo)foreignKey.TableSource).Name.ToUpperInvariant();
                IList<ITableSourceForeignKeyInfo> tableFKeys;
                if (!tableSourcesForeignKeys.TryGetValue(tableName, out tableFKeys)) {
                    tableFKeys = new List<ITableSourceForeignKeyInfo>();
                    tableSourcesForeignKeys[tableName] = tableFKeys;
                }
                tableFKeys.Add(foreignKey);
            }

            foreach (MySQLTableSourceInfo tableSource in tableSourceList) {
                MySQLPlatformTableSourceInfo info = new MySQLPlatformTableSourceInfo(tableSource);

                info.Columns = tableSourcesColumns.GetValueOrDefault(tableSource.Name.ToUpperInvariant()) ??
                    new List<IPlatformTableSourceColumnInfo>();

                info.ForeignKeys = tableSourcesForeignKeys.GetValueOrDefault(tableSource.Name.ToUpperInvariant()) ??
                    new List<ITableSourceForeignKeyInfo>();

                tablesDetails.Add(tableSource, info);
            }

            InitializeIndexes(tablesDetails);
            InitializeTriggers(tablesDetails);
            return tablesDetails;
        }

        private IEnumerable<IPlatformTableSourceColumnInfo> GetColumns(IEnumerable<MySQLTableSourceInfo> tableSourceList) {
            IEnumerable<ITableSourceColumnInfo> columns = GetColumns(tableSourceList, GetPlatformDataTypeInfo, GetPlatformColumnInfo);
            return columns.Cast<IPlatformTableSourceColumnInfo>();
        }

        private void InitializeIndexes(IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> tablesDetails) {
            string schemaNamePrefix = ((MySQLTableSourceInfo)tablesDetails.Keys.First()).Database.Name.ToLowerInvariant() + "/";
            using (IDbConnection conn = databaseServices.TransactionService.CreateConnection()) {
                using (IDataReader reader = GetIndexes(conn, tablesDetails.Keys.Cast<MySQLTableSourceInfo>())) {
                    while (reader.Read()) {
                        string indexName = Convert.ToString(reader["idxName"]);
                        int indexType = Convert.ToInt32(reader["idxType"]);
                        string tableName = Convert.ToString(reader["tblName"]);
                        if (!tableName.IsEmpty() && tableName.StartsWith(schemaNamePrefix)) {

                            var tableSource = (MySQLPlatformTableSourceInfo)tablesDetails.Values.FirstOrDefault(t =>
                                t.Name.EqualsIgnoreCase(tableName.Substring(schemaNamePrefix.Length)));

                            // If it's not a foreign key.
                            if (tableSource != null && tableSource.ForeignKeys.All(t => !t.Name.EqualsIgnoreCase(indexName))) {

                                bool isPrimaryKey = indexName == "PRIMARY";
                                bool isUnique = isPrimaryKey || indexType == 2 /* Unique Index */;
                                string columnName = Convert.ToString(reader["colName"]);

                                if (!indexName.IsEmpty()) {
                                    var index = tableSource.Indexes.FirstOrDefault(i => i.Name.EqualsIgnoreCase(indexName));
                                    var column = tableSource.Columns.SingleOrDefault(c => c.Name.EqualsIgnoreCase(columnName));
                                    if (column != null) { // Ignoring indexes without columns (this happens with internal columns like FTS_DOC_ID - #1340136).
                                        if (index == null) {
                                            index = new MySQLPlatformTableSourceIndexInfo(tableSource, indexName, isUnique, isPrimaryKey);
                                            tableSource.AddIndex(index);
                                        }
                                        ((MySQLPlatformTableSourceIndexInfo)index).AddColumn(column);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private IDataReader GetIndexes(IDbConnection conn, IEnumerable<MySQLTableSourceInfo> tableSources) {
            string schemaName = tableSources.First().Database.Name.ToLowerInvariant();
            string fullTableNames = "'" + tableSources.Select(t => schemaName + @"/" + t.Name.ToLowerInvariant()).StrCat("','") + "'";

            string sql = string.Format(@"select tbl.NAME tblName, idx.NAME idxName, idx.TYPE idxType, fld.NAME colName 
                                         from INFORMATION_SCHEMA.INNODB_SYS_INDEXES idx
                                         inner join INFORMATION_SCHEMA.INNODB_SYS_TABLES tbl on tbl.TABLE_ID = idx.TABLE_ID
                                         inner join INFORMATION_SCHEMA.INNODB_SYS_FIELDS fld on fld.INDEX_ID = idx.INDEX_ID
                                         where tbl.NAME IN ({0})
                                         order by fld.INDEX_ID, fld.POS", fullTableNames);

            IDbCommand cmd = databaseServices.ExecutionService.CreateCommand(conn, sql);
            cmd.CommandTimeout = QueryTimeout;
            return databaseServices.ExecutionService.ExecuteReader(cmd);
        }

        private void InitializeTriggers(IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> tablesDetails) {
            using (IDbConnection conn = databaseServices.TransactionService.CreateConnection()) {
                using (IDataReader reader = GetTriggers(conn, tablesDetails.Keys.Cast<MySQLTableSourceInfo>())) {
                    while (reader.Read()) {
                        string tableName = Convert.ToString(reader["table_name"]).ToUpperInvariant();
                        string triggerName = Convert.ToString(reader["trigger_name"]).ToUpperInvariant();

                        var tableSource = (MySQLPlatformTableSourceInfo)tablesDetails.Values.FirstOrDefault(t => t.Name.EqualsIgnoreCase(tableName));

                        if (tableSource != null) {
                            tableSource.EventTrigger = new MySQLPlatformTableSourceTriggerInfo(tableSource, triggerName);
                        }
                    }
                }
            }
        }

        private IDataReader GetTriggers(IDbConnection conn, IEnumerable<MySQLTableSourceInfo> tableSources) {
            MySQLDatabaseInfo dbInfo = databaseServices.ObjectFactory.CreateLocalDatabaseInfo() as MySQLDatabaseInfo;
            if (dbInfo == null) {
                return null;
            }

            string tableNames = "'" + tableSources.Select(t => t.Name).StrCat("','") + "'";
            string sql = string.Format(@"select trig.TRIGGER_NAME trigger_name, trig.EVENT_OBJECT_TABLE table_name
                from INFORMATION_SCHEMA.TRIGGERS trig
                where trig.EVENT_OBJECT_SCHEMA = '{0}' and trig.EVENT_OBJECT_TABLE IN ({1}) and UPPER(trig.TRIGGER_NAME) LIKE '{2}%'", dbInfo.Name,
                tableNames, PlatformDatabaseObjectConstants.EventTriggerPrefix);

            IDbCommand cmd = databaseServices.ExecutionService.CreateCommand(conn, sql);
            return databaseServices.ExecutionService.ExecuteReader(cmd);
        }


        private MySQLPlatformDataTypeInfo GetPlatformDataTypeInfo(string type, string fullTypeName, int length, int precision, int scale, int datetimePrecision, bool isUnsigned) {
            DBDataType dataType;
            int columnLength = 0, columnDecimals = 0;
            string typeCheck = type.ToLowerInvariant();

            switch (typeCheck) {
                case "int":
                    dataType = DBDataType.INTEGER;
                    break;
                case "bigint":
                    dataType = DBDataType.LONGINTEGER;
                    break;
                case "tinyint":
                    if (precision == 1) {
                        dataType = DBDataType.BOOLEAN;
                    } else {
                        dataType = DBDataType.UNKNOWN;
                    }
                    break;
                case "datetime":
                    dataType = DBDataType.DATE_TIME;
                    break;
                case "nvarchar":
                case "varchar":
                    //for schemas in unicode it creates varchar
                    //for non unicode schemas it creates nvarchar
                    dataType = DBDataType.TEXT;
                    columnLength = Math.Min(int.MaxValue, length);
                    break;
                case "text":
                case "longtext":
                    columnLength = int.MaxValue;
                    dataType = DBDataType.TEXT;
                    break;
                case "decimal":
                    if (precision <= 37) {
                        dataType = DBDataType.DECIMAL;
                        columnLength = precision;
                        columnDecimals = scale;
                    } else {
                        dataType = DBDataType.UNKNOWN;
                    }
                    break;
                case "blob":
                case "mediumblob":
                case "longblob":
                    //due to micro optimization on the platform model (see runtimemodel_mysql) we support several
                    dataType = DBDataType.BINARY_DATA;
                    break;
                default:
                    dataType = DBDataType.UNKNOWN;
                    break;
            }
            return new MySQLPlatformDataTypeInfo(dataType, typeCheck, columnLength, columnDecimals);
        }

        private static MySQLTableSourceColumnInfo GetPlatformColumnInfo(ITableSourceInfo tableSource, string columnName, IDataTypeInfo dataType,
                bool isMandatory, bool isPrimaryKey, bool isAutoGenerated, bool isUnsigned) {
            return new MySQLPlatformTableSourceColumnInfo(tableSource, columnName, (MySQLPlatformDataTypeInfo)dataType, isMandatory, isPrimaryKey, isAutoGenerated);
        }

        public IDictionary<string, bool> CheckTableSourcesExist(params string[] tableSourcesNames) {
            MySQLDatabaseInfo dbInfo = databaseServices.ObjectFactory.CreateLocalDatabaseInfo() as MySQLDatabaseInfo;
            if (dbInfo == null) {
                return null;
            }

            HashSet<string> tableSourcesFound = new HashSet<string>();
            IList<string> tableSourceNamesList = tableSourcesNames.ToList();
            if (tableSourceNamesList.IsNullOrEmpty()) {
                return null;
            }

            using (IDbConnection conn = databaseServices.TransactionService.CreateConnection()) {
                string tableCondition;
                string paramPrefix = databaseServices.ExecutionService.ParameterPrefix;
                if (tableSourceNamesList.Count == 1) {
                    tableCondition = "=" + paramPrefix + "tablename";
                } else {
                    tableCondition = " IN ('" + tableSourceNamesList.StrCat("','").ToUpper() + "')";
                }
                string sql = string.Format(@"(SELECT TABLE_NAME 
                                              FROM INFORMATION_SCHEMA.TABLES 
                                              WHERE TABLE_NAME {1} AND TABLE_SCHEMA = '{0}')
                                             UNION
                                             (SELECT TABLE_NAME 
                                              FROM INFORMATION_SCHEMA.VIEWS
                                              WHERE TABLE_NAME {1} AND TABLE_SCHEMA = '{0}')", dbInfo.Name, tableCondition);

                using (IDbCommand cmd = databaseServices.ExecutionService.CreateCommand(conn, sql)) {
                    if (tableSourceNamesList.Count == 1) {
                        databaseServices.ExecutionService.CreateParameter(cmd,
                            paramPrefix + "tablename", DbType.String, tableSourceNamesList.First());
                    }
                    using (IDataReader reader = databaseServices.ExecutionService.ExecuteReader(cmd)) {
                        while (reader.Read()) {
                            tableSourcesFound.Add(Convert.ToString(reader["TABLE_NAME"]).ToUpper());
                        }
                    }
                }
            }

            IDictionary<string, bool> result = new Dictionary<string, bool>();
            foreach (var tableSource in tableSourceNamesList) {
                result.Add(tableSource, tableSourcesFound.Contains(tableSource.ToUpper()));
            }
            return result;
        }

        public int GetDatabaseObjectsDefinitionHash(string objectNameFilter) {
            int hashResult = -1;

            MySQLDatabaseInfo dbInfo = databaseServices.ObjectFactory.CreateLocalDatabaseInfo() as MySQLDatabaseInfo;
            if (dbInfo == null) {
                return hashResult;
            }

            using (IDbConnection conn = databaseServices.TransactionService.CreateConnection()) {
                string columnSql = string.Format(@"(select crc32(group_concat(crc32(concat_ws(
                                                TABLE_CATALOG, 
                                                TABLE_SCHEMA, 
                                                TABLE_NAME, 
                                                COLUMN_NAME, 
                                                ORDINAL_POSITION, 
                                                COLUMN_DEFAULT, 
                                                IS_NULLABLE, 
                                                DATA_TYPE, 
                                                CHARACTER_MAXIMUM_LENGTH, 
                                                CHARACTER_OCTET_LENGTH, 
                                                NUMERIC_PRECISION, 
                                                NUMERIC_SCALE, 
                                                DATETIME_PRECISION, 
                                                CHARACTER_SET_NAME, 
                                                COLLATION_NAME, 
                                                COLUMN_TYPE, 
                                                COLUMN_KEY, 
                                                EXTRA, 
                                                PRIVILEGES, 
                                                COLUMN_COMMENT)) 
                                                SEPARATOR '.'))
                                            from information_schema.COLUMNS
                                            where TABLE_SCHEMA = '{0}'
                                            and TABLE_NAME like '%{1}%'
                                            order by TABLE_NAME, COLUMN_NAME)", dbInfo.Name, objectNameFilter);
                string viewDefinitionSql = string.Format(@"(select crc32(group_concat(crc32(concat_ws(
                                                TABLE_CATALOG, 
                                                TABLE_SCHEMA, 
                                                TABLE_NAME, 
                                                VIEW_DEFINITION, 
                                                CHECK_OPTION, 
                                                IS_UPDATABLE, 
                                                DEFINER, 
                                                SECURITY_TYPE, 
                                                CHARACTER_SET_CLIENT, 
                                                COLLATION_CONNECTION)) 
                                                SEPARATOR '.'))
                                            from information_schema.VIEWS
                                            where TABLE_SCHEMA = '{0}'
                                            and TABLE_NAME like '%{1}%'
                                            order by TABLE_NAME)", dbInfo.Name, objectNameFilter);
                string indexSql = string.Format(@"(select crc32(group_concat(crc32(concat_ws(
                                                TABLE_CATALOG, 
                                                TABLE_SCHEMA, 
                                                TABLE_NAME, 
                                                NON_UNIQUE, 
                                                INDEX_SCHEMA, 
                                                INDEX_NAME, 
                                                SEQ_IN_INDEX, 
                                                COLUMN_NAME, 
                                                COLLATION, 
                                                CARDINALITY, 
                                                SUB_PART, 
                                                PACKED, 
                                                NULLABLE, 
                                                INDEX_TYPE, 
                                                COMMENT, 
                                                INDEX_COMMENT)) 
                                                SEPARATOR '.'))
                                            from information_schema.STATISTICS
                                            where TABLE_SCHEMA = '{0}'
                                            and TABLE_NAME like '%{1}%'
                                            order by TABLE_NAME, INDEX_NAME, SEQ_IN_INDEX)", dbInfo.Name, objectNameFilter);
                int columnHash;
                using (IDbCommand cmd = databaseServices.ExecutionService.CreateCommand(conn, columnSql)) {
                    cmd.CommandTimeout = QueryTimeout;
                    columnHash = Convert.ToString(databaseServices.ExecutionService.ExecuteScalar(cmd)).GetHashCode();
                }
                int viewDefinitionsHash;
                using (IDbCommand cmd = databaseServices.ExecutionService.CreateCommand(conn, viewDefinitionSql)) {
                    cmd.CommandTimeout = QueryTimeout;
                    viewDefinitionsHash = Convert.ToString(databaseServices.ExecutionService.ExecuteScalar(cmd)).GetHashCode();
                }
                int indexHash;
                using (IDbCommand cmd = databaseServices.ExecutionService.CreateCommand(conn, indexSql)) {
                    cmd.CommandTimeout = QueryTimeout;
                    indexHash = Convert.ToString(databaseServices.ExecutionService.ExecuteScalar(cmd)).GetHashCode();
                }
                string meshedHashes = columnHash + "" + viewDefinitionsHash + "" + indexHash;
                hashResult = meshedHashes.GetHashCode();
            }
            return hashResult;
        }
    }
}