/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.HubEdition.DatabaseProvider.MySQL.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.DMLService;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.DatabaseObjects {
    public class MySQLPlatformDatabaseObjectFactory : MySQLDatabaseObjectFactory, IPlatformDatabaseObjectFactory {

        public MySQLPlatformDatabaseObjectFactory(IDatabaseServices databaseServices) : base(databaseServices) { }

        public ITableSourceInfo CreateLocalTableSourceInfo(string tableName) {
            return new MySQLTableSourceInfo(databaseServices, (MySQLDatabaseInfo)CreateLocalDatabaseInfo(), tableName,
                ((IPlatformDatabaseServices)databaseServices).DMLService.Identifiers.EscapeAndQualifyIdentifierForLocalDatabase(tableName));
        }

        public IPlatformDataTypeInfo CreateDataTypeInfo(DBDataType dataType, int length, int decimals) {
            return new MySQLPlatformDataTypeInfo(dataType, GetSqlDataType(dataType, length, decimals), length, decimals);
        }

        public IPlatformTableSourceColumnInfo CreateColumnInfo(ITableSourceInfo tableSource, string name, IPlatformDataTypeInfo dataType, bool isMandatory, bool isPrimaryKey, bool isAutoGenerated) {
            return new MySQLPlatformTableSourceColumnInfo(tableSource, name, dataType, isMandatory, isPrimaryKey, isAutoGenerated);
        }


        public ITableSourceForeignKeyInfo CreateForeignKeyInfo(ITableSourceInfo tableSource, string foreignKeyName, string columnName,
            ITableSourceInfo referencedTableSource, string referencedColumnName, bool isCascadeDelete) {

            foreignKeyName = string.IsNullOrEmpty(foreignKeyName)? 
                this.GetNewForeignKeyName(databaseServices, tableSource.Name, referencedTableSource.Name, columnName): foreignKeyName;
            
            return new MySQLTableSourceForeignKeyInfo(tableSource, foreignKeyName, columnName, referencedTableSource, referencedColumnName, isCascadeDelete);
        }

        public IPlatformTableSourceIndexInfo CreateIndexInfo(ITableSourceInfo tableSource, string indexName, 
                IEnumerable<IPlatformTableSourceColumnInfo> columns, IEnumerable<ITableSourceForeignKeyInfo> foreignKeys, bool isUnique, 
                bool isPrimaryKey) {

            indexName = string.IsNullOrEmpty(indexName) ? this.GetNewIndexName(databaseServices, tableSource.Name, columns) : indexName;
            var index = new MySQLPlatformTableSourceIndexInfo(tableSource, indexName, isUnique, isPrimaryKey);
            foreach (var column in columns) {
                index.AddColumn(column);
            }
            return index;
        }

        public IPlatformTableSourceEventTriggerInfo CreateTriggerInfo(ITableSourceInfo tableSource) {
            var triggerName = this.GetNewEventTriggerName(databaseServices, tableSource.Name);
            return new MySQLPlatformTableSourceTriggerInfo(tableSource, triggerName);
        }

        private static string GetSqlDataType(DBDataType dataType, int length, int decimals) {
            switch (dataType) {
                case DBDataType.DATE_TIME:
                case DBDataType.DATE:
                case DBDataType.TIME:
                    return "datetime";
                case DBDataType.DECIMAL:
                    return string.Format("DECIMAL({0},{1})", length, decimals);
                case DBDataType.INTEGER:
                    return "integer";
                case DBDataType.LONGINTEGER:
                    return "bigint";
                case DBDataType.TEXT:
                    return length <= MySQLPlatformDataTypeInfo.VARCHAR_MAXLENGTH ? "varchar(" + length + ")" : "longtext";
                case DBDataType.BOOLEAN:
                    return "tinyint(1)";
                case DBDataType.BINARY_DATA:
                    return "longblob";
                default:
                    return "<UnknownType>";
            }
        }
    }
}
