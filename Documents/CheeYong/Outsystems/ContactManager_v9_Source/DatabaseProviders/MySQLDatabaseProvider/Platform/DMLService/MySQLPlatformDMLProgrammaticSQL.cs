/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OutSystems.HubEdition.Extensibility.Data.Platform.DMLService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.DMLService {

    internal class MySQLPlatformDMLProgrammaticSQL : BasePlatformDMLProgrammaticSQL {

        private IDictionary<long, string> blockIdentifier = new ConcurrentDictionary<long, string>();

        public MySQLPlatformDMLProgrammaticSQL(IPlatformDMLService dmlService) : base(dmlService) {
        }

        public override string IfElseStatement(string condition, string ifBody, string elseBody) {
            return elseBody.IsEmpty() ?
                "IF {0} THEN {1} END IF;".F(condition, ifBody) :
                "IF {0} THEN {1} ELSE {2} END IF;".F(condition, ifBody, elseBody);
        }

        public override string GetVariableValue(string name) {
            return name;
        }

        public override string SetVariable(string varName, string value) {
            return "set {0} = {1};".F(varName, value);
        }

        public override IDictionary<QueryPlaceholder, string> SetVariableFromQuery(string varName) {
            var placeholders = new Dictionary<QueryPlaceholder, string>();
            placeholders.Add(QueryPlaceholder.BeforeFromKeyword, " INTO " + varName + " ");
            placeholders.Add(QueryPlaceholder.AfterStatement, ";");
            return placeholders;
        }

        public override string SetVariableFromLastInsertedId(string varName) {
            return "set {0} = (SELECT LAST_INSERT_ID());".F(varName);
        }

        public override string BeginProgrammaticSQLBlock(params VariableDetails[] variables) {
            string sql = string.Empty;
            long currentThreadId = Thread.CurrentThread.ManagedThreadId;
            // Adding threadId to the procedure name to make sure this is unique in concurrency scenarios.
            string procedureName = "ddl_" + DateTime.UtcNow.Ticks.ToString() + currentThreadId;
            blockIdentifier[currentThreadId] = procedureName;
            trace("BeginProgrammaticSQLBlock", procedureName, currentThreadId);

            sql = @"DROP PROCEDURE IF EXISTS {0};
                     CREATE PROCEDURE {0} ()
                     BEGIN 
                     ".F(DMLService.Identifiers.EscapeIdentifier(procedureName));

            return sql + variables.Select(variable => "DECLARE {0} {1};".F(variable.Name, variable.Type.SqlDataType)).StrCat(Environment.NewLine);
        }

        public override string EndProgrammaticSQLBlock() {
            long currentThreadId = Thread.CurrentThread.ManagedThreadId;
            string procedureName = blockIdentifier[currentThreadId];
            trace("EndProgrammaticSQLBlock", procedureName, currentThreadId);

            if (procedureName.IsEmpty()) {
                throw new Exception("Trying to close a programmatic block that wasn't opened.");
            }

            return @"END;
                    CALL {0} ();
                    DROP PROCEDURE IF EXISTS {0};".F(DMLService.Identifiers.EscapeIdentifier(procedureName));
        }

        private void trace(string methodName, string procedureName, long currentThreadId) {
            OSTrace.Debug("{0} with Name {1} for Thread: {2}", methodName, procedureName, currentThreadId);
        }
    }
}
