/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.DatabaseProvider.MySQL.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.Configuration {
    public class MySQLSessionConfigurationManager : BaseSessionConfigurationManager {
        public MySQLSessionConfigurationManager(ISessionDatabaseConfiguration sessionConfiguration)
            : base(sessionConfiguration) {
        }

        public override FileStream StreamForScriptFile {
            get {
                string path = Path.Combine(Script_Path, "session_model_mysql.sql");
                return new FileStream(path, FileMode.Open, FileAccess.Read);
            }
        }

        public override string StatementSeparator {
            get {
                return "GO";
            }
        }

        //delimiter statement is only meant to run on a mysql interactive session
        //ignore it for configuration tool execution
        private const string delimiterStatement = "DELIMITER GO";
        

        public override IEnumerable<string> SessionStatements {
            get {
                int deleteRowCount = ((MySQLSessionDatabaseConfiguration)sessionConfiguration).DeleteExpiredSessionsAvoidLockRowCount;
                int deleteVarsRowCount = ((MySQLSessionDatabaseConfiguration)sessionConfiguration).DeleteExpiredSessionsAvoidLockRowCount;

                string script = ReadScriptFile(StreamForScriptFile);

                StringBuilder str = new StringBuilder();

                // read the entire script
                var reader = new StringReader(script);
                string line = reader.ReadLine();
                while (line != null) {

                    if (line.Trim() == StatementSeparator) {
                        // end of statement       
                        string command = str.ToString();
                        command = command.Replace(TAG_ROWCOUNT, Convert.ToString(deleteRowCount));
                        command = command.Replace(TAG_VARSROWCOUNT, Convert.ToString(deleteVarsRowCount));
                        yield return command;

                        str = new StringBuilder();
                    } else if (line != "" && delimiterStatement.EqualsIgnoreCase(line.Trim()) == false) //ignore delimiter statement
                        str.AppendLine(line);

                    line = reader.ReadLine();
                }
            }
        }

        public override void Pre_CreateOrUpgradeSession() {
            //this is implemented, MySQL does not have any behavior
        }
    }
}
