/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Text;
using OutSystems.HubEdition.DatabaseProvider.MySQL.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.Configuration {

    public class MySQLSessionDatabaseConfiguration : BaseSessionDatabaseConfiguration {

        public override IPlatformDatabaseProvider PlatformDatabaseProvider {
            get { return Platform.MySQLPlatformDatabaseProvider.Instance; }
        }

        private const int DEFAULT_PORT_VALUE = 3306;

        public MySQLSessionDatabaseConfiguration() {
        }

        public override AuthenticationType AuthenticationMode {
            get { return UsedAuthenticationMode; }
            set { UsedAuthenticationMode = value; }
        }
        
        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration() {
            return new MySQLRuntimeDatabaseConfiguration {
                Username = SessionAuthenticationCredential.UserName,
                ConnectionString = ConnectionString(),
                Schema = Schema
            };
        }

        #region ConnectionString Assemblage

        private string ConnectionString() {
            return string.Format("Server={0};Database={1};Uid={2};Pwd={3};Allow User Variables=true;ConnectionLifeTime=6000;", Server, Schema, SessionUser, SessionPassword);
            //TODO: dvn support advanced scenario
        }
        #endregion

        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.SessionDatabaseLocation, Prompt = "Server")]
        public string Server { get; set; }

        [UserDefinedConfigurationParameter(Label = "Schema", IsMandatory = true, Order = 3, Region = ParameterRegion.SessionDatabaseLocation, Prompt = "Schema")]
        public string Schema { get; set; }
        
        [UserDefinedConfigurationParameter(Label = "Extra parameters", Order = 4, Region = ParameterRegion.AdvancedSession, Example = "e.g.: Max Pool Size= 100; Connection Timeout = 15;", Prompt = "JDBC Url Parameters")]
        public override string SessionAdvancedSettings { get; set; }

        [ConfigurationParameter]
        public AuthenticationType UsedAuthenticationMode { get; set; }

        
        public override bool Equals(ISessionDatabaseConfiguration obj) {

            if ((object)this == (object)obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (GetType() != obj.GetType()) {
                return false;
            }

            var other = (MySQLSessionDatabaseConfiguration)obj;

            return SessionUser == other.SessionUser
                && SessionPassword == other.SessionPassword
                && Server == other.Server
                && Schema == other.Schema
                && ImplementsElevatedPrivilegesOperations == other.ImplementsElevatedPrivilegesOperations
                && UsedAuthenticationMode == other.UsedAuthenticationMode
                && SessionAdvancedSettings == other.SessionAdvancedSettings;
        }
    }
}