/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using OutSystems.HubEdition.DatabaseProvider.MySQL.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.DDLService;
using OutSystems.HubEdition.Extensibility.Data.Platform.DMLService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.MySQL.Platform.DDLService {
    public class MySQLDDLService : BaseDDLService {


        public MySQLDDLService(IPlatformDatabaseServices databaseServices) : base(databaseServices) { }

        public override string GetDefaultValue(DBDataType type) {
            switch (type) {
                case DBDataType.TEXT:
                    return "''";
                case DBDataType.BOOLEAN:
                    return "0";
                case DBDataType.LONGINTEGER:
                    return "0";
                case DBDataType.INTEGER:
                    return "0";
                case DBDataType.DECIMAL:
                    return "0";
                case DBDataType.BINARY_DATA:
                    return "NULL";
                default:
                    if (type.IsDateOrTimeOrDateTime()) {
                        return "'1900-01-01 00:00:00'";
                    } else {
                        throw new InvalidOperationException();
                    }
            }
        }

        public override bool CanAlterColumn(IPlatformTableSourceColumnInfo existingColumn, IPlatformTableSourceColumnInfo newColumn,
                                            out string errorMessage) {
            errorMessage = "";

            if (newColumn.IsAutoGenerated && newColumn.IsPrimaryKey == false) {
                errorMessage = string.Format("Column {0} of table {1} can't be Auto Number if it's not the identifier of the entity.", newColumn.Name, newColumn.TableSource.Name);
                return false;
            }
 
            // Data type conversions
            if (existingColumn.DataType.Type == DBDataType.TEXT && existingColumn.DataType.Length > MySQLPlatformDataTypeInfo.VARCHAR_MAXLENGTH &&
                newColumn.DataType.Type == DBDataType.TEXT && newColumn.DataType.Length < MySQLPlatformDataTypeInfo.VARCHAR_MAXLENGTH) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, true) +
                               string.Format(" This is because the column was previously defined with a length greater than {0}.",
                                   MySQLPlatformDataTypeInfo.VARCHAR_MAXLENGTH);
                return false;
            }
            
            if (existingColumn.DataType.Type == DBDataType.BINARY_DATA) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, true);
                return false;
            }

            if (newColumn.DataType.Type.IsOneOf(DBDataType.BINARY_DATA, DBDataType.DATE_TIME)) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, false);
                return false;
            }
            
            if (existingColumn.DataType.Type == DBDataType.DATE_TIME && newColumn.DataType.Type != DBDataType.TEXT) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, false);
                return false;
            }

            // Autonumber conversions
            if (existingColumn.IsAutoGenerated && !newColumn.IsAutoGenerated) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn.TableSource.Name, existingColumn.Name, "Autonumber", existingColumn.DataType.Type.ToText(), newColumn.DataType.SqlDataType, newColumn.DataType.Type.ToText(), true);
                return false;
            }
            if (!existingColumn.IsAutoGenerated && newColumn.IsAutoGenerated) {
                // Change is allowed if the table is empty
                bool hasRows;
                using (IDbConnection conn = DatabaseServices.TransactionService.CreateConnection()) {
                    using (IDbCommand cmd = DatabaseServices.ExecutionService.CreateCommand(conn,
                        "select count(1) from " + Identifiers.EscapeAndQualifyIdentifierForLocalDatabase(existingColumn.TableSource.Name))) {
                            hasRows = Convert.ToInt32(cmd.ExecuteScalar()) > 0;
                    }
                }
                if (hasRows) {
                    errorMessage = GetColumnCannotBeChangedMessage(existingColumn.TableSource.Name, existingColumn.Name,
                        existingColumn.DataType.SqlDataType, existingColumn.DataType.Type.ToText(), "Autonumber",
                        newColumn.DataType.Type.ToText(), false);
                    return false;
                }
            }
            
            return true;
        }

        public override bool CanCreateColumn(IPlatformTableSourceColumnInfo newColumn, out string errorMessage) {
            errorMessage = "";
            if (newColumn.IsAutoGenerated && newColumn.IsPrimaryKey == false) {
                errorMessage = string.Format("Column {0} of table {1} can't be Auto Number if it's not the identifier of the entity.", newColumn.Name, newColumn.TableSource.Name);
                return false;
            }
            return true;
        }

        public override bool CanCreateTable(ITableSourceInfo newTable, ColumnDetails[] columns, out string errorMessage) {
            errorMessage = "";
            IPlatformTableSourceColumnInfo badColumn = columns.Select(c => c.Column).Where(c => c.IsAutoGenerated).FirstOrDefault(c => c.IsPrimaryKey == false);
            if (badColumn != null) {
                errorMessage = string.Format("Column {0} of table {1} can't be Auto Number if it's not the identifier of the entity.", badColumn.Name, badColumn.TableSource.Name );
                return false;
            }
            return true;
        }

        public override IEnumerable<string> DropForeignKey(ITableSourceForeignKeyInfo existingForeignKey) {
            string statement = String.Format("ALTER TABLE {0} DROP FOREIGN KEY {1};", Identifiers.EscapeIdentifier(existingForeignKey.TableSource.Name),
                Identifiers.EscapeIdentifier(existingForeignKey.Name));

            return statement.ToEnumerable();
        }

        public override IEnumerable<string> DropIndex(IPlatformTableSourceIndexInfo existingIndex) {
            yield return String.Format("DROP INDEX {0} ON {1};", 
                Identifiers.EscapeIdentifier(existingIndex.Name), Identifiers.EscapeIdentifier(existingIndex.TableSource.Name));
        }


        private IEnumerable<string> SetColumnToAutonumber(IPlatformTableSourceColumnInfo existingColumn) {
            yield return String.Format("ALTER TABLE {0} MODIFY COLUMN {1} {2} auto_increment;", 
                Identifiers.EscapeIdentifier(existingColumn.TableSource.Name), Identifiers.EscapeIdentifier(existingColumn.Name), existingColumn.DataType.SqlDataType);
        }

        public override IEnumerable<string> CreateTable(ITableSourceInfo newTable, params ColumnDetails[] columns) {

            var dbConfig = DatabaseServices.DatabaseConfiguration as MySQLRuntimeDatabaseConfiguration;
            if (dbConfig == null) {
                return Enumerable.Empty<string>();
            }

            bool hasAutoGeneratedColumns = columns.Any(c => c.Column.IsAutoGenerated) ;            

            string createTableStatement = base.CreateTable(newTable, columns).Single();

            IList<string> statements = new List<string>();
            statements.Add(createTableStatement);

            if (hasAutoGeneratedColumns) {
                foreach (ColumnDetails column in columns.Where(col => col.Column.IsAutoGenerated)) {
                    statements.AddRange(SetColumnToAutonumber(column.Column));
                }
            }

            return statements;
        }

        public override IEnumerable<string> CreateIndex(IPlatformTableSourceIndexInfo newIndex) {
            var createStatement = new StringBuilder();
            var dbConfig = DatabaseServices.DatabaseConfiguration as MySQLRuntimeDatabaseConfiguration;
            if (dbConfig == null) {
                yield break;
            }

            createStatement.AppendFormat("CREATE {0} INDEX {1}", newIndex.IsUnique? "UNIQUE": String.Empty, 
                Identifiers.EscapeIdentifier(newIndex.Name));
            
            var indexFields = new StringBuilder();

            foreach (var col in newIndex.Columns) {
                if (col.DataType.Type == DBDataType.TEXT && col.DataType.Length > 191) {
                    //mysql has a key size limit of 766 bytes which translates to 191 chars on utf8mb4
                    //we are truncating the index which should be ok on most big columns
                    indexFields.Append(Identifiers.EscapeIdentifier(col.Name));
                    indexFields.Append("(191),");
                } else {
                    indexFields.Append(Identifiers.EscapeIdentifier(col.Name));
                    indexFields.Append(",");
                }
            }
            createStatement.AppendFormat(" ON {0} ({1});", newIndex.TableSource.Name, indexFields.ToString(0, indexFields.Length - 1));

            yield return createStatement.ToString();
        }


        public override IEnumerable<string> CreateEventTrigger(IPlatformTableSourceEventTriggerInfo newTrigger, IPlatformTableSourceColumnInfo triggerTablePrimaryKeyColumn, 
            IEnumerable<IPlatformTableSourceColumnInfo> triggerTableEventColumns, IEnumerable<ITableSourceForeignKeyInfo> triggerTableForeignKeys, 
            ITableSourceInfo eventTable, ITableSourceInfo eventQueueTable, ITableSourceInfo lightEventQueueTable) {
            var sql = new StringBuilder();
            string triggerName = ((newTrigger.Name.ToUpperInvariant().EndsWith("_I") || newTrigger.Name.ToUpperInvariant().EndsWith("_U")) ?  
                                    newTrigger.Name.Substring(0, newTrigger.Name.Length - 2) : newTrigger.Name).Right( Identifiers.MaxLength - 2);

            ITableSourceInfo table = newTrigger.TableSource;
            sql.Append("CREATE TRIGGER " + Identifiers.EscapeIdentifier(triggerName + "_I"));
            sql.Append(" AFTER INSERT ON " + Identifiers.EscapeIdentifier(table.Name));
            sql.Append(" FOR EACH ROW ");
            sql.Append(" BEGIN ");
            sql.Append(" DECLARE isUpdating integer default 0;");
            FillEventTriggerQuery(sql, triggerTablePrimaryKeyColumn, triggerTableEventColumns, triggerTableForeignKeys, eventTable, 
                eventQueueTable, lightEventQueueTable, "NEW", false, "isUpdating");
            sql.AppendLine(" END;");


            sql.Append("CREATE TRIGGER " + Identifiers.EscapeIdentifier(triggerName + "_U"));
            sql.Append(" AFTER UPDATE ON " + Identifiers.EscapeIdentifier(table.Name));
            sql.Append(" FOR EACH ROW ");
            sql.Append(" BEGIN ");
            sql.Append(" DECLARE isUpdating integer default 1;");
            FillEventTriggerQuery(sql, triggerTablePrimaryKeyColumn, triggerTableEventColumns, triggerTableForeignKeys, eventTable,
                eventQueueTable, lightEventQueueTable, "NEW", false, "isUpdating");
            sql.AppendLine(" END;");

            return sql.ToString().ToEnumerable();
        }

        //dnv: review this hack
        public override IEnumerable<string> DropEventTrigger(IPlatformTableSourceEventTriggerInfo existingTrigger) {
            var sql = new StringBuilder();
            string triggerName = existingTrigger.Name;
            string secondTriggerName = triggerName.ToUpperInvariant().EndsWith("_I") ? triggerName.Substring(0, triggerName.Length - 2) + "_U" :
                                                                         triggerName.Substring(0, triggerName.Length - 2) + "_I";
            List<string> statements = new List<string>();
            statements.Add(String.Format("drop trigger if exists {0}", Identifiers.EscapeAndQualifyIdentifier(existingTrigger.TableSource.Database, triggerName)));
            statements.Add(String.Format("drop trigger if exists {0}", Identifiers.EscapeAndQualifyIdentifier(existingTrigger.TableSource.Database, secondTriggerName)));
            return statements;
        }


        public override IEnumerable<string> CreateColumn(IPlatformTableSourceColumnInfo newColumn, string defaultValue) {
            IList<string> statements = new List<string>();
  
            string addColumnStatement = string.Format("ALTER TABLE {0} ADD COLUMN ({1})", Identifiers.EscapeIdentifier(newColumn.TableSource.Name), 
                GetColumnDefinition(newColumn, defaultValue));

            statements.Add(addColumnStatement);

            if (newColumn.IsPrimaryKey) {
                statements.AddRange(CreatePrimaryKey(newColumn.TableSource, newColumn));
            }

            if (newColumn.IsAutoGenerated) {
                statements.AddRange(SetColumnToAutonumber(newColumn));
            }

            return statements;
        }

        protected override bool UseDefaultValue(IPlatformTableSourceColumnInfo column, string defaultValue) {
            //mysql running on windows doesn't support default values on text columns 
            if (column.DataType.Type == DBDataType.TEXT && column.DataType.Length > 2000) {
                return false;
            } else return base.UseDefaultValue(column, defaultValue);
        }

        public override IEnumerable<string> AlterColumn(IPlatformTableSourceColumnInfo existingColumn, IPlatformTableSourceColumnInfo newColumn, 
                string defaultValue) {

            string errorMessage;

            if (!CanAlterColumn(existingColumn, newColumn, out errorMessage)) {
                throw new InvalidOperationException(errorMessage);
            }

            var result = new List<string>();

            if (UseDefaultValue(newColumn, defaultValue) || (existingColumn.IsMandatory != newColumn.IsMandatory)
                    || !existingColumn.DataType.Equals(newColumn.DataType)) {

                bool isMandatory = GetFinalMandatoryValue(newColumn, defaultValue, newColumn.IsMandatory);
                string isMandatoryStatement = isMandatory == existingColumn.IsMandatory ? "" : (isMandatory ? " NOT NULL" : " NULL");

                string statement = String.Format("ALTER TABLE {0} MODIFY {1} {2}{3}{4};", existingColumn.TableSource.QualifiedName,
                    Identifiers.EscapeIdentifier(existingColumn.Name), newColumn.DataType.SqlDataType,
                    isMandatoryStatement,
                    UseDefaultValue(newColumn, defaultValue) ? " DEFAULT " + defaultValue : String.Empty);

                result.Add(statement);
            }

            if (newColumn.IsPrimaryKey && !existingColumn.IsPrimaryKey) {
                result.AddRange(CreatePrimaryKey(newColumn.TableSource, newColumn));
            }
            
            if (newColumn.IsAutoGenerated && !existingColumn.IsAutoGenerated) {
                result.AddRange(SetColumnToAutonumber(existingColumn));
            }

            return result;
        }

        // we are not implementing this because it's only used for disabling external triggers when adding a new column to a table
        //all other uses of this capability are legacy uses
        //also implementing this in MySQL at the time of writing is almost impossible to do safely
        public override IEnumerable<string> DisableTriggers(ITableSourceInfo existingTableSource) {
            return Enumerable.Empty<string>();
        }

        public override IEnumerable<string> EnableTriggers(ITableSourceInfo existingTableSource) {
            return Enumerable.Empty<string>();
        }

        //TODO: dvn hack - no check option for now until it can be safely set for all views
        public override IEnumerable<string> CreateOrReplaceView(ITableSourceInfo newView, string viewSQL, bool withCheckOption) {
            return String.Format("CREATE OR REPLACE VIEW {0} AS {1}", newView.QualifiedName, viewSQL).ToEnumerable();
        }

        //dvn: mysql has runtime permissions granted schema wide and doesn't support MDC so no need to generate grant statements
        public override IEnumerable<string> GrantPermissions(ITableSourceInfo existingTableSource, string username, Permissions permissions) {
            return Enumerable.Empty<string>();
        }
        
        public override bool ForeignKeyRequiresIndex {
            get { return true; }
        }
    }
}
