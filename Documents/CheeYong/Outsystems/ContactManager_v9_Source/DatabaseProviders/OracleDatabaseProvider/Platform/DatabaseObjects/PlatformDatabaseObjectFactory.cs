/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using OutSystems.HubEdition.DatabaseProvider.Oracle.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.DMLService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.DatabaseObjects {
    public class PlatformDatabaseObjectFactory : DatabaseObjectFactory, IPlatformDatabaseObjectFactory {
        
        public PlatformDatabaseObjectFactory(IDatabaseServices databaseServices) : base(databaseServices) { }

        public ITableSourceInfo CreateLocalTableSourceInfo(string tableName) {
            return new TableSourceInfo(databaseServices, (DatabaseInfo)CreateLocalDatabaseInfo(), tableName, 
                ((IPlatformDatabaseServices) databaseServices).DMLService.Identifiers.EscapeAndQualifyIdentifierForLocalDatabase(tableName));
        }

        public IPlatformDataTypeInfo CreateDataTypeInfo(DBDataType dataType, int length, int decimals) {
            return new PlatformDataTypeInfo(dataType, GetSqlDataType(dataType, length, decimals), length, decimals);
        }

        public IPlatformTableSourceColumnInfo CreateColumnInfo(ITableSourceInfo tableSource, string name, IPlatformDataTypeInfo dataType, bool isMandatory, bool isPrimaryKey, bool isAutoGenerated) {
            return new PlatformTableSourceColumnInfo(tableSource, name, dataType, isMandatory, isPrimaryKey, isAutoGenerated);
        }

        public ITableSourceForeignKeyInfo CreateForeignKeyInfo(ITableSourceInfo tableSource, string foreignKeyName, string columnName, 
                ITableSourceInfo referencedTableSource, string referencedColumnName, bool isCascadeDelete) {

            foreignKeyName = String.IsNullOrEmpty(foreignKeyName)? 
                this.GetNewForeignKeyName(databaseServices, tableSource.Name, referencedTableSource.Name, columnName): foreignKeyName;

            return new TableSourceForeignKeyInfo(tableSource, foreignKeyName, columnName, referencedTableSource, referencedColumnName, isCascadeDelete);
        }

        public IPlatformTableSourceIndexInfo CreateIndexInfo(ITableSourceInfo tableSource, string indexName, 
                IEnumerable<IPlatformTableSourceColumnInfo> columns, IEnumerable<ITableSourceForeignKeyInfo> foreignKeys, bool isUnique, 
                bool isPrimaryKey) {

            var platformTableSourceColumnInformations = (columns as IList<IPlatformTableSourceColumnInfo>)?? columns.ToList();

            indexName = String.IsNullOrEmpty(indexName)? this.GetNewIndexName(databaseServices, tableSource.Name, platformTableSourceColumnInformations): 
                indexName;

            var index = new PlatformTableSourceIndexInfo(tableSource, indexName, isUnique, isPrimaryKey);
            foreach (var column in platformTableSourceColumnInformations) {
                index.AddColumn(column, column.DataType.Type == DBDataType.TEXT && !foreignKeys.Any(fk => fk.ColumnName.EqualsIgnoreCase(column.Name)));
            }
            return index;
        }

        public IPlatformTableSourceEventTriggerInfo CreateTriggerInfo(ITableSourceInfo tableSource) {
            var triggerName = this.GetNewEventTriggerName(databaseServices, tableSource.Name);
            return new PlatformTableSourceTriggerInfo(tableSource, triggerName);
        }

        private static string GetSqlDataType(DBDataType dataType, int length, int decimals) {
            switch (dataType) {
                case DBDataType.DATE_TIME:
                case DBDataType.DATE:
                case DBDataType.TIME:
                    return "TIMESTAMP";
                case DBDataType.DECIMAL:
                    return string.Format("NUMBER({0},{1})", length, decimals);
                case DBDataType.INTEGER:
                    return "NUMBER(10)";
                case DBDataType.LONGINTEGER:
                    return "NUMBER(20)";
                case DBDataType.TEXT:
                    return length <= PlatformDataTypeInfo.VARCHAR_MAXLENGTH ? "VARCHAR2(" + length + ")" : "CLOB";
                case DBDataType.BOOLEAN:
                    return "NUMBER(1)";
                case DBDataType.BINARY_DATA:
                    return "BLOB";
                default:
                    return "<UnknownType>";
            }
        }
    }
}
