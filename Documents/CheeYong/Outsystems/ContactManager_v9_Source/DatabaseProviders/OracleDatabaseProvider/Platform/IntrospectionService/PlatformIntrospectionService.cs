/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.Oracle.DatabaseObjects;
using OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.IntrospectionService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.IntrospectionService {

    public class PlatformIntrospectionService : Oracle.IntrospectionService.IntrospectionService, IPlatformIntrospectionService {
        private readonly IPlatformDatabaseServices databaseServices;

        IPlatformDatabaseServices IPlatformIntrospectionService.DatabaseServices {
            get {
                return databaseServices;
            }
        }

        private IEnumerable<IPlatformTableSourceColumnInfo> GetColumns(IEnumerable<TableSourceInfo> tableSourceList, DatabaseInfo dbInfo) {
            IEnumerable<ITableSourceColumnInfo> columns = GetColumns(tableSourceList, dbInfo, GetPlatformAutoNumberColumnInfoFromTrigger,
                GetPlatformDataTypeInfo, GetPlatformColumnInfo);

            return columns.Cast<IPlatformTableSourceColumnInfo>();
        }

        public PlatformIntrospectionService(IPlatformDatabaseServices databaseServices) : base(databaseServices) {
            this.databaseServices = databaseServices;
        }

        public override bool IncludeDatabaseLinks {
            get {
                return true;
            }
        }

        public IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> GetTableSourcesDetails(params ITableSourceInfo[] tables) {
            var tablesDetails = new Dictionary<ITableSourceInfo, IPlatformTableSourceInfo>();

            if (tables.IsEmpty()) {
                return tablesDetails;
            }

            var dbInfo = (DatabaseInfo)databaseServices.ObjectFactory.CreateLocalDatabaseInfo();

            if (UseSplitMethod()) {
                foreach (var tableSource in tables.OfType<TableSourceInfo>()) {
                    tablesDetails.Add(tableSource, GetTableInfoColumnsAndKeys(tableSource, dbInfo));
                }
            } else {
                var tableSourceList = tables.OfType<TableSourceInfo>().ToList();
                var tableSourcesColumns = new Dictionary<string, IList<IPlatformTableSourceColumnInfo>>();

                foreach (IPlatformTableSourceColumnInfo column in GetColumns(tableSourceList, dbInfo)) {
                    string tableName = ((TableSourceInfo)column.TableSource).Name.ToUpperInvariant();
                    IList<IPlatformTableSourceColumnInfo> tableColumns;
                    if (!tableSourcesColumns.TryGetValue(tableName, out tableColumns)) {
                        tableColumns = new List<IPlatformTableSourceColumnInfo>();
                        tableSourcesColumns[tableName] = tableColumns;
                    }
                    tableColumns.Add(column);
                }

                var tableSourcesForeignKeys = new Dictionary<string, IList<ITableSourceForeignKeyInfo>>();
                foreach (var foreignKey in GetForeignKeys(tableSourceList, dbInfo)) {
                    string tableName = ((TableSourceInfo)foreignKey.TableSource).Name.ToUpperInvariant();
                    IList<ITableSourceForeignKeyInfo> tableFKeys;
                    if (!tableSourcesForeignKeys.TryGetValue(tableName, out tableFKeys)) {
                        tableFKeys = new List<ITableSourceForeignKeyInfo>();
                        tableSourcesForeignKeys[tableName] = tableFKeys;
                    }
                    tableFKeys.Add(foreignKey);
                }

                foreach (var tableSource in tableSourceList) {
                    var info = new PlatformTableSourceInfo(tableSource);

                    info.Columns = tableSourcesColumns.GetValueOrDefault(tableSource.Name.ToUpperInvariant()) ??
                        new List<IPlatformTableSourceColumnInfo>();

                    info.ForeignKeys = tableSourcesForeignKeys.GetValueOrDefault(tableSource.Name.ToUpperInvariant()) ??
                        new List<ITableSourceForeignKeyInfo>();

                    tablesDetails.Add(tableSource, info);
                }
            }
            InitializeIndexes(tablesDetails);
            InitializeTriggers(tablesDetails, dbInfo);
            return tablesDetails;
        }

        private bool UseSplitMethod() {
            var databaseConfig = databaseServices.DatabaseConfiguration as RuntimeDatabaseConfiguration;
            if (databaseConfig != null) {
                switch (databaseConfig.IntrospectionMethod) {
                    case "split":
                        return true;

                    case "join":
                        return false;
                }
            }
            string oracleVersion = GetDatabaseVersion();
            if (!oracleVersion.IsEmpty()) {
                if (oracleVersion.StartsWith("10.", StringComparison.InvariantCultureIgnoreCase)) {
                    return false;
                }
            }
            return true;
        }

        private string GetDatabaseVersion() {
            using (var conn = databaseServices.TransactionService.CreateConnection()) {
                const string sql = @"SELECT VERSION FROM PRODUCT_COMPONENT_VERSION WHERE UPPER(PRODUCT) LIKE '%DATABASE%'";
                using (var cmd = databaseServices.ExecutionService.CreateCommand(conn, sql)) {
                    cmd.CommandTimeout = QueryTimeout;
                    return Convert.ToString(cmd.ExecuteScalar());
                }
            }
        }

        private PlatformTableSourceInfo GetTableInfoColumnsAndKeys(TableSourceInfo tableSource, DatabaseInfo dbInfo) {
            // All versions use this code with the exception of 10g that uses GetTableInfo above.
            var tableSourceDetails = new PlatformTableSourceInfo(tableSource);
            tableSourceDetails.Columns = GetColumns(tableSource.ToEnumerable(), dbInfo);
            tableSourceDetails.ForeignKeys = GetForeignKeys(tableSource.ToEnumerable(), dbInfo);
            return tableSourceDetails;
        }

        private void InitializeIndexes(IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> tablesDetails) {
            PlatformTableSourceIndexInfo currentIndex = null;
            var execService = databaseServices.ExecutionService as Oracle.ExecutionService.ExecutionService;
            using (var conn = databaseServices.TransactionService.CreateConnection()) {
                // #417717 - In these queries we don't want to use the CIAI settings
                if (execService != null) {
                    execService.ForceCSASSetting(conn);
                }

                using (var cmd = execService.CreateCommand(conn, GetIndexesStatement(tablesDetails.Keys.Cast<TableSourceInfo>()))) {
                    cmd.CommandTimeout = QueryTimeout;
                    using (var reader = databaseServices.ExecutionService.ExecuteReader(cmd)) {
                        while (reader.Read()) {
                            string tableName = Convert.ToString(reader["TABLE_NAME"]).ToUpperInvariant();
                            string indexName = Convert.ToString(reader["INDEX_NAME"]).ToUpperInvariant();
                            var tableSource = (PlatformTableSourceInfo)tablesDetails.Values.FirstOrDefault(t => t.Name.EqualsIgnoreCase(tableName));
                            if (tableSource == null) {
                                continue;
                            }

                            // If this is the first index or if it is different from the current index, add it to the list
                            if (currentIndex == null || !indexName.EqualsIgnoreCase(currentIndex.Name) || !tableName.EqualsIgnoreCase(currentIndex.TableSource.Name)) {
                                bool isPrimaryKey = Convert.ToString(reader["CONSTRAINT_TYPE"]).EqualsIgnoreCase("P");
                                bool isUnique = Convert.ToString(reader["UNIQUENESS"]).EqualsIgnoreCase("UNIQUE");
                                currentIndex = new PlatformTableSourceIndexInfo(tableSource, indexName, isUnique, isPrimaryKey);
                                tableSource.AddIndex(currentIndex);
                            }

                            // If a function index was created, COLUMN_NAME should be something like SYS_NC0003$ and COLUMN_EXPRESSION should be something like:
                            // - NLSSORT("COLUMN NAME", 'NLS_COMP=BINARY_AI') or
                            // - CASE "CREATIONDATE" WHEN TIMESTAMP '1900-01-01 00:00:00.000000000' THEN NULL ELSE "CREATIONDATE" END (example)
                            string columnName = Convert.ToString(reader["COLUMN_NAME"]).ToUpperInvariant();
                            string expression = Convert.ToString(reader["COLUMN_EXPRESSION"]);
                            var columnsFromExpression = TryGetColumnsFromExpression(indexName, expression, tableSource.Columns);
                            if (columnsFromExpression.IsEmpty()) {
                                currentIndex.AddColumn(tableSource.Columns.Single(col => col.Name.EqualsIgnoreCase(columnName)), /*isFunctionIndex*/false);
                            } else {
                                columnsFromExpression.Apply(c => { currentIndex.AddColumn(c, /*isFunctionIndex*/true); });

                                columnsFromExpression.Apply(c => {
                                    if (c.IsPrimaryKey) {
                                        PlatformTableSourceColumnInfo colInfo = c as PlatformTableSourceColumnInfo;
                                        colInfo.HasCIAI_Index = true;
                                    }
                                });
                            }
                        }
                    }
                }
            }
        }

        static Regex columnNameRegex;
        static Regex ColumnNameRegex {
            get {
                if (columnNameRegex == null) {
                    // Regex to look for tokens inside double quotes, filtering out the actual double quotes using non-capturning groups.
                    columnNameRegex = new Regex("(?:\")(.+?)(?:\")", RegexOptions.CultureInvariant | RegexOptions.Compiled);
                }
                return columnNameRegex;
            }
        }

        static IEnumerable<IPlatformTableSourceColumnInfo> TryGetColumnsFromExpression(string indexName, string columnExpression, IEnumerable<IPlatformTableSourceColumnInfo> columns) {
            var setOfColumns = new HashSet<IPlatformTableSourceColumnInfo>();
            try {
                var matches = ColumnNameRegex.Matches(columnExpression);
                foreach (Match match in matches) {
                    // Second group matches the capturing group in the regex above (first group matches the whole regex).
                    var column = columns.SingleOrDefault(c => c.Name.EqualsIgnoreCase(match.Groups[1].Value));
                    if (column != null) {
                        // Workaround for yield return inside try-catch block.
                        setOfColumns.Add(column);
                    } else {
                        OSTrace.Info("Unable to find a column in index {0} with expression {1}".F(indexName, columnExpression));
                    }
                }
            } catch (Exception e) {
                // No need to propagete the exception. Just tolerate the error and proceed.
                // The result is a possible inconsistency warning while publishing.
                OSTrace.Error("Error while parsing index {0} with expression {1}".F(indexName, columnExpression), e);
            }
            return setOfColumns.AsEnumerable();
        }

        string GetIndexesStatement(IEnumerable<TableSourceInfo> tableSources) {
            string tableNameFilter = string.Empty;
            var tableSourceList = tableSources.ToList();

            if (tableSources != null && !tableSourceList.IsEmpty() && tableSourceList.Count() < 1000) {
                string tableNames = "'" + tableSourceList.Select(t => t.Name).StrCat("','") + "'";
                tableNameFilter = "AND ai.table_name in (" + tableNames + ") ";
            }

            return @"select ai.table_name, ai.index_name, ac.constraint_type, ai.uniqueness, aic.column_name, aie.column_expression, aic.column_position
                from user_indexes ai 
                left join user_ind_columns aic on ai.index_name = aic.index_name 
                left join user_ind_expressions aie on aic.index_name = aie.index_name and aie.column_position = aic.column_position
                left join user_constraints ac on ac.table_name = ai.table_name AND ac.constraint_name = ai.index_name
                where aic.index_name = ai.index_name " + tableNameFilter + @"
                order by table_name,index_name,column_position, ac.constraint_name";
        }

        private void InitializeTriggers(IDictionary<ITableSourceInfo, IPlatformTableSourceInfo> tablesDetails, DatabaseInfo dbInfo) {
            using (var conn = databaseServices.TransactionService.CreateConnection()) {
                var tableSources = tablesDetails.Keys.Cast<TableSourceInfo>();
                const string filterByPrefix = PlatformDatabaseObjectConstants.EventTriggerPrefix;

                using (var reader = GetTriggersBulk(conn, tableSources, /*onlyAutoNumbers*/false, filterByPrefix, dbInfo)) {
                    while (reader.Read()) {
                        string tableName = Convert.ToString(reader["table_name"]).ToUpperInvariant();
                        var tableSource = (PlatformTableSourceInfo)tablesDetails.Values.FirstOrDefault(t => t.Name.EqualsIgnoreCase(tableName));

                        if (tableSource != null) {
                            string triggerName = Convert.ToString(reader["trigger_name"]).ToUpperInvariant();
                            tableSource.EventTrigger = new PlatformTableSourceTriggerInfo(tableSource, triggerName);
                        }
                    }
                }
            }
        }

        private static PlatformTableSourceColumnInfo GetPlatformColumnInfo(TableSourceInfo tableSource, string columnName, DataTypeInfo dataType,
            bool isMandatory, bool isPrimaryKey, AutoNumberColumnInfo autoNumberInfo) {

            return new PlatformTableSourceColumnInfo(tableSource, columnName, (PlatformDataTypeInfo)dataType, isMandatory, isPrimaryKey, autoNumberInfo);
        }

        private AutoNumberColumnInfo GetPlatformAutoNumberColumnInfoFromTrigger(string triggerType, string triggeringEvent,
            string triggerName, string triggerBody) {
            // Only support auto-number triggers generated by the platform
            if (triggerName.StartsWith(DDLService.DDLService.AUTO_NUMBER_TRIGGER_PREFIX, StringComparison.InvariantCultureIgnoreCase) &&
                !triggerName.StartsWith(PlatformDatabaseObjectConstants.EventTriggerPrefix, StringComparison.InvariantCultureIgnoreCase)) {
                var autoNumberInfo = GetAutoNumberColumnInfoFromTrigger(triggerType, triggeringEvent, triggerName, triggerBody);
                if (autoNumberInfo != null) {
                    autoNumberInfo.TriggerName = triggerName;
                    autoNumberInfo.SequenceName = ParseSequenceNameFromTrigger(triggerBody);
                    return autoNumberInfo;
                }
            }
            return null;
        }

        protected string ParseSequenceNameFromTrigger(string triggerBody) {
            int seqIndex = triggerBody.IndexOf(DDLService.DDLService.AUTO_NUMBER_SEQUENCE_PREFIX, StringComparison.InvariantCultureIgnoreCase);
            if (seqIndex == -1) {
                return null;
            }
            return triggerBody.Substring(seqIndex, triggerBody.IndexOfIgnoreCase(".", seqIndex) - seqIndex).Trim('"');
        }

        private static DataTypeInfo GetPlatformDataTypeInfo(string type, int length, int precision, int scale) {
            DBDataType dataType;
            int columnLength = 0, columnDecimals = 0;
            string typeToCheck = type.ToLower();
            switch (typeToCheck) {
                case "blob":
                    dataType = DBDataType.BINARY_DATA;
                    break;
                case "nclob":
                case "clob":
                    dataType = DBDataType.TEXT;
                    columnLength = int.MaxValue;
                    break;
                case "number":
                    if (precision == 1) {
                        dataType = DBDataType.BOOLEAN;
                    } else if (precision == 10 && scale == 0) {
                        dataType = DBDataType.INTEGER;
                    } else if (precision == 20 && scale == 0) {
                        dataType = DBDataType.LONGINTEGER;
                    } else {
                        dataType = DBDataType.DECIMAL;
                        columnLength = precision;
                        columnDecimals = scale;
                    }
                    type += "(" + precision + (scale == 0 ? string.Empty : "," + scale) + ")";
                    break;
                case "timestamp":
                case "timestamp(6)":
                    dataType = DBDataType.DATE_TIME;
                    break;
                case "varchar2":
                case "nvarchar2":
                    dataType = DBDataType.TEXT;
                    columnLength = length;
                    type += "(" + precision + ")";
                    break;
                default:
                    dataType = DBDataType.UNKNOWN;
                    break;
            }
            return new PlatformDataTypeInfo(dataType, type.ToUpperInvariant(), columnLength, columnDecimals);
        }

        public IDictionary<string, bool> CheckTableSourcesExist(params string[] tableSourcesNames) {
            var tableSourcesFound = new HashSet<string>();
            var tableSourceNamesList = tableSourcesNames.ToList();
            if (tableSourceNamesList.IsEmpty()) {
                return null;
            }

            using (var conn = databaseServices.TransactionService.CreateConnection()) {
                string conditionParam;
                string conditionValue;
                string tableCondition = GenerateTableCondition(tableSourceNamesList, out conditionParam, out conditionValue);
                string sql = string.Format(@"SELECT table_name FROM user_tables WHERE UPPER(table_name) {0}
                                             UNION
                                             SELECT view_name FROM user_views WHERE UPPER(view_name) {0}", tableCondition.ToUpper());
                using (var cmd = databaseServices.ExecutionService.CreateCommand(conn, sql)) {
                    if (!conditionParam.IsEmpty()) {
                        databaseServices.ExecutionService.CreateParameter(cmd,
                            databaseServices.ExecutionService.ParameterPrefix + conditionParam, DbType.String, conditionValue.ToUpper());
                    }
                    cmd.CommandTimeout = QueryTimeout;
                    using (var reader = databaseServices.ExecutionService.ExecuteReader(cmd)) {
                        while (reader.Read()) {
                            tableSourcesFound.Add(Convert.ToString(reader["table_name"]).ToUpper());
                        }
                    }
                }
            }

            var result = new Dictionary<string, bool>();
            foreach (var tableSource in tableSourceNamesList) {
                result.Add(tableSource, tableSourcesFound.Contains(tableSource.ToUpper()));
            }
            return result;
        }

        public int GetDatabaseObjectsDefinitionHash(string objectNameFilter) {
            int hashResult;
            using (var conn = databaseServices.TransactionService.CreateConnection()) {
                string sql = string.Format(@"SELECT ORA_HASH(MAX(LAST_DDL_TIME) || (MAX(TIMESTAMP)) || COUNT(OBJECT_NAME))
                                             FROM USER_OBJECTS
                                             WHERE UPPER(OBJECT_NAME) LIKE UPPER('%{0}%')", objectNameFilter);
                using (var cmd = databaseServices.ExecutionService.CreateCommand(conn, sql)) {
                    cmd.CommandTimeout = QueryTimeout;
                    hashResult = Convert.ToString(databaseServices.ExecutionService.ExecuteScalar(cmd)).GetHashCode();
                }
            }
            return hashResult;
        }
    }
}
