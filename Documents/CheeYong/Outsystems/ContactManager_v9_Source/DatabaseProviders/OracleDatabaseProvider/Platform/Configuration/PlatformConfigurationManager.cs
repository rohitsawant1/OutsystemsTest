/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.Configuration {
    public class PlatformConfigurationManager : BasePlatformConfigurationManager {
        public PlatformConfigurationManager(IPlatformDatabaseConfiguration uiConfiguration)
            : base(uiConfiguration) { }

        public override bool RecommendDatabaseBackup {
            get { return true; }
        }

        public override FileStream StreamForScriptFile {
            get {
                string path = Path.Combine(Script_Path, "platform_model_oracle.sql");
                return new FileStream(path, FileMode.Open, FileAccess.Read);
            }
        }

        private static readonly Regex _osAdminTablespaceRegex = new Regex(@"TABLESPACE\s*""OSSYS""",
            RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        private static readonly Regex _osIndexTablespaceRegex = new Regex(@"TABLESPACE\s*""OSIDX""",
            RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        private static readonly Regex _osRuntimeTablespaceRegex = new Regex(@"TABLESPACE\s*""OSUSR""",
            RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        private static readonly Regex _osAdminUserRegex = new Regex(@"HubAdmin",
            RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        private static readonly Regex _osRuntimeUserRegex = new Regex(@"HubRuntime",
            RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        private static readonly Regex _wheneverSqlErrorRe = new Regex(@"WHENEVER SQLERROR EXIT;",
            RegexOptions.IgnoreCase | RegexOptions.Compiled);

        private static readonly Regex _commitRe = new Regex(@"COMMIT;", RegexOptions.IgnoreCase | RegexOptions.Compiled);
        private static readonly Regex _exitRe = new Regex(@"EXIT;", RegexOptions.IgnoreCase | RegexOptions.Compiled);

        private static readonly Regex _createIndexRegex = new Regex("create (unique )?index",
            RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        private Hashtable _indexes = new Hashtable(128);

        public override string ProcessStatement(string statement) {
            PlatformDatabaseConfiguration config = (PlatformDatabaseConfiguration)uiConfiguration;
            statement = statement.Trim();

            statement = _wheneverSqlErrorRe.Replace(statement, "");
            statement = _commitRe.Replace(statement, "");
            statement = _exitRe.Replace(statement, "");
            statement = _osAdminTablespaceRegex.Replace(statement, @"TABLESPACE """ + config.AdminTablespace + @"""");
            statement = _osIndexTablespaceRegex.Replace(statement, @"TABLESPACE """ + config.IndexTablespace + @"""");
            statement = _osRuntimeTablespaceRegex.Replace(statement, @"TABLESPACE """ + config.RuntimeTablespace + @"""");
            statement = _osAdminUserRegex.Replace(statement, config.AdminUser);
            statement = _osRuntimeUserRegex.Replace(statement, config.RuntimeUser);

            // Remove trailing ';' chars (unless it's an BEGIN...END statement)
            if (statement.EndsWith(";") && !statement.ToUpper().EndsWith("END;")) {
                statement = statement.TrimEnd(';');
            }

            if (((RuntimeDatabaseConfiguration)((PlatformDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(Source.Services, UserType.Admin)).CI_AI &&
                _createIndexRegex.IsMatch(statement)) {
                statement = MangleIndexStatement(statement, _indexes);
            }

            // Remove line breaks
            statement = statement.Replace(Environment.NewLine, " ");

            return statement;
        }

        private string MangleIndexStatement(string original, Hashtable conversion) {
            int startPos = original.IndexOf(" INDEX ") + " INDEX ".Length;
            int endPos = original.IndexOf(" ON ");
            string indexName = original.Substring(startPos, endPos - startPos);
            if (conversion.ContainsKey(indexName)) {
                foreach (string field in (string[])conversion[indexName]) {
                    Regex processIndexRegex = new Regex("(?<=[^a-zA-Z0-9$_])" + field + "(?=[^a-zA-Z0-9$_])",
                        RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);
                    original = processIndexRegex.Replace(original, "NLSSORT(" + field + ",'NLS_SORT=BINARY_AI')");
                }
            }
            return original;
        }

        protected override bool IsStatement(string tag, string tagValue) {
            if (base.IsStatement(tag, tagValue))
                return true;
            // Process INVARIANT_INDEX tags
            if (((Tag)Enum.Parse(typeof(Tag), tag)) == Tag.INVARIANT_INDEX) {
                string indexName;
                string[] indexFields;
                IndexFieldsFromTagContent(tagValue, out indexName, out indexFields);
                _indexes[indexName] = indexFields;
                return true;
            }
            return false;
        }

        protected override bool ValidateStatement(string sourceLine, string tagName) {
            if (!base.ValidateStatement(sourceLine, tagName)) {
                return false;
            }
            if (tagName == "") {
                return true;
            }
            Tag tagEnum = (Tag)Enum.Parse(typeof(Tag), tagName);
            if (tagEnum == Tag.INVARIANT_INDEX) {
                return false;
            }
            return true;
        }

        private void IndexFieldsFromTagContent(string tagContent, out string indexName, out string[] fields) {
            string[] tagSplit = tagContent.Split(':');
            indexName = tagSplit[0].Trim();
            fields = tagSplit[1].Replace(" ", "").Split(',');
        }

        public override void Pre_CreateOrUpgradePlatform() {
            //this is implemented, Oracle does not have any behavior
        }

        public override string StatementSeparator {
            get { return "/"; }
        }

        public override IEnumerable<Block> ExtraDatabaseStatements(Version currentModelVersion) {
            var newBlock = new Block();
            newBlock.SetTagValue(Tag.END_IGNORING_BLOCK.ToString(), "");
            var adminRuntimeConf = (RuntimeDatabaseConfiguration)((PlatformDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(Source.Services, UserType.Admin);
            string replaceGetDateStatement = "CREATE OR REPLACE FUNCTION getdate RETURN TIMESTAMP AS BEGIN RETURN (" +
                                             adminRuntimeConf.DateFunction + "); END;";
            newBlock.AddStatement(replaceGetDateStatement);

            yield return newBlock;
        }

        public override bool TestAdminConnection(out string friendlyMessage, Source source) {
            bool success = base.TestAdminConnection(out friendlyMessage, source);
            if (success) {
                success = TestConnectionUtils.CheckTablespaceExists(((PlatformDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(source, UserType.Admin) as RuntimeDatabaseConfiguration,
                    true, out friendlyMessage);
            }
            return success;
        }

        public override bool TestRuntimeConnection(out string friendlyMessage, Source source) {
            bool success = base.TestRuntimeConnection(out friendlyMessage, source);
            if (success) {
                success = TestConnectionUtils.CheckTablespaceExists(((PlatformDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(source, UserType.Runtime) as RuntimeDatabaseConfiguration,
                    false, out friendlyMessage);
            }
            return success;
        }

        public override int QueryTimeout {
            get {
                return base.QueryTimeout;
            }
            set {
                base.QueryTimeout = value;
                TestConnectionUtils.QueryTimeout = value;
            }
        }
    }
}
