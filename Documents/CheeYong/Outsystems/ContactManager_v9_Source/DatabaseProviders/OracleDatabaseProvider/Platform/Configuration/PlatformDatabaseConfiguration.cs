/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Net;
using System.Text;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.Configuration {

    public sealed class PlatformDatabaseConfiguration : BasePlatformDatabaseConfiguration {

        public enum NamingMethod { Service_Name, TNS_Name };

        public override IPlatformDatabaseProvider DatabaseProvider {
            get { return Platform.PlatformDatabaseProvider.Instance; }
        }

        private const int DEFAULT_PORT_VALUE = 1521;
        private const string DEFAULT_HOST_NAME = "localhost";
        private const string DEFAULT_INTROSPECTION_METHOD = "auto";
        private const bool DEFAULT_CI_AI = true;
        private const string DEFAULT_DATE_FUNCTION = "CURRENT_TIMESTAMP";
        private const int DEFAULT_DDL_LOCKTIMEOUT = 600;
        private const string DEFAULT_NLS_TERRITORY = "AMERICA";
        private const string DEFAULT_ADVANCED_SETTINGS_NET = "Incr Pool Size=1;";

        public PlatformDatabaseConfiguration() {
            Port = DEFAULT_PORT_VALUE;
            Host = DEFAULT_HOST_NAME;
            IntrospectionMethod = DEFAULT_INTROSPECTION_METHOD;
            CI_AI = DEFAULT_CI_AI;
            DDLLockTimeout = DEFAULT_DDL_LOCKTIMEOUT;
            DateFunction = DEFAULT_DATE_FUNCTION;
            NLS_Territory = DEFAULT_NLS_TERRITORY;
            RuntimeAdvancedSettings = DEFAULT_ADVANCED_SETTINGS_NET;
            ServicesAdvancedSettings = DEFAULT_ADVANCED_SETTINGS_NET;
        }

        public override AuthenticationType AuthenticationMode {
            get { return AuthenticationType.Database_Authentication; }
            set { }
        }
        
        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration(Source source, UserType userType) {
            switch (userType) {
                case UserType.Admin:
                    return AdminUserRuntimeConfiguration(source);
                case UserType.Runtime:
                    return RuntimeUserRuntimeConfiguration(source);
                default:
                    throw new NotSupportedException(@"Unexpected user type " + userType.ToString());
            }
        }

        [ConfigurationParameter]
        public string IntrospectionMethod { get; set; }

        [ConfigurationParameter]
        public bool CI_AI { get; set; }

        [ConfigurationParameter]
        public string DateFunction { get; set; }

        [ConfigurationParameter]
        public int DDLLockTimeout {  get; set; }


        #region ConnectionString Assemblage
        private const string _usernamePart = "user id={0};";
        private const string _passwordPart = "password={0};";
        private const string _datasourcePart = "data source={0}/{1};";
        private const string _datasourceWithPortPart = "data source={0}:{1}/{2};";
        private const string _datasourcePartForTNS = "data source={0};";

        private string ConnectionString(Source source, NetworkCredential userCredentials) {
            var connStr = new StringBuilder();

            connStr.Append(string.Format(_usernamePart, userCredentials.UserName))
                .Append(string.Format(_passwordPart, userCredentials.Password));
            if (IsServiceName()) {

                if (Port == DEFAULT_PORT_VALUE) {
                    connStr.Append(string.Format(_datasourcePart, Host, ServiceName));
                } else {
                    connStr.Append(string.Format(_datasourceWithPortPart, Host, Port, ServiceName));
                }

            } else {
                connStr.Append(string.Format(_datasourcePartForTNS, TNSName));
            }
            connStr.Append(Source.Application.Equals(source) ? RuntimeAdvancedSettings : ServicesAdvancedSettings);

            return connStr.ToString();
        }
        #endregion

        #region DatabaseLocation

        [UserDefinedConfigurationParameter(Label = "Naming Method", IsMandatory = true, Order = 0, Region = ParameterRegion.DatabaseLocation, Prompt = "Naming Method")]
        [HelpLinkForEnumConfigurationParameter(EnumValue = "TNS_Name", Text = "More Info", Url = @"http://www.outsystems.com/goto/oracle-tns-configuration")]
        [HelpLinkForEnumConfigurationParameter(EnumValue = "Service_Name", Text = "More Info", Url = @"http://www.outsystems.com/goto/oracle-tns-configuration")]
        public NamingMethod NamingType { get; set; }

        public bool IsServiceName() { return NamingType.Equals(NamingMethod.Service_Name); }
        public bool IsTNSName() { return NamingType.Equals(NamingMethod.TNS_Name); }

        [UserDefinedConfigurationParameter(Label = "TNS Name", VisibilityChecker = "IsTNSName", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation, Prompt = "TNS Name")]
        public string TNSName { get; set; }

        [UserDefinedConfigurationParameter(Label = "Host", VisibilityChecker = "IsServiceName", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation, Prompt = "Host")]
        public string Host { get; set; }

        [UserDefinedConfigurationParameter(Label = "Port", VisibilityChecker = "IsServiceName", IsMandatory = true, Order = 2, Region = ParameterRegion.DatabaseLocation, Prompt = "Port")]
        public int Port { get; set; }

        [UserDefinedConfigurationParameter(Label = "Service Name", VisibilityChecker = "IsServiceName", IsMandatory = true, Order = 3, Region = ParameterRegion.DatabaseLocation, Prompt = "Service Name")]
        public string ServiceName { get; set; }
        #endregion

        #region Admin

        private string adminTablespace;
        private string indexTablespace;

        [UserDefinedConfigurationParameter(Label = "Tablespace", IsMandatory = true, Order = 3, Region = ParameterRegion.UserAdminSpecific, Prompt = "Admin tablespace")]
        public string AdminTablespace {
            get {
                return adminTablespace ?? "OSSYS";
            }
            set {
                adminTablespace = value.ToUpper();
            }
        }

        [UserDefinedConfigurationParameter(Label = "Index Tablespace", IsMandatory = true, Order = 4, Region = ParameterRegion.UserAdminSpecific, Prompt = "Index tablespace")]
        public string IndexTablespace {
            get {
                return indexTablespace ?? "OSIDX";
            }
            set {
                indexTablespace = value.ToUpper();
            }
        }

        private IRuntimeDatabaseConfiguration AdminUserRuntimeConfiguration(Source source) {
            return new RuntimeDatabaseConfiguration(DatabaseProvider) {
                ConnectionString = ConnectionString(source, AdminAuthenticationCredential),
                Tablespace = AdminTablespace,
                TablespaceIndex = IndexTablespace,
                Schema = AdminAuthenticationCredential.UserName,
                IntrospectionMethod = IntrospectionMethod,
                CI_AI = CI_AI,
                DateFunction = DateFunction,
                DDLLockTimeoutEnabled = true,
                DDLLockTimeoutValue = DDLLockTimeout,
                NLS_Language = NLS_Language,
                NLS_Territory = NLS_Territory
            };
        }
        #endregion

        #region Runtime
        private string runtimeTablespace;
        [UserDefinedConfigurationParameter(Label = "Tablespace", IsMandatory = true, Order = 3, Region = ParameterRegion.UserRuntimeSpecific, Prompt = "Runtime tablespace")]
        public string RuntimeTablespace {
            get {
                return runtimeTablespace ?? "OSUSR";
            }
            set {
                runtimeTablespace = value.ToUpper();
            }
        }

        private IRuntimeDatabaseConfiguration RuntimeUserRuntimeConfiguration(Source source) {
            return new RuntimeDatabaseConfiguration(DatabaseProvider) {
                ConnectionString = ConnectionString(source, RuntimeAuthenticationCredential),
                Tablespace = RuntimeTablespace,
                TablespaceIndex = IndexTablespace,
                Schema = AdminAuthenticationCredential.UserName,
                IntrospectionMethod = IntrospectionMethod,
                CI_AI = CI_AI,
                DateFunction = DateFunction, 
                NLS_Language = NLS_Language,
                NLS_Territory = NLS_Territory
            };
        }
        #endregion

        #region Log
        private string logTablespace;
        [UserDefinedConfigurationParameter(Label = "Tablespace", IsMandatory = true, Order = 3, Region = ParameterRegion.UserLogSpecific, Prompt = "Log tablespace")]
        public string LogTablespace {
            get {
                return logTablespace ?? "OSLOG";
            }
            set {
                logTablespace = value.ToUpper();
            }
        }

        #endregion

        #region Database Advanced Settings
        public override string ContextualHelpForBasicMode {
            get {
                return @"Allows to configure the Host, Port, and Service Name.";
            }
        }

        public override string ContextualHelpForAdvancedMode {
            get {
                return @"Allows using TNS configuration. 
Change the TNS configuration file at '/etc/outsystems/tnsnames.ora' to include the chosen TNS name.";
            }
        }

        [UserDefinedConfigurationParameter(Label = "Error Messages Language", IsMandatory = true, Order = 3, Region = ParameterRegion.Advanced, Prompt = "Error messages language", Example = "This overrides the value of the NLS_LANGUAGE parameter.")]        
        public string NLS_Language { get; set; }

        [ConfigurationParameter]
        public string NLS_Territory { get; set; }
        
        #endregion

        public override bool Equals(ITwoUserDatabaseConfiguration obj) {
            
            if (this == obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (GetType() != obj.GetType()) {
                return false;
            }

            var other = (PlatformDatabaseConfiguration)obj;

            return AdminTablespace == other.AdminTablespace
                && RuntimeTablespace == other.RuntimeTablespace
                && LogTablespace == other.LogTablespace
                && Host == other.Host
                && Port == other.Port
                && ServiceName == other.ServiceName
                && ImplementsElevatedPrivilegesOperations == other.ImplementsElevatedPrivilegesOperations
                && AuthenticationMode == other.AuthenticationMode
                && RuntimeUser == other.RuntimeUser
                && RuntimePassword == other.RuntimePassword
                && AdminUser == other.AdminUser
                && AdminPassword == other.AdminPassword
                && LogUser == other.LogUser
                && LogPassword == other.LogPassword
                && RuntimeAdvancedSettings == other.RuntimeAdvancedSettings
                && ServicesAdvancedSettings == other.ServicesAdvancedSettings
                && IntrospectionMethod == other.IntrospectionMethod
                && CI_AI == other.CI_AI
                && DateFunction == other.DateFunction
                && DDLLockTimeout == other.DDLLockTimeout
                && NLS_Language == other.NLS_Language 
                && NLS_Territory == other.NLS_Territory;
        }
    }
}