/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.Configuration {

    public class SessionConfigurationManager : BaseSessionConfigurationManager {

        public SessionConfigurationManager(ISessionDatabaseConfiguration sessionConfiguration)
            : base(sessionConfiguration) {
        }

        public override FileStream StreamForScriptFile {
            get {
                string path = Path.Combine(Script_Path, "session_model_oracle.sql");
                return new FileStream(path, FileMode.Open, FileAccess.Read);
            }
        }

        public override string StatementSeparator {
            get {
                return "/";
            }
        }

        private static readonly Regex _osSessionTablespaceRegex = new Regex(@"TABLESPACE\s*""OSSES""", RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);
        private static readonly Regex _osSessionCIAIRegex = new Regex(@"%#IF_CIAI%(.*?)%#ENDIF_CIAI%", RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);
        private static readonly Regex _osSessionUserRegex = new Regex(@"%OSSTATE%", RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        public override IEnumerable<string> SessionStatements {
            get {
                int deleteRowCount = ((SessionDatabaseConfiguration)sessionConfiguration).DeleteExpiredSessionsAvoidLockRowCount;
                int deleteVarsRowCount = ((SessionDatabaseConfiguration)sessionConfiguration).DeleteExpiredSessionVarsAvoidLockRowCount;

                string script = ReadScriptFile(StreamForScriptFile);

                StringBuilder str = new StringBuilder();

                // read the entire script
                var reader = new StringReader(script);
                string line = reader.ReadLine();
                while (line != null) {
                    if (line.Trim() == StatementSeparator) {
                        // end of statement       
                        string command = str.ToString();

                        command = _osSessionCIAIRegex.Replace(command, ((RuntimeDatabaseConfiguration)sessionConfiguration.RuntimeDatabaseConfiguration()).CI_AI ? "$1" : "");
                        // set the correct tablespace in the command
                        command = _osSessionTablespaceRegex.Replace(command, @"TABLESPACE """ + ((RuntimeDatabaseConfiguration)sessionConfiguration.RuntimeDatabaseConfiguration()).Tablespace + @"""");
                        command = _osSessionUserRegex.Replace(command, ((RuntimeDatabaseConfiguration)sessionConfiguration.RuntimeDatabaseConfiguration()).Username);
                        command = command.Replace(TAG_ROWCOUNT, Convert.ToString(deleteRowCount));
                        command = command.Replace(TAG_VARSROWCOUNT, Convert.ToString(deleteVarsRowCount));

                        //Add to the list of commands
                        yield return command;

                        str = new StringBuilder();
                    } else if (line != "") {
                        str.AppendLine(line);
                    }
                    line = reader.ReadLine();
                }
            }
        }

        public override void Pre_CreateOrUpgradeSession() {
            //this is implemented, Oracle does not have any behavior
        }

        public override bool TestSessionConnection(out string friendlyMessage) {
            bool success = base.TestSessionConnection(out friendlyMessage);
            if (success) {
                success = TestConnectionUtils.CheckTablespaceExists(sessionConfiguration.RuntimeDatabaseConfiguration() as RuntimeDatabaseConfiguration,
                    false, out friendlyMessage);
            }
            return success;
        }

        public override int QueryTimeout {
            get {
                return base.QueryTimeout;
            }
            set {
                base.QueryTimeout = value;
                TestConnectionUtils.QueryTimeout = value;
            }
        }
    }
}
