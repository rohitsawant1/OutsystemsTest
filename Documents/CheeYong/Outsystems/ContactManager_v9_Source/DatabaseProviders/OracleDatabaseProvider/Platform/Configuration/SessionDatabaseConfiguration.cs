/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Text;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.Configuration {

    public sealed class SessionDatabaseConfiguration : BaseSessionDatabaseConfiguration {
        public enum NamingMethod { Service_Name, TNS_Name };

        public override IPlatformDatabaseProvider PlatformDatabaseProvider {
            get { return Platform.PlatformDatabaseProvider.Instance; }
        }

        private const int DEFAULT_PORT_VALUE = 1521;
        private const string DEFAULT_HOST_NAME = "localhost";
        private const string DEFAULT_NLS_TERRITORY = "AMERICA";
        private const string DEFAULT_ADVANCED_SETTINGS_NET = "Incr Pool Size=1;";

        public SessionDatabaseConfiguration() {
            Port = DEFAULT_PORT_VALUE;
            Host = DEFAULT_HOST_NAME;
            NLS_Territory = DEFAULT_NLS_TERRITORY;
            SessionAdvancedSettings = DEFAULT_ADVANCED_SETTINGS_NET;
        }
        
        public override AuthenticationType AuthenticationMode {
            get { return AuthenticationType.Database_Authentication; }
            set { }
        }
        
        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration() {
            return new RuntimeDatabaseConfiguration(PlatformDatabaseProvider) {
                ConnectionString = ConnectionString(),
                Tablespace = SessionTablespace,
                Schema = SessionAuthenticationCredential.UserName,
                IntrospectionMethod = IntrospectionMethod,
                CI_AI = CI_AI,
                DateFunction = DateFunction,
                NLS_Language = NLS_Language,
                NLS_Territory = NLS_Territory
            };
        }

        [ConfigurationParameter]
        public string IntrospectionMethod { get; set; }

        [ConfigurationParameter]
        public bool CI_AI { get; set; }

        [ConfigurationParameter]
        public string DateFunction { get; set; }

        [ConfigurationParameter]
        public int DDLLockTimeout {  get; set; }


        #region ConnectionString Assemblage

        private const string _usernamePart = "user id={0};";
        private const string _passwordPart = "password={0};";
        private const string _datasourcePart = "data source={0}/{1};";
        private const string _datasourceWithPortPart = "data source={0}:{1}/{2};";
        private const string _datasourcePartForTNS = "data source={0};";

        private string ConnectionString() {
            var connStr = new StringBuilder();

            connStr.Append(string.Format(_usernamePart, SessionAuthenticationCredential.UserName))
                .Append(string.Format(_passwordPart, SessionAuthenticationCredential.Password));
            if (IsServiceName()) {
                if (Port == DEFAULT_PORT_VALUE) {
                    connStr.Append(string.Format(_datasourcePart, Host, ServiceName));
                } else {
                    connStr.Append(string.Format(_datasourceWithPortPart, Host, Port, ServiceName));
                }
            } else {
                connStr.Append(string.Format(_datasourcePartForTNS, TNSName));
            }
            connStr.Append(SessionAdvancedSettings);

            return connStr.ToString();
        }
        #endregion

        #region DatabaseLocation
        [UserDefinedConfigurationParameter(Label = "Naming Method", IsMandatory = true, Order = 0, Region = ParameterRegion.SessionDatabaseLocation, Prompt = "Naming Method")]
        public NamingMethod IdType { get; set; }

        public bool IsServiceName() { return IdType.Equals(NamingMethod.Service_Name); }
        public bool IsTNSName() { return IdType.Equals(NamingMethod.TNS_Name); }

        [UserDefinedConfigurationParameter(Label = "TNS Name", VisibilityChecker = "IsTNSName", IsMandatory = true, Order = 1, Region = ParameterRegion.SessionDatabaseLocation, Prompt = "TNS Name")]
        public string TNSName { get; set; }

        [UserDefinedConfigurationParameter(Label = "Host", VisibilityChecker = "IsServiceName", IsMandatory = true, Order = 1, Region = ParameterRegion.SessionDatabaseLocation, Prompt = "Host")]
        public string Host { get; set; }

        [UserDefinedConfigurationParameter(Label = "Port", VisibilityChecker = "IsServiceName", IsMandatory = true, Order = 2, Region = ParameterRegion.SessionDatabaseLocation, Prompt = "Port")]
        public int Port { get; set; }

        [UserDefinedConfigurationParameter(Label = "Service Name", VisibilityChecker = "IsServiceName", IsMandatory = true, Order = 3, Region = ParameterRegion.SessionDatabaseLocation, Prompt = "Service Name")]
        public string ServiceName { get; set; }
        #endregion

        #region Database Advanced Settings
        public override string ContextualHelpForBasicMode {
            get {
                return @"Basic Configuration will allow to configure the database with Host,
Port, and Service Name information.";
            }
        }

        public override string ContextualHelpForAdvancedMode {
            get {
                return @"Advanced Configuration will allow you to use TNS configurations.
The TNS configuration file (/etc/outsystems/tnsnames.ora) should be changed to include the chosen TNS name.";
            }
        }

        [UserDefinedConfigurationParameter(Label = "Error Messages Language", IsMandatory = true, Order = 3, Region = ParameterRegion.AdvancedSession, Prompt = "Error messages language", Example = "This overrides the value of the NLS_LANGUAGE parameter.")]        
        public string NLS_Language { get; set; }

        [ConfigurationParameter]
        public string NLS_Territory { get; set; }
        
        #endregion

        #region Session

        private string sessionTablespace = null;
        [UserDefinedConfigurationParameter(Label = "Tablespace", IsMandatory = true, Order = 3, Region = ParameterRegion.UserSessionSpecific, Prompt = "Session Tablespace")]
        public string SessionTablespace {
            get {
                return sessionTablespace ?? "OSSTATE";
            }
            set {
                sessionTablespace = value.ToUpper();
            }
        }

        #endregion

        public override bool Equals(ISessionDatabaseConfiguration obj) {

            if ((object)this == (object)obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (GetType() != obj.GetType()) {
                return false;
            }

            var other = (SessionDatabaseConfiguration)obj;

            return SessionUser == other.SessionUser
                && SessionPassword == other.SessionPassword
                && Host == other.Host
                && Port == other.Port
                && ServiceName == other.ServiceName
                && SessionTablespace == other.SessionTablespace
                && ImplementsElevatedPrivilegesOperations == other.ImplementsElevatedPrivilegesOperations
                && AuthenticationMode == other.AuthenticationMode
                && SessionAdvancedSettings == other.SessionAdvancedSettings
                && NLS_Language == other.NLS_Language
                && NLS_Territory == other.NLS_Territory;
        }
    }
}