/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.Configuration {
    public abstract class TwoUserDatabaseConfigurationManager : BaseTwoUserDatabaseConfigurationManager {

        private string systemDatabaseServiceName;

        public TwoUserDatabaseConfigurationManager(ISettableTwoUserDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration systemDatabaseConfig) : base(uiConfiguration) {
            this.systemDatabaseServiceName = ((PlatformDatabaseConfiguration)systemDatabaseConfig).AdminUser;
        }

        public override bool RecommendDatabaseBackup {
            get { return true; }
        }

        public abstract override FileStream StreamForScriptFile {
            get;
        }

        protected static readonly Regex _osAdminTablespaceRegex = new Regex(@"TABLESPACE\s*""OSSYS""",
            RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        protected static readonly Regex _osIndexTablespaceRegex = new Regex(@"TABLESPACE\s*""OSIDX""",
            RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        protected static readonly Regex _osRuntimeTablespaceRegex = new Regex(@"TABLESPACE\s*""OSUSR""",
            RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        protected static readonly Regex _osAdminUserRegex = new Regex(@"HubAdmin",
            RegexOptions.Singleline | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        protected static readonly Regex _osRuntimeUserRegex = new Regex(@"HubRuntime",
            RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        protected static readonly Regex _osSystemDatabaseRegex = new Regex(@"\[SYSTEM_DB\]",
            RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        protected static readonly Regex _wheneverSqlErrorRe = new Regex(@"WHENEVER SQLERROR EXIT;",
            RegexOptions.IgnoreCase | RegexOptions.Compiled);

        protected static readonly Regex _commitRe = new Regex(@"COMMIT;", RegexOptions.IgnoreCase | RegexOptions.Compiled);
        protected static readonly Regex _exitRe = new Regex(@"EXIT;", RegexOptions.IgnoreCase | RegexOptions.Compiled);

        protected static readonly Regex _createIndexRegex = new Regex("create (unique )?index",
            RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Compiled);

        private Hashtable _indexes = new Hashtable(128);

        protected string MangleIndexStatement(string original) {
            int startPos = original.IndexOf(" INDEX ") + " INDEX ".Length;
            int endPos = original.IndexOf(" ON ");
            string indexName = original.Substring(startPos, endPos - startPos);
            if (_indexes.ContainsKey(indexName)) {
                foreach (string field in (string[])_indexes[indexName]) {
                    Regex processIndexRegex = new Regex("(?<=[^a-zA-Z0-9$_])" + field + "(?=[^a-zA-Z0-9$_])",
                        RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);
                    original = processIndexRegex.Replace(original, "NLSSORT(" + field + ",'NLS_SORT=BINARY_AI')");
                }
            }
            return original;
        }

        protected override bool IsStatement(string tag, string tagValue) {
            if (base.IsStatement(tag, tagValue))
                return true;
            // Process INVARIANT_INDEX tags
            if (((Tag)Enum.Parse(typeof(Tag), tag)) == Tag.INVARIANT_INDEX) {
                string indexName;
                string[] indexFields;
                IndexFieldsFromTagContent(tagValue, out indexName, out indexFields);
                _indexes[indexName] = indexFields;
                return true;
            }
            return false;
        }

        protected override bool ValidateStatement(string sourceLine, string tagName) {
            if (!base.ValidateStatement(sourceLine, tagName)) {
                return false;
            }
            if (tagName == "") {
                return true;
            }
            Tag tagEnum = (Tag)Enum.Parse(typeof(Tag), tagName);
            if (tagEnum == Tag.INVARIANT_INDEX) {
                return false;
            }
            return true;
        }

        private void IndexFieldsFromTagContent(string tagContent, out string indexName, out string[] fields) {
            string[] tagSplit = tagContent.Split(':');
            indexName = tagSplit[0].Trim();
            fields = tagSplit[1].Replace(" ", "").Split(',');
        }

        public override void Pre_CreateOrUpgradePlatform() {
            //this is implemented, Oracle does not have any behavior
        }

        public override string StatementSeparator {
            get { return "/"; }
        }

        public override IEnumerable<Block> ExtraDatabaseStatements(Version currentModelVersion) {
            var newBlock = new Block();
            newBlock.SetTagValue(Tag.END_IGNORING_BLOCK.ToString(), "");
            var adminRuntimeConf = (RuntimeDatabaseConfiguration)((TwoUserDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(UserType.Admin);
            string replaceGetDateStatement = "CREATE OR REPLACE FUNCTION getdate RETURN TIMESTAMP AS BEGIN RETURN (" +
                                             adminRuntimeConf.DateFunction + "); END;";
            newBlock.AddStatement(replaceGetDateStatement);

            yield return newBlock;
        }

        public override bool TestAdminConnection(out string friendlyMessage, Source source) {
            bool success = base.TestAdminConnection(out friendlyMessage, source);
            if (success) {
                success = Platform.Configuration.TestConnectionUtils.CheckTablespaceExists(((TwoUserDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(UserType.Admin) as RuntimeDatabaseConfiguration,
                    true, out friendlyMessage);
            }
            return success;
        }

        public override bool TestRuntimeConnection(out string friendlyMessage, Source source) {
            bool success = base.TestRuntimeConnection(out friendlyMessage, source);
            if (success) {
                success = Platform.Configuration.TestConnectionUtils.CheckTablespaceExists(((TwoUserDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(UserType.Runtime) as RuntimeDatabaseConfiguration,
                    false, out friendlyMessage);
            }
            return success;
        }

        public override int QueryTimeout {
            get {
                return base.QueryTimeout;
            }
            set {
                base.QueryTimeout = value;
                Platform.Configuration.TestConnectionUtils.QueryTimeout = value;
            }
        }
    }
}
