/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Data;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.ExecutionService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.ExecutionService {

    public class PlatformExecutionService : Oracle.ExecutionService.ExecutionService, IPlatformExecutionService {
        private readonly IPlatformDatabaseServices databaseServices;

        IPlatformDatabaseServices IPlatformExecutionService.DatabaseServices { get { return databaseServices; } }

        public PlatformExecutionService(IPlatformDatabaseServices databaseServices): base(databaseServices) {
            this.databaseServices = databaseServices;
        }

        public IDataReader ExecuteStoredProcedureWithResultSet(IDbCommand cmd, string readerParamName) {
            cmd.CommandType = CommandType.StoredProcedure;
            // Due to a limitation of the .NET Oracle driver, the parameter names must not include the prefix
            string paramPrefix = databaseServices.ExecutionService.ParameterPrefix;
            for (int i = 0; i < cmd.Parameters.Count; i++) {
                IDbDataParameter parameter = (IDbDataParameter)cmd.Parameters[i];
                parameter.ParameterName = FixParameterPrefixForStoredProcedure(parameter.ParameterName, paramPrefix);
            }

            if (readerParamName.IsNullOrEmpty()) {
                return ExecuteReader(cmd);
            }
            readerParamName = FixParameterPrefixForStoredProcedure(readerParamName, paramPrefix);
            IDbDataParameter readerParam = new OracleParameter(readerParamName, OracleDbType.RefCursor);
            SetParameterDirection(readerParam, ParameterDirection.Output);
            cmd.Parameters.Add(readerParam);
            ExecuteNonQuery(cmd);
            OracleRefCursor rc = (OracleRefCursor)readerParam.Value;
            return rc.GetDataReader();
        }

        private static string FixParameterPrefixForStoredProcedure(string paramName, string paramPrefix) {
            return paramName.StartsWith(paramPrefix) ? paramName.Substring(paramPrefix.Length) : paramName;
        }

        protected override void SetDataReaderFetchSize(OracleDataReader reader) {
        }
    }
}
