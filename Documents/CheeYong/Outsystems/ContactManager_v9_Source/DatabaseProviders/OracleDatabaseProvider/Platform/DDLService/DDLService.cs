/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.DDLService;
using OutSystems.HubEdition.Extensibility.Data.Platform.DMLService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.DDLService {
    public class DDLService : BaseDDLService {

        private const string PrimaryConstInvariantPrefix = "OSPKI_";
        private const string PrimarySysConstInvariantPrefix = "PKI_";
        public const string AUTO_NUMBER_SEQUENCE_PREFIX = "OSSEQ_";
        public const string AUTO_NUMBER_TRIGGER_PREFIX = "OSTRG_";

        private IEnumerable<string> SetColumnToAutonumber(IPlatformTableSourceColumnInfo existingColumn) {
            IList<string> statements = new List<string>();
            ITableSourceInfo tableSourceInfo = existingColumn.TableSource;

            string sequenceName = ObjectFactory.GetNewUniqueIdentifer(DatabaseServices, AUTO_NUMBER_SEQUENCE_PREFIX + tableSourceInfo.Name);
            string triggerName = ObjectFactory.GetNewUniqueIdentifer(DatabaseServices, AUTO_NUMBER_TRIGGER_PREFIX + tableSourceInfo.Name);
            statements.Add(GetCreateAutoNumberSequenceStatement(tableSourceInfo.Database, sequenceName));
            statements.Add(GetCreateAutoNumberTriggerStatement(existingColumn, triggerName, sequenceName));
            return statements;
        }

        public DDLService(IPlatformDatabaseServices databaseServices) : base(databaseServices) { }

        public override string GetDefaultValue(DBDataType type) {
            switch (type) {
                case DBDataType.TEXT:
                    return "' '";
                case DBDataType.BOOLEAN:
                    return "0";
                case DBDataType.INTEGER:
                    return "0";
                case DBDataType.LONGINTEGER:
                    return "0";
                case DBDataType.DECIMAL:
                    return "0";
                case DBDataType.BINARY_DATA:
                    return "NULL";
                default:
                    if (type.IsDateOrTimeOrDateTime()) {
                        return "to_timestamp('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')";
                    } else {
                        throw new InvalidOperationException();
                    }
            }
        }

        public override bool CanAlterColumn(IPlatformTableSourceColumnInfo existingColumn, IPlatformTableSourceColumnInfo newColumn,
                                            out string errorMessage) {
            errorMessage = "";
            //text -> : -- Cannot alter column 't' because it is 'text'.
            //image ->       -- Cannot alter column 'v' because it is 'image'.
            // x -> CLOB (opposed to varchar2)   -- Operand type clash: x is incompatible with text
            // x -> BinaryData -- Operand type clash: x is incompatible with binarydata
            // x -> datetime -- Operand type clash: x is incompatible with datetime
            //datetime -> x except varchar -- Operand type clash: datetime is incompatible with x

            // Data type conversions
            if (existingColumn.DataType.Type == DBDataType.TEXT && existingColumn.DataType.Length > PlatformDataTypeInfo.VARCHAR_MAXLENGTH &&
                newColumn.DataType.Type == DBDataType.TEXT && newColumn.DataType.Length < PlatformDataTypeInfo.VARCHAR_MAXLENGTH) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, true) +
                               string.Format(" This is because the column was previously defined with a length greater than {0}.",
                                   PlatformDataTypeInfo.VARCHAR_MAXLENGTH);
                return false;
            }
            if (existingColumn.DataType.Type == DBDataType.BINARY_DATA) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, true);
                return false;
            }
            if (newColumn.DataType.Type == DBDataType.TEXT && newColumn.DataType.Length > PlatformDataTypeInfo.VARCHAR_MAXLENGTH) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, false) +
                               string.Format(" This is because the column is now defined with a length greater than {0}.",
                                   PlatformDataTypeInfo.VARCHAR_MAXLENGTH);
                return false;
            }
            if (newColumn.DataType.Type.IsOneOf(DBDataType.BINARY_DATA, DBDataType.DATE_TIME)) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, false);
                return false;
            }
            
            if (existingColumn.DataType.Type == DBDataType.DATE_TIME && newColumn.DataType.Type != DBDataType.TEXT) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, false);
                return false;
            }

            // Autonumber conversions
            if (existingColumn.IsAutoGenerated && !newColumn.IsAutoGenerated) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn.TableSource.Name, existingColumn.Name, "Autonumber", existingColumn.DataType.Type.ToText(), newColumn.DataType.SqlDataType, newColumn.DataType.Type.ToText(), true);
                return false;
            }
            if (!existingColumn.IsAutoGenerated && newColumn.IsAutoGenerated) {
                // Change is allowed if the table is empty
                bool hasRows;
                using (IDbConnection conn = DatabaseServices.TransactionService.CreateConnection()) {
                    using (IDbCommand cmd = DatabaseServices.ExecutionService.CreateCommand(conn,
                        "select count(1) from " + Identifiers.EscapeAndQualifyIdentifierForLocalDatabase(existingColumn.TableSource.Name))) {
                            hasRows = Convert.ToInt32(cmd.ExecuteScalar()) > 0;
                    }
                }
                if (hasRows) {
                    errorMessage = GetColumnCannotBeChangedMessage(existingColumn.TableSource.Name, existingColumn.Name,
                        existingColumn.DataType.SqlDataType, existingColumn.DataType.Type.ToText(), "Autonumber",
                        newColumn.DataType.Type.ToText(), false);
                    return false;
                }
            }
            
            return true;
   
        }
        
        public override IEnumerable<string> CreateTable(ITableSourceInfo newTable, params ColumnDetails[] columns) {
            var dbConfig = DatabaseServices.DatabaseConfiguration as RuntimeDatabaseConfiguration;
            if (dbConfig == null) {
                return Enumerable.Empty<string>();
            }
            IList<IPlatformTableSourceColumnInfo> columnInfos = columns.Select(col => col.Column).ToList();
            bool hasAutoGeneratedColumns = columns.Select(col => col.Column).Any(c => c.IsAutoGenerated);            
            IPlatformTableSourceColumnInfo primaryKey = columnInfos.SingleOrDefault(col => col.IsPrimaryKey);

            // set the storage properties of Blob field types
            string blobStorage =
                columnInfos.Where(c => c.DataType.Type == DBDataType.BINARY_DATA).Select(c => LOBStorageStatement(c.Name)).StrCat("");

            string createTableStatement = string.Format("{0}{1} TABLESPACE {2}", base.CreateTable(newTable, columns).Single(), 
                blobStorage, Identifiers.EscapeIdentifier(dbConfig.Tablespace));

            IList<string> statements = new List<string>();
            statements.Add(createTableStatement);

            if (hasAutoGeneratedColumns) {
                foreach (IPlatformTableSourceColumnInfo column in columnInfos.Where(col => col.IsAutoGenerated)) {
                    statements.AddRange(SetColumnToAutonumber(column));
                }
            }

            if (primaryKey != null) { 
                statements.AddRange(CreateAdditionalPrimaryKeyIndexForCIAI_IfNeeded(newTable, primaryKey, false));
            }

            return statements;
        }

        public override IEnumerable<string> CreateIndex(IPlatformTableSourceIndexInfo newIndex) {
            var createStatement = new StringBuilder();
            var dbConfig = DatabaseServices.DatabaseConfiguration as RuntimeDatabaseConfiguration;
            if (dbConfig == null) {
                yield break;
            }

            createStatement.AppendFormat("CREATE {0}INDEX {1}", newIndex.IsUnique? "UNIQUE ": String.Empty, 
                Identifiers.EscapeAndQualifyIdentifier(newIndex.TableSource.Database, newIndex.Name));

            var indexFields = new StringBuilder();

            if (dbConfig.CI_AI) {
                foreach (var column in newIndex.Columns) {
                    if (indexFields.Length > 0) {
                        indexFields.Append(", ");
                    }

                    var index = newIndex as PlatformTableSourceIndexInfo;
                    if (index != null && index.IsFunctionIndexColumn(column)) {
                        indexFields.AppendFormat("NLSSORT({0}, 'NLS_SORT=BINARY_AI')", Identifiers.EscapeIdentifier(column.Name));
                    } else {
                        indexFields.Append(Identifiers.EscapeIdentifier(column.Name));
                    }
                }                
            } else {
                indexFields.Append(newIndex.Columns.Select(col => Identifiers.EscapeIdentifier(col.Name.ToUpperInvariant())).StrCat(","));           
            }

            createStatement.AppendFormat(" ON {0} ({1}) TABLESPACE {2}", newIndex.TableSource.QualifiedName, indexFields, 
                Identifiers.EscapeIdentifier(dbConfig.TablespaceIndex));

            yield return createStatement.ToString();
        }

        public override IEnumerable<string> CreateEventTrigger(IPlatformTableSourceEventTriggerInfo newTrigger, IPlatformTableSourceColumnInfo triggerTablePrimaryKeyColumn,
            IEnumerable<IPlatformTableSourceColumnInfo> triggerTableEventColumns, IEnumerable<ITableSourceForeignKeyInfo> triggerTableForeignKeys, 
            ITableSourceInfo eventTable, ITableSourceInfo eventQueueTable, ITableSourceInfo lightEventQueueTable) {
            var createStatement = new StringBuilder();
            ITableSourceInfo table = newTrigger.TableSource;
            createStatement.Append("CREATE OR REPLACE TRIGGER " + Identifiers.EscapeAndQualifyIdentifier(table.Database, newTrigger.Name));
            createStatement.Append(" AFTER INSERT OR UPDATE ON " + Identifiers.EscapeIdentifier(table.Name));
            createStatement.Append(" FOR EACH ROW");            
            createStatement.Append(" DECLARE isUpdating NUMBER(1,0) := 0;");
            createStatement.Append(" BEGIN ");
            
            createStatement.Append(" IF UPDATING THEN");
            createStatement.Append(" isUpdating := 1;");
            createStatement.Append(" END IF;");

            FillEventTriggerQuery(createStatement, triggerTablePrimaryKeyColumn, triggerTableEventColumns, triggerTableForeignKeys, eventTable, 
                eventQueueTable, lightEventQueueTable, ":new", false, "isUpdating");

            
            createStatement.Append(" END;");
            return createStatement.ToString().ToEnumerable();
        }

        private IEnumerable<string> CreateAdditionalPrimaryKeyIndexForCIAI_IfNeeded(ITableSourceInfo existingTable, IPlatformTableSourceColumnInfo column, bool ciai_IndexExists) {
            var dbConfig = DatabaseServices.DatabaseConfiguration as RuntimeDatabaseConfiguration;
            if (dbConfig == null) {
                return Enumerable.Empty<string>();
            }
            if (column != null && column.DataType.Type == DBDataType.TEXT && dbConfig.CI_AI && !ciai_IndexExists) {
                // adding the PRIMARY KEY constraint creates an index
                // but if we're using CI/AI and the PK is a text field, we should create something else too... 

                IPlatformDMLIdentifiers dmlIdentifiers = DatabaseServices.DMLService.Identifiers;

                var primaryKeyName = GetGeneratedPrimaryKeyConstraintNameForTable(existingTable);

                string idxName = primaryKeyName.Replace(PlatformDatabaseObjectConstants.PrimaryConstPrefix, PrimaryConstInvariantPrefix).Replace(
                    PlatformDatabaseObjectConstants.PrimarySysConstPrefix, PrimarySysConstInvariantPrefix);

                return string.Format("CREATE UNIQUE INDEX {0} ON {1} (NLSSORT({2}, 'NLS_SORT=BINARY_AI'))",
                    dmlIdentifiers.EscapeAndQualifyIdentifierForLocalDatabase(idxName),
                    dmlIdentifiers.EscapeAndQualifyIdentifierForLocalDatabase(existingTable.Name), dmlIdentifiers.EscapeIdentifier(column.Name)).ToEnumerable();
            }

            return Enumerable.Empty<string>();
        }

        protected override string GetPrimaryKeyTableConstraint(string constraintName, IPlatformTableSourceColumnInfo column) {
            string tableSpaceName = Identifiers.EscapeIdentifier(
                ((RuntimeDatabaseConfiguration) DatabaseServices.DatabaseConfiguration).TablespaceIndex);

            return string.Format("{0} USING INDEX TABLESPACE {1}", base.GetPrimaryKeyTableConstraint(constraintName, column), tableSpaceName);
        }

        public override IEnumerable<string> CreateColumn(IPlatformTableSourceColumnInfo newColumn, string defaultValue) {
            IList<string> statements = new List<string>();
            string blobStorage = "";
            if (newColumn.DataType.Type == DBDataType.BINARY_DATA) {
                blobStorage = LOBStorageStatement(newColumn.Name);
            }

            string addColumnStatement = string.Format("ALTER TABLE {0} ADD ({1}){2}", newColumn.TableSource.QualifiedName, 
                GetColumnDefinition(newColumn, defaultValue), blobStorage);

            statements.Add(addColumnStatement);

            if (newColumn.IsPrimaryKey) {
                statements.AddRange(CreatePrimaryKey(newColumn.TableSource, newColumn));
                statements.AddRange(CreateAdditionalPrimaryKeyIndexForCIAI_IfNeeded(newColumn.TableSource, newColumn, false));
            }

            if (newColumn.IsAutoGenerated) {
                statements.AddRange(SetColumnToAutonumber(newColumn));
            }

            return statements;
        }

        private string LOBStorageStatement(string columnName) {
            return string.Format(" LOB({0}) STORE AS ( ENABLE STORAGE IN ROW NOCACHE CHUNK 32768)", Identifiers.EscapeIdentifier(columnName));
        }

        public override IEnumerable<string> AlterColumn(IPlatformTableSourceColumnInfo existingColumn, IPlatformTableSourceColumnInfo newColumn, 
                string defaultValue) {

            string errorMessage;

            if (!CanAlterColumn(existingColumn, newColumn, out errorMessage)) {
                throw new InvalidOperationException(errorMessage);
            }

            var result = new List<string>();

            if (UseDefaultValue(newColumn, defaultValue) || (existingColumn.IsMandatory != newColumn.IsMandatory)
                    || !existingColumn.DataType.IsEquivalent(newColumn.DataType)) {

                bool isMandatory = GetFinalMandatoryValue(newColumn, defaultValue, newColumn.IsMandatory);
                string isMandatoryStatement = isMandatory == existingColumn.IsMandatory ? "" : (isMandatory ? " NOT NULL" : " NULL");

                string statement = String.Format("ALTER TABLE {0} MODIFY {1} {2}{3}{4}", existingColumn.TableSource.QualifiedName,
                    Identifiers.EscapeIdentifier(existingColumn.Name), newColumn.DataType.SqlDataType,
                    UseDefaultValue(newColumn, defaultValue) ? " DEFAULT " + defaultValue : String.Empty,
                    isMandatoryStatement);

                result.Add(statement);
            }

            if (newColumn.IsPrimaryKey && !existingColumn.IsPrimaryKey) {
                result.AddRange(CreatePrimaryKey(newColumn.TableSource, newColumn));
            }

            var oracleExistingColumn = existingColumn as PlatformTableSourceColumnInfo;

            if (newColumn.IsPrimaryKey) {
                result.AddRange(CreateAdditionalPrimaryKeyIndexForCIAI_IfNeeded(newColumn.TableSource, newColumn, oracleExistingColumn.HasCIAI_Index));
            }

            if (newColumn.IsAutoGenerated && !existingColumn.IsAutoGenerated) {
                result.AddRange(SetColumnToAutonumber(newColumn));
            }

            return result;
        }

        private string GetCreateAutoNumberSequenceStatement(IDatabaseInfo database, string sequenceName) {
            return string.Format("DECLARE v_Seq_Count number; " +
                "BEGIN SELECT COUNT(1) INTO v_Seq_Count FROM user_sequences WHERE upper(sequence_name) = upper('{0}'); " +
                "IF v_Seq_Count = 0 THEN" +
                " EXECUTE IMMEDIATE 'CREATE SEQUENCE {1} MINVALUE 1 NOMAXVALUE START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE'; " +
                "END IF; " +
                "END;",
                sequenceName,
                Identifiers.EscapeAndQualifyIdentifier(database, sequenceName));
        }

        private string GetCreateAutoNumberTriggerStatement(ITableSourceColumnInfo column, string triggerName, string sequenceName) {            
            string createTrigger = "CREATE OR REPLACE TRIGGER {0} BEFORE INSERT ON {1} FOR EACH ROW" +
                                   " BEGIN" +
                                   " IF :NEW.{2} IS NULL THEN SELECT oshe_globals.setidentity({3}.nextval) INTO :NEW.{2} FROM dual; END IF;" +
                                   " END;";

            return String.Format(createTrigger,
                Identifiers.EscapeAndQualifyIdentifier(column.TableSource.Database, triggerName), Identifiers.EscapeIdentifier(column.TableSource.Name),
                Identifiers.EscapeIdentifier(column.Name), Identifiers.EscapeIdentifier(sequenceName));
        }

        public override IEnumerable<string> DropColumn(IPlatformTableSourceColumnInfo existingColumn) {
            var result = new List<string>();

            if (existingColumn.IsAutoGenerated) {
                var columnInfo = (PlatformTableSourceColumnInfo) existingColumn;
                IDatabaseInfo databaseInfo = existingColumn.TableSource.Database;
                string triggerName = columnInfo.AutoNumberTriggerName;

                if (!String.IsNullOrEmpty(triggerName)) {
                    result.Add(String.Format("DROP TRIGGER {0}", Identifiers.EscapeAndQualifyIdentifier(databaseInfo, triggerName)));
                }
                
                string sequenceName = columnInfo.AutoNumberSequenceName;

                if (!String.IsNullOrEmpty(sequenceName)) {
                    result.Add(String.Format("DROP SEQUENCE {0}", Identifiers.EscapeAndQualifyIdentifier(databaseInfo, sequenceName)));
                }
            }

            result.AddRange(base.DropColumn(existingColumn));
            return result;
        }
    }
}
