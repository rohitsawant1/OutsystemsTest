/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using OutSystems.HubEdition.DatabaseProvider.Oracle.DatabaseObjects;
using OutSystems.HubEdition.DatabaseProvider.Oracle.DMLService;
using OutSystems.HubEdition.DatabaseProvider.Oracle.IntrospectionService;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.DMLService;
using OutSystems.HubEdition.Extensibility.Data.IntrospectionService;
using OutSystems.HubEdition.Extensibility.Data.Platform.DMLService;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.Platform.DMLService {
    internal class PlatformDMLIdentifiers: DMLIdentifiers, IPlatformDMLIdentifiers {
        internal PlatformDMLIdentifiers(IDMLService dmlService) : base(dmlService) {}

        public string EscapeAndQualifyIdentifier(IDatabaseInfo database, string objectName) {
            string schema = ((DatabaseInfo) database).Schema;
            return EscapeIdentifier(schema) + "." + EscapeIdentifier(objectName);
        }

        public bool IsValidColumnName(string columnName) {
            switch (columnName.ToLowerInvariant()) {
                case "timestamp": // oracle 10g+ doesn't seem to complain about "timestamp" but the net is full of
                // references to this keyword blocking trigger creation
                case "number": // invalid column name (can't create trigger)
                case "rowid":  // invalid column name (can't create column) 
                    return false;
            }
            return true;
        }
        public override string EscapeIdentifier(string identifierName) {
            return base.EscapeIdentifier(identifierName.ToUpper());
        }

        public string UnescapeIdentifier(string objectName) {
            if (objectName == null) {
                throw new ArgumentNullException("objectName");
            }

            if (objectName.StartsWith("\"", StringComparison.Ordinal) && objectName.EndsWith("\"", StringComparison.Ordinal)) {
                return objectName.Substring(1, objectName.Length - 2);
            }

            return objectName;
        }
    }
}
