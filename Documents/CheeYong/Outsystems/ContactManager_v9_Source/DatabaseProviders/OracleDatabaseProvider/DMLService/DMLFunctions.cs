/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.DMLService;
using System;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.DMLService {
    internal class DMLFunctions : BaseDMLFunctions {

        private enum DateTimePart {
            Year,
            Month,
            Day,
            WeekDay,
            Hour,
            Minute,
            Second
        }

        internal DMLFunctions(IDMLService dmlService) : base(dmlService) { }

        #region Math
        public override string Trunc(string n) {
            return string.Format("trunc({0})", n);
        }
        #endregion

        #region Text
        public override string Index(string t, string search) {
            return string.Format("(instr(NVL({0}, ' '), {1}) -1)", t, search);
        }

        public override string Length(string t) {
            return string.Format("length({0})", t);
        }

        public override string Substr(string t, string start, string length) {
            return string.Format("substr({0}, {1} + 1, {2})", t, start, length);
        }

        public override string Trim(string t) {
            return string.Format("trim({0})", t);
        }
        #endregion

        #region Date & Time
        public override string AddDays(string dt, string n) {
            return DateAdd(DateTimePart.Day, dt, n);
        }

        public override string AddHours(string dt, string n) {
            return DateAdd(DateTimePart.Hour, dt, n);
        }

        public override string AddMinutes(string dt, string n) {
            return DateAdd(DateTimePart.Minute, dt, n);
        }

        public override string AddMonths(string dt, string n) {
            return DateAdd(DateTimePart.Month, dt, n);
        }

        public override string AddSeconds(string dt, string n) {
            return DateAdd(DateTimePart.Second, dt, n);
        }

        public override string AddYears(string dt, string n) {
            return DateAdd(DateTimePart.Year, dt, n);
        }

        public override string BuildDateTime(string d, string t) {
            return string.Format("to_timestamp(to_char({0} ,'YYYY-MM-DD') || ' ' || to_char({1} ,'HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')", d, t);
        }

        public override string Day(string dt) {
            return Extract(DateTimePart.Day, dt);
        }

        public override string DayOfWeek(string dt) {
            return Extract(DateTimePart.WeekDay, dt);
        }

        public override string DiffDays(string dt1, string dt2) {
            return DateDiff(DateTimePart.Day, dt1, dt2);
        }

        public override string DiffHours(string dt1, string dt2) {
            return DateDiff(DateTimePart.Hour, dt1, dt2);
        }

        public override string DiffMinutes(string dt1, string dt2) {
            return DateDiff(DateTimePart.Minute, dt1, dt2);
        }

        public override string DiffSeconds(string dt1, string dt2) {
            return DateDiff(DateTimePart.Second, dt1, dt2);
        }

        public override string Hour(string dt) {
            return Extract(DateTimePart.Hour, dt);
        }

        public override string Minute(string dt) {
            return Extract(DateTimePart.Minute, dt);
        }

        public override string Month(string dt) {
            return Extract(DateTimePart.Month, dt);
        }

        public override string NewDate(string y, string m, string d) {
            return string.Format("to_timestamp({0} || '-' || {1} || '-' || {2} || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')", y, m, d);
        }

        public override string NewDateTime(string y, string mo, string d, string h, string m, string s) {
            return string.Format("to_timestamp({0} || '-' || {1} || '-' || {2} || ' ' || {3} || ':' || {4} || ':' || {5},'YYYY-MM-DD HH24:MI:SS')", y, mo, d, h, m, s);
        }

        public override string NewTime(string h, string m, string s) {
            return string.Format("to_timestamp('1900-01-01 ' || {0} || ':' || {1} || ':' || {2}, 'YYYY-MM-DD HH24:MI:SS')", h, m, s);
        }
        
        public override string Second(string dt) {
            return Extract(DateTimePart.Second, dt);
        }

        public override string Year(string dt) {
            return Extract(DateTimePart.Year, dt);
        }

        #endregion

        #region Data Conversion

        public override string BooleanToInteger(string b) {
            return b;
        }

        public override string BooleanToText(string b) {
            return string.Format("decode({0}, 0, 'False', 'True')", b);
        }
        
        public override string DateTimeToDate(string dt) {
            return string.Format("to_timestamp(to_char({0} ,'YYYY-MM-DD') || ' ' || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')", dt);
        }

        public override string DateTimeToText(string dt, string dateFormat) {
            return string.Format("to_char({0}, '{1} HH24:MI:SS')", dt, dateFormat.ToUpper());
        }

        public override string DateTimeToTime(string dt) {
            return string.Format("to_timestamp('1900-01-01 ' || to_char({0}, 'HH24:MI:SS'), 'YYYY-MM-DD HH24:MI:SS')", dt);
        }

        public override string DateToText(string d, string dateFormat) {
            return string.Format("to_char({0}, '{1}')", d, dateFormat.ToUpper());
        }
        
        public override string DecimalToBoolean(string d) {
            return string.Format("decode({0}, 0, 0, 1)", d);
        }

        public override string DecimalToInteger(string d) {
            return Trunc(d);
        }

        public override string DecimalToLongInteger(string d) {
            return Trunc(d);
        }

        public override string LongIntegerToInteger(string b) {
            return Trunc(b);
        }

        public override string IntegerToLongInteger(string b) {
            return b;
        }

        public override string LongIntegerToText(string b) {
            return string.Format("to_char({0})", b);
        }

        public override string DecimalToText(string d) {
            return string.Format("to_char({0})", d);
        }

        public override string IdentifierToInteger(string id) {
            return string.Format("nvl({0}, 0)", id);
        }

        public override string IdentifierToLongInteger(string id) {
            return string.Format("nvl({0}, 0)", id);
        }

        public override string IdentifierToText(string id) {
            return string.Format("nvl({0}, ' ')", id);
        }

        public override string IntegerToBoolean(string i) {
            return string.Format("decode({0}, 0, 0, 1)", i);
        }

        public override string IntegerToDecimal(string i) {
            return i;
        }

        public override string LongIntegerToDecimal(string i) {
            return i;
        }

        public override string IntegerToText(string i) {
            return string.Format("to_char({0})", i);
        }

        public override string NullDate() {
            return "to_timestamp('1900-01-01', 'YYYY-MM-DD')";
        }
        
        public override string TextToDate(string t, string dateFormat) {
            return string.Format("to_timestamp({0} || ' ' || '00:00:00', '{1} HH24:MI:SS')", t, dateFormat.ToUpper());
        }

        public override string TextToDateTime(string t, string dateFormat) {
            return string.Format("nvl(to_timestamp({0}, '{1} HH24:MI:SS'), {2})", t, dateFormat.ToUpper(), NullDate());
        }

        public override string TextToDecimal(string t) {
            return string.Format("to_number(CASE WHEN {0} = ' ' THEN '0' ELSE {0} END)", t);
        }

        public override string TextToInteger(string t) {
            return Trunc(TextToDecimal(t));
        }

        public override string TextToLongInteger(string t) {
            return Trunc(TextToDecimal(t));
        }

        public override string TextToTime(string t) {
            return string.Format("to_timestamp('1900-01-01 ' || {0}, 'YYYY-MM-DD HH24:MI:SS')", t);
        }
        
        public override string TimeToText(string t) {
            return string.Format("to_char({0}, 'HH24:MI:SS')", t);
        }

        #endregion
        
        #region Date-handling
        private static string DateAdd(DateTimePart part, string dt, string n) {
            switch (part) {
                case DateTimePart.Month:
                case DateTimePart.Year:
                    return string.Format("(add_months({0}, {1}))", dt, part == DateTimePart.Month ? n : "12 * " + n);
                default:
                    return string.Format("({0} + numtodsinterval({1}, '{2}'))", dt, n, part.ToString().ToUpper());
            }
        }

        private static string DateDiff(DateTimePart part, string dt1, string dt2) {
            string subtractFormat = "to_date(to_char({0}, '{2}'), '{2}') - to_date(to_char({1}, '{2}'), '{2}')";
            string dayFormat = "round(" + subtractFormat + ")";
            string format = "round((" + subtractFormat + ") * {3})";
            switch (part) {
                case DateTimePart.Day:
                    return string.Format(dayFormat, dt2, dt1, "YYYY-MM-DD");
                case DateTimePart.Hour:
                    return string.Format(format, dt2, dt1, "YYYY-MM-DD HH24", 24);
                case DateTimePart.Minute:
                    return string.Format(format, dt2, dt1, "YYYY-MM-DD HH24:MI", 1440);
                case DateTimePart.Second:
                    return string.Format(format, dt2, dt1, "YYYY-MM-DD HH24:MI:SS", 86400);
                default:
                    throw new NotImplementedException();
            }
        }
        
        private static string Extract(DateTimePart part, string dt) {
            switch (part) {
                case DateTimePart.Hour:
                    return string.Format("to_number(to_char({0}, 'HH24'))", dt);
                case DateTimePart.WeekDay:
                    return string.Format("(to_number(to_char({0}, 'D')) - 1)", dt);
                default:
                    return string.Format("extract({0} FROM {1})", part.ToString().ToLower(), dt);
            }
        }
        
        #endregion
    }
}
