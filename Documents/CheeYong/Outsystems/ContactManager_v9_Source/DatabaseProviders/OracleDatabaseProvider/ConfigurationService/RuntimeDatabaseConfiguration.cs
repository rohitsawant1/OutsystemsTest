/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;
using System.Data;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService {

    public sealed class RuntimeDatabaseConfiguration : IRuntimeDatabaseConfiguration {
        private readonly IDatabaseProvider databaseProvider;

        public IDatabaseProvider DatabaseProvider {
            get { return databaseProvider; }
        }

        // Username and password are kept in sync with Connection string because of MDC
        [ConfigurationParameter(Persist=false)]
        public string Username {
            get {
                return ConnectionStringsHelper.ExtractUsername(ConnectionString);
            }
            set {
                ConnectionString = ConnectionStringsHelper.ReplaceUsername(ConnectionString, value);
            }
        }

        [ConfigurationParameter(Persist=false)]
        public string Password {
            get {
                return ConnectionStringsHelper.ExtractPassword(ConnectionString);
            }
            set {
                ConnectionString = ConnectionStringsHelper.ReplacePassword(ConnectionString, value);
            }
        }

        [ConfigurationParameter(Encrypt=true)]
        public string ConnectionString {
            get;
            set;
        }

        public string DatabaseIdentifier {
            get {
                return Schema;
            }
        }

        [ConfigurationParameter]
        public string Schema { get; set; }

        [ConfigurationParameter]
        public string IntrospectionMethod { get; set; }

        [ConfigurationParameter]
        public bool CI_AI { get; set; }

        [ConfigurationParameter]
        public string DateFunction { get; set; }

        [ConfigurationParameter]
        public bool DDLLockTimeoutEnabled {
            get {
                return DDLLockTimeout.Enabled;
            }
            set {
                DDLLockTimeout.Enabled = value;
            }
        }

        [ConfigurationParameter]
        public int DDLLockTimeoutValue {
            get {
                return DDLLockTimeout.Value;
            }
            set {
                DDLLockTimeout.Value = value;
            }
        }

        [ConfigurationParameter]
        public string TablespaceIndex { get; set; }

        [ConfigurationParameter]
        public string Tablespace { get; set; }
        
        [ConfigurationParameter]
        public string NLS_Language { get; set; }

        [ConfigurationParameter]
        public string NLS_Territory { get; set; }

        public class DDLLockTimeoutSetting {

            public bool Enabled { get; set; }

            public int Value { get; set; }

        }

        public DDLLockTimeoutSetting DDLLockTimeout { get; internal set; }

        public RuntimeDatabaseConfiguration(IDatabaseProvider databaseProvider) {
            this.databaseProvider = databaseProvider;
            DDLLockTimeout = new DDLLockTimeoutSetting();
        }

        public override bool Equals(object obj) {
            if (obj == null || GetType() != obj.GetType()) {
                return false;
            }

            var other = (RuntimeDatabaseConfiguration)obj;

            return
                DatabaseProvider == other.DatabaseProvider
                && StringParameter.Eq(ConnectionString, other.ConnectionString)
                && StringParameter.Eq(Schema, other.Schema)
                && StringParameter.Eq(IntrospectionMethod, other.IntrospectionMethod)
                && StringParameter.Eq(Tablespace, other.Tablespace)
                && StringParameter.Eq(TablespaceIndex, other.TablespaceIndex)
                && CI_AI == other.CI_AI;
        }

        public override int GetHashCode() {
            int hash = 17;
            hash = hash * 31 + StringParameter.Hash(ConnectionString);
            hash = hash * 31 + StringParameter.Hash(Schema);
            hash = hash * 31 + StringParameter.Hash(IntrospectionMethod);
            hash = hash * 31 + StringParameter.Hash(Tablespace);
            hash = hash * 31 + StringParameter.Hash(TablespaceIndex);
            hash = hash * 31 + CI_AI.GetHashCode();
            return hash;
        }

        public override string ToString() {
            return ConnectionStringsHelper.ReplacePassword(ConnectionString, "********");
        }
    }

    internal static class StringParameter {

        internal static bool Eq(string a, string b) {
            return (string.IsNullOrEmpty(a) && string.IsNullOrEmpty(b)) || a == b;
        }

        internal static int Hash(string a) {
            if (a == null) {
                return "".GetHashCode();
            } else {
                return a.GetHashCode();
            }
        }

    }
}
