/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Text;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService {
    [DoNotObfuscate]
    public class DatabaseConfiguration : BaseDatabaseConfiguration {

        private const int DEFAULT_PORT_VALUE = 1521;

        public DatabaseConfiguration() {
            Port = DEFAULT_PORT_VALUE;
        }

        public override bool Equals(object obj) {
            if (!base.Equals(obj)) {
                return false;
            }

            var other = obj as DatabaseConfiguration;

            return ((other != null) && EqualsBasedOnParts(new object[] { Host, Port, ServiceName, NLSLanguage, DatabaseIdentifier, DbAuthType, Username, Password },
                new object[] {other.Host, other.Port, other.ServiceName, other.NLSLanguage, other.DatabaseIdentifier, other.DbAuthType, other.Username, other.Password }));
        }

        public override int GetHashCode() {
            return base.GetHashCode() ^ GetHashCodeBasedOnParts(Host, Port, ServiceName, NLSLanguage, DatabaseIdentifier, DbAuthType, Username, Password);
        }

        public override IDatabaseProvider DatabaseProvider { get { return Oracle.DatabaseProvider.Instance; } }

        public AuthenticationType DbAuthType { get; set; }

        [UserDefinedConfigurationParameter(Label = "Host", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation, Prompt = "Host")]
        public string Host { get; set; }

        [UserDefinedConfigurationParameter(Label = "Port", IsMandatory = true, Order = 2, Region = ParameterRegion.DatabaseLocation, Prompt = "Port")]
        public int Port { get; set; }

        [UserDefinedConfigurationParameter(Label = "Service Name", IsMandatory = true, Order = 3, Region = ParameterRegion.DatabaseLocation, Prompt = "Service Name")]
        public string ServiceName { get; set; }

        [UserDefinedConfigurationParameter(Label = "NLS_LANGUAGE Parameter Value", IsMandatory = false, Order = 4, Region = ParameterRegion.DatabaseLocation, Example = "Check the \"Database Globalization Support Guide\" of your Oracle database version for a list of supported NLS_LANGUAGE parameter values.")]
        public string NLSLanguage { get; set; }

        [UserDefinedConfigurationParameter(Label = "Username", IsMandatory = true, Order = 1, Region = ParameterRegion.UserSpecific, Prompt = "Username")]
        public string Username { get; set; }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, Order = 2, Region = ParameterRegion.UserSpecific, Prompt = "Password")]
        public string Password { get; set; }

        private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(
            "Configuration parameters must be separated by a semi-colon ‘;’."
            + " When configured, username and password are automatically added to the generated connection string."
            + " Configuration example: DataSource=<db>;Integrated Security=no",
            "Configuration Parameters",
            "[user id=$Username;password=<hidden>;]$AdvancedConnectionStringField");

        public override AdvancedConfiguration AdvancedConfiguration {
            get {
                return advancedConfiguration;
            }
            set {
                advancedConfiguration = value;
            }
        }

        [ConfigurationParameter]
        public string Schema { get; set; }

        public override string DatabaseIdentifier {
            get { return Schema; }
        }

        private const string _usernamePart = "user id={0};";
        private const string _passwordPart = "password={0};";
        private const string _datasourcePart = "data source={0}/{1};";
        private const string _datasourceWithPortPart = "data source={0}:{1}/{2};";

        protected override string AssembleBasicConnectionString() {

            var sb = new StringBuilder();
            sb.Append(string.Format(_usernamePart, Username))
              .Append(string.Format(_passwordPart, Password));

            if (Port == DEFAULT_PORT_VALUE) {
                sb.Append(string.Format(_datasourcePart, Host, ServiceName));
            } else {
                sb.Append(string.Format(_datasourceWithPortPart, Host, Port, ServiceName));
            }

            return sb.ToString();
        }

        protected override string AssembleAdvancedConnectionString() {
            return new StringBuilder()
                    .Append(string.IsNullOrEmpty(Username) ? "" : string.Format(_usernamePart, Username))
                    .Append((string.IsNullOrEmpty(Password) || string.IsNullOrEmpty(Username)) ? "" : string.Format(_passwordPart, Password))
                    .Append(AdvancedConfiguration.AdvancedConnectionStringField)
                .ToString();
        }

        private string _connectionStringOverride;
        public override string ConnectionStringOverride {
            get { return _connectionStringOverride; }
            set {
                _connectionStringOverride = value;
                if (_connectionStringOverride.IsNullOrEmpty()) {
                    return;
                }

                Regex userIdRegex = new Regex(@"user id=\s*([^ ;]+)\s*;", RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);
                Match userIdMatch = userIdRegex.Match(_connectionStringOverride + (_connectionStringOverride.EndsWith(";") ? "" : ";"));
                Username = userIdMatch.Groups[1].Value.Replace("\"", "");
            }
        }

        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration {
            get {
                return new RuntimeDatabaseConfiguration (DatabaseProvider){
                    ConnectionString = ConnectionString,
                    Schema = Schema,
                    NLS_Language = NLSLanguage
                };
            }
        }
    }
}
