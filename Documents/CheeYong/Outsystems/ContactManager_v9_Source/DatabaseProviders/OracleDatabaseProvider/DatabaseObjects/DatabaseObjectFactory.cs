/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using System.Text.RegularExpressions;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.DatabaseObjects {
    public class DatabaseObjectFactory : IDatabaseObjectFactory {

        private static readonly Regex linkRegex = new Regex("@(\\.?\\w)+|@\"(\\.?\\w)+\"", RegexOptions.Compiled);

        // A sql server piece is any any charater excluding [, ], " and . if not delimited
        // and any character excluding [, ] and " if delimited. A sql delimiter is the set [, ] and ".
        private static readonly Regex pieceRegex = new Regex("(([^ \\.\\[\\]\"]+)|(\"[^\\[\\]\"]+\"))", RegexOptions.Compiled);

        // A sql separator is a . and any number of spaces...
        private static readonly Regex separatorRegex = new Regex(" *\\. *", RegexOptions.Compiled);

        private static readonly char[] trimChars = " []\"".ToCharArray();

        protected readonly IDatabaseServices databaseServices;

        public DatabaseObjectFactory(IDatabaseServices databaseServices) {
            this.databaseServices = databaseServices;
        }

        public IDatabaseInfo CreateDatabaseInfo(string databaseIdentifier) {
            string databaseLink;
            string schema = ParseDatabaseIdentifier(databaseIdentifier, true, out databaseLink);
            return new DatabaseInfo(databaseServices, schema, databaseLink);
        }

        public ITableSourceInfo CreateTableSourceInfo(string qualifiedName) {
            string databaseLink;
            string table;
            string schema;
            if (ParseQualifiedTableName(qualifiedName, out databaseLink, out schema, out table)) {
                return new TableSourceInfo(databaseServices, new DatabaseInfo(databaseServices, schema, databaseLink), table, qualifiedName);
            }
            throw new InvalidDatabaseObjectIdentifierException("'" + qualifiedName + "' is not a valid qualified table name.");
        }

        private string ParseDatabaseIdentifier(string databaseIdentifier, bool removeEscapeChars, out string databaseLink) {
            string schema = databaseIdentifier;
            var introspectionService = (IntrospectionService.IntrospectionService) databaseServices.IntrospectionService;
            if (introspectionService.IncludeDatabaseLinks) {
                MatchCollection mc = linkRegex.Matches(databaseIdentifier);
                databaseLink = mc.Count != 0 ? mc[mc.Count - 1].Value : "";
                if (databaseLink.Length > 0 && databaseIdentifier.EndsWith(databaseLink)) {
                    schema = databaseIdentifier.Remove(databaseIdentifier.Length - databaseLink.Length, databaseLink.Length);
                }
                databaseLink = databaseLink.Replace("@", "");
            } else {
                databaseLink = "";
            }

            if (removeEscapeChars) {
                databaseLink = databaseLink.Trim(trimChars);
                schema = schema.Trim(trimChars);
            }
            return schema;
        }
        
        private bool ParseQualifiedTableName(string qualifiedName, out string databaseLink, out string schema, out string table) {
            schema = "";
            table = "";
            string dbLink;
            string qualifiedNameWithoutServer = ParseDatabaseIdentifier(qualifiedName, false, out dbLink);
            databaseLink = dbLink.Trim(trimChars);
            
            IList<string> pieces;
            bool parseTableNameRes = ParseTableName(1, 2, qualifiedNameWithoutServer, out pieces);
            if (parseTableNameRes) {
                switch (pieces.Count) {
                    case 2:
                        schema = pieces[0];
                        table = pieces[1];
                        break;
                    case 1:
                        table = pieces[0];
                        break;
                }
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// Splits a physical table name into its separate components.
        /// </summary>
        private bool ParseTableName(int minPieces, int maxPieces, string tableName, out IList<string> pieces) {
            pieces = new List<string>(3);
            // Goes for validation...
            int piecesFound = 0;
            // Adds a separator at the end for simplification...
            tableName = tableName.Trim() + ".";
            do {
                // Checks for a piece at start...
                Match pieceMatch = pieceRegex.Match(tableName);
                if (0 == pieceMatch.Length || 0 != pieceMatch.Index) {
                    return false;
                } 
                pieces.Add(pieceMatch.ToString().Trim(trimChars));
                // Removes the matched piece...
                tableName = tableName.Substring(pieceMatch.Length);
                // Checks for a separator...
                Match separatorMatch = separatorRegex.Match(tableName);
                if (0 == separatorMatch.Length || 0 != separatorMatch.Index) {
                    return false;
                }
                // Removes the matched separator...
                tableName = tableName.Substring(separatorMatch.Length);
                // Found one more piece...
                piecesFound++;
            } while (0 != tableName.Length);
            // Checks number of pieces...
            if (piecesFound < minPieces || piecesFound > maxPieces) {
                return false;
            }
            // All ok...
            return true;
        }

        public IDatabaseInfo CreateLocalDatabaseInfo() {
            return new DatabaseInfo(databaseServices, ((RuntimeDatabaseConfiguration) databaseServices.DatabaseConfiguration).Schema);
        }
    }
}
