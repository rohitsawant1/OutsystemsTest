/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;   
using System.Data;
using System.Threading;
using OutSystems.HubEdition.DatabaseProvider.Oracle.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ExecutionService;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;
using OutSystems.RuntimeCommon;
using Oracle.ManagedDataAccess.Client;

namespace OutSystems.HubEdition.DatabaseProvider.Oracle.TransactionService {
    
    public class TransactionService: BaseTransactionService {
		
        static TransactionService() {

        }
        private RuntimeDatabaseConfiguration DatabaseConfiguration { get { return (RuntimeDatabaseConfiguration) DatabaseServices.DatabaseConfiguration; } }
        
        protected override IsolationLevel IsolationLevel { get { return IsolationLevel.ReadCommitted; } }

        protected override IDbConnection GetConnectionFromDriver() {
            OracleConnection conn = null;
            try {
                conn = new OracleConnection(DatabaseServices.DatabaseConfiguration.ConnectionString);
                return conn;
            } catch {
                if (conn != null) {
                    conn.Dispose();
                }
                throw;
            }
        }

        protected override void ReleaseAllPooledConnections() {
            OracleConnection.ClearAllPools();
        }

        public override ITransactionManager CreateTransactionManager() {
            return new TransactionManager(this);
        }

        protected override IDbConnection GetConnection() {
            var conn = base.GetConnection();
            IncludeExtraConfigurations(conn);
            return conn;
        }

        private void IncludeExtraConfigurations(IDbConnection conn) {
            IDbCommand comm = conn.CreateCommand();

            string commandText = "ALTER SESSION SET NLS_LENGTH_SEMANTICS = 'CHAR' NLS_NUMERIC_CHARACTERS='.,' ";
            
            string nlsLanguage = DatabaseConfiguration.NLS_Language;
            if (!string.IsNullOrEmpty(nlsLanguage)) {
                commandText += string.Format(" NLS_LANGUAGE='{0}'", nlsLanguage);
            }
            string nlsTerritory = DatabaseConfiguration.NLS_Territory;
            if (!string.IsNullOrEmpty(nlsTerritory)) {
                commandText += string.Format(" NLS_TERRITORY='{0}'", nlsTerritory);
            }

            if (!string.IsNullOrEmpty(DatabaseConfiguration.Schema)) {
                commandText += " CURRENT_SCHEMA=\"" + DatabaseConfiguration.Schema + "\"";
            }

            if (DatabaseConfiguration.CI_AI) {
                commandText += " NLS_COMP=LINGUISTIC NLS_SORT=BINARY_AI";
            }

            // #570898 - avoid ORA-00054 in oracle 11+ by changing ddl_lock_timeout to the same value as DDLLockTimeout configuration parameter 
            if (DatabaseConfiguration.DDLLockTimeoutEnabled) {
                commandText += " DDL_LOCK_TIMEOUT=" + DatabaseConfiguration.DDLLockTimeout.Value;
            }

            comm.CommandText = commandText;
            comm.CommandTimeout = 10/*seconds*/;
            comm.ExecuteNonQuery();
        }

        public void RestoreComparisonSettings(IDbTransaction trans, IExecutionService execution) {
            if (DatabaseConfiguration.CI_AI) {
                ((ExecutionService.ExecutionService)execution).ForceCIAISetting(trans);
            } else {
                ((ExecutionService.ExecutionService)execution).ForceCSASSetting(trans);
            }
        }

        public TransactionService(IDatabaseServices databaseServices): base (databaseServices) {}

        public override bool NeedsSeparateAdminConnection { get { return true; } }
    }
}
