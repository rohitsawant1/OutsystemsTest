/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data.SqlTypes;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.ExecutionService {
    internal static class SQLServerTypeHelper {
        /// <summary>
        /// .NET Decimal has a max precision of 28-29, so we need to set it here to prevent overflow errors (#708477, #1105735)
        /// </summary>        
        internal static decimal FixDecimalPrecision(SqlDecimal value) {
            int nrDigitsIntegerPart = SqlDecimal.Floor(value).ToString().Length;
            int newScale = 29 - nrDigitsIntegerPart;
			//#1214665 Original scale must be preserved if possible because SQL driver Value method will append trailing zeros 
            if (newScale > value.Scale) {
                newScale = value.Scale;
            }
            try {
                // Try to convert to a decimal with 29 digits
                return SqlDecimal.ConvertToPrecScale(value, 29, newScale).Value;
            } catch (OverflowException) {
                // Value didn't fit a decimal with 29 digits, try with 28 digits
                newScale = 28 - nrDigitsIntegerPart;
                if (newScale > value.Scale) {
                    newScale = value.Scale;
                }
                return SqlDecimal.ConvertToPrecScale(value, 28, newScale).Value;
            }
        }
    }
}
