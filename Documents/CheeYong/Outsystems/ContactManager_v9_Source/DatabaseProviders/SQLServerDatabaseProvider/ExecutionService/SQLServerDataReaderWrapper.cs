/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.ExecutionService {

    /// <summary>
    /// Wrapper to IDataReader used to workaround some limitations of the ODP.NET SQL Server driver
    /// </summary>
    internal class SQLServerDataReaderWrapper : IDataReader {

        private readonly SqlDataReader reader;
        private readonly ExecutionService executionService;

        internal SQLServerDataReaderWrapper(SqlDataReader reader, ExecutionService executionService) {
            this.reader = reader;
            this.executionService = executionService;
        }

        public void Close() {
            reader.Close();
        }

        public int Depth {
            get { return reader.Depth; }
        }

        public DataTable GetSchemaTable() {
            return reader.GetSchemaTable();
        }

        public bool IsClosed {
            get { return reader.IsClosed; }
        }

        public bool NextResult() {
            return reader.NextResult();
        }

        public bool Read() {
            return reader.Read();
        }

        public int RecordsAffected {
            get { return reader.RecordsAffected; }
        }

        public void Dispose() {
            reader.Dispose();
        }

        public int FieldCount {
            get { return reader.FieldCount; }
        }

        public bool GetBoolean(int i) {
            return reader.GetBoolean(i);
        }

        public byte GetByte(int i) {
            return reader.GetByte(i);
        }

        public long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length) {
            return reader.GetBytes(i, fieldOffset, buffer, bufferoffset, length);
        }

        public char GetChar(int i) {
            return reader.GetChar(i);
        }

        public long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length) {
            return reader.GetChars(i, fieldoffset, buffer, bufferoffset, length);
        }

        public IDataReader GetData(int i) {
            return reader.GetData(i);
        }

        public string GetDataTypeName(int i) {
            return reader.GetDataTypeName(i);
        }

        public DateTime GetDateTime(int i) {
            return reader.GetDateTime(i);
        }

        public decimal GetDecimal(int i) {
            // Fix overflow problems when reading decimals
            return SQLServerTypeHelper.FixDecimalPrecision(reader.GetSqlDecimal(i));
        }

        public double GetDouble(int i) {
            return reader.GetDouble(i);
        }

        public Type GetFieldType(int i) {
            return reader.GetFieldType(i);
        }

        public float GetFloat(int i) {
            return reader.GetFloat(i);
        }

        public Guid GetGuid(int i) {
            return reader.GetGuid(i);
        }

        public short GetInt16(int i) {
            return reader.GetInt16(i);
        }

        public int GetInt32(int i) {
            return reader.GetInt32(i);
        }

        public long GetInt64(int i) {
            return reader.GetInt64(i);
        }

        public string GetName(int i) {
            return reader.GetName(i);
        }

        public int GetOrdinal(string name) {
            return reader.GetOrdinal(name);
        }

        public string GetString(int i) {
            return reader.GetString(i);
        }

        public object GetValue(int i) {
            object val = reader.GetSqlValue(i);
            if (val is SqlDecimal) {
                SqlDecimal valAsDec = (SqlDecimal)val;
                if (!valAsDec.IsNull) {
                    // Fix overflow problems when reading decimals
                    return SQLServerTypeHelper.FixDecimalPrecision((SqlDecimal)val);
                }
            }
            return reader.GetValue(i);
        }

        public int GetValues(object[] values) {
            for (int i = 0; i < values.Length; i++) {
                values[i] = GetValue(i);
            }
            return values.Length;
        }

        public bool IsDBNull(int i) {
            return reader.IsDBNull(i);
        }

        public object this[string name] {
            get { return GetValue(GetOrdinal(name)); }
        }

        public object this[int i] {
            get { return GetValue(i); }
        }
    }
}
