/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Data;
using System.Data.SqlClient;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.ExecutionService;
using OutSystems.HubEdition.Extensibility.Data.TransactionService;
using OutSystems.RuntimeCommon;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.TransactionService {
    [DoNotObfuscate]
    public class TransactionService : BaseTransactionService {
        private const string TRANSCOUNT_QUERY = "select @@TRANCOUNT";

        protected override IsolationLevel IsolationLevel { get { return IsolationLevel.ReadUncommitted; } }

        // Copied from GotDotNet
        protected override IDbConnection GetConnectionFromDriver() {
            return new SqlConnection(DatabaseServices.DatabaseConfiguration.ConnectionString);
        }

        protected override void ReleaseAllPooledConnections() {
            SqlConnection.ClearAllPools();
        }

        public override ITransactionManager CreateTransactionManager() {
            return new TransactionManager(this);
        }

        public TransactionService(IDatabaseServices databaseServices) : base(databaseServices) { }

        public override bool NeedsSeparateAdminConnection { get { return false; } }

        [DoNotObfuscate]
        public bool TransactionExists(IDbTransaction trans) {
            IExecutionService executionService = DatabaseServices.ExecutionService;

            if (trans.Connection == null) {
                return false;
            }
            IDbCommand sqlCmd = executionService.CreateCommand(trans, TRANSCOUNT_QUERY);
            int i = (int)executionService.ExecuteScalar(sqlCmd);
            return i > 0;
        }
    }
}
