/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Text;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.RuntimeCommon.ObfuscationProperties;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.ConfigurationService {
    [DoNotObfuscate]
    public class DatabaseConfiguration : BaseDatabaseConfiguration {

        public override IDatabaseProvider DatabaseProvider { get { return SqlServer.DatabaseProvider.Instance; } }

        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.DatabaseLocation)]
        public string Server { get; set; }

        public override string DatabaseIdentifier {
            get { return Catalog; }
        }

        [UserDefinedConfigurationParameter(Label = "Database", IsMandatory = true, Order = 2, Region = ParameterRegion.DatabaseLocation)]
        public string Catalog { get; set; }

        public AuthenticationType DbAuthType { get; set; }

        [UserDefinedConfigurationParameter(Label = "Username", IsMandatory = true, Order = 1, Region = ParameterRegion.UserSpecific)]
        public string Username { get; set; }

        [UserDefinedConfigurationParameter(Label = "Password", IsPassword = true, Order = 2, Region = ParameterRegion.UserSpecific)]
        public string Password { get; set; }

        private AdvancedConfiguration advancedConfiguration = new AdvancedConfiguration(
            "Configuration parameters must be separated by a semi-colon ‘;’."
            + " When configured, username and password are automatically added to the generated connection string."
            + " Configuration example: DataSource=<db>;Integrated Security=no",
            "Configuration Parameters",
            "[user id=$Username;password=<hidden>;]$AdvancedConnectionStringField");

        public override AdvancedConfiguration AdvancedConfiguration {
            get {
                return advancedConfiguration;
            }
            set {
                advancedConfiguration = value;
            }
        }

        [DoNotObfuscate]
        [UserDefinedConfigurationParameter(Label = "Enable Unicode Support", IsMandatory = true, Order = 3, Region = ParameterRegion.DatabaseLocation, Example = "Enable this flag if your table or column names have non-ASCII characters. When disabled, if your table (or a\ngiven column) must handle Unicode data, Unicode to ASCII data conversion may occur and issues can arise.\nNote: Enabling this flag can affect runtime performance.")]
        public virtual bool DatabaseUnicodeSupport { get; set; }

        public override int GetHashCode() {
            return base.GetHashCode() ^ GetHashCodeBasedOnParts(Server, Catalog, DbAuthType, Username, Password);
        }

        public override bool Equals(object obj) {
            if (!base.Equals(obj)) {
                return false;
            }

            var other = obj as DatabaseConfiguration;

            return ((other != null) && EqualsBasedOnParts(new object[] { Server, Catalog, DbAuthType, Username, Password },
                new object[] { other.Server, other.Catalog, other.DbAuthType, other.Username, other.Password }));
        }

        private const string _usernamePart = "user id={0};";
        private const string _passwordPart = "password={0};";
        private const string _datasourcePart = "data source={0};";
        private const string _catalogPart = "initial catalog={0};";
        protected override string AssembleBasicConnectionString() {
            return new StringBuilder()
                    .Append(string.Format(_usernamePart, Username))
                    .Append(string.Format(_passwordPart, Password))
                    .Append(string.Format(_datasourcePart, Server))
                    .Append(string.Format(_catalogPart, Catalog))
                .ToString();
        }

        protected override string AssembleAdvancedConnectionString() {
            return new StringBuilder()
                    .Append(string.IsNullOrEmpty(Username) ? "" : string.Format(_usernamePart, Username))
                    .Append((string.IsNullOrEmpty(Password) || string.IsNullOrEmpty(Username)) ? "" : string.Format(_passwordPart, Password))
                    .Append(AdvancedConfiguration.AdvancedConnectionStringField)
                .ToString();
        }

        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration {
            get {
                return new RuntimeDatabaseConfiguration(DatabaseProvider) {
                    Username = Username,
                    Catalog = Catalog,
                    DatabaseUnicodeSupport = DatabaseUnicodeSupport,
                    ConnectionString = ConnectionString
                };
            }
        }
    }
}

