/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.DatabaseProvider.SqlServer.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.DMLService;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.DatabaseObjects {
    public class DatabaseInfo : BaseDatabaseInfo {

        public DatabaseInfo(IDatabaseServices databaseServices, string catalog) : this(databaseServices, catalog, null) { }

        public DatabaseInfo(IDatabaseServices databaseServices, string catalog, string linkedServer) : base(databaseServices) {
            Catalog = catalog;
            if (string.IsNullOrEmpty(Catalog)) {
                DatabaseServices sqlServices = databaseServices as DatabaseServices;
                if (sqlServices != null) {
                    Catalog = ((RuntimeDatabaseConfiguration) sqlServices.DatabaseConfiguration).Catalog;
                }
            }
            LinkedServer = linkedServer ?? string.Empty;
        }

        public override sealed string Identifier {
            get {
                return (IsLinkedServer ? DMLIdentifiers.EscapeIdentifierInner(LinkedServer) + "." : "") +
                       DMLIdentifiers.EscapeIdentifierInner(Catalog);
            }
        }

        public string Catalog { get; private set; }

        public string LinkedServer { get; private set; }

        public bool IsLinkedServer {
            get { return !string.IsNullOrEmpty(LinkedServer); }
        }

        public override bool Equals(IDatabaseInfo other) {
            DatabaseInfo dbi = other as DatabaseInfo;
            return ReferenceEquals(this, other) ||
                   (dbi != null && Catalog.EqualsIgnoreCase(dbi.Catalog) && IsLinkedServer == dbi.IsLinkedServer &&
                    LinkedServer.EqualsIgnoreCase(dbi.LinkedServer));
        }

        public override int GetHashCode() {
            return Catalog.GetHashCode() ^ LinkedServer.GetHashCode();
        }
    }
}
