/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Collections.Generic;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.DatabaseObjects;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.IntrospectionService;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.DMLService;
using OutSystems.HubEdition.Extensibility.Data.DMLService.DMLPlaceholders;
using OutSystems.HubEdition.Extensibility.Data.IntrospectionService;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.DMLService {
    public class DMLEntityActions : BaseDMLEntityActions {

        internal DMLEntityActions(IDMLService dmlService, ITableSourceInfo tableSourceInfo) : base(dmlService, tableSourceInfo) { }

        public new TableSourceInfo TableSourceInfo {
            get {
                return base.TableSourceInfo as TableSourceInfo;
            }
        }

        private DatabaseInfo DatabaseInfo {
            get {
                return TableSourceInfo != null ? TableSourceInfo.Database as DatabaseInfo : null;
                
            }
        }

        private bool IsLinkedServerEntity {
            get {
                DatabaseInfo info = DatabaseInfo;
                return info != null && info.IsLinkedServer;
            }
        }

        private volatile IDictionary<SelectPlaceholder, string> getForUpdatePlaceholderValues;
        private volatile IDictionary<InsertPlaceholder, string> createPlaceholderValues;
        private volatile IDictionary<InsertPlaceholder, string> createAndRetrieveIdPlaceholderValues;
        private volatile IDictionary<UpdatePlaceholder, string> updatePlaceholderValues;
        private volatile IDictionary<UpdatePlaceholder, string> updatePlaceholderValuesLinkedTable;
        private volatile IDictionary<DeletePlaceholder, string> deletePlaceholderValues;
        
        public override bool RequiresInlineParameterValues(EntityActionKind action) {
            return UseInlineBehavior(action);
        }

        public override bool RequiresInlineTableNames(EntityActionKind action) {
            return UseInlineBehavior(action);
        }

        public override string GetInlineTableName(EntityActionKind action) {
            if (UseInlineBehavior(action)) {
                return string.Format("{0}.{1}.{2}", 
                    DMLService.Identifiers.EscapeIdentifier(DatabaseInfo.Catalog), 
                    DMLService.Identifiers.EscapeIdentifier(TableSourceInfo.Schema),
                    DMLService.Identifiers.EscapeIdentifier(TableSourceInfo.Name));
            }
            return base.GetInlineTableName(action);
        }
        
        public override IDictionary<SelectPlaceholder, string> SQLPlaceholderValuesForGetForUpdate() {
            if (IsLinkedServerEntity) {
                Dictionary<SelectPlaceholder, string> placeholderValues = new Dictionary<SelectPlaceholder, string>();
                placeholderValues.Add(SelectPlaceholder.BeforeStatement,
                    "SELECT * FROM OPENQUERY(" + LinkedServerNameEscaped + ", '");
                placeholderValues.Add(SelectPlaceholder.BeforeWhereKeyword, "WITH ( UPDLOCK )");
                placeholderValues.Add(SelectPlaceholder.AfterStatement, " ')");
                return placeholderValues;
            }
            if (getForUpdatePlaceholderValues == null) {
                lock (this) {
                    if (getForUpdatePlaceholderValues == null) {
                        getForUpdatePlaceholderValues = new Dictionary<SelectPlaceholder, string>();
                        getForUpdatePlaceholderValues.Add(SelectPlaceholder.BeforeWhereKeyword, "WITH ( UPDLOCK )");
                    }
                }
            }
            return getForUpdatePlaceholderValues;
        }

        public override IDictionary<InsertPlaceholder, string> SQLPlaceholderValuesForCreate() {
            if (createPlaceholderValues == null) {
                lock (this) {
                    if (createPlaceholderValues == null) {
                        createPlaceholderValues = GetSQLPlaceholderValuesForCreate(false);
                    }
                }
            }
            return createPlaceholderValues;
        }

        public override IDictionary<InsertPlaceholder, string> SQLPlaceholderValuesForCreateAndRetrieveId(string idColumnName, string outputParameterName, out RetrieveIdMethod retrieveIdMethod) {
            retrieveIdMethod = RetrieveIdMethod.ReturnValue;
            if (createAndRetrieveIdPlaceholderValues == null) {
                lock (this) {
                    if (createAndRetrieveIdPlaceholderValues == null) {
                        createAndRetrieveIdPlaceholderValues = GetSQLPlaceholderValuesForCreate(true);
                    }
                }
            }
            return createAndRetrieveIdPlaceholderValues;
        }

        private IDictionary<InsertPlaceholder, string> GetSQLPlaceholderValuesForCreate(bool retrieveId) {
            IDictionary<InsertPlaceholder, string> placeholders = new Dictionary<InsertPlaceholder, string>();
            if (IsLinkedServerEntity) {
                placeholders.Add(InsertPlaceholder.BeforeStatement, "SET NOCOUNT ON; SET XACT_ABORT ON;");
                placeholders.Add(InsertPlaceholder.AfterStatement, "; SET XACT_ABORT OFF;" + (retrieveId ? GetLastInsertedEntityIdentifierStatement() : ""));
            } else {
                placeholders.Add(InsertPlaceholder.BeforeStatement, "SET NOCOUNT ON;");
                if (retrieveId) {
                    placeholders.Add(InsertPlaceholder.AfterStatement, "; " + GetLastInsertedEntityIdentifierStatement());
                }
            }
            return placeholders;
        }

        public override IDictionary<UpdatePlaceholder, string> SQLPlaceholderValuesForUpdate() {
            if (IsLinkedServerEntity) {
                if (updatePlaceholderValuesLinkedTable == null) {
                    lock (this) {
                        if (updatePlaceholderValuesLinkedTable == null) {
                            updatePlaceholderValuesLinkedTable = new Dictionary<UpdatePlaceholder, string>();
                            updatePlaceholderValuesLinkedTable.Add(UpdatePlaceholder.BeforeStatement, "SET NOCOUNT OFF; SET XACT_ABORT ON;");
                            updatePlaceholderValuesLinkedTable.Add(UpdatePlaceholder.AfterStatement, "; SET XACT_ABORT OFF;");
                        }
                    }
                }
                return updatePlaceholderValuesLinkedTable;
            }
            if (updatePlaceholderValues == null) {
                lock (this) {
                    if (updatePlaceholderValues == null) {
                        updatePlaceholderValues = new Dictionary<UpdatePlaceholder, string>();
                        updatePlaceholderValues.Add(UpdatePlaceholder.BeforeStatement, "SET NOCOUNT OFF;");
                    }
                }
            }
            return updatePlaceholderValues;
        }

        public override IDictionary<DeletePlaceholder, string> SQLPlaceholderValuesForDelete() {
            if (IsLinkedServerEntity) {
                if (deletePlaceholderValues == null) {
                    lock (this) {
                        if (deletePlaceholderValues == null) {
                            deletePlaceholderValues = new Dictionary<DeletePlaceholder, string>();
                            deletePlaceholderValues.Add(DeletePlaceholder.BeforeStatement, "SET XACT_ABORT ON;");
                            deletePlaceholderValues.Add(DeletePlaceholder.AfterStatement, "; SET XACT_ABORT OFF;");
                        }
                    }
                }
                return deletePlaceholderValues;            
            }
            return null;
        }

        private bool UseInlineBehavior(EntityActionKind action) {
            return IsLinkedServerEntity && action == EntityActionKind.GetForUpdate;
        }

        private string GetLastInsertedEntityIdentifierStatement() {
            if (IsLinkedServerEntity) {
                return "SELECT * FROM OPENQUERY(" + LinkedServerNameEscaped + ", 'SELECT IDENT_CURRENT(''" + TableSourceInfo.Name + "'');');";
            } 
            return "SELECT SCOPE_IDENTITY();";
        }

        private string LinkedServerNameEscaped {
            get { return DatabaseInfo.LinkedServer.Replace("\\", "\\\\"); }
        }
    }
}
