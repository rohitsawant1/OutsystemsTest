/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.Extensibility.Data.DMLService;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.DMLService {
    internal class DMLFunctions : BaseDMLFunctions {

        private enum DateTimePart {
            Year, 
            Month, 
            Day, 
            WeekDay, 
            Hour, 
            Minute, 
            Second 
        }
        
        internal DMLFunctions(IDMLService dmlService) : base(dmlService) { }

        public new DMLService DMLService {
            get { return (DMLService)base.DMLService; }
        }

        #region Math
        public override string Trunc(string n) {
            return string.Format("round({0}, 0, 1)", n);
        } 
        #endregion

        #region Text
        public override string Concat(string t1, string t2) {
            return string.Format("({0} + {1})", t1, t2);
        }
        
        public override string Index(string t, string search) {
            return string.Format("(charindex({0}, {1}) -1)", search, t);
        }

        public override string Length(string t) {
            return string.Format("len({0})", t);
        }

        public override string Substr(string t, string start, string length) {
            return string.Format("substring({0}, {1} + 1, {2})", t, start, length);
        }

        public override string Trim(string t) {
            return TrimStart(TrimEnd(t));
        } 
        #endregion

        #region Date & Time
        public override string AddDays(string dt, string n) {
            return DateAdd(DateTimePart.Day, dt, n);
        }

        public override string AddHours(string dt, string n) {
            return DateAdd(DateTimePart.Hour, dt, n);
        }

        public override string AddMinutes(string dt, string n) {
            return DateAdd(DateTimePart.Minute, dt, n);
        }

        public override string AddMonths(string dt, string n) {
            return DateAdd(DateTimePart.Month, dt, n);
        }

        public override string AddSeconds(string dt, string n) {
            return DateAdd(DateTimePart.Second, dt, n);
        }

        public override string AddYears(string dt, string n) {
            return DateAdd(DateTimePart.Year, dt, n);
        }

        public override string BuildDateTime(string d, string t) {
            return NewDateTime(DatePart(DateTimePart.Year, d), DatePart(DateTimePart.Month, d), DatePart(DateTimePart.Day, d),
                DatePart(DateTimePart.Hour, t), DatePart(DateTimePart.Minute, t), DatePart(DateTimePart.Second, t));
        }

        public override string Day(string dt) {
            return DatePart(DateTimePart.Day, dt);
        }

        public override string DayOfWeek(string dt) {
            return string.Format("({0} - 1)", DatePart(DateTimePart.WeekDay, dt));
        }

        public override string DiffDays(string dt1, string dt2) {
            return DateDiff(DateTimePart.Day, dt1, dt2);
        }

        public override string DiffHours(string dt1, string dt2) {
            return DateDiff(DateTimePart.Hour, dt1, dt2);
        }

        public override string DiffMinutes(string dt1, string dt2) {
            return DateDiff(DateTimePart.Minute, dt1, dt2);
        }

        public override string DiffSeconds(string dt1, string dt2) {
            return DateDiff(DateTimePart.Second, dt1, dt2);
        }

        public override string Hour(string dt) {
            return DatePart(DateTimePart.Hour, dt);
        }

        public override string Minute(string dt) {
            return DatePart(DateTimePart.Minute, dt);
        }

        public override string Month(string dt) {
            return DatePart(DateTimePart.Month, dt);
        }

        public override string NewDate(string y, string m, string d) {
            return string.Format(
                "convert(datetime, " + 
                    "convert(varchar(4), {0}) + '-' + " + 
                    "convert(varchar(2), {1}) + '-' + " + 
                    "convert(varchar(2), {2}) + " + 
                    "' 00:00:00', 120)", 
                y, m, d);
        }

        public override string NewDateTime(string y, string mo, string d, string h, string m, string s) {
            return string.Format(
                "convert(datetime, " +
                    "convert(varchar(4), {0}) + '-' + " +
                    "convert(varchar(2), {1}) + '-' + " +
                    "convert(varchar(2), {2}) + ' ' + " +
                    "convert(varchar(2), {3}) + ':' + " +
                    "convert(varchar(2), {4}) + ':' + " +
                    "convert(varchar(2), {5}), 120)",
                y, mo, d, h, m, s);
        }

        public override string NewTime(string h, string m, string s) {
            return string.Format(
                "convert(datetime, " + 
                    "'1900-01-01 ' + " + 
                    "convert(varchar(2), {0}) + ':' + " + 
                    "convert(varchar(2), {1}) + ':' + " + 
                    "convert(varchar(2), {2}), 120)",
                h, m, s);
        }

        public override string Second(string dt) {
            return DatePart(DateTimePart.Second, dt);
        }

        public override string Year(string dt) {
            return DatePart(DateTimePart.Year, dt);
        }
        
        #endregion

        #region Data Conversion

        public override string BooleanToInteger(string b) {
            return string.Format("convert(int, {0})", b);
        }

        public override string BooleanToText(string b) {
            return string.Format("(case when {0} = 0 then 'False' else 'True' end)", b);
        }

        public override string DateTimeToDate(string dt) {
            return string.Format("convert(datetime, convert(varchar(10), {0}, 120))", dt);
        }

        public override string DateTimeToText(string dt, string dateFormat) {
            switch (dateFormat) {
                case "YYYY-MM-DD":
                    return string.Format("convert(varchar(" + DMLConstants.SQL_DIM_DATE_TO_TEXT + "), {0}, 120)", dt);
                default:
                    return string.Format("({0} + ' ' + convert(varchar(8), {1}, 108))", DateToText(dt, dateFormat), dt);
            }
        }

        public override string DateToText(string d, string dateFormat) {
            string format = "convert(varchar(10), {0}, {1})";
            switch (dateFormat.ToUpper()) {
                case "DD-MM-YYYY":
                    return string.Format(format, d, 105);
                case "MM-DD-YYYY":
                    return string.Format(format, d, 110);
                case "YYYY/MM/DD":
                    return string.Format(format, d, 111);
                case "DD/MM/YYYY":
                    return string.Format(format, d, 103);
                case "MM/DD/YYYY":
                    return string.Format(format, d, 101);
                case "YYYY-MM-DD":
                default:
                    return string.Format(format, d, 120);
            }
        }

        public override string DateTimeToTime(string dt) {
            return string.Format("convert(datetime, substring(convert(varchar(" + DMLConstants.SQL_DIM_DATE_TO_TEXT + "), {0}, 120), 12, 8))", dt);
        }

        public override string DecimalToBoolean(string d) {
            return string.Format("convert(bit, {0})", d);
        }

        public override string DecimalToInteger(string d) {
            return string.Format("convert(int, {0})", d);
        }

        public override string DecimalToLongInteger(string d) {
            return string.Format("convert(bigint, {0})", d);
        }

        public override string LongIntegerToInteger(string b) {
            return string.Format("convert(int, {0})", b);
        }

        public override string IntegerToLongInteger(string b) {
            return string.Format("convert(bigint, {0})", b);
        }

        public override string LongIntegerToText(string b) {
            return string.Format("convert(varchar(" + DMLConstants.SQL_DIM_BIGINT_TO_TEXT + "), {0})", b);
        }

        public override string DecimalToText(string d) {
            return string.Format("convert(varchar(" + DMLConstants.SQL_DIM_DEC_TO_TEXT + "), {0})", d);
        }

        public override string IdentifierToInteger(string id) {
            return string.Format("isnull({0}, 0)", id);
        }

        public override string IdentifierToLongInteger(string id) {
            return string.Format("isnull({0}, 0)", id);
        }

        public override string IdentifierToText(string id) {
            return string.Format("isnull({0}, '')", id);
        }

        public override string IntegerToBoolean(string i) {
            return string.Format("convert(bit, {0})", i);
        }

        public override string IntegerToDecimal(string i) {
            return string.Format("convert(decimal(" + DMLConstants.SQL_DIM_TO_DEC + "), {0})", i);
        }

        public override string LongIntegerToDecimal(string i) {
            return string.Format("convert(decimal(" + DMLConstants.SQL_DIM_TO_DEC + "), {0})", i);
        }

        public override string IntegerToText(string i) {
            return string.Format("convert(varchar(" + DMLConstants.SQL_DIM_INT_TO_TEXT + "), {0})", i);
        }

        public override string NullDate() {
            return "convert(datetime, '1900-01-01')";
        }

        public override string TextToDate(string t, string dateFormat) {
            return TextToDateTime(string.Format("substring({0}, 1, 10)", t), dateFormat);
        }

        public override string TextToDateTime(string t, string dateFormat) {
            string format = "convert(datetime, {0}, {1})";
            switch (dateFormat.ToUpper()) {
                case "DD/MM/YYYY":
                case "DD-MM-YYYY":
                    return string.Format(format, t, 103);
                case "MM-DD-YYYY":
                case "MM/DD/YYYY":
                    return string.Format(format, t, 101);
                case "YYYY-MM-DD":
                case "YYYY/MM/DD":
                default:
                    return string.Format(format, t, 120);
            }
        }

        public override string TextToDecimal(string t) {
            return string.Format("convert(decimal(" + DMLConstants.SQL_DIM_TO_DEC + "), {0})", t);
        }

        public override string TextToInteger(string t) {
            return string.Format("convert(int, {0})", t);
        }

        public override string TextToLongInteger(string t) {
            return string.Format("convert(bigint, {0})", t);
        }

        public override string TextToTime(string t) {
            return string.Format("convert(datetime, ('1900-01-01 ' + {0}), 120)", t);
        }

        public override string TimeToText(string t) {
            return string.Format("substring(convert(varchar(" + DMLConstants.SQL_DIM_DATE_TO_TEXT + "), {0}, 120), 12, 8)", t);
        }
        
        #endregion

        #region Date-handling
        private static string DateAdd(DateTimePart part, string dt, string n) {
            return string.Format("dateadd({0}, {1}, {2})", part.ToString().ToLower(), n, dt);
        }

        private static string DateDiff(DateTimePart part, string dt1, string dt2) {
            return string.Format("datediff({0}, {1}, {2})", part.ToString().ToLower(), dt1, dt2);
        }

        private static string DatePart(DateTimePart part, string dt) {
            return string.Format("datepart({0}, {1})", part.ToString().ToLower(), dt);
        }
        #endregion
    }
}
