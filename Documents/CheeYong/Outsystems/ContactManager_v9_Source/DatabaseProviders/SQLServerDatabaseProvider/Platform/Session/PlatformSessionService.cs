/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Data;
using System.Data.SqlClient;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Session;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.Session {

    public class PlatformSessionService : IPlatformSessionService {

        private static readonly int ITEM_SHORT_LENGTH = 7000;

        private static readonly int SQL_ERROR_PRIMARY_KEY_VIOLATION = 2627;

        private static readonly string TempSessionsTableName = "ASPStateTempSessions";
        private static readonly string TempExtVarsTableName = "ASPStateTempSessionsExtVars";

        private int queryTimeout = 30 /* seconds */ ;

        public PlatformSessionService(IPlatformDatabaseServices services) {
            DatabaseServices = services;
        }

        public IPlatformDatabaseServices DatabaseServices {
            get;
            private set;
        }

        public void CountConcurrentUsers(DateTime referenceDate, string[] moduleIdsToExclude, out int anon, out int registered, out DateTime current) {
            var sql = "SELECT " +
                      "    COALESCE(sum(case maxUserId when 0 then 1 end),0) as Anonymous, " +
                      "    COALESCE(sum(case maxUserId when 0 then 0 else 1 end),0) as NonAnonymous, " +
                      "    GETUTCDATE() DateNow " +
                      "FROM (SELECT cookie, max(Userid) as maxUserId" +
                      "      FROM " + TempExtVarsTableName + " ExtVars, " + TempSessionsTableName + " Sessions " +
                      "      WHERE ExtVars.SessionID = Sessions.SessionID " + 
                      "{0}" + 
                      "            AND Sessions.lockdate > @referenceDate AND Sessions.created < @referenceDate" +
                      "      GROUP BY cookie) tt";

            var excludedModulesCondition = "";
            foreach (string itemId in moduleIdsToExclude) {
                excludedModulesCondition += "            AND ExtVars.Variable <> '" + itemId + "' ";
            }
            sql = sql.F(excludedModulesCondition);

            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    using (var cmd = DatabaseServices.ExecutionService.CreateCommand(con, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        DatabaseServices.ExecutionService.CreateParameter(cmd, "@referenceDate", DbType.DateTime, referenceDate);

                        using (var reader = cmd.ExecuteReader()) {
                            if (reader.Read()) {
                                anon = Convert.ToInt32(reader["Anonymous"]);
                                registered = Convert.ToInt32(reader["NonAnonymous"]);
                                current = Convert.ToDateTime(reader["DateNow"]);
                            } else {
                                anon = 0;
                                registered = 0;
                                current = DateTime.UtcNow;
                            }
                        }
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
            
        }

        private void DeleteSessionInTable(IDbConnection conn, string tableName, string sessionId) {
            var e = DatabaseServices.ExecutionService;

            var sql = "DELETE FROM " + tableName + " WHERE SessionId = @sessionId";

            using (var cmd = e.CreateCommand(conn, sql)) {
                cmd.CommandTimeout = queryTimeout;
                cmd.CommandType = CommandType.Text;
                e.CreateParameter(cmd, "@sessionId", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                cmd.ExecuteNonQuery();
            }
        }

        public void DeleteSession(string sessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    DeleteSessionInTable(conn, TempSessionsTableName, sessionId);
                    DeleteSessionInTable(conn, TempExtVarsTableName, sessionId);
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }   
        }

        public int DeleteExpiredSessions() {
            try {
            	using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
	                var exec = DatabaseServices.ExecutionService;
	                using (var cmd = exec.CreateCommand(conn, "dbo.DeleteExpiredSessionsReturningDeletedRows")) {
                        cmd.CommandTimeout = queryTimeout;
	                    cmd.CommandType = CommandType.StoredProcedure;

                        IDbDataParameter deletedRows = cmd.CreateParameter();
                        deletedRows.Direction = ParameterDirection.ReturnValue;

                        cmd.Parameters.Add(deletedRows);

                        cmd.ExecuteNonQuery();

	                    return Convert.ToInt32(deletedRows.Value);
                    }
	            }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public int DeleteExpiredSessionVars() {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var exec = DatabaseServices.ExecutionService;
                    using (var cmd = exec.CreateCommand(conn, "dbo.DeleteExpiredSessionVarsReturningDeletedRows")) {
                        cmd.CommandTimeout = queryTimeout * 2;
                        cmd.CommandType = CommandType.StoredProcedure;

                        IDbDataParameter deletedRows = cmd.CreateParameter();
                        deletedRows.Direction = ParameterDirection.ReturnValue;

                        cmd.Parameters.Add(deletedRows);

                        cmd.ExecuteNonQuery();

                        return Convert.ToInt32(deletedRows.Value);
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public bool ContainsExpiredSessionVarsNewMechanism() {
            string sql = "SELECT * FROM [sys].[objects] WHERE object_id = object_id(N'[dbo].[DeleteExpiredSessionVarsReturningDeletedRows]') AND OBJECTPROPERTY(object_id, N'IsProcedure') = 1";
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandType = CommandType.Text;
                        using (var reader = e.ExecuteReader(cmd)) {
                            return reader.Read();
                        }
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private void ChangeSessionIdInTable(IDbConnection con, string tableName, string oldSessionId, string newSessionId) {
            var e = DatabaseServices.ExecutionService;

            var sql = "UPDATE " + tableName + " SET SessionId = @newSessionId WHERE SessionId = @oldSessionId";

            using (var cmd = e.CreateCommand(con, sql)) {
                cmd.CommandTimeout = queryTimeout;
                cmd.CommandType = CommandType.Text;
                e.CreateParameter(cmd, "@oldSessionId", DbType.StringFixedLength, oldSessionId).Size = SessionConstants.ID_LENGTH;
                e.CreateParameter(cmd, "@newSessionId", DbType.StringFixedLength, newSessionId).Size = SessionConstants.ID_LENGTH;
                cmd.ExecuteNonQuery();
            }
        }

        public void ChangeSessionId(string oldSessionId, string newSessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    ChangeSessionIdInTable(conn, TempSessionsTableName, oldSessionId, newSessionId);
                    ChangeSessionIdInTable(conn, TempExtVarsTableName, oldSessionId, newSessionId);
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void ResetSessionTimeout(string sessionId, TimeSpan newTimeout) {
            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;

                    var sqlUpdateTimeout = "UPDATE " + TempSessionsTableName + " SET Timeout = @newTimeout WHERE SessionId = @id";
                    using (var cmd = e.CreateCommand(con, sqlUpdateTimeout)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, "@newTimeout", DbType.Int32, Convert.ToInt32(newTimeout.TotalMinutes));
                        e.CreateParameter(cmd, "@id", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        cmd.ExecuteNonQuery();
                    }

                    var sqlResetTimeout = "dbo.TempResetTimeout";
                    using (var cmd = e.CreateCommand(con, sqlResetTimeout)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, "@id", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch(Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public bool CheckSessionModel() {
            using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                var e = DatabaseServices.ExecutionService;
                using (var cmd = e.CreateCommand(con, "select sessionid from " + TempSessionsTableName)) {
                    cmd.CommandTimeout = queryTimeout;
                    cmd.ExecuteNonQuery();
                    cmd.CommandText = "select SessionId, UserId, Cookie from " + TempExtVarsTableName;
                    cmd.ExecuteNonQuery();
                }
            }

            return true;
        }

        public void ReleaseLock(string sessionId, int lockId) {
            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "dbo.TempReleaseStateItemExclusive";
                    using (var cmd = e.CreateCommand(con, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, "@id", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, "@lockCookie", DbType.Int32, lockId);
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private IDbCommand CommandGetAndGetLock(IDbConnection conn, bool getAndLock, string sessionId) {
            var getSql = "dbo.TempGetStateItem3";
            var getLockSql = "dbo.TempGetStateItemExclusive3";

            var e = DatabaseServices.ExecutionService;

            var cmd = e.CreateCommand(conn, getAndLock ? getLockSql : getSql);
            cmd.CommandTimeout = queryTimeout;
            cmd.CommandType = CommandType.StoredProcedure;

            e.CreateParameter(cmd, "@id", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
            var p = e.CreateParameter(cmd, "@itemShort", DbType.Binary, Convert.DBNull);
            p.Size = ITEM_SHORT_LENGTH;
            p.Direction = ParameterDirection.Output;
            p = e.CreateParameter(cmd, "@locked", DbType.Boolean, Convert.DBNull);
            p.Direction = ParameterDirection.Output;
            p = e.CreateParameter(cmd, "@lockAge", DbType.Int32, Convert.DBNull);
            p.Direction = ParameterDirection.Output;
            p = e.CreateParameter(cmd, "@lockCookie", DbType.Int32, Convert.DBNull);
            p.Direction = ParameterDirection.Output;
            p = e.CreateParameter(cmd, "@actionFlags", DbType.Int32, Convert.DBNull);
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        private byte[] GetAndGetAndLock(bool getAndLock, string sessionId, out int lockId, out bool locked, out TimeSpan lockAge, out ItemState state) {
            lockId = -1;
            locked = false;
            lockAge = TimeSpan.Zero;
            state = default(ItemState);

            using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                byte[] buf = null;

                using (var cmd = CommandGetAndGetLock(conn, getAndLock, sessionId)) {
                    using (var reader = cmd.ExecuteReader()) {
                        if (reader.Read()) {
                            buf = (byte[])reader[0];
                        }
                    }

                    if (Params.IsNull(cmd.Parameters[2])) {
                        return null;
                    }

                    locked = Params.BoolVal(cmd.Parameters[2]);
                    lockId = Params.IntVal(cmd.Parameters[4]);

                    if (locked) {
                        lockAge = Params.TimeSpanVal(cmd.Parameters[3]);

                        if (lockAge > TimeSpans.Year) {
                            lockAge = TimeSpan.Zero;
                        }

                        return null;
                    }

                    state = Params.ItemStateVal(cmd.Parameters[5]);

                    if (buf == null) {
                        buf = Params.BinaryVal(cmd.Parameters[1]);
                    }

                    return buf;
                }
            }
        }

        public byte[] Get(string sessionId, out int lockId, out bool locked, out TimeSpan lockAge, out ItemState state) {
            try {
                return GetAndGetAndLock(false, sessionId, out lockId, out locked, out lockAge, out state);
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public byte[] GetAndLock(string sessionId, out int lockId, out bool locked, out TimeSpan lockAge, out ItemState state) {
            try {
                return GetAndGetAndLock(true, sessionId, out lockId, out locked, out lockAge, out state);
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }


        public void InsertUninitialized(string sessionId, byte[] data, System.TimeSpan timeout) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "dbo.TempInsertUninitializedItem";
                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, "@id", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, "@itemShort", DbType.Binary, data).Size = ITEM_SHORT_LENGTH;
                        e.CreateParameter(cmd, "@timeout", DbType.Int32, Convert.ToInt32(timeout.TotalMinutes));
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (SqlException sqle) {
                if (sqle.Number == SQL_ERROR_PRIMARY_KEY_VIOLATION) {
                    throw new RepeatedInsertException(sqle.Message, sqle);
                } else {
                    throw new SessionStoreException(sqle.Message, sqle);
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }


        private IDbCommand UpdateCommand(IDbConnection conn, bool shortInsert, bool shortPrevious) {
            var e = DatabaseServices.ExecutionService;

            var sql = "";

            if (shortInsert) {
                if (shortPrevious) {
                    sql = "dbo.TempUpdateStateItemShort";
                } else {
                    sql = "dbo.TempUpdateStateItemShortNullLong";
                }
            } else {
                if (!shortPrevious) {
                    sql = "dbo.TempUpdateStateItemLong";
                } else {
                    sql = "dbo.TempUpdateStateItemLongNullShort";
                }
            }

            var cmd = e.CreateCommand(conn, sql);
            cmd.CommandTimeout = queryTimeout;
            cmd.CommandType = CommandType.StoredProcedure;
            e.CreateParameter(cmd, "@id", DbType.StringFixedLength, null).Size = SessionConstants.ID_LENGTH;
            if (shortInsert) {
                e.CreateParameter(cmd, "@itemShort", DbType.Binary, null).Size = ITEM_SHORT_LENGTH;
            } else {
                e.CreateParameter(cmd, "@itemLong", DbType.Binary, null);
            }
            e.CreateParameter(cmd, "@timeout", DbType.Int32, null);
            e.CreateParameter(cmd, "@lockCookie", DbType.Int32, null);

            return cmd;
        }

        public void Update(string sessionId, int lockId, byte[] data, int prevDataSize, TimeSpan timeout) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = UpdateCommand(conn, data.Length <= ITEM_SHORT_LENGTH, prevDataSize <= ITEM_SHORT_LENGTH)) {
                        Params.SetVal(cmd.Parameters[0], sessionId);
                        Params.SetVal(cmd.Parameters[1], data);
                        Params.SetVal(cmd.Parameters[2], Convert.ToInt32(timeout.TotalMinutes));
                        Params.SetVal(cmd.Parameters[3], lockId);
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private IDbCommand InsertCommand(IDbConnection conn, bool shortInsert) {
            var e = DatabaseServices.ExecutionService;

            var sql = "";

            if (shortInsert) {
                sql = "dbo.TempInsertStateItemShort";
            } else {
                sql = "dbo.TempInsertStateItemLong";
            }

            var cmd = e.CreateCommand(conn, sql);
            cmd.CommandTimeout = queryTimeout;
            cmd.CommandType = CommandType.StoredProcedure;
            e.CreateParameter(cmd, "@id", DbType.StringFixedLength, null).Size = SessionConstants.ID_LENGTH;
            if (shortInsert) {
                e.CreateParameter(cmd, "@itemShort", DbType.Binary, null).Size = ITEM_SHORT_LENGTH;
            } else {
                e.CreateParameter(cmd, "@itemLong", DbType.Binary, null);
            }
            e.CreateParameter(cmd, "@timeout", DbType.Int32, null);

            return cmd;
        }

        public void Insert(string sessionId, byte[] data, TimeSpan timeout) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = InsertCommand(conn, data.Length <= ITEM_SHORT_LENGTH)) {
                        cmd.CommandTimeout = queryTimeout;
                        Params.SetVal(cmd.Parameters[0], sessionId);
                        Params.SetVal(cmd.Parameters[1], data);
                        Params.SetVal(cmd.Parameters[2], Convert.ToInt32(timeout.TotalMinutes));
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (SqlException sqle) {
                if (sqle.Number == SQL_ERROR_PRIMARY_KEY_VIOLATION) {
                    throw new RepeatedInsertException(sqle.Message, sqle);
                } else {
                    throw new SessionStoreException(sqle.Message, sqle);
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void Delete(string sessionId, int lockId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "dbo.TempRemoveStateItem";

                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, "@id", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, "@lockCookie", DbType.Int32, lockId);
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        // Session Module Operations

        public byte[] GetModuleItem(string sessionId, string itemId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "SELECT dataShort, dataLong FROM " + TempExtVarsTableName + " " +
                              "WHERE SessionId = @sessionId AND Variable = @variable";

                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, "@sessionId", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, "@variable", DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;

                        using (var reader = cmd.ExecuteReader()) {
                            if (reader.Read()) {
                                if (!reader.IsDBNull(0)) {
                                    return (byte[])reader.GetValue(0);
                                } else if (reader.FieldCount > 1) {
                                    if (!reader.IsDBNull(1)) {
                                        return (byte[])reader.GetValue(1);
                                    }
                                }
                            }
                        }
                    }
                    return null;
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private IDbCommand InsertModuleItemCommand(IDbConnection conn, string sessionId, string itemId, byte[] data, int userId, string cookieId) {
            var isShortInsert = data.Length <= ITEM_SHORT_LENGTH;

            var shortInsertSql = "INSERT INTO " + TempExtVarsTableName + "(SessionId, Variable, DataShort, DataLong, UserId, Cookie) " +
                                 "VALUES (@sessionId, @variable, @data, NULL, @userId, @cookie)";

            var longInsertSql = "INSERT INTO " + TempExtVarsTableName + "(SessionId, Variable, DataShort, DataLong, UserId, Cookie) " +
                                "VALUES (@sessionId, @variable, NULL, @data, @userId, @cookie)";

            var e = DatabaseServices.ExecutionService;

            var cmd = e.CreateCommand(conn, isShortInsert ? shortInsertSql : longInsertSql);
            cmd.CommandTimeout = queryTimeout;

            e.CreateParameter(cmd, "@sessionId", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
            e.CreateParameter(cmd, "@variable", DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;

            var dataP = e.CreateParameter(cmd, "@data", DbType.Binary, data);

            if (isShortInsert) {
                dataP.Size = ITEM_SHORT_LENGTH;
            }

            e.CreateParameter(cmd, "@userId", DbType.Int32, userId);
            e.CreateParameter(cmd, "@cookie", DbType.StringFixedLength, cookieId).Size = SessionConstants.VARIABLE_NAME_LENGTH;

            return cmd;
        }

        public void InsertModuleItem(string sessionId, string itemId, byte[] data, int userId, string cookieId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    using (var cmd = InsertModuleItemCommand(conn, sessionId, itemId, data, userId, cookieId)) {
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        private IDbCommand UpdateModuleItemCommand(IDbConnection conn, string sessionId, string itemId, byte[] data, int userId, string cookieId) {
            var isShortInsert = data.Length <= ITEM_SHORT_LENGTH;

            var shortUpdateSql = "UPDATE " + TempExtVarsTableName + " " +
                                 "SET DataShort = @data, DataLong = NULL, UserId=@userId, Cookie=@cookie " +
                                 "WHERE SessionId = @sessionId AND Variable = @variable";

            var longUpdateSql = "UPDATE " + TempExtVarsTableName + " " +
                                "SET DataShort = NULL, DataLong = @data, UserId=@userId, Cookie=@cookie " +
                                "WHERE SessionId = @sessionId AND Variable = @variable";

            var e = DatabaseServices.ExecutionService;

            var cmd = e.CreateCommand(conn, isShortInsert ? shortUpdateSql : longUpdateSql);
            cmd.CommandTimeout = queryTimeout;
            cmd.CommandType = CommandType.Text;
            e.CreateParameter(cmd, "@sessionId", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
            e.CreateParameter(cmd, "@variable", DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;

            var dataP = e.CreateParameter(cmd, "@data", DbType.Binary, data);

            if (isShortInsert) {
                dataP.Size = ITEM_SHORT_LENGTH;
            }

            e.CreateParameter(cmd, "@userId", DbType.Int32, userId);
            e.CreateParameter(cmd, "@cookie", DbType.StringFixedLength, cookieId).Size = SessionConstants.VARIABLE_NAME_LENGTH;

            return cmd;
        }

        public void UpdateModuleItem(string sessionId, string itemId, byte[] data, int userId, string cookieId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    using (var cmd = UpdateModuleItemCommand(conn, sessionId, itemId, data, userId, cookieId)) {
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void InsertModuleItemUser(string sessionId, string itemId, int userId, string cookieId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "INSERT INTO " + TempExtVarsTableName + "(SessionId, Variable, UserId, Cookie) " +
                              "VALUES (@sessionId, @variable, @userId, @cookie)";
                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, "@sessionId", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, "@variable", DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
                        e.CreateParameter(cmd, "@userId", DbType.Int32, userId);
                        e.CreateParameter(cmd, "@cookie", DbType.StringFixedLength, cookieId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void UpdateModuleItemUser(string sessionId, string itemId, int userId, string cookieId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    var sql = "UPDATE " + TempExtVarsTableName + " " +
                              "SET UserId=@userId, Cookie=@cookie " +
                              "WHERE SessionId = @sessionId AND Variable = @variable";
                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, "@sessionId", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        e.CreateParameter(cmd, "@variable", DbType.StringFixedLength, itemId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
                        e.CreateParameter(cmd, "@userId", DbType.Int32, userId);
                        e.CreateParameter(cmd, "@cookie", DbType.StringFixedLength, cookieId).Size = SessionConstants.VARIABLE_NAME_LENGTH;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void DeleteModuleItems(string sessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    DeleteSessionInTable(conn, TempExtVarsTableName, sessionId);
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public int GetUserBySessionId(string sessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;

                    var sql = "SELECT UserId FROM " + TempExtVarsTableName + " WHERE SessionId = @sessionId and UserId != 0";

                    using (var cmd = e.CreateCommand(conn, sql)) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.Text;
                        e.CreateParameter(cmd, "@sessionId", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        using (var reader = cmd.ExecuteReader()) {
                            if (reader.Read()) {
                                return Convert.ToInt32(reader.GetValue(0));
                            }
                        }
                    }

                    return 0;
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public void ResetModuleTimeout(string sessionId) {
            try {
                using (var conn = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(conn, "dbo.TempResetTimeout")) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, "@id", DbType.StringFixedLength, sessionId).Size = SessionConstants.ID_LENGTH;
                        cmd.ExecuteNonQuery();
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public bool Store(string str, int hash, out int ehash, out string collidedStr) {
            try {
                using (var con = DatabaseServices.TransactionService.CreateConnection()) {
                    var e = DatabaseServices.ExecutionService;
                    using (var cmd = e.CreateCommand(con, "dbo.TempGetAppID2")) {
                        cmd.CommandTimeout = queryTimeout;
                        cmd.CommandType = CommandType.StoredProcedure;
                        e.CreateParameter(cmd, "appName", DbType.String, str);
                        e.CreateParameter(cmd, "appId", DbType.Int32, hash);
                        var existingAppName = e.CreateParameter(cmd, "existingAppName", DbType.String, DBNull.Value);
                        existingAppName.Size = SessionConstants.STORE_STR_MAX;
                        existingAppName.Direction = ParameterDirection.Output;
                        var existingAppNameHash = e.CreateParameter(cmd, "existingAppId", DbType.Int32, DBNull.Value);
                        existingAppNameHash.Direction = ParameterDirection.Output;

                        cmd.ExecuteNonQuery();

                        if (existingAppName.Value == DBNull.Value) {
                            ehash = Convert.ToInt32(existingAppNameHash.Value);
                            collidedStr = null;
                            return true;
                        }
                        ehash = -1;
                        collidedStr = Convert.ToString(existingAppName.Value);
                        return false;
                    }
                }
            } catch (Exception e) {
                throw new SessionStoreException(e.Message, e);
            }
        }

        public int QueryTimeout {
            set { queryTimeout = value; }
        }
    }
}