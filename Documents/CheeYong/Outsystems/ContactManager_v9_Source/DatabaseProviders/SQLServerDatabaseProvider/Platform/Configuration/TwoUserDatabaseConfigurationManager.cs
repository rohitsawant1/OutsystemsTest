/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.Configuration;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.Configuration {
    public abstract class TwoUserDatabaseConfigurationManager : BaseTwoUserDatabaseConfigurationManager {

        private readonly Dictionary<string, string> extraTokens = new Dictionary<string, string>() {
            { "[TABLE_NAME]", "ANOTHER_TABLE" }
        };

        // TODO jmt: remove the systemDatabaseName parameter after we don't need synonyms anymore.
        public TwoUserDatabaseConfigurationManager(ISettableTwoUserDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration systemDatabaseconfig)
            : base(uiConfiguration) {
            extraTokens.Add("[SYSTEM_DB]", ((IDatabaseConfiguration)systemDatabaseconfig).Catalog);

            var config = (TwoUserDatabaseConfiguration)uiConfiguration;
            config.SqlEngineEdition = ConfigurationManagerUtils.GetSqlEngineEdition(uiConfiguration);
        }

        public override bool RecommendDatabaseBackup {
            get {
                return false;
            }
        }

        public override FileStream StreamForScriptFile {
            get {
                string path = Path.Combine(Script_Path, "logging_model_sqlserver.sql");
                return new FileStream(path, FileMode.Open, FileAccess.Read);
            }
        }

        private FileStream StreamForSetupScriptFile {
            get {
                string path = Path.Combine(Script_Path, "logging_creation_sqlserver.sql");
                return new FileStream(path, FileMode.Open, FileAccess.Read);
            }
        }

        public override string ProcessStatement(string statement) {
            return ConfigurationManagerUtils.ProcessStatement((TwoUserDatabaseConfiguration)uiConfiguration, statement, extraTokens);
        }

        private void NormalizeWindowsUserForApplicationDB(Func<TwoUserDatabaseConfiguration, string> get, Action<TwoUserDatabaseConfiguration, string> set) {
            var uiConf = (TwoUserDatabaseConfiguration)uiConfiguration;

            if (uiConf.AuthenticationMode != AuthenticationType.Windows_Authentication) {
                return;
            }

            set(uiConf, WindowsUser.Normalize(get(uiConf)));
        }

        private void NormalizeAdminUser() {
            NormalizeWindowsUserForApplicationDB(c => c.AdminUser, (c, v) => c.AdminUser = v);
        }

        private void NormalizeRuntimeUser() {
            NormalizeWindowsUserForApplicationDB(c => c.RuntimeUser, (c, v) => c.RuntimeUser = v);
        }

        private void NormalizeAllUsers() {
            NormalizeAdminUser();
            NormalizeRuntimeUser();
        }

        public override bool RequiresElevatedPrivilges() {
            try {
                RuntimeDatabaseConfiguration confAdmin = (RuntimeDatabaseConfiguration)((TwoUserDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(UserType.Admin);
                RuntimeDatabaseConfiguration confRuntime = (RuntimeDatabaseConfiguration)((TwoUserDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(UserType.Runtime);

                return ConfigurationManagerUtils.LoginExists(confAdmin, confAdmin.Username) == false ||
                    ConfigurationManagerUtils.LoginExists(confRuntime, confRuntime.Username) == false ||
                    ConfigurationManagerUtils.DatabaseExists(confAdmin, confAdmin.Catalog) == false;
            } catch {
                return base.RequiresElevatedPrivilges();
            }
        }

        public override string GenerateSetupScript() {
            NormalizeAllUsers();

            //for P10 the setup script is going to be generated by the conf tool to avoid duplication

            string setupScript = ConfigurationManagerUtils.ReplaceTokens((TwoUserDatabaseConfiguration)uiConfiguration, ReadScriptFile(StreamForSetupScriptFile), extraTokens);
            return setupScript;
        }

        public override void Pre_CreateOrUpgradePlatform() {
            NormalizeAllUsers();

            var elevated = (IElevatedUserConfiguration)uiConfiguration;

            var masterElevated = ConfigurationManagerUtils.ConfigurationToMaster(elevated);

            var runtimeElevated = (RuntimeDatabaseConfiguration)elevated.ElevatedRuntimeDatabaseConfiguration();

            bool isAzureDB = ConfigurationManagerUtils.IsDatabaseAzure(masterElevated);

            if (isAzureDB) {
                // On the unlikely scenario of an on-premise installation with Azure SQL,
                // we try to minimise the chance of timeouts.
                ConfigurationManagerUtils.QueryTimeout = 300;
            }

            ConfigurationManagerUtils.CheckIfUserHasNecessaryElevatedPermissions(masterElevated, runtimeElevated);

            if (!isAzureDB) {
                ConfigurationManagerUtils.CreateSqlServerCatalogIfDoesntExist(masterElevated, runtimeElevated.Catalog);
            } else {
                // We will not support automatically creating Azure databases.
                // An appropriate message is displayed.
                ConfigurationManagerUtils.CheckIfAzureDatabaseExists(masterElevated, runtimeElevated.Catalog);
            }

            NormalizeAllUsers();

            GrantUserPermissions();
            ConfigurationManagerUtils.AddHubLogRole(runtimeElevated);
        }

        public abstract void GrantUserPermissions();

        public override string StatementSeparator {
            get {
                return "GO";
            }
        }

        public override bool TestAdminConnection(out string friendlyMessage, Source source) {
            NormalizeAdminUser();
            bool result = base.TestAdminConnection(out friendlyMessage, source);
            if (result) {
                CheckRoles(out friendlyMessage, UserType.Admin, uiConfiguration.AdminAuthenticationCredential.UserName);
            }
            return result;
        }

        public override bool TestRuntimeConnection(out string friendlyMessage, Source source) {
            NormalizeRuntimeUser();
            bool result = base.TestRuntimeConnection(out friendlyMessage, source);
            if (result) {
                CheckRoles(out friendlyMessage, UserType.Runtime, uiConfiguration.RuntimeAuthenticationCredential.UserName);
            }
            return result;
        }

        public override IEnumerable<Block> ExtraDatabaseStatements(Version currentModelVersion) {
            var newBlock = new Block();
            newBlock.SetTagValue(Tag.END_IGNORING_BLOCK.ToString(), "");
            yield return newBlock;
        }

        public abstract bool CheckDBRolesForUserType(UserType user, string username, bool canRead, bool canWrite, bool hasAccessAdmin, bool hasSecurityAdmin, bool hasDDLAdmin, bool hasLogRole, out string friendlyMessage);

        public void CheckRoles(out string friendlyMessage, UserType user, string username) {

            try {
                bool hasLogRole = false, owner = false, canRead = false, canWrite = false;
                bool hasAccessAdmin = false, hasDDLAdmin = false, hasSecurityAdmin = false;
                var config = ((TwoUserDatabaseConfiguration)uiConfiguration).RuntimeDatabaseConfiguration(user);
                try {
                    ConfigurationManagerUtils.GetDBUserRoles(username, ref hasLogRole, ref owner, ref canRead, ref canWrite, ref hasAccessAdmin, ref hasDDLAdmin, ref hasSecurityAdmin, config);
                    if (!owner) {
                        if (!CheckDBRolesForUserType(user, username, canRead, canWrite, hasAccessAdmin, hasSecurityAdmin, hasDDLAdmin, hasLogRole, out friendlyMessage)) {
                            return;
                        }
                    }

                    if (!ConfigurationManagerUtils.CheckHubServerVersion(this, config, out friendlyMessage)) {
                        return;
                    }

                } catch {
                    friendlyMessage = "Database connection was successful.\r\n\r\nHowever, it was not possible to read the schema version. This may be because the schema has not been created yet.";
                    return;
                }
            } catch (Exception exception) {
                friendlyMessage = "Database connection was successful.\r\n\r\nHowever the following error ocurred while trying to read user permissions:\r\n\r\nFailed to retrieve user roles:\r\n\r\n" + exception.Message;
                return;
            }
            friendlyMessage = "Test completed successfully.";
        }

        public override int QueryTimeout {
            set {
                ConfigurationManagerUtils.QueryTimeout = value;
            }
        }
    }
}
