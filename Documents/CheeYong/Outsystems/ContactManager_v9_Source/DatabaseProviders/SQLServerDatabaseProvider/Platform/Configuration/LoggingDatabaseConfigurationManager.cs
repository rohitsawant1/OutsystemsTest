/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.Configuration;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.Configuration {
    public class LoggingDatabaseConfigurationManager : TwoUserDatabaseConfigurationManager {

        private readonly Dictionary<string, string> extraTokens = new Dictionary<string, string>() {
            { "[TABLE_NAME]", "ANOTHER_TABLE" }
        };

        // TODO jmt: remove the systemDatabaseName parameter after we don't need synonyms anymore.
        public LoggingDatabaseConfigurationManager(ISettableTwoUserDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration systemDatabaseconfig)
            : base(uiConfiguration, systemDatabaseconfig) { }

        public override FileStream StreamForScriptFile {
            get {
                string path = Path.Combine(Script_Path, "logging_model_sqlserver.sql");
                return new FileStream(path, FileMode.Open, FileAccess.Read);
            }
        }

        private FileStream StreamForSetupScriptFile {
            get {
                string path = Path.Combine(Script_Path, "logging_creation_sqlserver.sql");
                return new FileStream(path, FileMode.Open, FileAccess.Read);
            }
        }

        public override bool CheckDBRolesForUserType(UserType user, string username, bool canRead, bool canWrite, bool hasAccessAdmin, bool hasSecurityAdmin, bool hasDDLAdmin, bool hasLogRole, out string friendlyMessage) {
            friendlyMessage = "";

            switch (user) {
                case UserType.Admin:
                    return ConfigurationManagerUtils.CheckDBAdminRoles(username, hasAccessAdmin, hasSecurityAdmin, hasDDLAdmin, canRead, canWrite, out friendlyMessage);
                case UserType.Runtime:
                    return ConfigurationManagerUtils.CheckDBLogRoles(username, canRead, canWrite, hasLogRole, uiConfiguration.AuthenticationMode, out friendlyMessage);
            }

            return true;
        }

        public override void GrantUserPermissions() {

            var dbConfig = (LoggingDatabaseConfiguration)uiConfiguration;
            var configRuntime = dbConfig.ElevatedRuntimeDatabaseConfiguration();
            var configMaster = ConfigurationManagerUtils.ConfigurationToMaster(dbConfig);
            var authType = dbConfig.AuthenticationMode;

            // Create User

            if (ConfigurationManagerUtils.NeedsCreate(configMaster, configRuntime, dbConfig.AdminUser)) {
                if (authType == AuthenticationType.Windows_Authentication) {
                    ConfigurationManagerUtils.AddIntegratedAuthLogin(configRuntime, dbConfig.AdminUser);
                } else {
                    ConfigurationManagerUtils.AddDBAuthLogin(configMaster, dbConfig.AdminUser, dbConfig.AdminPassword);
                }
            }

            if (ConfigurationManagerUtils.NeedsPermissionsForAdmin(configRuntime, dbConfig.AdminUser)) {
                ConfigurationManagerUtils.AddAdminPermissions(configRuntime, dbConfig.AdminUser);
            }

            if (ConfigurationManagerUtils.NeedsCreate(configMaster, configRuntime, dbConfig.RuntimeUser)) {
                if (authType == AuthenticationType.Windows_Authentication) {
                    ConfigurationManagerUtils.AddIntegratedAuthLogin(configRuntime, dbConfig.RuntimeUser);
                } else {
                    ConfigurationManagerUtils.AddDBAuthLogin(configMaster, dbConfig.RuntimeUser, dbConfig.RuntimePassword);
                }
            }

            if (ConfigurationManagerUtils.NeedsPermissionsForLog(configMaster, dbConfig.RuntimeUser, dbConfig.AuthenticationMode)) {
                ConfigurationManagerUtils.AddLogPermissions(configRuntime, dbConfig.RuntimeUser);
            }
        }

        public override void Pre_CreateOrUpgradePlatform() {

            var elevated = (IElevatedUserConfiguration)uiConfiguration;

            var masterElevated = ConfigurationManagerUtils.ConfigurationToMaster(elevated);

            var runtimeElevated = (RuntimeDatabaseConfiguration)elevated.ElevatedRuntimeDatabaseConfiguration();

            bool isAzureDB = ConfigurationManagerUtils.IsDatabaseAzure(masterElevated);

            if (isAzureDB) {
                // On the unlikely scenario of an on-premise installation with Azure SQL,
                // we try to minimise the chance of timeouts.
                ConfigurationManagerUtils.QueryTimeout = 300;
            }

            ConfigurationManagerUtils.CheckIfUserHasNecessaryElevatedPermissions(masterElevated, runtimeElevated);

            if (!isAzureDB) {
                ConfigurationManagerUtils.CreateSqlServerCatalogIfDoesntExist(masterElevated, runtimeElevated.Catalog);
            } else {
                // We will not support automatically creating Azure databases.
                // An appropriate message is displayed.
                ConfigurationManagerUtils.CheckIfAzureDatabaseExists(masterElevated, runtimeElevated.Catalog);
            }

            // Azure does not support changing the recovery model
            if (!isAzureDB) {
                try {
                    // Set database recovery model to Simple
                    ConfigurationManagerUtils.SetRecoveryModel(masterElevated, runtimeElevated.Catalog, "Simple");
                } catch (Exception exception) {
                    throw new ConfigurationOperationException("After the Configuration Tool closes, you must set the '" + runtimeElevated.Catalog + "' database recovery model to simple.", exception);
                }
            }

            ConfigurationManagerUtils.AddHubLogRole(runtimeElevated);
            GrantUserPermissions();
        }
    }
}
