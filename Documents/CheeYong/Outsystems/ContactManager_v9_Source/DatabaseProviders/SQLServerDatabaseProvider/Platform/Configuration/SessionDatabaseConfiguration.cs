/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System.Net;
using System.Text;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.ExecutionService;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.Configuration {

    public class SessionDatabaseConfiguration : BaseSessionDatabaseConfiguration, IElevatedUserConfiguration {

        public override IPlatformDatabaseProvider PlatformDatabaseProvider {
            get { return Platform.PlatformDatabaseProvider.Instance; }
        }

        public override AuthenticationType AuthenticationMode {
            get { return UsedAuthenticationMode; }
            set { UsedAuthenticationMode = value; }
        }

        public override IRuntimeDatabaseConfiguration RuntimeDatabaseConfiguration() {
            return new RuntimeDatabaseConfiguration(PlatformDatabaseProvider) {
                ConnectionString = ConnectionStringUtils.Make(SessionAuthenticationCredential, AuthenticationMode, Server, Catalog, SessionAdvancedSettings)
            };
        }

        #region SQLServer Settings

        [ConfigurationParameter]
        public AuthenticationType UsedAuthenticationMode { get; set; }

        [ConfigurationParameter(Persist = false)]
        public AuthenticationType ElevatedUserAuthenticationMode { get; set; }

        #endregion

        #region DatabaseLocation

        private SqlEngineEdition sqlEngineEdition = SqlEngineEdition.Unknown;
        [ConfigurationParameter]
        public SqlEngineEdition SqlEngineEdition {
            get { return sqlEngineEdition; }
            set { sqlEngineEdition = value; }
        }

        private string server;
        [UserDefinedConfigurationParameter(Label = "Server", IsMandatory = true, Order = 1, Region = ParameterRegion.SessionDatabaseLocation)]
        public string Server {
            get { return server ?? "localhost"; }
            set { server = value; }
        }

        private string catalog;
        [UserDefinedConfigurationParameter(Label = "Database", IsMandatory = true, Order = 2, Region = ParameterRegion.SessionDatabaseLocation)]
        public string Catalog {
            get { return catalog ?? "osSession"; }
            set { catalog = value; }
        }

        #endregion

        #region IElevatedUserConfiguration Members

        public NetworkCredential ElevatedAuthenticationCredential { get; set; }

        public IRuntimeDatabaseConfiguration ElevatedRuntimeDatabaseConfiguration() {
            return new RuntimeDatabaseConfiguration(PlatformDatabaseProvider) {
                ConnectionString = ConnectionStringUtils.Make(ElevatedAuthenticationCredential, ElevatedUserAuthenticationMode, Server, Catalog, SessionAdvancedSettings),
            };
        }

        #endregion

        public override bool Equals(ISessionDatabaseConfiguration obj) {

            if ((object)this == (object)obj) {
                return true;
            }

            if (obj == null) {
                return false;
            }

            if (GetType() != obj.GetType()) {
                return false;
            }

            var other = (SessionDatabaseConfiguration)obj;

            return SessionUser == other.SessionUser
                && SessionPassword == other.SessionPassword
                && Server == other.Server
                && Catalog == other.Catalog
                && DeleteExpiredSessionsAvoidLockRowCount == other.DeleteExpiredSessionsAvoidLockRowCount
                && DeleteExpiredSessionVarsAvoidLockRowCount == other.DeleteExpiredSessionVarsAvoidLockRowCount
                && ImplementsElevatedPrivilegesOperations == other.ImplementsElevatedPrivilegesOperations
                && AuthenticationMode == other.AuthenticationMode
                && SessionAdvancedSettings == other.SessionAdvancedSettings;
        }
    }
}