/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using OutSystems.HubEdition.DatabaseProvider.SqlServer.ConfigurationService;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.Configuration;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.ConfigurationService;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.Configuration;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform {
    public class PlatformDatabaseProvider : DatabaseProvider, IPlatformDatabaseProvider {

        private readonly IPlatformProviderProperties properties;

        public new static readonly PlatformDatabaseProvider Instance = new PlatformDatabaseProvider();

        public PlatformDatabaseProvider() {
            properties = new PlatformProviderProperties(this);
        }

        public new IPlatformProviderProperties Properties {
            get { return properties; }
        }

        public IRuntimeDatabaseConfiguration CreateEmptyRuntimeDatabaseConfiguration() {
            return new RuntimeDatabaseConfiguration(Instance);
        }

        public IPlatformDatabaseServices GetPlatformDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration) {
            return new PlatformDatabaseServices(databaseConfiguration);
        }

        public override IDatabaseServices GetIntegrationDatabaseServices(IRuntimeDatabaseConfiguration databaseConfiguration) {
            return new PlatformDatabaseServices(databaseConfiguration);
        }

        public IPlatformConfigurationManager GetPlatformConfigurationManager(IPlatformDatabaseConfiguration uiConfiguration) {
            return new PlatformConfigurationManager(uiConfiguration);
        }

        public IPlatformDatabaseConfiguration CreateEmptyPlatformDatabaseConfiguration() {
            return new PlatformDatabaseConfiguration();
        }

        public ITwoUserDatabaseConfigurationManager GetBusinessConfigurationManager(ISettableTwoUserDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration systemDatabaseConfig) {
            return new BusinessDatabaseConfigurationManager(uiConfiguration, systemDatabaseConfig);
        }

        public ISettableTwoUserDatabaseConfiguration CreateEmptyBusinessDatabaseConfiguration() {
            return new BusinessDatabaseConfiguration();
        }

        public ITwoUserDatabaseConfigurationManager GetLoggingConfigurationManager(ISettableTwoUserDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration systemDatabaseConfig) {
            return new LoggingDatabaseConfigurationManager(uiConfiguration, systemDatabaseConfig);
        }

        public ISettableTwoUserDatabaseConfiguration CreateEmptyLoggingDatabaseConfiguration()
        {
            return new LoggingDatabaseConfiguration();
        }

        public ISessionConfigurationManager GetSessionConfigurationManager(ISessionDatabaseConfiguration uiConfiguration, IPlatformDatabaseConfiguration platformConfiguration) {
            return new SessionConfigurationManager(uiConfiguration, platformConfiguration);
        }

        public ISessionDatabaseConfiguration CreateEmptySessionDatabaseConfiguration() {
            return new SessionDatabaseConfiguration();
        }

        
    }
}
