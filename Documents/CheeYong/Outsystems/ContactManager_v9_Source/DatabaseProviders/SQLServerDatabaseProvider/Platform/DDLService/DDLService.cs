/* 
 This source code (the "Generated Software") is generated by the OutSystems Platform 
 and is licensed by OutSystems (http://www.outsystems.com) to You solely for testing and evaluation 
 purposes, unless You and OutSystems have executed a specific agreement covering the use terms and 
 conditions of the Generated Software, in which case such agreement shall apply. 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.DatabaseObjects;
using OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data;
using OutSystems.HubEdition.Extensibility.Data.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform.DatabaseObjects;
using OutSystems.HubEdition.Extensibility.Data.Platform;
using OutSystems.HubEdition.Extensibility.Data.Platform.DDLService;
using OutSystems.RuntimeCommon;

namespace OutSystems.HubEdition.DatabaseProvider.SqlServer.Platform.DDLService {
    public class DDLService : BaseDDLService {
        private string GetSpecialSchemaStatement(IDatabaseInfo database, string originalStatement) {
            return String.Format("EXEC {0} N'{1}'", Identifiers.EscapeAndQualifyIdentifier(database, "sp_executesql"), 
                DatabaseServices.DMLService.EscapeTextValue(originalStatement));
        }
        
        private string GetDropDefaultContraintStatement(IPlatformTableSourceColumnInfo existingColumn) {
            const string sqlFormat = "DECLARE @ObjectName NVARCHAR(100);"
                + " SELECT @ObjectName = OBJECT_NAME([default_object_id]) FROM sys.columns"
                + " WHERE [object_id] = OBJECT_ID('{0}') AND [name] = '{1}';"
                + " IF @ObjectName IS NOT NULL"
                + " EXEC('ALTER TABLE {0} DROP CONSTRAINT ' + @ObjectName)";

            ITableSourceInfo tableSourceInfo = existingColumn.TableSource;

            return GetSpecialSchemaStatement(tableSourceInfo.Database, 
                String.Format(sqlFormat, Identifiers.EscapeIdentifier(tableSourceInfo.Name), existingColumn.Name));
        }

        protected override string GetColumnDefinition(IPlatformTableSourceColumnInfo column, string defaultValue) {
            return String.Format("{0} {1}{2}{3}{4}", Identifiers.EscapeIdentifier(column.Name), column.DataType.SqlDataType, column.IsAutoGenerated ? " IDENTITY": String.Empty, 
                UseDefaultValue(column, defaultValue)? " DEFAULT " + defaultValue : String.Empty, 
                (GetFinalMandatoryValue(column, defaultValue, column.IsMandatory)? " NOT" : String.Empty) + " NULL");
        }

        protected override string GetPrimaryKeyTableConstraint(string constraintName, IPlatformTableSourceColumnInfo column) {
            return string.Format("CONSTRAINT {0} PRIMARY KEY CLUSTERED ({1})", Identifiers.EscapeIdentifier(constraintName), 
                Identifiers.EscapeIdentifier(column.Name));
        }

        protected override bool UseDefaultValue(IPlatformTableSourceColumnInfo column, string defaultValue) {
            return base.UseDefaultValue(column, defaultValue) && !column.IsAutoGenerated;
        }

        public DDLService(IPlatformDatabaseServices databaseServices) : base(databaseServices) { }

        public override string GetDefaultValue(DBDataType type) {
            switch (type) {
                case DBDataType.TEXT:
                    return "''";
                case DBDataType.BOOLEAN:
                    return "0";
                case DBDataType.INTEGER:
                    return "0";
                case DBDataType.LONGINTEGER:
                    return "0";
                case DBDataType.DECIMAL:
                    return "0";
                case DBDataType.BINARY_DATA:
                    return "NULL";
                default:
                    if (type.IsDateOrTimeOrDateTime()) {
                        return "'1900-01-01 00:00:00'";
                    }
                    throw new InvalidOperationException();
            }
        }

        public override bool CanAlterColumn(IPlatformTableSourceColumnInfo existingColumn, IPlatformTableSourceColumnInfo newColumn, out string errorMessage) {
            //text -> varchar: -- Cannot alter column 't' because it is 'text'.
            //text ->          -- Cannot alte.r column 't' because it is 'text'.
            //image ->       -- Cannot alter column 'v' because it is 'image'.
            //integer -> text: -- Operand type clash: int is incompatible with text
            //integer -> BinaryData: -- Operand type clash: int is incompatible with image
            //decimal -> text: -- Operand type clash: decimal is incompatible with text
            //decimal -> BinaryData: -- Operand type clash: decimal is incompatible with image
            //bool -> text: -- Operand type clash: bit is incompatible with text
            //bool -> BinaryData: -- Operand type clash: bit is incompatible with image
            //datetime -> text: -- Operand type clash: datetime is incompatible with text
            //datetime -> integer: -- Disallowed implicit conversion from data type datetime to data type int, table 'os_v2_0_9.dbo.t_dtei', column 'v'. Use the CONVERT function to run this query.
            //datetime -> boolean: -- Disallowed implicit conversion from data type datetime to data type bit, table 'os_v2_0_9.dbo.t_dteb', column 'v'. Use the CONVERT function to run this query.
            //datetime -> decimal: -- Disallowed implicit conversion from data type datetime to data type decimal, table 'os_v2_0_9.dbo.t_dtedec', column 'v'. Use the CONVERT function to run this query.
            //datetime -> BinaryData: -- Operand type clash: datetime is incompatible with image
            
            errorMessage = "";
            // Data type conversions
            if (existingColumn.DataType.Type == DBDataType.TEXT && existingColumn.DataType.Length > PlatformDataTypeInfo.VARCHAR_MAXLENGTH &&
                newColumn.DataType.Type == DBDataType.TEXT && newColumn.DataType.Length < PlatformDataTypeInfo.VARCHAR_MAXLENGTH) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, true) +
                               string.Format(" This is because the column was previously defined with a length greater than {0}.",
                                   PlatformDataTypeInfo.VARCHAR_MAXLENGTH);
                return false;
            }
            if (existingColumn.DataType.Type == DBDataType.BINARY_DATA && newColumn.DataType.Type != DBDataType.BINARY_DATA) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, true);
                return false;
            }
            if (existingColumn.DataType.Type.IsOneOf(DBDataType.INTEGER, DBDataType.LONGINTEGER, DBDataType.DECIMAL, DBDataType.BOOLEAN, DBDataType.DATE_TIME)) {
                if (newColumn.DataType.Type == DBDataType.TEXT && newColumn.DataType.Length > PlatformDataTypeInfo.VARCHAR_MAXLENGTH) {
                    errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, false) +
                                   string.Format(" This is because the column is now defined with a length greater than {0}.",
                                       PlatformDataTypeInfo.VARCHAR_MAXLENGTH);
                    return false;
                }
                if (newColumn.DataType.Type == DBDataType.BINARY_DATA) {
                    errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, false);
                    return false;
                }
            }

            if (existingColumn.DataType.Type == DBDataType.DATE_TIME && newColumn.DataType.Type.IsOneOf(DBDataType.INTEGER, DBDataType.LONGINTEGER, DBDataType.BOOLEAN, DBDataType.DECIMAL)) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn, newColumn, false);
                return false;
            }

            // Autonumber conversions
            if (existingColumn.IsAutoGenerated && !newColumn.IsAutoGenerated) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn.TableSource.Name, existingColumn.Name, "Autonumber", existingColumn.DataType.Type.ToText(), newColumn.DataType.SqlDataType, newColumn.DataType.Type.ToText(), true);
                return false;
            }
            if (!existingColumn.IsAutoGenerated && newColumn.IsAutoGenerated) {
                errorMessage = GetColumnCannotBeChangedMessage(existingColumn.TableSource.Name, existingColumn.Name, existingColumn.DataType.SqlDataType, existingColumn.DataType.Type.ToText(), "Autonumber", newColumn.DataType.Type.ToText(), false);
                return false;
            }
            return true;
        }
        
        public override IEnumerable<string> CreateIndex(IPlatformTableSourceIndexInfo newIndex) {
            var createStatement = new StringBuilder();
            ITableSourceInfo table = newIndex.TableSource;

            createStatement.AppendFormat("CREATE {0}INDEX {1} ON dbo.{2} ({3})", newIndex.IsUnique ? "UNIQUE " : "", 
                Identifiers.EscapeIdentifier(newIndex.Name), Identifiers.EscapeIdentifier(table.Name), 
                newIndex.Columns.Select(col => Identifiers.EscapeIdentifier(col.Name)).StrCat(","));

            yield return GetSpecialSchemaStatement(table.Database, createStatement.ToString()); 
        }

        public override IEnumerable<string> DropIndex(IPlatformTableSourceIndexInfo existingIndex) {
            ITableSourceInfo table = existingIndex.TableSource;

            yield return GetSpecialSchemaStatement(table.Database,
                String.Format("DROP INDEX {0}.{1}", Identifiers.EscapeIdentifier(table.Name), Identifiers.EscapeIdentifier(existingIndex.Name)));
        }

        public override IEnumerable<string> CreateEventTrigger(IPlatformTableSourceEventTriggerInfo newTrigger, IPlatformTableSourceColumnInfo triggerTablePrimaryKeyColumn, 
            IEnumerable<IPlatformTableSourceColumnInfo> triggerTableEventColumns, IEnumerable<ITableSourceForeignKeyInfo> triggerTableForeignKeys, ITableSourceInfo eventTable,
            ITableSourceInfo eventQueueTable, ITableSourceInfo lightEventQueueTable) {
            string triggername = Identifiers.EscapeIdentifier(newTrigger.Name);            
            var sql = new StringBuilder();
            sql.AppendFormat("CREATE TRIGGER {0} ON {1} AFTER INSERT, UPDATE AS", triggername, newTrigger.TableSource.QualifiedName);
            sql.Append(" BEGIN");
            sql.Append(" DECLARE @isupdate BIT;");
	        sql.Append(" SET @isupdate=1;");
	        sql.Append(" IF (SELECT COUNT(1) FROM deleted)=0 SET @isupdate=0;");

            FillEventTriggerQuery(sql, triggerTablePrimaryKeyColumn, triggerTableEventColumns, triggerTableForeignKeys, eventTable, eventQueueTable, lightEventQueueTable,
                "inserted", true, "@isupdate");

            sql.Append(";");
            sql.Append(" END");
            yield return GetSpecialSchemaStatement(newTrigger.TableSource.Database, sql.ToString());
        }

        public override IEnumerable<string> AlterColumn(IPlatformTableSourceColumnInfo existingColumn, IPlatformTableSourceColumnInfo newColumn, 
                string defaultValue) {

            string errorMessage;

            if (!CanAlterColumn(existingColumn, newColumn, out errorMessage)) {
                throw new InvalidOperationException(errorMessage);
            }

            var result = new List<string>();            
            string tablename = existingColumn.TableSource.QualifiedName;
            string columName = Identifiers.EscapeIdentifier(existingColumn.Name);

            bool useDefaultValue = UseDefaultValue(newColumn, defaultValue);
            if (useDefaultValue || (existingColumn.IsMandatory != newColumn.IsMandatory)
                || !existingColumn.DataType.IsEquivalent(newColumn.DataType)) {

                /* Drop old default if exists */
                result.Add(GetDropDefaultContraintStatement(existingColumn));

                string alterTable = String.Format("ALTER TABLE {0} ALTER COLUMN {1} {2}{3}", tablename, columName,
                    newColumn.DataType.SqlDataType,
                    (GetFinalMandatoryValue(newColumn, defaultValue, newColumn.IsMandatory) ? " NOT" : String.Empty) + " NULL");

                result.Add(alterTable);

                if (useDefaultValue) {
                    // Add new default
                    string constrName = ObjectFactory.GetNewUniqueIdentifer(DatabaseServices,
                        "DF_" + Guid.NewGuid().ToString().Replace("-", "_"));

                    string addConstraint = String.Format("ALTER TABLE {0} ADD CONSTRAINT {1} DEFAULT {2} FOR {3}", tablename,
                        Identifiers.EscapeIdentifier(constrName), defaultValue, columName);

                    result.Add(addConstraint);
                }
            }
            if (newColumn.IsPrimaryKey && !existingColumn.IsPrimaryKey) {
                result.AddRange(CreatePrimaryKey(newColumn.TableSource, newColumn));
            }

            return result;
        }

        public override IEnumerable<string> CreateOrReplaceView(ITableSourceInfo newView, string viewSQL, bool withCheckOption) {
            var result = new StringBuilder();
            var dbInfo = (DatabaseInfo) newView.Database;
            
            result.Append(
                String.Format("IF EXISTS (SELECT * FROM {0}.sys.views WHERE object_id = OBJECT_ID(N'{1}')) ", Identifiers.EscapeIdentifier(dbInfo.Catalog), newView.QualifiedName));

            string viewName = Identifiers.EscapeIdentifier(newView.Name);
            string withCheckOptionSQL = withCheckOption ? " WITH CHECK OPTION" : "";
            result.Append(GetSpecialSchemaStatement(dbInfo, String.Format("ALTER VIEW [dbo].{0} AS {1}{2}", viewName, viewSQL, withCheckOptionSQL)));
            result.Append(" ELSE ");
            result.Append(GetSpecialSchemaStatement(dbInfo, String.Format("CREATE VIEW [dbo].{0} AS {1}{2}", viewName, viewSQL, withCheckOptionSQL)));
            yield return result.ToString();
        }

        public override IEnumerable<string> DropColumn(IPlatformTableSourceColumnInfo existingColumn) {
            return GetDropDefaultContraintStatement(existingColumn).ToEnumerable().Concat(base.DropColumn(existingColumn));
        }

        public override IEnumerable<string> GrantPermissions(ITableSourceInfo existingTableSource, string username, Permissions permissions) {
            yield return 
                GetSpecialSchemaStatement(existingTableSource.Database, base.GrantPermissions(existingTableSource, username, permissions).Single());
        }
        
        public override IEnumerable<string> DropEventTrigger(IPlatformTableSourceEventTriggerInfo existingTrigger) {
            yield return GetSpecialSchemaStatement(existingTrigger.TableSource.Database, 
                String.Format("DROP TRIGGER {0}", Identifiers.EscapeIdentifier(existingTrigger.Name)));
        }

        protected override string ChangeTriggersStatus(ITableSourceInfo tableSource, bool enable) {
            return string.Format("ALTER TABLE {0} {1} TRIGGER ALL",
                tableSource.QualifiedName,
                (enable ? "ENABLE" : "DISABLE"));
        }

        public override IEnumerable<string> EnableAutoNumber(ITableSourceInfo existingTableSource) {
            return SetAutoNumber(existingTableSource, true);
        }
        
        public override IEnumerable<string> DisableAutoNumber(ITableSourceInfo existingTableSource) {
            return SetAutoNumber(existingTableSource, false);
        }

        private static IEnumerable<string> SetAutoNumber(ITableSourceInfo existingTableSource, bool enable) {
            yield return "SET IDENTITY_INSERT " + existingTableSource.QualifiedName + (enable ? " ON" : " OFF");
        }
    }
}
